<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="4836px" preserveAspectRatio="none" style="width:24268px;height:4836px;background:#FFFFFF;" version="1.1" viewBox="0 0 24268 4836" width="24268px" zoomAndPan="magnify"><defs/><g><!--MD5=[8b0b89b7b3bae182f8f5f5903bac16d6]
cluster raylib--><g id="cluster_raylib"><path d="M3275.5,1602.602 L3315.5,1602.602 A3.75,3.75 0 0 1 3318,1605.102 L3325,1627.6699 L24258.5,1627.6699 A2.5,2.5 0 0 1 24261,1630.1699 L24261,4827.102 A2.5,2.5 0 0 1 24258.5,4829.602 L3275.5,4829.602 A2.5,2.5 0 0 1 3273,4827.102 L3273,1605.102 A2.5,2.5 0 0 1 3275.5,1602.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="3273" x2="3325" y1="1627.6699" y2="1627.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="39" x="3277" y="1619.5679">raylib</text></g><!--MD5=[899334e90318ecd4a8e5a68f5811988b]
cluster raylib.window--><g id="cluster_raylib.window"><path d="M23272.5,1656.602 L23328.5,1656.602 A3.75,3.75 0 0 1 23331,1659.102 L23338,1681.6699 L24234.5,1681.6699 A2.5,2.5 0 0 1 24237,1684.1699 L24237,2595.102 A2.5,2.5 0 0 1 24234.5,2597.602 L23272.5,2597.602 A2.5,2.5 0 0 1 23270,2595.102 L23270,1659.102 A2.5,2.5 0 0 1 23272.5,1656.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="23270" x2="23338" y1="1681.6699" y2="1681.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="55" x="23274" y="1673.5679">window</text></g><!--MD5=[12eaa1df17f3dcf9f80cb509c0578256]
cluster raylib.texture--><g id="cluster_raylib.texture"><path d="M3299.5,3751.602 L3351.5,3751.602 A3.75,3.75 0 0 1 3354,3754.102 L3361,3776.6699 L4223.5,3776.6699 A2.5,2.5 0 0 1 4226,3779.1699 L4226,4251.102 A2.5,2.5 0 0 1 4223.5,4253.602 L3299.5,4253.602 A2.5,2.5 0 0 1 3297,4251.102 L3297,3754.102 A2.5,2.5 0 0 1 3299.5,3751.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="3297" x2="3361" y1="3776.6699" y2="3776.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="51" x="3301" y="3768.5679">texture</text></g><!--MD5=[92864a1e6c6f69c3cea72200347dbd18]
cluster raylib.text--><g id="cluster_raylib.text"><path d="M12340.5,2680.102 L12369.5,2680.102 A3.75,3.75 0 0 1 12372,2682.602 L12379,2705.1699 L13688.5,2705.1699 A2.5,2.5 0 0 1 13691,2707.6699 L13691,4184.602 A2.5,2.5 0 0 1 13688.5,4187.102 L12340.5,4187.102 A2.5,2.5 0 0 1 12338,4184.602 L12338,2682.602 A2.5,2.5 0 0 1 12340.5,2680.102 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="12338" x2="12379" y1="2705.1699" y2="2705.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="28" x="12342" y="2697.0679">text</text></g><!--MD5=[84688b521a6e648eded8a3b019fe3b1b]
cluster raylib.shader--><g id="cluster_raylib.shader"><path d="M22676.5,1961.602 L22724.5,1961.602 A3.75,3.75 0 0 1 22727,1964.102 L22734,1986.6699 L23243.5,1986.6699 A2.5,2.5 0 0 1 23246,1989.1699 L23246,2290.102 A2.5,2.5 0 0 1 23243.5,2292.602 L22676.5,2292.602 A2.5,2.5 0 0 1 22674,2290.102 L22674,1964.102 A2.5,2.5 0 0 1 22676.5,1961.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="22674" x2="22734" y1="1986.6699" y2="1986.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="47" x="22678" y="1978.5679">shader</text></g><!--MD5=[6f0614c6d95b265dbc48a4bd364eb222]
cluster raylib.image--><g id="cluster_raylib.image"><path d="M7388.5,3589.102 L7432.5,3589.102 A3.75,3.75 0 0 1 7435,3591.602 L7442,3614.1699 L10303.5,3614.1699 A2.5,2.5 0 0 1 10306,3616.6699 L10306,4413.602 A2.5,2.5 0 0 1 10303.5,4416.102 L7388.5,4416.102 A2.5,2.5 0 0 1 7386,4413.602 L7386,3591.602 A2.5,2.5 0 0 1 7388.5,3589.102 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="7386" x2="7442" y1="3614.1699" y2="3614.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="43" x="7390" y="3606.0679">image</text></g><!--MD5=[0171f304adc156ffdb059f4a8f6eca21]
cluster raylib.helper--><g id="cluster_raylib.helper"><path d="M15582.5,1648.602 L15627.5,1648.602 A3.75,3.75 0 0 1 15630,1651.102 L15637,1673.6699 L22647.5,1673.6699 A2.5,2.5 0 0 1 22650,1676.1699 L22650,4108.102 A2.5,2.5 0 0 1 22647.5,4110.602 L15582.5,4110.602 A2.5,2.5 0 0 1 15580,4108.102 L15580,1651.102 A2.5,2.5 0 0 1 15582.5,1648.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="15580" x2="15637" y1="1673.6699" y2="1673.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="44" x="15584" y="1665.5679">helper</text></g><!--MD5=[7c6e76a8c2d442b278df6f3b410dd15a]
cluster raylib.helper.input--><g id="cluster_raylib.helper.input"><path d="M21280.5,1980.602 L21318.5,1980.602 A3.75,3.75 0 0 1 21321,1983.102 L21328,2005.6699 L22623.5,2005.6699 A2.5,2.5 0 0 1 22626,2008.1699 L22626,3199.102 A2.5,2.5 0 0 1 22623.5,3201.602 L21280.5,3201.602 A2.5,2.5 0 0 1 21278,3199.102 L21278,1983.102 A2.5,2.5 0 0 1 21280.5,1980.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="21278" x2="21328" y1="2005.6699" y2="2005.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="37" x="21282" y="1997.5679">input</text></g><!--MD5=[cff780a46a811e9554eabdaec41bbaee]
cluster raylib.helper.draw--><g id="cluster_raylib.helper.draw"><path d="M18393.5,1694.602 L18429.5,1694.602 A3.75,3.75 0 0 1 18432,1697.102 L18439,1719.6699 L21251.5,1719.6699 A2.5,2.5 0 0 1 21254,1722.1699 L21254,3237.102 A2.5,2.5 0 0 1 21251.5,3239.602 L18393.5,3239.602 A2.5,2.5 0 0 1 18391,3237.102 L18391,1697.102 A2.5,2.5 0 0 1 18393.5,1694.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="18391" x2="18439" y1="1719.6699" y2="1719.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="35" x="18395" y="1711.5679">draw</text></g><!--MD5=[c1ec99b9bcb40ec11e5d573bb468eb91]
cluster raylib.ex--><g id="cluster_raylib.ex"><path d="M13717.5,2047.602 L13734.5,2047.602 A3.75,3.75 0 0 1 13737,2050.102 L13744,2072.6699 L15553.5,2072.6699 A2.5,2.5 0 0 1 15556,2075.1699 L15556,3075.102 A2.5,2.5 0 0 1 15553.5,3077.602 L13717.5,3077.602 A2.5,2.5 0 0 1 13715,3075.102 L13715,2050.102 A2.5,2.5 0 0 1 13717.5,2047.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="13715" x2="13744" y1="2072.6699" y2="2072.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="16" x="13719" y="2064.5679">ex</text></g><!--MD5=[a80ed57d422e622acc65e8bcc993edc1]
cluster raylib.builder--><g id="cluster_raylib.builder"><path d="M10332.5,2066.602 L10382.5,2066.602 A3.75,3.75 0 0 1 10385,2069.102 L10392,2091.6699 L12311.5,2091.6699 A2.5,2.5 0 0 1 12314,2094.1699 L12314,4222.602 A2.5,2.5 0 0 1 12311.5,4225.102 L10332.5,4225.102 A2.5,2.5 0 0 1 10330,4222.602 L10330,2069.102 A2.5,2.5 0 0 1 10332.5,2066.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="10330" x2="10392" y1="2091.6699" y2="2091.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="49" x="10334" y="2083.5679">builder</text></g><!--MD5=[5c5663f1476690eb89a50501bb5d75a5]
cluster raylib.audio--><g id="cluster_raylib.audio"><path d="M7228.5,1904.602 L7268.5,1904.602 A3.75,3.75 0 0 1 7271,1907.102 L7278,1929.6699 L8216.5,1929.6699 A2.5,2.5 0 0 1 8219,1932.1699 L8219,2347.102 A2.5,2.5 0 0 1 8216.5,2349.602 L7228.5,2349.602 A2.5,2.5 0 0 1 7226,2347.102 L7226,1907.102 A2.5,2.5 0 0 1 7228.5,1904.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="7226" x2="7278" y1="1929.6699" y2="1929.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="39" x="7230" y="1921.5679">audio</text></g><!--MD5=[ed5108d926612df2b403672b7cd71ed5]
cluster gameengine--><g id="cluster_gameengine"><path d="M8.5,6.602 L95.5,6.602 A3.75,3.75 0 0 1 98,9.102 L105,31.6699 L3246.5,31.6699 A2.5,2.5 0 0 1 3249,34.1699 L3249,4089.102 A2.5,2.5 0 0 1 3246.5,4091.602 L8.5,4091.602 A2.5,2.5 0 0 1 6,4089.102 L6,9.102 A2.5,2.5 0 0 1 8.5,6.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="6" x2="105" y1="31.6699" y2="31.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="86" x="10" y="23.5679">gameengine</text></g><!--MD5=[e7a039f90400c1c4e746752acbc78bf3]
cluster gameengine.map--><g id="cluster_gameengine.map"><path d="M2411.5,92.602 L2443.5,92.602 A3.75,3.75 0 0 1 2446,95.102 L2453,117.6699 L3222.5,117.6699 A2.5,2.5 0 0 1 3225,120.1699 L3225,516.102 A2.5,2.5 0 0 1 3222.5,518.602 L2411.5,518.602 A2.5,2.5 0 0 1 2409,516.102 L2409,95.102 A2.5,2.5 0 0 1 2411.5,92.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="2409" x2="2453" y1="117.6699" y2="117.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="31" x="2413" y="109.5679">map</text></g><!--MD5=[99cd3379f71692488bba8e2520ac9d6e]
cluster gameengine.ex--><g id="cluster_gameengine.ex"><path d="M1193.5,226.102 L1210.5,226.102 A3.75,3.75 0 0 1 1213,228.602 L1220,251.1699 L1718.5,251.1699 A2.5,2.5 0 0 1 1721,253.6699 L1721,967.602 A2.5,2.5 0 0 1 1718.5,970.102 L1193.5,970.102 A2.5,2.5 0 0 1 1191,967.602 L1191,228.602 A2.5,2.5 0 0 1 1193.5,226.102 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="1191" x2="1220" y1="251.1699" y2="251.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="16" x="1195" y="243.0679">ex</text></g><!--MD5=[3454cec9cd8eb0baf09d15bdf9773fc8]
cluster gameengine.component--><g id="cluster_gameengine.component"><path d="M2303.5,2804.102 L2384.5,2804.102 A3.75,3.75 0 0 1 2387,2806.602 L2394,2829.1699 L3222.5,2829.1699 A2.5,2.5 0 0 1 3225,2831.6699 L3225,3227.602 A2.5,2.5 0 0 1 3222.5,3230.102 L2303.5,3230.102 A2.5,2.5 0 0 1 2301,3227.602 L2301,2806.602 A2.5,2.5 0 0 1 2303.5,2804.102 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="2301" x2="2394" y1="2829.1699" y2="2829.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="80" x="2305" y="2821.0679">component</text></g><!--MD5=[86e1be46e0197c507d214d96b69260e4]
cluster gameengine.audio--><g id="cluster_gameengine.audio"><path d="M2323.5,1348.102 L2363.5,1348.102 A3.75,3.75 0 0 1 2366,1350.602 L2373,1373.1699 L3222.5,1373.1699 A2.5,2.5 0 0 1 3225,1375.6699 L3225,1466.602 A2.5,2.5 0 0 1 3222.5,1469.102 L2323.5,1469.102 A2.5,2.5 0 0 1 2321,1466.602 L2321,1350.602 A2.5,2.5 0 0 1 2323.5,1348.102 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="2321" x2="2373" y1="1373.1699" y2="1373.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="39" x="2325" y="1365.0679">audio</text></g><!--MD5=[8798131cb1ee51bf0d9759c88e48fe44]
class raylib.Collision2DHelper--><g id="elem_raylib.Collision2DHelper"><rect codeLine="15" fill="#F1F1F1" height="219.6113" id="raylib.Collision2DHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1069" x="4324.5" y="2028.102"/><ellipse cx="4794.75" cy="2044.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4794.5469,2050.602 Q4792.0625,2050.602 4790.7344,2048.9301 Q4789.4219,2047.2582 4789.4219,2044.102 Q4789.4219,2040.9457 4790.7344,2039.2895 Q4792.0625,2037.602 4794.5469,2037.602 Q4795.2656,2037.602 4795.9219,2037.7582 Q4796.5625,2037.9145 4797.125,2038.227 L4797.125,2041.0239 Q4796.7656,2040.6801 4796.4688,2040.4926 Q4796.1719,2040.2895 4795.9063,2040.1801 Q4795.5938,2040.0395 4795.2813,2039.977 Q4794.9844,2039.9145 4794.6719,2039.9145 Q4793.3438,2039.9145 4792.6563,2040.977 Q4791.9688,2042.0551 4791.9688,2044.102 Q4791.9688,2046.1801 4792.6563,2047.227 Q4793.3438,2048.2895 4794.6719,2048.2895 Q4795.3125,2048.2895 4795.9063,2048.0239 Q4796.2031,2047.8832 4796.4844,2047.6957 Q4796.7813,2047.5082 4797.125,2047.1801 L4797.125,2049.977 Q4796.5469,2050.2895 4795.9063,2050.4457 Q4795.2813,2050.602 4794.5469,2050.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="4815.25" y="2049.534">Collision2DHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="4325.5" x2="5392.5" y1="2060.102" y2="2060.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="4325.5" x2="5392.5" y1="2068.102" y2="2068.102"/><ellipse cx="4335.5" cy="2079.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="498" x="4344.5" y="2087.0679">getCollisionRec(const Rectangle&amp; rec1, const Rectangle&amp; rec2) : Rectangle</text><ellipse cx="4335.5" cy="2098.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="593" x="4344.5" y="2106.1358">checkCollisionCircleRec(const Vector2f&amp; center, float radius, const Rectangle&amp; rec) : bool</text><ellipse cx="4335.5" cy="2117.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="703" x="4344.5" y="2125.2038">checkCollisionCircles(const Vector2f&amp; center1, float radius1, const Vector2f&amp; center2, float radius2) : bool</text><ellipse cx="4335.5" cy="2136.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1043" x="4344.5" y="2144.2717">checkCollisionLines(const Vector2f&amp; startPos1, const Vector2f&amp; endPos1, const Vector2f&amp; startPos2, const Vector2f&amp; endPos2, Vector2f&amp; collisionPoint) : bool</text><ellipse cx="4335.5" cy="2155.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="605" x="4344.5" y="2163.3396">checkCollisionPointCircle(const Vector2f&amp; point, const Vector2f&amp; center, float radius) : bool</text><ellipse cx="4335.5" cy="2174.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="713" x="4344.5" y="2182.4075">checkCollisionPointLine(const Vector2f&amp; point, const Vector2f&amp; p1, const Vector2f&amp; p2, int threshold) : bool</text><ellipse cx="4335.5" cy="2193.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="496" x="4344.5" y="2201.4754">checkCollisionPointRec(const Vector2f&amp; point, const Rectangle&amp; rec) : bool</text><ellipse cx="4335.5" cy="2212.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="780" x="4344.5" y="2220.5433">checkCollisionPointTriangle(const Vector2f&amp; point, const Vector2f&amp; p1, const Vector2f&amp; p2, const Vector2f&amp; p3) : bool</text><ellipse cx="4335.5" cy="2231.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="483" x="4344.5" y="2239.6113">checkCollisionRecs(const Rectangle&amp; rec1, const Rectangle&amp; rec2) : bool</text></g><!--MD5=[2d7fe6d4741c4d76dced765d89a371f5]
class raylib.Collision3dHelper--><g id="elem_raylib.Collision3dHelper"><rect codeLine="27" fill="#F1F1F1" height="219.6113" id="raylib.Collision3dHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="652" x="5429" y="2028.102"/><ellipse cx="5691.25" cy="2044.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5691.0469,2050.602 Q5688.5625,2050.602 5687.2344,2048.9301 Q5685.9219,2047.2582 5685.9219,2044.102 Q5685.9219,2040.9457 5687.2344,2039.2895 Q5688.5625,2037.602 5691.0469,2037.602 Q5691.7656,2037.602 5692.4219,2037.7582 Q5693.0625,2037.9145 5693.625,2038.227 L5693.625,2041.0239 Q5693.2656,2040.6801 5692.9688,2040.4926 Q5692.6719,2040.2895 5692.4063,2040.1801 Q5692.0938,2040.0395 5691.7813,2039.977 Q5691.4844,2039.9145 5691.1719,2039.9145 Q5689.8438,2039.9145 5689.1563,2040.977 Q5688.4688,2042.0551 5688.4688,2044.102 Q5688.4688,2046.1801 5689.1563,2047.227 Q5689.8438,2048.2895 5691.1719,2048.2895 Q5691.8125,2048.2895 5692.4063,2048.0239 Q5692.7031,2047.8832 5692.9844,2047.6957 Q5693.2813,2047.5082 5693.625,2047.1801 L5693.625,2049.977 Q5693.0469,2050.2895 5692.4063,2050.4457 Q5691.7813,2050.602 5691.0469,2050.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="119" x="5711.75" y="2049.534">Collision3dHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="5430" x2="6080" y1="2060.102" y2="2060.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="5430" x2="6080" y1="2068.102" y2="2068.102"/><ellipse cx="5440" cy="2079.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="403" x="5449" y="2087.0679">getRayCollisionBox(Ray ray, BoundingBox box) : RayCollision</text><ellipse cx="5440" cy="2098.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="511" x="5449" y="2106.1358">getRayCollisionMesh(Ray ray, RlMesh mesh, Matrix transform) : RayCollision</text><ellipse cx="5440" cy="2117.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="404" x="5449" y="2125.2038">getRayCollisionModel(Ray ray, RlModel model) : RayCollision</text><ellipse cx="5440" cy="2136.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="626" x="5449" y="2144.2717">getRayCollisionQuad(Ray ray, Vector3f p1, Vector3f p2, Vector3f p3, Vector3f p4) : RayCollision</text><ellipse cx="5440" cy="2155.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="496" x="5449" y="2163.3396">getRayCollisionSphere(Ray ray, Vector3f center, float radius) : RayCollision</text><ellipse cx="5440" cy="2174.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="561" x="5449" y="2182.4075">getRayCollisionTriangle(Ray ray, Vector3f p1, Vector3f p2, Vector3f p3) : RayCollision</text><ellipse cx="5440" cy="2193.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="529" x="5449" y="2201.4754">checkCollisionBoxSphere(BoundingBox box, Vector3f center, float radius) : bool</text><ellipse cx="5440" cy="2212.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="443" x="5449" y="2220.5433">checkCollisionBoxes(BoundingBox box1, BoundingBox box2) : bool</text><ellipse cx="5440" cy="2231.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="613" x="5449" y="2239.6113">checkCollisionSpheres(Vector3f center1, float radius1, Vector3f center2, float radius2) : bool</text></g><!--MD5=[562f4d60ca1c61b03823192b657c8d8e]
class raylib.GlStateManager--><g id="elem_raylib.GlStateManager"><rect codeLine="39" fill="#F1F1F1" height="524.6979" id="raylib.GlStateManager" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="571" x="6116.5" y="1875.602"/><ellipse cx="6343.25" cy="1891.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M6343.0469,1898.102 Q6340.5625,1898.102 6339.2344,1896.4301 Q6337.9219,1894.7582 6337.9219,1891.602 Q6337.9219,1888.4457 6339.2344,1886.7895 Q6340.5625,1885.102 6343.0469,1885.102 Q6343.7656,1885.102 6344.4219,1885.2582 Q6345.0625,1885.4145 6345.625,1885.727 L6345.625,1888.5239 Q6345.2656,1888.1801 6344.9688,1887.9926 Q6344.6719,1887.7895 6344.4063,1887.6801 Q6344.0938,1887.5395 6343.7813,1887.477 Q6343.4844,1887.4145 6343.1719,1887.4145 Q6341.8438,1887.4145 6341.1563,1888.477 Q6340.4688,1889.5551 6340.4688,1891.602 Q6340.4688,1893.6801 6341.1563,1894.727 Q6341.8438,1895.7895 6343.1719,1895.7895 Q6343.8125,1895.7895 6344.4063,1895.5239 Q6344.7031,1895.3832 6344.9844,1895.1957 Q6345.2813,1895.0082 6345.625,1894.6801 L6345.625,1897.477 Q6345.0469,1897.7895 6344.4063,1897.9457 Q6343.7813,1898.102 6343.0469,1898.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="6363.75" y="1897.034">GlStateManager</text><line style="stroke:#181818;stroke-width:0.5;" x1="6117.5" x2="6686.5" y1="1907.602" y2="1907.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="6117.5" x2="6686.5" y1="1915.602" y2="1915.602"/><ellipse cx="6127.5" cy="1926.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="216" x="6136.5" y="1934.5679">color(const RlColor&amp; color) : void</text><ellipse cx="6127.5" cy="1945.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="545" x="6136.5" y="1953.6358">color(unsigned char r, unsigned char g, unsigned char b, unsigned char a) : void</text><ellipse cx="6127.5" cy="1964.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="273" x="6136.5" y="1972.7038">color(float r, float g, float b, float a) : void</text><ellipse cx="6127.5" cy="1983.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="6136.5" y="1991.7717">color(unsigned char r, unsigned char g, unsigned char b) : void</text><ellipse cx="6127.5" cy="2002.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="204" x="6136.5" y="2010.8396">disableBackfaceCulling() : void</text><ellipse cx="6127.5" cy="2021.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="171" x="6136.5" y="2029.9075">disableColorBlend() : void</text><ellipse cx="6127.5" cy="2041.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="173" x="6136.5" y="2048.9754">disableDepthMask() : void</text><ellipse cx="6127.5" cy="2060.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="166" x="6136.5" y="2068.0433">disableDepthTest() : void</text><ellipse cx="6127.5" cy="2079.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="172" x="6136.5" y="2087.1113">disableScissorTest() : void</text><ellipse cx="6127.5" cy="2098.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="6136.5" y="2106.1792">disableSmoothLines() : void</text><ellipse cx="6127.5" cy="2117.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="166" x="6136.5" y="2125.2471">disableWireMode() : void</text><ellipse cx="6127.5" cy="2136.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="201" x="6136.5" y="2144.315">enableBackfaceCulling() : void</text><ellipse cx="6127.5" cy="2155.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="168" x="6136.5" y="2163.3829">enableColorBlend() : void</text><ellipse cx="6127.5" cy="2174.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="6136.5" y="2182.4508">enableDepthMask() : void</text><ellipse cx="6127.5" cy="2193.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="163" x="6136.5" y="2201.5188">enableDepthTest() : void</text><ellipse cx="6127.5" cy="2212.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="169" x="6136.5" y="2220.5867">enableScissorTest() : void</text><ellipse cx="6127.5" cy="2231.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="6136.5" y="2239.6546">enableSmoothLines() : void</text><ellipse cx="6127.5" cy="2250.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="163" x="6136.5" y="2258.7225">enableWireMode() : void</text><ellipse cx="6127.5" cy="2269.8245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="117" x="6136.5" y="2277.7904">popMatrix() : void</text><ellipse cx="6127.5" cy="2288.8924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="125" x="6136.5" y="2296.8583">pushMatrix() : void</text><ellipse cx="6127.5" cy="2307.9603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="250" x="6136.5" y="2315.9263">rotate(const Vector3f&amp; rotation) : void</text><ellipse cx="6127.5" cy="2327.0282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="225" x="6136.5" y="2334.9942">scale(const Vector3f&amp; scale) : void</text><ellipse cx="6127.5" cy="2346.0962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="302" x="6136.5" y="2354.0621">scissor(int x, int y, int width, int height) : void</text><ellipse cx="6127.5" cy="2365.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="241" x="6136.5" y="2373.13">scissor(const Rectangle&amp; rect) : void</text><ellipse cx="6127.5" cy="2384.232" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="290" x="6136.5" y="2392.1979">translate(const Vector3f&amp; translation) : void</text></g><!--MD5=[dcd0f6587faad8b70174401190eeff16]
class raylib.MeshGenerator--><g id="elem_raylib.MeshGenerator"><rect codeLine="67" fill="#F1F1F1" height="257.7471" id="raylib.MeshGenerator" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="485" x="6722.5" y="2009.102"/><ellipse cx="6908.25" cy="2025.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M6908.0469,2031.602 Q6905.5625,2031.602 6904.2344,2029.9301 Q6902.9219,2028.2582 6902.9219,2025.102 Q6902.9219,2021.9457 6904.2344,2020.2895 Q6905.5625,2018.602 6908.0469,2018.602 Q6908.7656,2018.602 6909.4219,2018.7582 Q6910.0625,2018.9145 6910.625,2019.227 L6910.625,2022.0239 Q6910.2656,2021.6801 6909.9688,2021.4926 Q6909.6719,2021.2895 6909.4063,2021.1801 Q6909.0938,2021.0395 6908.7813,2020.977 Q6908.4844,2020.9145 6908.1719,2020.9145 Q6906.8438,2020.9145 6906.1563,2021.977 Q6905.4688,2023.0551 6905.4688,2025.102 Q6905.4688,2027.1801 6906.1563,2028.227 Q6906.8438,2029.2895 6908.1719,2029.2895 Q6908.8125,2029.2895 6909.4063,2029.0239 Q6909.7031,2028.8832 6909.9844,2028.6957 Q6910.2813,2028.5082 6910.625,2028.1801 L6910.625,2030.977 Q6910.0469,2031.2895 6909.4063,2031.4457 Q6908.7813,2031.602 6908.0469,2031.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="105" x="6928.75" y="2030.534">MeshGenerator</text><line style="stroke:#181818;stroke-width:0.5;" x1="6723.5" x2="7206.5" y1="2041.102" y2="2041.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="6723.5" x2="7206.5" y1="2049.102" y2="2049.102"/><ellipse cx="6733.5" cy="2060.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="397" x="6742.5" y="2068.0679">genMeshCone(float radius, float height, int slices) : RlMesh</text><ellipse cx="6733.5" cy="2079.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="412" x="6742.5" y="2087.1358">genMeshCube(float width, float height, float length) : RlMesh</text><ellipse cx="6733.5" cy="2098.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="441" x="6742.5" y="2106.2038">genMeshCubicmap(Image cubicmap, Vector3f cubeSize) : RlMesh</text><ellipse cx="6733.5" cy="2117.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="419" x="6742.5" y="2125.2717">genMeshCylinder(float radius, float height, int slices) : RlMesh</text><ellipse cx="6733.5" cy="2136.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="422" x="6742.5" y="2144.3396">genMeshHeightmap(Image heightmap, Vector3f size) : RlMesh</text><ellipse cx="6733.5" cy="2155.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="425" x="6742.5" y="2163.4075">genMeshHemiSphere(float radius, int rings, int slices) : RlMesh</text><ellipse cx="6733.5" cy="2174.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="452" x="6742.5" y="2182.4754">genMeshKnot(float radius, float size, int radSeg, int sides) : RlMesh</text><ellipse cx="6733.5" cy="2193.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="446" x="6742.5" y="2201.5433">genMeshPlane(float width, float length, int resX, int resZ) : RlMesh</text><ellipse cx="6733.5" cy="2212.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="302" x="6742.5" y="2220.6113">genMeshPoly(int sides, float radius) : RlMesh</text><ellipse cx="6733.5" cy="2231.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="390" x="6742.5" y="2239.6792">genMeshSphere(float radius, int rings, int slices) : RlMesh</text><ellipse cx="6733.5" cy="2250.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="459" x="6742.5" y="2258.7471">genMeshTorus(float radius, float size, int radSeg, int sides) : RlMesh</text></g><!--MD5=[87cc93fa3a0752e13ad02f748ce72b69]
class raylib.MeshHelper--><g id="elem_raylib.MeshHelper"><rect codeLine="81" fill="#F1F1F1" height="200.5433" id="raylib.MeshHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="645" x="4528.5" y="2927.602"/><ellipse cx="4805.75" cy="2943.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4805.5469,2950.102 Q4803.0625,2950.102 4801.7344,2948.4301 Q4800.4219,2946.7582 4800.4219,2943.602 Q4800.4219,2940.4457 4801.7344,2938.7895 Q4803.0625,2937.102 4805.5469,2937.102 Q4806.2656,2937.102 4806.9219,2937.2582 Q4807.5625,2937.4145 4808.125,2937.727 L4808.125,2940.5239 Q4807.7656,2940.1801 4807.4688,2939.9926 Q4807.1719,2939.7895 4806.9063,2939.6801 Q4806.5938,2939.5395 4806.2813,2939.477 Q4805.9844,2939.4145 4805.6719,2939.4145 Q4804.3438,2939.4145 4803.6563,2940.477 Q4802.9688,2941.5551 4802.9688,2943.602 Q4802.9688,2945.6801 4803.6563,2946.727 Q4804.3438,2947.7895 4805.6719,2947.7895 Q4806.3125,2947.7895 4806.9063,2947.5239 Q4807.2031,2947.3832 4807.4844,2947.1957 Q4807.7813,2947.0082 4808.125,2946.6801 L4808.125,2949.477 Q4807.5469,2949.7895 4806.9063,2949.9457 Q4806.2813,2950.102 4805.5469,2950.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="4826.25" y="2949.034">MeshHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="4529.5" x2="5172.5" y1="2959.602" y2="2959.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="4529.5" x2="5172.5" y1="2967.602" y2="2967.602"/><ellipse cx="4539.5" cy="2978.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="337" x="4548.5" y="2986.5679">getMeshBoundingBox(Mesh mesh) : BoundingBox</text><ellipse cx="4539.5" cy="2997.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="399" x="4548.5" y="3005.6358">exportMesh(Mesh mesh, const std::string&amp; fileName) : bool</text><ellipse cx="4539.5" cy="3016.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="443" x="4548.5" y="3024.7038">drawMesh(Mesh mesh, Material material, Matrix transform) : void</text><ellipse cx="4539.5" cy="3035.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="619" x="4548.5" y="3043.7717">drawMeshInstanced(Mesh mesh, Material material, Matrix* transforms, int instances) : void</text><ellipse cx="4539.5" cy="3054.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="265" x="4548.5" y="3062.8396">genMeshBinormals(Mesh* mesh) : void</text><ellipse cx="4539.5" cy="3073.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="260" x="4548.5" y="3081.9075">genMeshTangents(Mesh* mesh) : void</text><ellipse cx="4539.5" cy="3093.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="553" x="4548.5" y="3100.9754">updateMeshBuffer(Mesh mesh, int index, void* data, int dataSize, int offset) : void</text><ellipse cx="4539.5" cy="3112.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="316" x="4548.5" y="3120.0433">uploadMesh(Mesh* mesh, bool dynamic) : void</text></g><!--MD5=[fa54c21ad529427c260b08ca98b4195f]
class raylib.ModelHelper--><g id="elem_raylib.ModelHelper"><rect codeLine="92" fill="#F1F1F1" height="124.2717" id="raylib.ModelHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="378" x="5209" y="2966.102"/><ellipse cx="5350.25" cy="2982.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5350.0469,2988.602 Q5347.5625,2988.602 5346.2344,2986.9301 Q5344.9219,2985.2582 5344.9219,2982.102 Q5344.9219,2978.9457 5346.2344,2977.2895 Q5347.5625,2975.602 5350.0469,2975.602 Q5350.7656,2975.602 5351.4219,2975.7582 Q5352.0625,2975.9145 5352.625,2976.227 L5352.625,2979.0239 Q5352.2656,2978.6801 5351.9688,2978.4926 Q5351.6719,2978.2895 5351.4063,2978.1801 Q5351.0938,2978.0395 5350.7813,2977.977 Q5350.4844,2977.9145 5350.1719,2977.9145 Q5348.8438,2977.9145 5348.1563,2978.977 Q5347.4688,2980.0551 5347.4688,2982.102 Q5347.4688,2984.1801 5348.1563,2985.227 Q5348.8438,2986.2895 5350.1719,2986.2895 Q5350.8125,2986.2895 5351.4063,2986.0239 Q5351.7031,2985.8832 5351.9844,2985.6957 Q5352.2813,2985.5082 5352.625,2985.1801 L5352.625,2987.977 Q5352.0469,2988.2895 5351.4063,2988.4457 Q5350.7813,2988.602 5350.0469,2988.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="87" x="5370.75" y="2987.534">ModelHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="5210" x2="5586" y1="2998.102" y2="2998.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="5210" x2="5586" y1="3006.102" y2="3006.102"/><ellipse cx="5220" cy="3017.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="352" x="5229" y="3025.0679">getModelBoundingBox(Model model) : BoundingBox</text><ellipse cx="5220" cy="3036.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="275" x="5229" y="3044.1358">drawModel(const RlModel&amp; model) : void</text><ellipse cx="5220" cy="3055.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="313" x="5229" y="3063.2038">drawModelWires(const RlModel&amp; model) : void</text><ellipse cx="5220" cy="3074.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="311" x="5229" y="3082.2717">unloadModelKeepMeshes(Model model) : void</text></g><!--MD5=[1069a8adf8bd5c0dfff5844a1b703547]
class raylib.Random--><g id="elem_raylib.Random"><rect codeLine="99" fill="#F1F1F1" height="200.5433" id="raylib.Random" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="410" x="5622" y="2927.602"/><ellipse cx="5794.75" cy="2943.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5794.5469,2950.102 Q5792.0625,2950.102 5790.7344,2948.4301 Q5789.4219,2946.7582 5789.4219,2943.602 Q5789.4219,2940.4457 5790.7344,2938.7895 Q5792.0625,2937.102 5794.5469,2937.102 Q5795.2656,2937.102 5795.9219,2937.2582 Q5796.5625,2937.4145 5797.125,2937.727 L5797.125,2940.5239 Q5796.7656,2940.1801 5796.4688,2939.9926 Q5796.1719,2939.7895 5795.9063,2939.6801 Q5795.5938,2939.5395 5795.2813,2939.477 Q5794.9844,2939.4145 5794.6719,2939.4145 Q5793.3438,2939.4145 5792.6563,2940.477 Q5791.9688,2941.5551 5791.9688,2943.602 Q5791.9688,2945.6801 5792.6563,2946.727 Q5793.3438,2947.7895 5794.6719,2947.7895 Q5795.3125,2947.7895 5795.9063,2947.5239 Q5796.2031,2947.3832 5796.4844,2947.1957 Q5796.7813,2947.0082 5797.125,2946.6801 L5797.125,2949.477 Q5796.5469,2949.7895 5795.9063,2949.9457 Q5795.2813,2950.102 5794.5469,2950.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="5815.25" y="2949.034">Random</text><line style="stroke:#181818;stroke-width:0.5;" x1="5623" x2="6031" y1="2959.602" y2="2959.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5630" y="2967.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="251" x="5642" y="2978.5679">_random_device : std::random_device</text><line style="stroke:#181818;stroke-width:0.5;" x1="5623" x2="6031" y1="2986.6699" y2="2986.6699"/><ellipse cx="5633" cy="2997.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="64" x="5642" y="3005.6358">Random()</text><ellipse cx="5633" cy="3016.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="292" x="5642" y="3024.7038">generate(double min, double max) : double</text><ellipse cx="5633" cy="3035.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="241" x="5642" y="3043.7717">generate(float min, float max) : float</text><ellipse cx="5633" cy="3054.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="5642" y="3062.8396">generate(int min, int max) : int</text><ellipse cx="5633" cy="3073.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="241" x="5642" y="3081.9075">generate(long min, long max) : long</text><ellipse cx="5633" cy="3093.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="256" x="5642" y="3100.9754">generate(short min, short max) : short</text><ellipse cx="5633" cy="3112.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="384" x="5642" y="3120.0433">generateSizeT(std::size_t min, std::size_t max) : std::size_t</text></g><!--MD5=[19d38f800b9591121b41a590d7884f4c]
class raylib.RlAnimation--><g id="elem_raylib.RlAnimation"><rect codeLine="110" fill="#F1F1F1" height="257.7471" id="raylib.RlAnimation" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="523" x="6067.5" y="2899.102"/><ellipse cx="6283.75" cy="2915.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M6283.5469,2921.602 Q6281.0625,2921.602 6279.7344,2919.9301 Q6278.4219,2918.2582 6278.4219,2915.102 Q6278.4219,2911.9457 6279.7344,2910.2895 Q6281.0625,2908.602 6283.5469,2908.602 Q6284.2656,2908.602 6284.9219,2908.7582 Q6285.5625,2908.9145 6286.125,2909.227 L6286.125,2912.0239 Q6285.7656,2911.6801 6285.4688,2911.4926 Q6285.1719,2911.2895 6284.9063,2911.1801 Q6284.5938,2911.0395 6284.2813,2910.977 Q6283.9844,2910.9145 6283.6719,2910.9145 Q6282.3438,2910.9145 6281.6563,2911.977 Q6280.9688,2913.0551 6280.9688,2915.102 Q6280.9688,2917.1801 6281.6563,2918.227 Q6282.3438,2919.2895 6283.6719,2919.2895 Q6284.3125,2919.2895 6284.9063,2919.0239 Q6285.2031,2918.8832 6285.4844,2918.6957 Q6285.7813,2918.5082 6286.125,2918.1801 L6286.125,2920.977 Q6285.5469,2921.2895 6284.9063,2921.4457 Q6284.2813,2921.602 6283.5469,2921.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="6304.25" y="2920.534">RlAnimation</text><line style="stroke:#181818;stroke-width:0.5;" x1="6068.5" x2="6589.5" y1="2931.102" y2="2931.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6075.5" y="2939.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="6087.5" y="2950.0679">_isLoaded : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6075.5" y="2958.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="263" x="6087.5" y="2969.1358">_animationModels : std::vector&lt;Model&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6075.5" y="2977.2378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="6087.5" y="2988.2038">_frame : unsigned int</text><line style="stroke:#181818;stroke-width:0.5;" x1="6068.5" x2="6589.5" y1="2996.3057" y2="2996.3057"/><ellipse cx="6078.5" cy="3007.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="6087.5" y="3015.2717">RlAnimation()</text><ellipse cx="6078.5" cy="3026.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="497" x="6087.5" y="3034.3396">RlAnimation(const std::string&amp; animationDir, const std::string&amp; extension)</text><ellipse cx="6078.5" cy="3045.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="6087.5" y="3053.4075">~RlAnimation()</text><ellipse cx="6078.5" cy="3064.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="172" x="6087.5" y="3072.4754">isLoaded() : bool&amp; {query}</text><ellipse cx="6078.5" cy="3083.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="264" x="6087.5" y="3091.5433">getAnimationsSize() : std::size_t {query}</text><ellipse cx="6078.5" cy="3102.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="351" x="6087.5" y="3110.6113">getAnimationModels() : std::vector&lt;Model&gt;&amp; {query}</text><ellipse cx="6078.5" cy="3121.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="233" x="6087.5" y="3129.6792">getFrame() : unsigned int&amp; {query}</text><ellipse cx="6078.5" cy="3140.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="6087.5" y="3148.7471">update() : void</text></g><!--MD5=[b5ab949ee2e6d1423aa825ebff9934b0]
class raylib.RlAudioStream--><g id="elem_raylib.RlAudioStream"><rect codeLine="124" fill="#F1F1F1" height="314.9508" id="raylib.RlAudioStream" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="636" x="4245" y="3856.102"/><ellipse cx="4508.75" cy="3872.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4508.5469,3878.602 Q4506.0625,3878.602 4504.7344,3876.9301 Q4503.4219,3875.2582 4503.4219,3872.102 Q4503.4219,3868.9457 4504.7344,3867.2895 Q4506.0625,3865.602 4508.5469,3865.602 Q4509.2656,3865.602 4509.9219,3865.7582 Q4510.5625,3865.9145 4511.125,3866.227 L4511.125,3869.0239 Q4510.7656,3868.6801 4510.4688,3868.4926 Q4510.1719,3868.2895 4509.9063,3868.1801 Q4509.5938,3868.0395 4509.2813,3867.977 Q4508.9844,3867.9145 4508.6719,3867.9145 Q4507.3438,3867.9145 4506.6563,3868.977 Q4505.9688,3870.0551 4505.9688,3872.102 Q4505.9688,3874.1801 4506.6563,3875.227 Q4507.3438,3876.2895 4508.6719,3876.2895 Q4509.3125,3876.2895 4509.9063,3876.0239 Q4510.2031,3875.8832 4510.4844,3875.6957 Q4510.7813,3875.5082 4511.125,3875.1801 L4511.125,3877.977 Q4510.5469,3878.2895 4509.9063,3878.4457 Q4509.2813,3878.602 4508.5469,3878.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="4529.25" y="3877.534">RlAudioStream</text><line style="stroke:#181818;stroke-width:0.5;" x1="4246" x2="4880" y1="3888.102" y2="3888.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4253" y="3896.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="146" x="4265" y="3907.0679">stream : AudioStream</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4253" y="3915.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="91" x="4265" y="3926.1358">volume : float</text><line style="stroke:#181818;stroke-width:0.5;" x1="4246" x2="4880" y1="3934.2378" y2="3934.2378"/><ellipse cx="4256" cy="3945.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="610" x="4265" y="3953.2038">RlAudioStream(unsigned int sampleRate, unsigned int sampleSize, unsigned int channels)</text><ellipse cx="4256" cy="3964.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="4265" y="3972.2717">~RlAudioStream()</text><ellipse cx="4256" cy="3983.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="4265" y="3991.3396">isPlaying() : bool</text><ellipse cx="4256" cy="4002.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="4265" y="4010.4075">isProcessed() : bool</text><ellipse cx="4256" cy="4021.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="4265" y="4029.4754">getVolume() : float {query}</text><ellipse cx="4256" cy="4040.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="4265" y="4048.5433">pause() : void</text><ellipse cx="4256" cy="4059.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="4265" y="4067.6113">play() : void</text><ellipse cx="4256" cy="4078.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="4265" y="4086.6792">resume() : void</text><ellipse cx="4256" cy="4097.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="169" x="4265" y="4105.7471">setPitch(float pitch) : void</text><ellipse cx="4256" cy="4116.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="4265" y="4124.815">setVolume(float volume) : void</text><ellipse cx="4256" cy="4135.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="4265" y="4143.8829">stop() : void</text><ellipse cx="4256" cy="4154.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="332" x="4265" y="4162.9508">update(const void* data, int samplesCount) : void</text></g><!--MD5=[9ab3681ae809c7ee68d2b8ebbb553aa2]
class raylib.RlCamera--><g id="elem_raylib.RlCamera"><rect codeLine="141" fill="#F1F1F1" height="543.7658" id="raylib.RlCamera" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1228" x="23017" y="2756.102"/><ellipse cx="23594.25" cy="2772.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M23594.0469,2778.602 Q23591.5625,2778.602 23590.2344,2776.9301 Q23588.9219,2775.2582 23588.9219,2772.102 Q23588.9219,2768.9457 23590.2344,2767.2895 Q23591.5625,2765.602 23594.0469,2765.602 Q23594.7656,2765.602 23595.4219,2765.7582 Q23596.0625,2765.9145 23596.625,2766.227 L23596.625,2769.0239 Q23596.2656,2768.6801 23595.9688,2768.4926 Q23595.6719,2768.2895 23595.4063,2768.1801 Q23595.0938,2768.0395 23594.7813,2767.977 Q23594.4844,2767.9145 23594.1719,2767.9145 Q23592.8438,2767.9145 23592.1563,2768.977 Q23591.4688,2770.0551 23591.4688,2772.102 Q23591.4688,2774.1801 23592.1563,2775.227 Q23592.8438,2776.2895 23594.1719,2776.2895 Q23594.8125,2776.2895 23595.4063,2776.0239 Q23595.7031,2775.8832 23595.9844,2775.6957 Q23596.2813,2775.5082 23596.625,2775.1801 L23596.625,2777.977 Q23596.0469,2778.2895 23595.4063,2778.4457 Q23594.7813,2778.602 23594.0469,2778.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="65" x="23614.75" y="2777.534">RlCamera</text><line style="stroke:#181818;stroke-width:0.5;" x1="23018" x2="24244" y1="2788.102" y2="2788.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="23025" y="2796.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="23037" y="2807.0679">_camera : Camera3D</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="23025" y="2815.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="23037" y="2826.1358">_cameraMode : CameraMode</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="23025" y="2834.2378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="146" x="23037" y="2845.2038">_mode : CameraMode</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="23025" y="2853.3057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="23037" y="2864.2717">_projection : CameraProjection</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="23025" y="2872.3736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="23037" y="2883.3396">_lookingPoint : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="23025" y="2891.4416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="23037" y="2902.4075">_position : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="23025" y="2910.5095"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="23037" y="2921.4754">_target : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="23025" y="2929.5774"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="23037" y="2940.5433">_fovy : float</text><line style="stroke:#181818;stroke-width:0.5;" x1="23018" x2="24244" y1="2948.6453" y2="2948.6453"/><ellipse cx="23028" cy="2959.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="23037" y="2967.6113">RlCamera()</text><ellipse cx="23028" cy="2978.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1202" x="23037" y="2986.6792">RlCamera(const Vector3f&amp; position, const Vector3f&amp; target, const Vector3f&amp; lookingPoint, const float&amp; fovy, const CameraProjection&amp; projection, const CameraMode&amp; cameraMode)</text><ellipse cx="23028" cy="2997.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="23037" y="3005.7471">get() : Camera3D&amp; {query}</text><ellipse cx="23028" cy="3016.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="367" x="23037" y="3024.815">getConstructedCameraMode() : CameraMode&amp; {query}</text><ellipse cx="23028" cy="3035.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="233" x="23037" y="3043.8829">getMode() : CameraMode&amp; {query}</text><ellipse cx="23028" cy="3054.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="373" x="23037" y="3062.9508">getConstructedProjection() : CameraProjection&amp; {query}</text><ellipse cx="23028" cy="3074.0528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="123" x="23037" y="3082.0188">geMatrix() : Matrix</text><ellipse cx="23028" cy="3093.1207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="328" x="23037" y="3101.0867">getConstructedLookingPoint() : Vector3f&amp; {query}</text><ellipse cx="23028" cy="3112.1887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="295" x="23037" y="3120.1546">getConstructedPosition() : Vector3f&amp; {query}</text><ellipse cx="23028" cy="3131.2566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="286" x="23037" y="3139.2225">getConstructedTarget() : Vector3f&amp; {query}</text><ellipse cx="23028" cy="3150.3245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="246" x="23037" y="3158.2904">getConstructedFovy() : float&amp; {query}</text><ellipse cx="23028" cy="3169.3924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="23037" y="3177.3583">reset() : void</text><ellipse cx="23028" cy="3188.4603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="340" x="23037" y="3196.4263">setCameraMode(const CameraMode&amp; mode) : void</text><ellipse cx="23028" cy="3207.5282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="23037" y="3215.4942">setFov(const float&amp; fovy) : void</text><ellipse cx="23028" cy="3226.5962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="284" x="23037" y="3234.5621">setPosition(const Vector3f&amp; position) : void</text><ellipse cx="23028" cy="3245.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="376" x="23037" y="3253.63">setProjection(const CameraProjection&amp; projection) : void</text><ellipse cx="23028" cy="3264.732" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="262" x="23037" y="3272.6979">setTarget(const Vector3f&amp; target) : void</text><ellipse cx="23028" cy="3283.7999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="23037" y="3291.7658">update() : void</text></g><!--MD5=[f2f5f380f64d713e3d162bbf473d6463]
class raylib.RlColor--><g id="elem_raylib.RlColor"><rect codeLine="170" fill="#F1F1F1" height="1077.6675" id="raylib.RlColor" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="593" x="6755.5" y="3474.602"/><ellipse cx="7023.75" cy="3490.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M7023.5469,3497.102 Q7021.0625,3497.102 7019.7344,3495.4301 Q7018.4219,3493.7582 7018.4219,3490.602 Q7018.4219,3487.4457 7019.7344,3485.7895 Q7021.0625,3484.102 7023.5469,3484.102 Q7024.2656,3484.102 7024.9219,3484.2582 Q7025.5625,3484.4145 7026.125,3484.727 L7026.125,3487.5239 Q7025.7656,3487.1801 7025.4688,3486.9926 Q7025.1719,3486.7895 7024.9063,3486.6801 Q7024.5938,3486.5395 7024.2813,3486.477 Q7023.9844,3486.4145 7023.6719,3486.4145 Q7022.3438,3486.4145 7021.6563,3487.477 Q7020.9688,3488.5551 7020.9688,3490.602 Q7020.9688,3492.6801 7021.6563,3493.727 Q7022.3438,3494.7895 7023.6719,3494.7895 Q7024.3125,3494.7895 7024.9063,3494.5239 Q7025.2031,3494.3832 7025.4844,3494.1957 Q7025.7813,3494.0082 7026.125,3493.6801 L7026.125,3496.477 Q7025.5469,3496.7895 7024.9063,3496.9457 Q7024.2813,3497.102 7023.5469,3497.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="48" x="7044.25" y="3496.034">RlColor</text><line style="stroke:#181818;stroke-width:0.5;" x1="6756.5" x2="7347.5" y1="3506.602" y2="3506.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6763.5" y="3514.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="6775.5" y="3525.5679">_color : Color</text><ellipse cx="6766.5" cy="3536.6699" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="178" x="6775.5" y="3544.6358">Beige : static const RlColor</text><ellipse cx="6766.5" cy="3555.7378" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="175" x="6775.5" y="3563.7038">Black : static const RlColor</text><ellipse cx="6766.5" cy="3574.8057" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="6775.5" y="3582.7717">Blue : static const RlColor</text><ellipse cx="6766.5" cy="3593.8736" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="6775.5" y="3601.8396">Brown : static const RlColor</text><ellipse cx="6766.5" cy="3612.9416" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="201" x="6775.5" y="3620.9075">DarkBlue : static const RlColor</text><ellipse cx="6766.5" cy="3632.0095" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="214" x="6775.5" y="3639.9754">DarkBrown : static const RlColor</text><ellipse cx="6766.5" cy="3651.0774" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="202" x="6775.5" y="3659.0433">DarkGray : static const RlColor</text><ellipse cx="6766.5" cy="3670.1453" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="212" x="6775.5" y="3678.1113">DarkGreen : static const RlColor</text><ellipse cx="6766.5" cy="3689.2132" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="215" x="6775.5" y="3697.1792">DarkPurple : static const RlColor</text><ellipse cx="6766.5" cy="3708.2812" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="171" x="6775.5" y="3716.2471">Gold : static const RlColor</text><ellipse cx="6766.5" cy="3727.3491" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="171" x="6775.5" y="3735.315">Gray : static const RlColor</text><ellipse cx="6766.5" cy="3746.417" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="181" x="6775.5" y="3754.3829">Green : static const RlColor</text><ellipse cx="6766.5" cy="3765.4849" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="205" x="6775.5" y="3773.4508">LightGray : static const RlColor</text><ellipse cx="6766.5" cy="3784.5528" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="172" x="6775.5" y="3792.5188">Lime : static const RlColor</text><ellipse cx="6766.5" cy="3803.6207" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="200" x="6775.5" y="3811.5867">Magenta : static const RlColor</text><ellipse cx="6766.5" cy="3822.6887" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="192" x="6775.5" y="3830.6546">Maroon : static const RlColor</text><ellipse cx="6766.5" cy="3841.7566" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="191" x="6775.5" y="3849.7225">Orange : static const RlColor</text><ellipse cx="6766.5" cy="3860.8245" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="168" x="6775.5" y="3868.7904">Pink : static const RlColor</text><ellipse cx="6766.5" cy="3879.8924" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="184" x="6775.5" y="3887.8583">Purple : static const RlColor</text><ellipse cx="6766.5" cy="3898.9603" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="203" x="6775.5" y="3906.9263">RayWhite : static const RlColor</text><ellipse cx="6766.5" cy="3918.0282" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="166" x="6775.5" y="3925.9942">Red : static const RlColor</text><ellipse cx="6766.5" cy="3937.0962" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="192" x="6775.5" y="3945.0621">SkyBlue : static const RlColor</text><ellipse cx="6766.5" cy="3956.1641" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="223" x="6775.5" y="3964.13">Transparent : static const RlColor</text><ellipse cx="6766.5" cy="3975.232" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="177" x="6775.5" y="3983.1979">Violet : static const RlColor</text><ellipse cx="6766.5" cy="3994.2999" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="179" x="6775.5" y="4002.2658">White : static const RlColor</text><ellipse cx="6766.5" cy="4013.3678" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="6775.5" y="4021.3338">Yellow : static const RlColor</text><line style="stroke:#181818;stroke-width:0.5;" x1="6756.5" x2="7347.5" y1="4029.4357" y2="4029.4357"/><ellipse cx="6766.5" cy="4040.4357" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="6775.5" y="4048.4017">RlColor(Color color)</text><ellipse cx="6766.5" cy="4059.5037" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="520" x="6775.5" y="4067.4696">RlColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)</text><ellipse cx="6766.5" cy="4078.5716" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="6775.5" y="4086.5375">RlColor(std::uint32_t color)</text><ellipse cx="6766.5" cy="4097.6395" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="276" x="6775.5" y="4105.6054">RlColor(const Vector4f&amp; normalizedColor)</text><ellipse cx="6766.5" cy="4116.7074" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="305" x="6775.5" y="4124.6733">RlColor(float hue, float saturation, float value)</text><ellipse cx="6766.5" cy="4135.7753" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="6775.5" y="4143.7413">getColor() : Color&amp; {query}</text><ellipse cx="6766.5" cy="4154.8432" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="282" x="6775.5" y="4162.8092">operator+(unsigned char value) : RlColor&amp;</text><ellipse cx="6766.5" cy="4173.9112" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="290" x="6775.5" y="4181.8771">operator+=(unsigned char value) : RlColor&amp;</text><ellipse cx="6766.5" cy="4192.9791" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="279" x="6775.5" y="4200.945">operator-(unsigned char value) : RlColor&amp;</text><ellipse cx="6766.5" cy="4212.047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="287" x="6775.5" y="4220.0129">operator-=(unsigned char value) : RlColor&amp;</text><ellipse cx="6766.5" cy="4231.1149" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="247" x="6775.5" y="4239.0808">setAlpha(unsigned char a) : RlColor&amp;</text><ellipse cx="6766.5" cy="4250.1828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="239" x="6775.5" y="4258.1488">setBlue(unsigned char b) : RlColor&amp;</text><ellipse cx="6766.5" cy="4269.2507" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="250" x="6775.5" y="4277.2167">setGreen(unsigned char g) : RlColor&amp;</text><ellipse cx="6766.5" cy="4288.3187" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="232" x="6775.5" y="4296.2846">setRed(unsigned char r) : RlColor&amp;</text><ellipse cx="6766.5" cy="4307.3866" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="6775.5" y="4315.3525">toHSV() : Vector3f</text><ellipse cx="6766.5" cy="4326.4545" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="6775.5" y="4334.4204">normalize() : Vector4f {query}</text><ellipse cx="6766.5" cy="4345.5224" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="296" x="6775.5" y="4353.4883">operator!=(const RlColor&amp; rhs) : bool {query}</text><ellipse cx="6766.5" cy="4364.5903" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="300" x="6775.5" y="4372.5563">operator==(const RlColor&amp; rhs) : bool {query}</text><ellipse cx="6766.5" cy="4383.6582" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="6775.5" y="4391.6242">toInteger() : std::uint32_t {query}</text><ellipse cx="6766.5" cy="4402.7262" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="242" x="6775.5" y="4410.6921">getAlpha() : unsigned char&amp; {query}</text><ellipse cx="6766.5" cy="4421.7941" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="233" x="6775.5" y="4429.76">getBlue() : unsigned char&amp; {query}</text><ellipse cx="6766.5" cy="4440.862" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="244" x="6775.5" y="4448.8279">getGreen() : unsigned char&amp; {query}</text><ellipse cx="6766.5" cy="4459.9299" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="229" x="6775.5" y="4467.8958">getRed() : unsigned char&amp; {query}</text><ellipse cx="6766.5" cy="4478.9978" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="158" x="6775.5" y="4486.9638">alpha(float alpha) : void</text><ellipse cx="6766.5" cy="4498.0657" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="380" x="6775.5" y="4506.0317">alphaBlend(const RlColor&amp; src, const RlColor&amp; tint) : void</text><ellipse cx="6766.5" cy="4517.1337" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="567" x="6775.5" y="4525.0996">setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a) : void</text><ellipse cx="6766.5" cy="4536.2016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="225" x="6775.5" y="4544.1675">setColor(const Color&amp; color) : void</text></g><!--MD5=[0fefa7cb80593fe0e7a9a5655ccdc439]
class raylib.RlMaterial--><g id="elem_raylib.RlMaterial"><rect codeLine="227" fill="#F1F1F1" height="219.6113" id="raylib.RlMaterial" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="546" x="4916" y="3903.602"/><ellipse cx="5150.25" cy="3919.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5150.0469,3926.102 Q5147.5625,3926.102 5146.2344,3924.4301 Q5144.9219,3922.7582 5144.9219,3919.602 Q5144.9219,3916.4457 5146.2344,3914.7895 Q5147.5625,3913.102 5150.0469,3913.102 Q5150.7656,3913.102 5151.4219,3913.2582 Q5152.0625,3913.4145 5152.625,3913.727 L5152.625,3916.5239 Q5152.2656,3916.1801 5151.9688,3915.9926 Q5151.6719,3915.7895 5151.4063,3915.6801 Q5151.0938,3915.5395 5150.7813,3915.477 Q5150.4844,3915.4145 5150.1719,3915.4145 Q5148.8438,3915.4145 5148.1563,3916.477 Q5147.4688,3917.5551 5147.4688,3919.602 Q5147.4688,3921.6801 5148.1563,3922.727 Q5148.8438,3923.7895 5150.1719,3923.7895 Q5150.8125,3923.7895 5151.4063,3923.5239 Q5151.7031,3923.3832 5151.9844,3923.1957 Q5152.2813,3923.0082 5152.625,3922.6801 L5152.625,3925.477 Q5152.0469,3925.7895 5151.4063,3925.9457 Q5150.7813,3926.102 5150.0469,3926.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="5170.75" y="3925.034">RlMaterial</text><line style="stroke:#181818;stroke-width:0.5;" x1="4917" x2="5461" y1="3935.602" y2="3935.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4924" y="3943.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="4936" y="3954.5679">_material : Material</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4924" y="3962.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="4936" y="3973.6358">_materialCount : int</text><line style="stroke:#181818;stroke-width:0.5;" x1="4917" x2="5461" y1="3981.7378" y2="3981.7378"/><ellipse cx="4927" cy="3992.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="4936" y="4000.7038">RlMaterial()</text><ellipse cx="4927" cy="4011.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="85" x="4936" y="4019.7717">~RlMaterial()</text><ellipse cx="4927" cy="4030.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="217" x="4936" y="4038.8396">getMaterial() : Material&amp; {query}</text><ellipse cx="4927" cy="4049.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="494" x="4936" y="4057.9075">loadMaterials(const std::string&amp; fileName, int* materialCount) : Material*</text><ellipse cx="4927" cy="4069.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="4936" y="4076.9754">getMaterialCount() : int&amp; {query}</text><ellipse cx="4927" cy="4088.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="520" x="4936" y="4096.0433">setMaterialTexture(Material* material, int mapType, Texture2D texture) : void</text><ellipse cx="4927" cy="4107.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="480" x="4936" y="4115.1113">setModelMeshMaterial(Model* model, int meshId, int materialId) : void</text></g><!--MD5=[b85b381eb65841b6a55cb36a845de9f9]
class raylib.RlMesh--><g id="elem_raylib.RlMesh"><rect codeLine="239" fill="#F1F1F1" height="124.2717" id="raylib.RlMesh" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="259" x="5497.5" y="3951.602"/><ellipse cx="5597.75" cy="3967.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5597.5469,3974.102 Q5595.0625,3974.102 5593.7344,3972.4301 Q5592.4219,3970.7582 5592.4219,3967.602 Q5592.4219,3964.4457 5593.7344,3962.7895 Q5595.0625,3961.102 5597.5469,3961.102 Q5598.2656,3961.102 5598.9219,3961.2582 Q5599.5625,3961.4145 5600.125,3961.727 L5600.125,3964.5239 Q5599.7656,3964.1801 5599.4688,3963.9926 Q5599.1719,3963.7895 5598.9063,3963.6801 Q5598.5938,3963.5395 5598.2813,3963.477 Q5597.9844,3963.4145 5597.6719,3963.4145 Q5596.3438,3963.4145 5595.6563,3964.477 Q5594.9688,3965.5551 5594.9688,3967.602 Q5594.9688,3969.6801 5595.6563,3970.727 Q5596.3438,3971.7895 5597.6719,3971.7895 Q5598.3125,3971.7895 5598.9063,3971.5239 Q5599.2031,3971.3832 5599.4844,3971.1957 Q5599.7813,3971.0082 5600.125,3970.6801 L5600.125,3973.477 Q5599.5469,3973.7895 5598.9063,3973.9457 Q5598.2813,3974.102 5597.5469,3974.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="50" x="5618.25" y="3973.034">RlMesh</text><line style="stroke:#181818;stroke-width:0.5;" x1="5498.5" x2="5755.5" y1="3983.602" y2="3983.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5505.5" y="3991.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="92" x="5517.5" y="4002.5679">_mesh : Mesh</text><line style="stroke:#181818;stroke-width:0.5;" x1="5498.5" x2="5755.5" y1="4010.6699" y2="4010.6699"/><ellipse cx="5508.5" cy="4021.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="186" x="5517.5" y="4029.6358">RlMesh(const Mesh&amp; mesh)</text><ellipse cx="5508.5" cy="4040.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="179" x="5517.5" y="4048.7038">getMesh() : Mesh&amp; {query}</text><ellipse cx="5508.5" cy="4059.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="233" x="5517.5" y="4067.7717">setMesh(const Mesh&amp; mesh) : void</text></g><!--MD5=[8bc031ef22f9057c850e32a78ac0d521]
class raylib.RlModel--><g id="elem_raylib.RlModel"><rect codeLine="246" fill="#F1F1F1" height="696.3092" id="raylib.RlModel" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1197" x="3289.5" y="2680.102"/><ellipse cx="3856.25" cy="2696.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M3856.0469,2702.602 Q3853.5625,2702.602 3852.2344,2700.9301 Q3850.9219,2699.2582 3850.9219,2696.102 Q3850.9219,2692.9457 3852.2344,2691.2895 Q3853.5625,2689.602 3856.0469,2689.602 Q3856.7656,2689.602 3857.4219,2689.7582 Q3858.0625,2689.9145 3858.625,2690.227 L3858.625,2693.0239 Q3858.2656,2692.6801 3857.9688,2692.4926 Q3857.6719,2692.2895 3857.4063,2692.1801 Q3857.0938,2692.0395 3856.7813,2691.977 Q3856.4844,2691.9145 3856.1719,2691.9145 Q3854.8438,2691.9145 3854.1563,2692.977 Q3853.4688,2694.0551 3853.4688,2696.102 Q3853.4688,2698.1801 3854.1563,2699.227 Q3854.8438,2700.2895 3856.1719,2700.2895 Q3856.8125,2700.2895 3857.4063,2700.0239 Q3857.7031,2699.8832 3857.9844,2699.6957 Q3858.2813,2699.5082 3858.625,2699.1801 L3858.625,2701.977 Q3858.0469,2702.2895 3857.4063,2702.4457 Q3856.7813,2702.602 3856.0469,2702.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="55" x="3876.75" y="2701.534">RlModel</text><line style="stroke:#181818;stroke-width:0.5;" x1="3290.5" x2="4485.5" y1="2712.102" y2="2712.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3297.5" y="2720.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="198" x="3309.5" y="2731.0679">_boundingBox : BoundingBox</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3297.5" y="2739.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="229" x="3309.5" y="2750.1358">_baseBoudingBox : BoundingBox</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3297.5" y="2758.2378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="3309.5" y="2769.2038">_color : Color</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3297.5" y="2777.3057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="3309.5" y="2788.2717">_model : Model</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3297.5" y="2796.3736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="3309.5" y="2807.3396">_position : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3297.5" y="2815.4416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="3309.5" y="2826.4075">_rotationAxis : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3297.5" y="2834.5095"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="3309.5" y="2845.4754">_scale : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3297.5" y="2853.5774"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="140" x="3309.5" y="2864.5433">_rotationAngle : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3297.5" y="2872.6453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="186" x="3309.5" y="2883.6113">_texture : texture::RlTexture</text><line style="stroke:#181818;stroke-width:0.5;" x1="3290.5" x2="4485.5" y1="2891.7132" y2="2891.7132"/><ellipse cx="3300.5" cy="2902.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1039" x="3309.5" y="2910.6792">RlModel(const std::string&amp; fileName, const std::string&amp; texturePath, Vector3f position, Vector3f scale, Color color, Vector3f rotationAxis, float rotationAngle)</text><ellipse cx="3300.5" cy="2921.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="983" x="3309.5" y="2929.7471">RlModel(const Mesh&amp; mesh, const std::string&amp; texturePath, Vector3f position, Vector3f scale, Color color, Vector3f rotationAxis, float rotationAngle)</text><ellipse cx="3300.5" cy="2940.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="996" x="3309.5" y="2948.815">RlModel(const RlMesh&amp; mesh, const std::string&amp; texturePath, Vector3f position, Vector3f scale, Color color, Vector3f rotationAxis, float rotationAngle)</text><ellipse cx="3300.5" cy="2959.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1171" x="3309.5" y="2967.8829">RlModel(const builder::RlMeshBuilder::MeshType&amp; type, const std::string&amp; texturePath, Vector3f position, Vector3f scale, Color color, Vector3f rotationAxis, float rotationAngle)</text><ellipse cx="3300.5" cy="2978.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="3309.5" y="2986.9508">~RlModel()</text><ellipse cx="3300.5" cy="2998.0528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="285" x="3309.5" y="3006.0188">getBoundingBox() : BoundingBox&amp; {query}</text><ellipse cx="3300.5" cy="3017.1207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="3309.5" y="3025.0867">getColor() : Color&amp; {query}</text><ellipse cx="3300.5" cy="3036.1887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="189" x="3309.5" y="3044.1546">getModel() : Model&amp; {query}</text><ellipse cx="3300.5" cy="3055.2566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="3309.5" y="3063.2225">getPosition() : Vector3f&amp; {query}</text><ellipse cx="3300.5" cy="3074.3245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="243" x="3309.5" y="3082.2904">getRotationAxis() : Vector3f&amp; {query}</text><ellipse cx="3300.5" cy="3093.3924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="3309.5" y="3101.3583">getScale() : Vector3f&amp; {query}</text><ellipse cx="3300.5" cy="3112.4603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="230" x="3309.5" y="3120.4263">getRotationAngle() : float&amp; {query}</text><ellipse cx="3300.5" cy="3131.5282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="227" x="3309.5" y="3139.4942">operator-&gt;() : texture :: RlTexture*</text><ellipse cx="3300.5" cy="3150.5962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="276" x="3309.5" y="3158.5621">getTexture() : texture::RlTexture&amp; {query}</text><ellipse cx="3300.5" cy="3169.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="392" x="3309.5" y="3177.63">setBoundingBox(const BoundingBox&amp; boundingBox) : void</text><ellipse cx="3300.5" cy="3188.732" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="3309.5" y="3196.6979">setColor(Color color) : void</text><ellipse cx="3300.5" cy="3207.7999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="3309.5" y="3215.7658">setPosition(Vector3f position) : void</text><ellipse cx="3300.5" cy="3226.8678" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="260" x="3309.5" y="3234.8338">setPosition(float x, float y, float z) : void</text><ellipse cx="3300.5" cy="3245.9357" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="289" x="3309.5" y="3253.9017">setRotationAngle(float rotationAngle) : void</text><ellipse cx="3300.5" cy="3265.0037" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="290" x="3309.5" y="3272.9696">setRotationAxis(Vector3f rotationAxis) : void</text><ellipse cx="3300.5" cy="3284.0716" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="290" x="3309.5" y="3292.0375">setRotationAxis(float x, float y, float z) : void</text><ellipse cx="3300.5" cy="3303.1395" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="3309.5" y="3311.1054">setScale(Vector3f scale) : void</text><ellipse cx="3300.5" cy="3322.2074" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="242" x="3309.5" y="3330.1733">setScale(float x, float y, float z) : void</text><ellipse cx="3300.5" cy="3341.2753" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="341" x="3309.5" y="3349.2413">setTexture(const texture::RlTexture&amp; texture) : void</text><ellipse cx="3300.5" cy="3360.3432" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="3309.5" y="3368.3092">setTextureMaterial() : void</text></g><!--MD5=[66e7e253c285788995c6e06206dbeb21]
class raylib.RlModelAnim--><g id="elem_raylib.RlModelAnim"><rect codeLine="283" fill="#F1F1F1" height="276.815" id="raylib.RlModelAnim" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="467" x="3822.5" y="1999.602"/><ellipse cx="4006.75" cy="2015.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4006.5469,2022.102 Q4004.0625,2022.102 4002.7344,2020.4301 Q4001.4219,2018.7582 4001.4219,2015.602 Q4001.4219,2012.4457 4002.7344,2010.7895 Q4004.0625,2009.102 4006.5469,2009.102 Q4007.2656,2009.102 4007.9219,2009.2582 Q4008.5625,2009.4145 4009.125,2009.727 L4009.125,2012.5239 Q4008.7656,2012.1801 4008.4688,2011.9926 Q4008.1719,2011.7895 4007.9063,2011.6801 Q4007.5938,2011.5395 4007.2813,2011.477 Q4006.9844,2011.4145 4006.6719,2011.4145 Q4005.3438,2011.4145 4004.6563,2012.477 Q4003.9688,2013.5551 4003.9688,2015.602 Q4003.9688,2017.6801 4004.6563,2018.727 Q4005.3438,2019.7895 4006.6719,2019.7895 Q4007.3125,2019.7895 4007.9063,2019.5239 Q4008.2031,2019.3832 4008.4844,2019.1957 Q4008.7813,2019.0082 4009.125,2018.6801 L4009.125,2021.477 Q4008.5469,2021.7895 4007.9063,2021.9457 Q4007.2813,2022.102 4006.5469,2022.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="4027.25" y="2021.034">RlModelAnim</text><line style="stroke:#181818;stroke-width:0.5;" x1="3823.5" x2="4288.5" y1="2031.602" y2="2031.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3830.5" y="2039.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="178" x="3842.5" y="2050.5679">_anims : ModelAnimation*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3830.5" y="2058.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="165" x="3842.5" y="2069.6358">_model : const RlModel&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3830.5" y="2077.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="3842.5" y="2088.7038">_frameCount : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3830.5" y="2096.8057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="290" x="3842.5" y="2107.7717">_animations : std::vector&lt;ModelAnimation&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3830.5" y="2115.8736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="142" x="3842.5" y="2126.8396">_count : unsigned int</text><line style="stroke:#181818;stroke-width:0.5;" x1="3823.5" x2="4288.5" y1="2134.9416" y2="2134.9416"/><ellipse cx="3833.5" cy="2145.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="441" x="3842.5" y="2153.9075">RlModelAnim(const RlModel&amp; model, const std::string&amp; fileName)</text><ellipse cx="3833.5" cy="2165.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="106" x="3842.5" y="2172.9754">~RlModelAnim()</text><ellipse cx="3833.5" cy="2184.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="412" x="3842.5" y="2192.0433">animationIndexIsValid(const unsigned int&amp; animIndex) : bool</text><ellipse cx="3833.5" cy="2203.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="3842.5" y="2211.1113">getCount() : unsigned int {query}</text><ellipse cx="3833.5" cy="2222.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="307" x="3842.5" y="2230.1792">incrementFrameCount(const int&amp; value) : void</text><ellipse cx="3833.5" cy="2241.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="307" x="3842.5" y="2249.2471">unload(const unsigned int&amp; animIndex) : void</text><ellipse cx="3833.5" cy="2260.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="308" x="3842.5" y="2268.315">update(const unsigned int&amp; animIndex) : void</text></g><!--MD5=[38b1460529538698494441bc16e57797]
class raylib.RlMusic--><g id="elem_raylib.RlMusic"><rect codeLine="298" fill="#F1F1F1" height="372.1546" id="raylib.RlMusic" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="498" x="3289" y="1952.102"/><ellipse cx="3507.25" cy="1968.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M3507.0469,1974.602 Q3504.5625,1974.602 3503.2344,1972.9301 Q3501.9219,1971.2582 3501.9219,1968.102 Q3501.9219,1964.9457 3503.2344,1963.2895 Q3504.5625,1961.602 3507.0469,1961.602 Q3507.7656,1961.602 3508.4219,1961.7582 Q3509.0625,1961.9145 3509.625,1962.227 L3509.625,1965.0239 Q3509.2656,1964.6801 3508.9688,1964.4926 Q3508.6719,1964.2895 3508.4063,1964.1801 Q3508.0938,1964.0395 3507.7813,1963.977 Q3507.4844,1963.9145 3507.1719,1963.9145 Q3505.8438,1963.9145 3505.1563,1964.977 Q3504.4688,1966.0551 3504.4688,1968.102 Q3504.4688,1970.1801 3505.1563,1971.227 Q3505.8438,1972.2895 3507.1719,1972.2895 Q3507.8125,1972.2895 3508.4063,1972.0239 Q3508.7031,1971.8832 3508.9844,1971.6957 Q3509.2813,1971.5082 3509.625,1971.1801 L3509.625,1973.977 Q3509.0469,1974.2895 3508.4063,1974.4457 Q3507.7813,1974.602 3507.0469,1974.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="53" x="3527.75" y="1973.534">RlMusic</text><line style="stroke:#181818;stroke-width:0.5;" x1="3290" x2="3786" y1="1984.102" y2="1984.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3297" y="1992.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="92" x="3309" y="2003.0679">music : Music</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3297" y="2011.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="91" x="3309" y="2022.1358">volume : float</text><line style="stroke:#181818;stroke-width:0.5;" x1="3290" x2="3786" y1="2030.2378" y2="2030.2378"/><ellipse cx="3300" cy="2041.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="245" x="3309" y="2049.2038">RlMusic(const std::string&amp; fileName)</text><ellipse cx="3300" cy="2060.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="472" x="3309" y="2068.2717">RlMusic(const std::string&amp; fileType, unsigned char* data, int dataSize)</text><ellipse cx="3300" cy="2079.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="3309" y="2087.3396">~RlMusic()</text><ellipse cx="3300" cy="2098.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="3309" y="2106.4075">isPlaying() : bool</text><ellipse cx="3300" cy="2117.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="152" x="3309" y="2125.4754">getTimeLength() : float</text><ellipse cx="3300" cy="2136.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="149" x="3309" y="2144.5433">getTimePlayed() : float</text><ellipse cx="3300" cy="2155.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="3309" y="2163.6113">getVolume() : float {query}</text><ellipse cx="3300" cy="2174.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="3309" y="2182.6792">pause() : void</text><ellipse cx="3300" cy="2193.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="3309" y="2201.7471">play() : void</text><ellipse cx="3300" cy="2212.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="3309" y="2220.815">resume() : void</text><ellipse cx="3300" cy="2231.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="166" x="3309" y="2239.8829">seek(float position) : void</text><ellipse cx="3300" cy="2250.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="169" x="3309" y="2258.9508">setPitch(float pitch) : void</text><ellipse cx="3300" cy="2270.0528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="3309" y="2278.0188">setVolume(float volume) : void</text><ellipse cx="3300" cy="2289.1207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="3309" y="2297.0867">stop() : void</text><ellipse cx="3300" cy="2308.1887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="3309" y="2316.1546">update() : void</text></g><!--MD5=[a4c982a1ee5312a42e8447e8cda35a7f]
class raylib.Shape3DHelper--><g id="elem_raylib.Shape3DHelper"><rect codeLine="318" fill="#F1F1F1" height="505.63" id="raylib.Shape3DHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="929" x="5791.5" y="3760.602"/><ellipse cx="6199.25" cy="3776.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M6199.0469,3783.102 Q6196.5625,3783.102 6195.2344,3781.4301 Q6193.9219,3779.7582 6193.9219,3776.602 Q6193.9219,3773.4457 6195.2344,3771.7895 Q6196.5625,3770.102 6199.0469,3770.102 Q6199.7656,3770.102 6200.4219,3770.2582 Q6201.0625,3770.4145 6201.625,3770.727 L6201.625,3773.5239 Q6201.2656,3773.1801 6200.9688,3772.9926 Q6200.6719,3772.7895 6200.4063,3772.6801 Q6200.0938,3772.5395 6199.7813,3772.477 Q6199.4844,3772.4145 6199.1719,3772.4145 Q6197.8438,3772.4145 6197.1563,3773.477 Q6196.4688,3774.5551 6196.4688,3776.602 Q6196.4688,3778.6801 6197.1563,3779.727 Q6197.8438,3780.7895 6199.1719,3780.7895 Q6199.8125,3780.7895 6200.4063,3780.5239 Q6200.7031,3780.3832 6200.9844,3780.1957 Q6201.2813,3780.0082 6201.625,3779.6801 L6201.625,3782.477 Q6201.0469,3782.7895 6200.4063,3782.9457 Q6199.7813,3783.102 6199.0469,3783.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="105" x="6219.75" y="3782.034">Shape3DHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="5792.5" x2="6719.5" y1="3792.602" y2="3792.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="5792.5" x2="6719.5" y1="3800.602" y2="3800.602"/><ellipse cx="5802.5" cy="3811.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="699" x="5811.5" y="3819.5679">drawCircle3D(Vector3f center, float radius, Vector3f rotationAxis, float rotationAngle, RlColor color) : void</text><ellipse cx="5802.5" cy="3830.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="575" x="5811.5" y="3838.6358">drawCube(Vector3f position, float width, float height, float length, RlColor color) : void</text><ellipse cx="5802.5" cy="3849.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="755" x="5811.5" y="3857.7038">drawCubeTexture(Texture2D texture, Vector3f position, float width, float height, float length, RlColor color) : void</text><ellipse cx="5802.5" cy="3868.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="903" x="5811.5" y="3876.7717">drawCubeTextureRec(Texture2D texture, Rectangle source, Vector3f position, float width, float height, float length, RlColor color) : void</text><ellipse cx="5802.5" cy="3887.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="424" x="5811.5" y="3895.8396">drawCubeV(Vector3f position, Vector3f size, RlColor color) : void</text><ellipse cx="5802.5" cy="3906.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="613" x="5811.5" y="3914.9075">drawCubeWires(Vector3f position, float width, float height, float length, RlColor color) : void</text><ellipse cx="5802.5" cy="3926.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="462" x="5811.5" y="3933.9754">drawCubeWiresV(Vector3f position, Vector3f size, RlColor color) : void</text><ellipse cx="5802.5" cy="3945.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="740" x="5811.5" y="3953.0433">drawCylinder(Vector3f position, float radiusTop, float radiusBottom, float height, int slices, RlColor color) : void</text><ellipse cx="5802.5" cy="3964.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="773" x="5811.5" y="3972.1113">drawCylinderEx(Vector3f startPos, Vector3f endPos, float startRadius, float endRadius, int sides, RlColor color) : void</text><ellipse cx="5802.5" cy="3983.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="778" x="5811.5" y="3991.1792">drawCylinderWires(Vector3f position, float radiusTop, float radiusBottom, float height, int slices, RlColor color) : void</text><ellipse cx="5802.5" cy="4002.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="811" x="5811.5" y="4010.2471">drawCylinderWiresEx(Vector3f startPos, Vector3f endPos, float startRadius, float endRadius, int sides, RlColor color) : void</text><ellipse cx="5802.5" cy="4021.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="265" x="5811.5" y="4029.315">drawGrid(int slices, float spacing) : void</text><ellipse cx="5802.5" cy="4040.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="390" x="5811.5" y="4048.3829">drawGrid(const Vector2i&amp; size, const float&amp; spacing) : void</text><ellipse cx="5802.5" cy="4059.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="561" x="5811.5" y="4067.4508">drawGrid(const Vector2i&amp; size, const Vector3f&amp; position, const float&amp; spacing) : void</text><ellipse cx="5802.5" cy="4078.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="704" x="5811.5" y="4086.5188">drawGrid(const Vector2i&amp; size, const Vector3f&amp; position, const float&amp; spacing, const RlColor&amp; color) : void</text><ellipse cx="5802.5" cy="4097.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="450" x="5811.5" y="4105.5867">drawLine3D(Vector3f startPos, Vector3f endPos, RlColor color) : void</text><ellipse cx="5802.5" cy="4116.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="430" x="5811.5" y="4124.6546">drawPlane(Vector3f centerPos, Vector2f size, RlColor color) : void</text><ellipse cx="5802.5" cy="4135.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="340" x="5811.5" y="4143.7225">drawPoint3D(Vector3f position, RlColor color) : void</text><ellipse cx="5802.5" cy="4154.8245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="248" x="5811.5" y="4162.7904">drawRay(Ray ray, RlColor color) : void</text><ellipse cx="5802.5" cy="4173.8924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="433" x="5811.5" y="4181.8583">drawSphere(Vector3f centerPos, float radius, RlColor color) : void</text><ellipse cx="5802.5" cy="4192.9603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="580" x="5811.5" y="4200.9263">drawSphereEx(Vector3f centerPos, float radius, int rings, int slices, RlColor color) : void</text><ellipse cx="5802.5" cy="4212.0282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="603" x="5811.5" y="4219.9942">drawSphereWires(Vector3f centerPos, float radius, int rings, int slices, RlColor color) : void</text><ellipse cx="5802.5" cy="4231.0962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="487" x="5811.5" y="4239.0621">drawTriangle3D(Vector3f v1, Vector3f v2, Vector3f v3, RlColor color) : void</text><ellipse cx="5802.5" cy="4250.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="505" x="5811.5" y="4258.13">drawTriangleStrip3D(::Vector3* points, int pointsCount, RlColor color) : void</text></g><!--MD5=[b50c075f80b10262884e7ec27bc531ec]
class raylib.Vector2--><g id="elem_raylib.Vector2"><rect codeLine="345" fill="#F1F1F1" height="162.4075" id="raylib.Vector2" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="366" x="4380" y="4632.102"/><ellipse cx="4469.25" cy="4648.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4469.0469,4654.602 Q4466.5625,4654.602 4465.2344,4652.9301 Q4463.9219,4651.2582 4463.9219,4648.102 Q4463.9219,4644.9457 4465.2344,4643.2895 Q4466.5625,4641.602 4469.0469,4641.602 Q4469.7656,4641.602 4470.4219,4641.7582 Q4471.0625,4641.9145 4471.625,4642.227 L4471.625,4645.0239 Q4471.2656,4644.6801 4470.9688,4644.4926 Q4470.6719,4644.2895 4470.4063,4644.1801 Q4470.0938,4644.0395 4469.7813,4643.977 Q4469.4844,4643.9145 4469.1719,4643.9145 Q4467.8438,4643.9145 4467.1563,4644.977 Q4466.4688,4646.0551 4466.4688,4648.102 Q4466.4688,4650.1801 4467.1563,4651.227 Q4467.8438,4652.2895 4469.1719,4652.2895 Q4469.8125,4652.2895 4470.4063,4652.0239 Q4470.7031,4651.8832 4470.9844,4651.6957 Q4471.2813,4651.5082 4471.625,4651.1801 L4471.625,4653.977 Q4471.0469,4654.2895 4470.4063,4654.4457 Q4469.7813,4654.602 4469.0469,4654.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="50" x="4489.75" y="4653.534">Vector2</text><rect fill="#FFFFFF" height="18.3441" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="127" x="4622" y="4629.102"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="125" x="4623" y="4642.9301">template&lt;typename T&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="4381" x2="4745" y1="4664.102" y2="4664.102"/><ellipse cx="4391" cy="4675.102" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="4400" y="4683.0679">x : T</text><ellipse cx="4391" cy="4694.1699" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="4400" y="4702.1358">y : T</text><line style="stroke:#181818;stroke-width:0.5;" x1="4381" x2="4745" y1="4710.2378" y2="4710.2378"/><ellipse cx="4391" cy="4721.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="58" x="4400" y="4729.2038">Vector2()</text><ellipse cx="4391" cy="4740.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="104" x="4400" y="4748.2717">Vector2(T x, T y)</text><ellipse cx="4391" cy="4759.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="336" x="4400" y="4767.3396">operator!=(const Vector2&lt;T&gt;&amp; other) : bool {query}</text><ellipse cx="4391" cy="4778.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="340" x="4400" y="4786.4075">operator==(const Vector2&lt;T&gt;&amp; other) : bool {query}</text></g><!--MD5=[2276c85978bc3f01be17943659f1d083]
class raylib.Vector3--><g id="elem_raylib.Vector3"><rect codeLine="354" fill="#F1F1F1" height="181.4754" id="raylib.Vector3" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="366" x="4781" y="4622.602"/><ellipse cx="4870.25" cy="4638.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4870.0469,4645.102 Q4867.5625,4645.102 4866.2344,4643.4301 Q4864.9219,4641.7582 4864.9219,4638.602 Q4864.9219,4635.4457 4866.2344,4633.7895 Q4867.5625,4632.102 4870.0469,4632.102 Q4870.7656,4632.102 4871.4219,4632.2582 Q4872.0625,4632.4145 4872.625,4632.727 L4872.625,4635.5239 Q4872.2656,4635.1801 4871.9688,4634.9926 Q4871.6719,4634.7895 4871.4063,4634.6801 Q4871.0938,4634.5395 4870.7813,4634.477 Q4870.4844,4634.4145 4870.1719,4634.4145 Q4868.8438,4634.4145 4868.1563,4635.477 Q4867.4688,4636.5551 4867.4688,4638.602 Q4867.4688,4640.6801 4868.1563,4641.727 Q4868.8438,4642.7895 4870.1719,4642.7895 Q4870.8125,4642.7895 4871.4063,4642.5239 Q4871.7031,4642.3832 4871.9844,4642.1957 Q4872.2813,4642.0082 4872.625,4641.6801 L4872.625,4644.477 Q4872.0469,4644.7895 4871.4063,4644.9457 Q4870.7813,4645.102 4870.0469,4645.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="50" x="4890.75" y="4644.034">Vector3</text><rect fill="#FFFFFF" height="18.3441" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="127" x="5023" y="4619.602"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="125" x="5024" y="4633.4301">template&lt;typename T&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="4782" x2="5146" y1="4654.602" y2="4654.602"/><ellipse cx="4792" cy="4665.602" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="4801" y="4673.5679">x : T</text><ellipse cx="4792" cy="4684.6699" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="4801" y="4692.6358">y : T</text><ellipse cx="4792" cy="4703.7378" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="4801" y="4711.7038">z : T</text><line style="stroke:#181818;stroke-width:0.5;" x1="4782" x2="5146" y1="4719.8057" y2="4719.8057"/><ellipse cx="4792" cy="4730.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="58" x="4801" y="4738.7717">Vector3()</text><ellipse cx="4792" cy="4749.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="4801" y="4757.8396">Vector3(T x, T y, T z)</text><ellipse cx="4792" cy="4768.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="336" x="4801" y="4776.9075">operator!=(const Vector3&lt;T&gt;&amp; other) : bool {query}</text><ellipse cx="4792" cy="4788.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="340" x="4801" y="4795.9754">operator==(const Vector3&lt;T&gt;&amp; other) : bool {query}</text></g><!--MD5=[c79ba26e6db5c6c137ad6311257236a9]
class raylib.Vector4--><g id="elem_raylib.Vector4"><rect codeLine="364" fill="#F1F1F1" height="200.5433" id="raylib.Vector4" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="342" x="5182" y="4612.602"/><ellipse cx="5259.25" cy="4628.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5259.0469,4635.102 Q5256.5625,4635.102 5255.2344,4633.4301 Q5253.9219,4631.7582 5253.9219,4628.602 Q5253.9219,4625.4457 5255.2344,4623.7895 Q5256.5625,4622.102 5259.0469,4622.102 Q5259.7656,4622.102 5260.4219,4622.2582 Q5261.0625,4622.4145 5261.625,4622.727 L5261.625,4625.5239 Q5261.2656,4625.1801 5260.9688,4624.9926 Q5260.6719,4624.7895 5260.4063,4624.6801 Q5260.0938,4624.5395 5259.7813,4624.477 Q5259.4844,4624.4145 5259.1719,4624.4145 Q5257.8438,4624.4145 5257.1563,4625.477 Q5256.4688,4626.5551 5256.4688,4628.602 Q5256.4688,4630.6801 5257.1563,4631.727 Q5257.8438,4632.7895 5259.1719,4632.7895 Q5259.8125,4632.7895 5260.4063,4632.5239 Q5260.7031,4632.3832 5260.9844,4632.1957 Q5261.2813,4632.0082 5261.625,4631.6801 L5261.625,4634.477 Q5261.0469,4634.7895 5260.4063,4634.9457 Q5259.7813,4635.102 5259.0469,4635.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="50" x="5279.75" y="4634.034">Vector4</text><rect fill="#FFFFFF" height="18.3441" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="127" x="5400" y="4609.602"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="125" x="5401" y="4623.4301">template&lt;typename T&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="5183" x2="5523" y1="4644.602" y2="4644.602"/><ellipse cx="5193" cy="4655.602" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="31" x="5202" y="4663.5679">w : T</text><ellipse cx="5193" cy="4674.6699" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="5202" y="4682.6358">x : T</text><ellipse cx="5193" cy="4693.7378" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="5202" y="4701.7038">y : T</text><ellipse cx="5193" cy="4712.8057" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="5202" y="4720.7717">z : T</text><line style="stroke:#181818;stroke-width:0.5;" x1="5183" x2="5523" y1="4728.8736" y2="4728.8736"/><ellipse cx="5193" cy="4739.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="58" x="5202" y="4747.8396">Vector4()</text><ellipse cx="5193" cy="4758.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="5202" y="4766.9075">Vector4(T x, T y, T z, T w)</text><ellipse cx="5193" cy="4778.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="312" x="5202" y="4785.9754">operator!=(const Vector4&amp; other) : bool {query}</text><ellipse cx="5193" cy="4797.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="316" x="5202" y="4805.0433">operator==(const Vector4&amp; other) : bool {query}</text></g><!--MD5=[c90c0145e5e403502970efe32264e1f9]
class raylib.window.RlWindow--><g id="elem_raylib.window.RlWindow"><rect codeLine="376" fill="#F1F1F1" height="886.9883" id="raylib.window.RlWindow" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="512" x="23691" y="1694.602"/><ellipse cx="23909.25" cy="1710.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M23909.0469,1717.102 Q23906.5625,1717.102 23905.2344,1715.4301 Q23903.9219,1713.7582 23903.9219,1710.602 Q23903.9219,1707.4457 23905.2344,1705.7895 Q23906.5625,1704.102 23909.0469,1704.102 Q23909.7656,1704.102 23910.4219,1704.2582 Q23911.0625,1704.4145 23911.625,1704.727 L23911.625,1707.5239 Q23911.2656,1707.1801 23910.9688,1706.9926 Q23910.6719,1706.7895 23910.4063,1706.6801 Q23910.0938,1706.5395 23909.7813,1706.477 Q23909.4844,1706.4145 23909.1719,1706.4145 Q23907.8438,1706.4145 23907.1563,1707.477 Q23906.4688,1708.5551 23906.4688,1710.602 Q23906.4688,1712.6801 23907.1563,1713.727 Q23907.8438,1714.7895 23909.1719,1714.7895 Q23909.8125,1714.7895 23910.4063,1714.5239 Q23910.7031,1714.3832 23910.9844,1714.1957 Q23911.2813,1714.0082 23911.625,1713.6801 L23911.625,1716.477 Q23911.0469,1716.7895 23910.4063,1716.9457 Q23909.7813,1717.102 23909.0469,1717.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="67" x="23929.75" y="1716.034">RlWindow</text><line style="stroke:#181818;stroke-width:0.5;" x1="23692" x2="24202" y1="1726.602" y2="1726.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="23699" y="1734.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="23711" y="1745.5679">_isCreated : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="23699" y="1753.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="23711" y="1764.6358">_height : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="23699" y="1772.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="23711" y="1783.7038">_minHeight : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="23699" y="1791.8057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="23711" y="1802.7717">_minWidth : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="23699" y="1810.8736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="23711" y="1821.8396">_width : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="23699" y="1829.9416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="179" x="23711" y="1840.9075">_camera : raylib::RlCamera</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="23699" y="1849.0095"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="300" x="23711" y="1859.9754">_instance : static std::shared_ptr&lt;RlWindow&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="23699" y="1868.0774"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="23711" y="1879.0433">_title : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="23692" x2="24202" y1="1887.1453" y2="1887.1453"/><ellipse cx="23702" cy="1898.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="23711" y="1906.1113">RlWindow()</text><ellipse cx="23702" cy="1917.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="23711" y="1925.1792">~RlWindow()</text><ellipse cx="23702" cy="1936.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="320" x="23711" y="1944.2471">hasWindowState(const ConfigFlags&amp; flag) : bool</text><ellipse cx="23702" cy="1955.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="23711" y="1963.315">isOpen() : bool</text><ellipse cx="23702" cy="1974.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="169" x="23711" y="1982.3829">isWindowFocused() : bool</text><ellipse cx="23702" cy="1993.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="183" x="23711" y="2001.4508">isWindowFullscreen() : bool</text><ellipse cx="23702" cy="2012.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="163" x="23711" y="2020.5188">isWindowHidden() : bool</text><ellipse cx="23702" cy="2031.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="187" x="23711" y="2039.5867">isWindowMaximized() : bool</text><ellipse cx="23702" cy="2050.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="185" x="23711" y="2058.6546">isWindowMinimized() : bool</text><ellipse cx="23702" cy="2069.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="155" x="23711" y="2077.7225">isWindowReady() : bool</text><ellipse cx="23702" cy="2088.8245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="166" x="23711" y="2096.7904">isWindowResized() : bool</text><ellipse cx="23702" cy="2107.8924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="23711" y="2115.8583">isIsCreated() : bool&amp; {query}</text><ellipse cx="23702" cy="2126.9603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="168" x="23711" y="2134.9263">getHeight() : int&amp; {query}</text><ellipse cx="23702" cy="2146.0282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="194" x="23711" y="2153.9942">getMinHeight() : int&amp; {query}</text><ellipse cx="23702" cy="2165.0962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="189" x="23711" y="2173.0621">getMinWidth() : int&amp; {query}</text><ellipse cx="23702" cy="2184.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="163" x="23711" y="2192.13">getWidth() : int&amp; {query}</text><ellipse cx="23702" cy="2203.232" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="215" x="23711" y="2211.1979">getCamera() : raylib::RlCamera&amp;</text><ellipse cx="23702" cy="2222.2999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="268" x="23711" y="2230.2658">getCamera() : raylib::RlCamera&amp; {query}</text><ellipse cx="23702" cy="2241.3678" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="295" x="23711" y="2249.3338">getInstance() : std::shared_ptr&lt;RlWindow&gt;&amp;</text><ellipse cx="23702" cy="2260.4357" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="23711" y="2268.4017">getTitle() : std::string&amp; {query}</text><ellipse cx="23702" cy="2279.5037" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="292" x="23711" y="2287.4696">clearWindowState(unsigned int flags) : void</text><ellipse cx="23702" cy="2298.5716" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="23711" y="2306.5375">createWindow(const std::string&amp; title, int width, int height, int fps) : void</text><ellipse cx="23702" cy="2317.6395" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="166" x="23711" y="2325.6054">maximizeWindow() : void</text><ellipse cx="23702" cy="2336.7074" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="164" x="23711" y="2344.6733">minimizeWindow() : void</text><ellipse cx="23702" cy="2355.7753" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="23711" y="2363.7413">restoreWindow() : void</text><ellipse cx="23702" cy="2374.8432" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="289" x="23711" y="2382.8092">setCamera(const RlCamera&amp; camera) : void</text><ellipse cx="23702" cy="2393.9112" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="270" x="23711" y="2401.8771">setConfigFlags(unsigned int flags) : void</text><ellipse cx="23702" cy="2412.9791" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="353" x="23711" y="2420.945">setWindowIcon(const image::RlImage&amp; image) : void</text><ellipse cx="23702" cy="2432.047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="309" x="23711" y="2440.0129">setWindowMinSize(int width, int height) : void</text><ellipse cx="23702" cy="2451.1149" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="250" x="23711" y="2459.0808">setWindowMonitor(int monitor) : void</text><ellipse cx="23702" cy="2470.1828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="241" x="23711" y="2478.1488">setWindowPosition(int x, int y) : void</text><ellipse cx="23702" cy="2489.2507" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="283" x="23711" y="2497.2167">setWindowSize(int width, int height) : void</text><ellipse cx="23702" cy="2508.3187" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="279" x="23711" y="2516.2846">setWindowState(unsigned int flags) : void</text><ellipse cx="23702" cy="2527.3866" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="300" x="23711" y="2535.3525">setWindowTitle(const std::string&amp; title) : void</text><ellipse cx="23702" cy="2546.4545" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="335" x="23711" y="2554.4204">takeScreenshot(const std::string&amp; fileName) : void</text><ellipse cx="23702" cy="2565.5224" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="160" x="23711" y="2573.4883">toggleFullscreen() : void</text></g><!--MD5=[7205982789043c7c272c32a3ef0e4818]
class raylib.window.System--><g id="elem_raylib.window.System"><rect codeLine="423" fill="#F1F1F1" height="391.2225" id="raylib.window.System" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="369" x="23286.5" y="1942.602"/><ellipse cx="23442.75" cy="1958.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M23442.5469,1965.102 Q23440.0625,1965.102 23438.7344,1963.4301 Q23437.4219,1961.7582 23437.4219,1958.602 Q23437.4219,1955.4457 23438.7344,1953.7895 Q23440.0625,1952.102 23442.5469,1952.102 Q23443.2656,1952.102 23443.9219,1952.2582 Q23444.5625,1952.4145 23445.125,1952.727 L23445.125,1955.5239 Q23444.7656,1955.1801 23444.4688,1954.9926 Q23444.1719,1954.7895 23443.9063,1954.6801 Q23443.5938,1954.5395 23443.2813,1954.477 Q23442.9844,1954.4145 23442.6719,1954.4145 Q23441.3438,1954.4145 23440.6563,1955.477 Q23439.9688,1956.5551 23439.9688,1958.602 Q23439.9688,1960.6801 23440.6563,1961.727 Q23441.3438,1962.7895 23442.6719,1962.7895 Q23443.3125,1962.7895 23443.9063,1962.5239 Q23444.2031,1962.3832 23444.4844,1962.1957 Q23444.7813,1962.0082 23445.125,1961.6801 L23445.125,1964.477 Q23444.5469,1964.7895 23443.9063,1964.9457 Q23443.2813,1965.102 23442.5469,1965.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="48" x="23463.25" y="1964.034">System</text><line style="stroke:#181818;stroke-width:0.5;" x1="23287.5" x2="23654.5" y1="1974.602" y2="1974.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="23287.5" x2="23654.5" y1="1982.602" y2="1982.602"/><ellipse cx="23297.5" cy="1993.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="316" x="23306.5" y="2001.5679">getMonitorPosition(int monitorIndex) : Vector2f</text><ellipse cx="23297.5" cy="2012.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="204" x="23306.5" y="2020.6358">getWindowPosition() : Vector2f</text><ellipse cx="23297.5" cy="2031.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="209" x="23306.5" y="2039.7038">getWindowScaleDPI() : Vector2f</text><ellipse cx="23297.5" cy="2050.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="343" x="23306.5" y="2058.7717">getMonitorPhysicalSize(int monitorIndex) : Vector2i</text><ellipse cx="23297.5" cy="2069.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="289" x="23306.5" y="2077.8396">getMonitorSize(int monitorIndex) : Vector2i</text><ellipse cx="23297.5" cy="2088.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="169" x="23306.5" y="2096.9075">getScreenSize() : Vector2i</text><ellipse cx="23297.5" cy="2108.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="165" x="23306.5" y="2115.9754">getCurrentMonitor() : int</text><ellipse cx="23297.5" cy="2127.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="153" x="23306.5" y="2135.0433">getMonitorCount() : int</text><ellipse cx="23297.5" cy="2146.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="271" x="23306.5" y="2154.1113">getMonitorHeight(int monitorIndex) : int</text><ellipse cx="23297.5" cy="2165.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="325" x="23306.5" y="2173.1792">getMonitorPhysicalHeight(int monitorIndex) : int</text><ellipse cx="23297.5" cy="2184.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="320" x="23306.5" y="2192.2471">getMonitorPhysicalWidth(int monitorIndex) : int</text><ellipse cx="23297.5" cy="2203.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="308" x="23306.5" y="2211.315">getMonitorRefreshRate(int monitorIndex) : int</text><ellipse cx="23297.5" cy="2222.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="266" x="23306.5" y="2230.3829">getMonitorWidth(int monitorIndex) : int</text><ellipse cx="23297.5" cy="2241.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="151" x="23306.5" y="2249.4508">getScreenHeight() : int</text><ellipse cx="23297.5" cy="2260.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="146" x="23306.5" y="2268.5188">getScreenWidth() : int</text><ellipse cx="23297.5" cy="2279.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="205" x="23306.5" y="2287.5867">getClipboardText() : std::string</text><ellipse cx="23297.5" cy="2298.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="317" x="23306.5" y="2306.6546">getMonitorName(int monitorIndex) : std::string</text><ellipse cx="23297.5" cy="2317.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="310" x="23306.5" y="2325.7225">setClipboardText(const std::string&amp; text) : void</text></g><!--MD5=[fc44ad1c963e96c4734aeb4fba4ea08d]
class raylib.texture.RlRenderTexture--><g id="elem_raylib.texture.RlRenderTexture"><rect codeLine="446" fill="#F1F1F1" height="124.2717" id="raylib.texture.RlRenderTexture" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="349" x="3860.5" y="3951.602"/><ellipse cx="3974.25" cy="3967.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M3974.0469,3974.102 Q3971.5625,3974.102 3970.2344,3972.4301 Q3968.9219,3970.7582 3968.9219,3967.602 Q3968.9219,3964.4457 3970.2344,3962.7895 Q3971.5625,3961.102 3974.0469,3961.102 Q3974.7656,3961.102 3975.4219,3961.2582 Q3976.0625,3961.4145 3976.625,3961.727 L3976.625,3964.5239 Q3976.2656,3964.1801 3975.9688,3963.9926 Q3975.6719,3963.7895 3975.4063,3963.6801 Q3975.0938,3963.5395 3974.7813,3963.477 Q3974.4844,3963.4145 3974.1719,3963.4145 Q3972.8438,3963.4145 3972.1563,3964.477 Q3971.4688,3965.5551 3971.4688,3967.602 Q3971.4688,3969.6801 3972.1563,3970.727 Q3972.8438,3971.7895 3974.1719,3971.7895 Q3974.8125,3971.7895 3975.4063,3971.5239 Q3975.7031,3971.3832 3975.9844,3971.1957 Q3976.2813,3971.0082 3976.625,3970.6801 L3976.625,3973.477 Q3976.0469,3973.7895 3975.4063,3973.9457 Q3974.7813,3974.102 3974.0469,3974.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="3994.75" y="3973.034">RlRenderTexture</text><line style="stroke:#181818;stroke-width:0.5;" x1="3861.5" x2="4208.5" y1="3983.602" y2="3983.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3868.5" y="3991.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="233" x="3880.5" y="4002.5679">_renderTexture : RenderTexture2D</text><line style="stroke:#181818;stroke-width:0.5;" x1="3861.5" x2="4208.5" y1="4010.6699" y2="4010.6699"/><ellipse cx="3871.5" cy="4021.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="255" x="3880.5" y="4029.6358">RlRenderTexture(int width, int height)</text><ellipse cx="3871.5" cy="4040.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="3880.5" y="4048.7038">~RlRenderTexture()</text><ellipse cx="3871.5" cy="4059.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="323" x="3880.5" y="4067.7717">getRenderTexture() : RenderTexture2D&amp; {query}</text></g><!--MD5=[7379ad9370be35f6a7d5c3a27ad4c3cd]
class raylib.texture.RlTexture--><g id="elem_raylib.texture.RlTexture"><rect codeLine="453" fill="#F1F1F1" height="448.4263" id="raylib.texture.RlTexture" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="512" x="3313" y="3789.602"/><ellipse cx="3532.75" cy="3805.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M3532.5469,3812.102 Q3530.0625,3812.102 3528.7344,3810.4301 Q3527.4219,3808.7582 3527.4219,3805.602 Q3527.4219,3802.4457 3528.7344,3800.7895 Q3530.0625,3799.102 3532.5469,3799.102 Q3533.2656,3799.102 3533.9219,3799.2582 Q3534.5625,3799.4145 3535.125,3799.727 L3535.125,3802.5239 Q3534.7656,3802.1801 3534.4688,3801.9926 Q3534.1719,3801.7895 3533.9063,3801.6801 Q3533.5938,3801.5395 3533.2813,3801.477 Q3532.9844,3801.4145 3532.6719,3801.4145 Q3531.3438,3801.4145 3530.6563,3802.477 Q3529.9688,3803.5551 3529.9688,3805.602 Q3529.9688,3807.6801 3530.6563,3808.727 Q3531.3438,3809.7895 3532.6719,3809.7895 Q3533.3125,3809.7895 3533.9063,3809.5239 Q3534.2031,3809.3832 3534.4844,3809.1957 Q3534.7813,3809.0082 3535.125,3808.6801 L3535.125,3811.477 Q3534.5469,3811.7895 3533.9063,3811.9457 Q3533.2813,3812.102 3532.5469,3812.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="64" x="3553.25" y="3811.034">RlTexture</text><line style="stroke:#181818;stroke-width:0.5;" x1="3314" x2="3824" y1="3821.602" y2="3821.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3321" y="3829.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="3333" y="3840.5679">_textureRec : Rectangle</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3321" y="3848.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="135" x="3333" y="3859.6358">_texture : Texture2D</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3321" y="3867.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="165" x="3333" y="3878.7038">_texturePath : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="3314" x2="3824" y1="3886.8057" y2="3886.8057"/><ellipse cx="3324" cy="3897.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="256" x="3333" y="3905.7717">RlTexture(const std::string&amp; fileName)</text><ellipse cx="3324" cy="3916.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="274" x="3333" y="3924.8396">RlTexture(const image::RlImage&amp; image)</text><ellipse cx="3324" cy="3935.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="3333" y="3943.9075">RlTexture(const image::RlImage&amp; image, const CubemapLayout&amp; layout)</text><ellipse cx="3324" cy="3955.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="3333" y="3962.9754">~RlTexture()</text><ellipse cx="3324" cy="3974.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="247" x="3333" y="3982.0433">getTextureRec() : Rectangle&amp; {query}</text><ellipse cx="3324" cy="3993.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="121" x="3333" y="4001.1113">get() : Texture2D&amp;</text><ellipse cx="3324" cy="4012.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="174" x="3333" y="4020.1792">get() : Texture2D&amp; {query}</text><ellipse cx="3324" cy="4031.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="3333" y="4039.2471">getFormat() : int&amp; {query}</text><ellipse cx="3324" cy="4050.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="168" x="3333" y="4058.315">getHeight() : int&amp; {query}</text><ellipse cx="3324" cy="4069.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="186" x="3333" y="4077.3829">getMipmaps() : int&amp; {query}</text><ellipse cx="3324" cy="4088.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="163" x="3333" y="4096.4508">getWidth() : int&amp; {query}</text><ellipse cx="3324" cy="4107.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="204" x="3333" y="4115.5188">getPath() : std::string&amp; {query}</text><ellipse cx="3324" cy="4126.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="206" x="3333" y="4134.5867">getID() : unsigned int&amp; {query}</text><ellipse cx="3324" cy="4145.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="3333" y="4153.6546">genTextureMipmaps() : void</text><ellipse cx="3324" cy="4164.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="273" x="3333" y="4172.7225">setFilter(const TextureFilter&amp; filter) : void</text><ellipse cx="3324" cy="4183.8245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="279" x="3333" y="4191.7904">setWrap(const TextureWrap&amp; wrap) : void</text><ellipse cx="3324" cy="4202.8924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="215" x="3333" y="4210.8583">update(const void* pixels) : void</text><ellipse cx="3324" cy="4221.9603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="394" x="3333" y="4229.9263">updateRect(const Rectangle&amp; rec, const void* pixels) : void</text></g><!--MD5=[bc479f3e982e72a86dbb927c603cf7ff]
class raylib.text.RlFont--><g id="elem_raylib.text.RlFont"><rect codeLine="479" fill="#F1F1F1" height="314.9508" id="raylib.text.RlFont" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="945" x="12541.5" y="3856.102"/><ellipse cx="12988.75" cy="3872.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M12988.5469,3878.602 Q12986.0625,3878.602 12984.7344,3876.9301 Q12983.4219,3875.2582 12983.4219,3872.102 Q12983.4219,3868.9457 12984.7344,3867.2895 Q12986.0625,3865.602 12988.5469,3865.602 Q12989.2656,3865.602 12989.9219,3865.7582 Q12990.5625,3865.9145 12991.125,3866.227 L12991.125,3869.0239 Q12990.7656,3868.6801 12990.4688,3868.4926 Q12990.1719,3868.2895 12989.9063,3868.1801 Q12989.5938,3868.0395 12989.2813,3867.977 Q12988.9844,3867.9145 12988.6719,3867.9145 Q12987.3438,3867.9145 12986.6563,3868.977 Q12985.9688,3870.0551 12985.9688,3872.102 Q12985.9688,3874.1801 12986.6563,3875.227 Q12987.3438,3876.2895 12988.6719,3876.2895 Q12989.3125,3876.2895 12989.9063,3876.0239 Q12990.2031,3875.8832 12990.4844,3875.6957 Q12990.7813,3875.5082 12991.125,3875.1801 L12991.125,3877.977 Q12990.5469,3878.2895 12989.9063,3878.4457 Q12989.2813,3878.602 12988.5469,3878.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="42" x="13009.25" y="3877.534">RlFont</text><line style="stroke:#181818;stroke-width:0.5;" x1="12542.5" x2="13485.5" y1="3888.102" y2="3888.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12549.5" y="3896.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="12561.5" y="3907.0679">_font : Font</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12549.5" y="3915.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="12561.5" y="3926.1358">_fontSize : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12549.5" y="3934.2378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="12561.5" y="3945.2038">_fontPath : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="12542.5" x2="13485.5" y1="3953.3057" y2="3953.3057"/><ellipse cx="12552.5" cy="3964.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="50" x="12561.5" y="3972.2717">RlFont()</text><ellipse cx="12552.5" cy="3983.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="230" x="12561.5" y="3991.3396">RlFont(const std::string&amp; fontPath)</text><ellipse cx="12552.5" cy="4002.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="12561.5" y="4010.4075">RlFont(const int&amp; fontSize)</text><ellipse cx="12552.5" cy="4021.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="626" x="12561.5" y="4029.4754">RlFont(const std::string&amp; fontPath, const int&amp; fontSize, int* fontChars, const int&amp; glyphCount)</text><ellipse cx="12552.5" cy="4040.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="523" x="12561.5" y="4048.5433">RlFont(const image::RlImage&amp; image, const RlColor&amp; key, const int&amp; firstChar)</text><ellipse cx="12552.5" cy="4059.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="919" x="12561.5" y="4067.6113">RlFont(const std::string&amp; fileType, const unsigned char* fileData, int dataSize, const int&amp; fontSize, int* fontChars, const int&amp; glyphCount)</text><ellipse cx="12552.5" cy="4078.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="58" x="12561.5" y="4086.6792">~RlFont()</text><ellipse cx="12552.5" cy="4097.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="163" x="12561.5" y="4105.7471">getFont() : Font&amp; {query}</text><ellipse cx="12552.5" cy="4116.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="169" x="12561.5" y="4124.815">getFontSize() : int {query}</text><ellipse cx="12552.5" cy="4135.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="280" x="12561.5" y="4143.8829">getDefaultFont() : std::shared_ptr&lt;RlFont&gt;</text><ellipse cx="12552.5" cy="4154.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="233" x="12561.5" y="4162.9508">getFontPath() : std::string&amp; {query}</text></g><!--MD5=[a08e6e857956ab5fef281e57096395c2]
class raylib.text.RlText--><g id="elem_raylib.text.RlText"><rect codeLine="496" fill="#F1F1F1" height="620.0375" id="raylib.text.RlText" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="821" x="12854.5" y="2718.102"/><ellipse cx="13240.25" cy="2734.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M13240.0469,2740.602 Q13237.5625,2740.602 13236.2344,2738.9301 Q13234.9219,2737.2582 13234.9219,2734.102 Q13234.9219,2730.9457 13236.2344,2729.2895 Q13237.5625,2727.602 13240.0469,2727.602 Q13240.7656,2727.602 13241.4219,2727.7582 Q13242.0625,2727.9145 13242.625,2728.227 L13242.625,2731.0239 Q13242.2656,2730.6801 13241.9688,2730.4926 Q13241.6719,2730.2895 13241.4063,2730.1801 Q13241.0938,2730.0395 13240.7813,2729.977 Q13240.4844,2729.9145 13240.1719,2729.9145 Q13238.8438,2729.9145 13238.1563,2730.977 Q13237.4688,2732.0551 13237.4688,2734.102 Q13237.4688,2736.1801 13238.1563,2737.227 Q13238.8438,2738.2895 13240.1719,2738.2895 Q13240.8125,2738.2895 13241.4063,2738.0239 Q13241.7031,2737.8832 13241.9844,2737.6957 Q13242.2813,2737.5082 13242.625,2737.1801 L13242.625,2739.977 Q13242.0469,2740.2895 13241.4063,2740.4457 Q13240.7813,2740.602 13240.0469,2740.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="41" x="13260.75" y="2739.534">RlText</text><line style="stroke:#181818;stroke-width:0.5;" x1="12855.5" x2="13674.5" y1="2750.102" y2="2750.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12862.5" y="2758.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="12874.5" y="2769.0679">_color : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12862.5" y="2777.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="12874.5" y="2788.1358">_origin : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12862.5" y="2796.2378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="12874.5" y="2807.2038">_position : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12862.5" y="2815.3057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="12874.5" y="2826.2717">_fontSize : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12862.5" y="2834.3736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="12874.5" y="2845.3396">_rotation : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12862.5" y="2853.4416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="12874.5" y="2864.4075">_textSpacing : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12862.5" y="2872.5095"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="12874.5" y="2883.4754">_font : std::shared_ptr&lt;RlFont&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12862.5" y="2891.5774"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="12874.5" y="2902.5433">_text : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="12855.5" x2="13674.5" y1="2910.6453" y2="2910.6453"/><ellipse cx="12865.5" cy="2921.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="511" x="12874.5" y="2929.6113">RlText(const std::string&amp; text, const Vector2f&amp; position, const RlColor&amp; color)</text><ellipse cx="12865.5" cy="2940.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="720" x="12874.5" y="2948.6792">RlText(const std::string&amp; text, std::shared_ptr&lt;RlFont&gt;&amp; font, const Vector2f&amp; position, const RlColor&amp; color)</text><ellipse cx="12865.5" cy="2959.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="795" x="12874.5" y="2967.7471">RlText(const std::string&amp; text, const std::string&amp; fontPath, float fontSize, const Vector2f&amp; position, const RlColor&amp; color)</text><ellipse cx="12865.5" cy="2978.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="12874.5" y="2986.815">getColor() : RlColor&amp; {query}</text><ellipse cx="12865.5" cy="2997.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="177" x="12874.5" y="3005.8829">getSize() : Vector2f {query}</text><ellipse cx="12865.5" cy="3016.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="12874.5" y="3024.9508">getOrigin() : Vector2f&amp; {query}</text><ellipse cx="12865.5" cy="3036.0528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="12874.5" y="3044.0188">getPosition() : Vector2f&amp; {query}</text><ellipse cx="12865.5" cy="3055.1207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="181" x="12874.5" y="3063.0867">getFontSize() : float {query}</text><ellipse cx="12865.5" cy="3074.1887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="181" x="12874.5" y="3082.1546">getRotation() : float {query}</text><ellipse cx="12865.5" cy="3093.2566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="207" x="12874.5" y="3101.2225">getTextSpacing() : float {query}</text><ellipse cx="12865.5" cy="3112.3245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="165" x="12874.5" y="3120.2904">getWidth() : float {query}</text><ellipse cx="12865.5" cy="3131.3924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="294" x="12874.5" y="3139.3583">getFont() : std::shared_ptr&lt;RlFont&gt;&amp; {query}</text><ellipse cx="12865.5" cy="3150.4603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="202" x="12874.5" y="3158.4263">getText() : std::string&amp; {query}</text><ellipse cx="12865.5" cy="3169.5282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="238" x="12874.5" y="3177.4942">setColor(const RlColor&amp; color) : void</text><ellipse cx="12865.5" cy="3188.5962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="338" x="12874.5" y="3196.5621">setFont(const std::shared_ptr&lt;RlFont&gt;&amp; font) : void</text><ellipse cx="12865.5" cy="3207.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="212" x="12874.5" y="3215.63">setFontSize(float fontSize) : void</text><ellipse cx="12865.5" cy="3226.732" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="260" x="12874.5" y="3234.6979">setOrigin(const Vector2f&amp; origin) : void</text><ellipse cx="12865.5" cy="3245.7999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="211" x="12874.5" y="3253.7658">setPosition(float x, float y) : void</text><ellipse cx="12865.5" cy="3264.8678" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="254" x="12874.5" y="3272.8338">setPosition(const Vector2f&amp; pos) : void</text><ellipse cx="12865.5" cy="3283.9357" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="211" x="12874.5" y="3291.9017">setRotation(float rotation) : void</text><ellipse cx="12865.5" cy="3303.0037" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="244" x="12874.5" y="3310.9696">setText(const std::string&amp; text) : void</text><ellipse cx="12865.5" cy="3322.0716" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="263" x="12874.5" y="3330.0375">setTextSpacing(float textSpacing) : void</text></g><!--MD5=[414a3c818b9afa2f2bb0e0e7f1df53da]
class raylib.text.TextCodepoint--><g id="elem_raylib.text.TextCodepoint"><rect codeLine="529" fill="#F1F1F1" height="162.4075" id="raylib.text.TextCodepoint" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="465" x="12354.5" y="2947.102"/><ellipse cx="12534.25" cy="2963.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M12534.0469,2969.602 Q12531.5625,2969.602 12530.2344,2967.9301 Q12528.9219,2966.2582 12528.9219,2963.102 Q12528.9219,2959.9457 12530.2344,2958.2895 Q12531.5625,2956.602 12534.0469,2956.602 Q12534.7656,2956.602 12535.4219,2956.7582 Q12536.0625,2956.9145 12536.625,2957.227 L12536.625,2960.0239 Q12536.2656,2959.6801 12535.9688,2959.4926 Q12535.6719,2959.2895 12535.4063,2959.1801 Q12535.0938,2959.0395 12534.7813,2958.977 Q12534.4844,2958.9145 12534.1719,2958.9145 Q12532.8438,2958.9145 12532.1563,2959.977 Q12531.4688,2961.0551 12531.4688,2963.102 Q12531.4688,2965.1801 12532.1563,2966.227 Q12532.8438,2967.2895 12534.1719,2967.2895 Q12534.8125,2967.2895 12535.4063,2967.0239 Q12535.7031,2966.8832 12535.9844,2966.6957 Q12536.2813,2966.5082 12536.625,2966.1801 L12536.625,2968.977 Q12536.0469,2969.2895 12535.4063,2969.4457 Q12534.7813,2969.602 12534.0469,2969.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="12554.75" y="2968.534">TextCodepoint</text><line style="stroke:#181818;stroke-width:0.5;" x1="12355.5" x2="12818.5" y1="2979.102" y2="2979.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12362.5" y="2987.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="12374.5" y="2998.0679">_codepoints : std::vector&lt;int&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="12355.5" x2="12818.5" y1="3006.1699" y2="3006.1699"/><ellipse cx="12365.5" cy="3017.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="253" x="12374.5" y="3025.1358">TextCodepoint(const std::string&amp; text)</text><ellipse cx="12365.5" cy="3036.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="229" x="12374.5" y="3044.2038">getCodepointsCount() : int {query}</text><ellipse cx="12365.5" cy="3055.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="439" x="12374.5" y="3063.2717">codePointToUTF8(const int&amp; codepoint, int&amp; byteSize) : std::string</text><ellipse cx="12365.5" cy="3074.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="331" x="12374.5" y="3082.3396">toUTF8String(const int&amp; bytesLength) : std::string</text><ellipse cx="12365.5" cy="3093.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="285" x="12374.5" y="3101.4075">getCodepoints() : std::vector&lt;int&gt;&amp; {query}</text></g><!--MD5=[cd96a88098b489e1eff701340b7b474a]
class raylib.shader.RlShader--><g id="elem_raylib.shader.RlShader"><rect codeLine="540" fill="#F1F1F1" height="276.815" id="raylib.shader.RlShader" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="540" x="22690" y="1999.602"/><ellipse cx="22925.25" cy="2015.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M22925.0469,2022.102 Q22922.5625,2022.102 22921.2344,2020.4301 Q22919.9219,2018.7582 22919.9219,2015.602 Q22919.9219,2012.4457 22921.2344,2010.7895 Q22922.5625,2009.102 22925.0469,2009.102 Q22925.7656,2009.102 22926.4219,2009.2582 Q22927.0625,2009.4145 22927.625,2009.727 L22927.625,2012.5239 Q22927.2656,2012.1801 22926.9688,2011.9926 Q22926.6719,2011.7895 22926.4063,2011.6801 Q22926.0938,2011.5395 22925.7813,2011.477 Q22925.4844,2011.4145 22925.1719,2011.4145 Q22923.8438,2011.4145 22923.1563,2012.477 Q22922.4688,2013.5551 22922.4688,2015.602 Q22922.4688,2017.6801 22923.1563,2018.727 Q22923.8438,2019.7895 22925.1719,2019.7895 Q22925.8125,2019.7895 22926.4063,2019.5239 Q22926.7031,2019.3832 22926.9844,2019.1957 Q22927.2813,2019.0082 22927.625,2018.6801 L22927.625,2021.477 Q22927.0469,2021.7895 22926.4063,2021.9457 Q22925.7813,2022.102 22925.0469,2022.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="61" x="22945.75" y="2021.034">RlShader</text><line style="stroke:#181818;stroke-width:0.5;" x1="22691" x2="23229" y1="2031.602" y2="2031.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22698" y="2039.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="22710" y="2050.5679">_shader : Shader</text><line style="stroke:#181818;stroke-width:0.5;" x1="22691" x2="23229" y1="2058.6699" y2="2058.6699"/><ellipse cx="22701" cy="2069.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="22710" y="2077.6358">RlShader()</text><ellipse cx="22701" cy="2088.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="22710" y="2096.7038">~RlShader()</text><ellipse cx="22701" cy="2107.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="22710" y="2115.7717">getShader() : Shader&amp; {query}</text><ellipse cx="22701" cy="2126.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="333" x="22710" y="2134.8396">getLocation(const std::string&amp; uniformName) : int</text><ellipse cx="22701" cy="2145.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="354" x="22710" y="2153.9075">getLocationAttrib(const std::string&amp; attribName) : int</text><ellipse cx="22701" cy="2165.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="483" x="22710" y="2172.9754">load(const std::string&amp; vsFileName, const std::string&amp; fsFileName) : void</text><ellipse cx="22701" cy="2184.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="514" x="22710" y="2192.0433">loadFromMemory(const std::string&amp; vsCode, const std::string&amp; fsCode) : void</text><ellipse cx="22701" cy="2203.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="424" x="22710" y="2211.1113">setValue(int locIndex, const void* value, int uniformType) : void</text><ellipse cx="22701" cy="2222.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="358" x="22710" y="2230.1792">setValueMatrix(int locIndex, const Matrix&amp; mat) : void</text><ellipse cx="22701" cy="2241.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="465" x="22710" y="2249.2471">setValueTexture(int locIndex, const texture::RlTexture&amp; texture) : void</text><ellipse cx="22701" cy="2260.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="500" x="22710" y="2268.315">setValueV(int locIndex, const void* value, int uniformType, int count) : void</text></g><!--MD5=[f5666ac8e2832b2e801c802f596759bc]
class raylib.image.ImageDrawHelper--><g id="elem_raylib.image.ImageDrawHelper"><rect codeLine="557" fill="#F1F1F1" height="314.9508" id="raylib.image.ImageDrawHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1181" x="9108.5" y="3856.102"/><ellipse cx="9633.25" cy="3872.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M9633.0469,3878.602 Q9630.5625,3878.602 9629.2344,3876.9301 Q9627.9219,3875.2582 9627.9219,3872.102 Q9627.9219,3868.9457 9629.2344,3867.2895 Q9630.5625,3865.602 9633.0469,3865.602 Q9633.7656,3865.602 9634.4219,3865.7582 Q9635.0625,3865.9145 9635.625,3866.227 L9635.625,3869.0239 Q9635.2656,3868.6801 9634.9688,3868.4926 Q9634.6719,3868.2895 9634.4063,3868.1801 Q9634.0938,3868.0395 9633.7813,3867.977 Q9633.4844,3867.9145 9633.1719,3867.9145 Q9631.8438,3867.9145 9631.1563,3868.977 Q9630.4688,3870.0551 9630.4688,3872.102 Q9630.4688,3874.1801 9631.1563,3875.227 Q9631.8438,3876.2895 9633.1719,3876.2895 Q9633.8125,3876.2895 9634.4063,3876.0239 Q9634.7031,3875.8832 9634.9844,3875.6957 Q9635.2813,3875.5082 9635.625,3875.1801 L9635.625,3877.977 Q9635.0469,3878.2895 9634.4063,3878.4457 Q9633.7813,3878.602 9633.0469,3878.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="123" x="9653.75" y="3877.534">ImageDrawHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="9109.5" x2="10288.5" y1="3888.102" y2="3888.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="9109.5" x2="10288.5" y1="3896.102" y2="3896.102"/><ellipse cx="9119.5" cy="3907.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="446" x="9128.5" y="3915.0679">clearBackground(image::RlImage&amp; dst, const RlColor&amp; color) : void</text><ellipse cx="9119.5" cy="3926.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="639" x="9128.5" y="3934.1358">drawCircle(image::RlImage&amp; dst, int centerX, int centerY, int radius, const RlColor&amp; color) : void</text><ellipse cx="9119.5" cy="3945.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="637" x="9128.5" y="3953.2038">drawCircle(image::RlImage&amp; dst, const Vector2f&amp; center, int radius, const RlColor&amp; color) : void</text><ellipse cx="9119.5" cy="3964.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="934" x="9128.5" y="3972.2717">drawImage(image::RlImage&amp; dst, const image::RlImage&amp; src, const Rectangle&amp; srcRec, const Rectangle&amp; dstRec, const RlColor&amp; tint) : void</text><ellipse cx="9119.5" cy="3983.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="801" x="9128.5" y="3991.3396">drawImageText(image::RlImage&amp; dst, const std::string&amp; text, int posX, int posY, int fontSize, const RlColor&amp; color) : void</text><ellipse cx="9119.5" cy="4002.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1155" x="9128.5" y="4010.4075">drawImageText(image::RlImage&amp; dst, const raylib::text::RlFont&amp; font, const std::string&amp; text, const Vector2f&amp; position, float fontSize, float spacing, const RlColor&amp; tint) : void</text><ellipse cx="9119.5" cy="4021.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="752" x="9128.5" y="4029.4754">drawLine(image::RlImage&amp; dst, int startPosX, int startPosY, int endPosX, int endPosY, const RlColor&amp; color) : void</text><ellipse cx="9119.5" cy="4040.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="685" x="9128.5" y="4048.5433">drawLine(image::RlImage&amp; dst, const Vector2f&amp; start, const Vector2f&amp; end, const RlColor&amp; color) : void</text><ellipse cx="9119.5" cy="4059.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="521" x="9128.5" y="4067.6113">drawPixel(image::RlImage&amp; dst, int posX, int posY, const RlColor&amp; color) : void</text><ellipse cx="9119.5" cy="4078.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="568" x="9128.5" y="4086.6792">drawPixel(image::RlImage&amp; dst, const Vector2f&amp; position, const RlColor&amp; color) : void</text><ellipse cx="9119.5" cy="4097.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="699" x="9128.5" y="4105.7471">drawRectangle(image::RlImage&amp; dst, int posX, int posY, int width, int height, const RlColor&amp; color) : void</text><ellipse cx="9119.5" cy="4116.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="747" x="9128.5" y="4124.815">drawRectangle(image::RlImage&amp; dst, const Vector2f&amp; position, const Vector2f&amp; size, const RlColor&amp; color) : void</text><ellipse cx="9119.5" cy="4135.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="680" x="9128.5" y="4143.8829">drawRectangleLines(image::RlImage&amp; dst, const Rectangle&amp; rec, int thick, const RlColor&amp; color) : void</text><ellipse cx="9119.5" cy="4154.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="607" x="9128.5" y="4162.9508">drawRectangleRec(image::RlImage&amp; dst, const Rectangle&amp; rec, const RlColor&amp; color) : void</text></g><!--MD5=[7d4cfb9bd6499976d6afcdf8cdcf205c]
class raylib.image.ImageGenerator--><g id="elem_raylib.image.ImageGenerator"><rect codeLine="574" fill="#F1F1F1" height="181.4754" id="raylib.image.ImageGenerator" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1002" x="8071" y="3923.102"/><ellipse cx="8512.25" cy="3939.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M8512.0469,3945.602 Q8509.5625,3945.602 8508.2344,3943.9301 Q8506.9219,3942.2582 8506.9219,3939.102 Q8506.9219,3935.9457 8508.2344,3934.2895 Q8509.5625,3932.602 8512.0469,3932.602 Q8512.7656,3932.602 8513.4219,3932.7582 Q8514.0625,3932.9145 8514.625,3933.227 L8514.625,3936.0239 Q8514.2656,3935.6801 8513.9688,3935.4926 Q8513.6719,3935.2895 8513.4063,3935.1801 Q8513.0938,3935.0395 8512.7813,3934.977 Q8512.4844,3934.9145 8512.1719,3934.9145 Q8510.8438,3934.9145 8510.1563,3935.977 Q8509.4688,3937.0551 8509.4688,3939.102 Q8509.4688,3941.1801 8510.1563,3942.227 Q8510.8438,3943.2895 8512.1719,3943.2895 Q8512.8125,3943.2895 8513.4063,3943.0239 Q8513.7031,3942.8832 8513.9844,3942.6957 Q8514.2813,3942.5082 8514.625,3942.1801 L8514.625,3944.977 Q8514.0469,3945.2895 8513.4063,3945.4457 Q8512.7813,3945.602 8512.0469,3945.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="8532.75" y="3944.534">ImageGenerator</text><line style="stroke:#181818;stroke-width:0.5;" x1="8072" x2="9072" y1="3955.102" y2="3955.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="8072" x2="9072" y1="3963.102" y2="3963.102"/><ellipse cx="8082" cy="3974.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="559" x="8091" y="3982.0679">genImageCellular(const int&amp; width, const int&amp; height, const int&amp; tileSize) : RlImage</text><ellipse cx="8082" cy="3993.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="976" x="8091" y="4001.1358">genImageChecked(const int&amp; width, const int&amp; height, const int&amp; checksX, const int&amp; checksY, const RlColor&amp; col1, const RlColor&amp; col2) : RlImage</text><ellipse cx="8082" cy="4012.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="557" x="8091" y="4020.2038">genImageColor(const int&amp; width, const int&amp; height, const RlColor&amp; color) : RlImage</text><ellipse cx="8082" cy="4031.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="723" x="8091" y="4039.2717">genImageGradientH(const int&amp; width, const int&amp; height, const RlColor&amp; left, const RlColor&amp; right) : RlImage</text><ellipse cx="8082" cy="4050.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="863" x="8091" y="4058.3396">genImageGradientRadial(const int&amp; width, const int&amp; height, float density, const RlColor&amp; inner, const RlColor&amp; outer) : RlImage</text><ellipse cx="8082" cy="4069.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="736" x="8091" y="4077.4075">genImageGradientV(const int&amp; width, const int&amp; height, const RlColor&amp; top, const RlColor&amp; bottom) : RlImage</text><ellipse cx="8082" cy="4088.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="537" x="8091" y="4096.4754">genImageWhiteNoise(const int&amp; width, const int&amp; height, float factor) : RlImage</text></g><!--MD5=[ec2be861a767ef9e64d0fbd9dd84831a]
class raylib.image.RlImage--><g id="elem_raylib.image.RlImage"><rect codeLine="584" fill="#F1F1F1" height="772.5808" id="raylib.image.RlImage" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="634" x="7402" y="3627.102"/><ellipse cx="7686.75" cy="3643.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M7686.5469,3649.602 Q7684.0625,3649.602 7682.7344,3647.9301 Q7681.4219,3646.2582 7681.4219,3643.102 Q7681.4219,3639.9457 7682.7344,3638.2895 Q7684.0625,3636.602 7686.5469,3636.602 Q7687.2656,3636.602 7687.9219,3636.7582 Q7688.5625,3636.9145 7689.125,3637.227 L7689.125,3640.0239 Q7688.7656,3639.6801 7688.4688,3639.4926 Q7688.1719,3639.2895 7687.9063,3639.1801 Q7687.5938,3639.0395 7687.2813,3638.977 Q7686.9844,3638.9145 7686.6719,3638.9145 Q7685.3438,3638.9145 7684.6563,3639.977 Q7683.9688,3641.0551 7683.9688,3643.102 Q7683.9688,3645.1801 7684.6563,3646.227 Q7685.3438,3647.2895 7686.6719,3647.2895 Q7687.3125,3647.2895 7687.9063,3647.0239 Q7688.2031,3646.8832 7688.4844,3646.6957 Q7688.7813,3646.5082 7689.125,3646.1801 L7689.125,3648.977 Q7688.5469,3649.2895 7687.9063,3649.4457 Q7687.2813,3649.602 7686.5469,3649.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="7707.25" y="3648.534">RlImage</text><line style="stroke:#181818;stroke-width:0.5;" x1="7403" x2="8035" y1="3659.102" y2="3659.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7410" y="3667.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="7422" y="3678.0679">_image : Image</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7410" y="3686.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="7422" y="3697.1358">_frameCount : int</text><line style="stroke:#181818;stroke-width:0.5;" x1="7403" x2="8035" y1="3705.2378" y2="3705.2378"/><ellipse cx="7413" cy="3716.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="7422" y="3724.2038">RlImage(const Image&amp; image)</text><ellipse cx="7413" cy="3735.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="7422" y="3743.2717">RlImage(const Image&amp; image, int frameCount)</text><ellipse cx="7413" cy="3754.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="7422" y="3762.3396">~RlImage()</text><ellipse cx="7413" cy="3773.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="191" x="7422" y="3781.4075">getImage() : Image&amp; {query}</text><ellipse cx="7413" cy="3792.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="7422" y="3800.4754">getImage() : Image&amp;</text><ellipse cx="7413" cy="3811.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="336" x="7422" y="3819.5433">getImageAlphaBorder(float threshold) : Rectangle</text><ellipse cx="7413" cy="3830.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="7422" y="3838.6113">getImageColor(int x, int y) : RlColor</text><ellipse cx="7413" cy="3849.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="7422" y="3857.6792">copy() : RlImage</text><ellipse cx="7413" cy="3868.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="286" x="7422" y="3876.7471">subImage(const Rectangle&amp; rec) : RlImage</text><ellipse cx="7413" cy="3887.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="263" x="7422" y="3895.815">save(const std::string&amp; fileName) : bool</text><ellipse cx="7413" cy="3906.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="7422" y="3914.8829">saveAsCode(const std::string&amp; fileName) : bool</text><ellipse cx="7413" cy="3925.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="7422" y="3933.9508">getFrameCount() : int&amp; {query}</text><ellipse cx="7413" cy="3945.0528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="268" x="7422" y="3953.0188">loadImageColors() : std::vector&lt;RlColor&gt;</text><ellipse cx="7413" cy="3964.1207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="395" x="7422" y="3972.0867">loadImagePalette(int maxPaletteSize) : std::vector&lt;RlColor&gt;</text><ellipse cx="7413" cy="3983.1887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="363" x="7422" y="3991.1546">alphaClear(const RlColor&amp; color, float threshold) : void</text><ellipse cx="7413" cy="4002.2566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="217" x="7422" y="4010.2225">alphaCrop(float threshold) : void</text><ellipse cx="7413" cy="4021.3245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="304" x="7422" y="4029.2904">alphaMask(const RlImage&amp; alphaMask) : void</text><ellipse cx="7413" cy="4040.3924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="163" x="7422" y="4048.3583">alphaPremultiply() : void</text><ellipse cx="7413" cy="4059.4603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="242" x="7422" y="4067.4263">changeFormat(int newFormat) : void</text><ellipse cx="7413" cy="4078.5282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="249" x="7422" y="4086.4942">colorBrightness(int brightness) : void</text><ellipse cx="7413" cy="4097.5962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="227" x="7422" y="4105.5621">colorContrast(float contrast) : void</text><ellipse cx="7413" cy="4116.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="146" x="7422" y="4124.63">colorGrayscale() : void</text><ellipse cx="7413" cy="4135.732" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="121" x="7422" y="4143.6979">colorInvert() : void</text><ellipse cx="7413" cy="4154.7999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="429" x="7422" y="4162.7658">colorReplace(const RlColor&amp; color, const RlColor&amp; replace) : void</text><ellipse cx="7413" cy="4173.8678" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="242" x="7422" y="4181.8338">colorTint(const RlColor&amp; color) : void</text><ellipse cx="7413" cy="4192.9357" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="229" x="7422" y="4200.9017">crop(const Rectangle&amp; crop) : void</text><ellipse cx="7413" cy="4212.0037" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="341" x="7422" y="4219.9696">dither(int rBpp, int gBpp, int bBpp, int aBpp) : void</text><ellipse cx="7413" cy="4231.0716" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="139" x="7422" y="4239.0375">flipHorizontal() : void</text><ellipse cx="7413" cy="4250.1395" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="7422" y="4258.1054">flipVertical() : void</text><ellipse cx="7413" cy="4269.2074" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="7422" y="4277.1733">mipmaps() : void</text><ellipse cx="7413" cy="4288.2753" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="281" x="7422" y="4296.2413">resize(int newWidth, int newHeight) : void</text><ellipse cx="7413" cy="4307.3432" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="608" x="7422" y="4315.3092">resizeCanvas(int newWidth, int newHeight, int offsetX, int offsetY, const RlColor&amp; fill) : void</text><ellipse cx="7413" cy="4326.4112" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="406" x="7422" y="4334.3771">resizeNearesetNeighbor(int newWidth, int newHeight) : void</text><ellipse cx="7413" cy="4345.4791" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="7422" y="4353.445">rotateClockwise() : void</text><ellipse cx="7413" cy="4364.547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="207" x="7422" y="4372.5129">rotateCounterClockwise() : void</text><ellipse cx="7413" cy="4383.6149" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="7422" y="4391.5808">toPot(const RlColor&amp; fill) : void</text></g><!--MD5=[b21ff7261f85c8ade7d69448b17bb37f]
class raylib.helper.AudioDeviceHelper--><g id="elem_raylib.helper.AudioDeviceHelper"><rect codeLine="627" fill="#F1F1F1" height="143.3396" id="raylib.helper.AudioDeviceHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="274" x="15596" y="2066.602"/><ellipse cx="15664.75" cy="2082.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M15664.5469,2089.102 Q15662.0625,2089.102 15660.7344,2087.4301 Q15659.4219,2085.7582 15659.4219,2082.602 Q15659.4219,2079.4457 15660.7344,2077.7895 Q15662.0625,2076.102 15664.5469,2076.102 Q15665.2656,2076.102 15665.9219,2076.2582 Q15666.5625,2076.4145 15667.125,2076.727 L15667.125,2079.5239 Q15666.7656,2079.1801 15666.4688,2078.9926 Q15666.1719,2078.7895 15665.9063,2078.6801 Q15665.5938,2078.5395 15665.2813,2078.477 Q15664.9844,2078.4145 15664.6719,2078.4145 Q15663.3438,2078.4145 15662.6563,2079.477 Q15661.9688,2080.5551 15661.9688,2082.602 Q15661.9688,2084.6801 15662.6563,2085.727 Q15663.3438,2086.7895 15664.6719,2086.7895 Q15665.3125,2086.7895 15665.9063,2086.5239 Q15666.2031,2086.3832 15666.4844,2086.1957 Q15666.7813,2086.0082 15667.125,2085.6801 L15667.125,2088.477 Q15666.5469,2088.7895 15665.9063,2088.9457 Q15665.2813,2089.102 15664.5469,2089.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="15685.25" y="2088.034">AudioDeviceHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="15597" x2="15869" y1="2098.602" y2="2098.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15604" y="2106.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="192" x="15616" y="2117.5679">_audioDeviceInit : static bool</text><line style="stroke:#181818;stroke-width:0.5;" x1="15597" x2="15869" y1="2125.6699" y2="2125.6699"/><ellipse cx="15607" cy="2136.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="184" x="15616" y="2144.6358">isAudioDeviceReady() : bool</text><ellipse cx="15607" cy="2155.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="165" x="15616" y="2163.7038">closeAudioDevice() : void</text><ellipse cx="15607" cy="2174.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="153" x="15616" y="2182.7717">initAudioDevice() : void</text><ellipse cx="15607" cy="2193.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="248" x="15616" y="2201.8396">setMasterVolume(float volume) : void</text></g><!--MD5=[14b0dacecc39382ff07f69a7fe67296b]
class raylib.helper.CameraHelper--><g id="elem_raylib.helper.CameraHelper"><rect codeLine="635" fill="#F1F1F1" height="143.3396" id="raylib.helper.CameraHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="674" x="15905" y="2066.602"/><ellipse cx="16189.25" cy="2082.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M16189.0469,2089.102 Q16186.5625,2089.102 16185.2344,2087.4301 Q16183.9219,2085.7582 16183.9219,2082.602 Q16183.9219,2079.4457 16185.2344,2077.7895 Q16186.5625,2076.102 16189.0469,2076.102 Q16189.7656,2076.102 16190.4219,2076.2582 Q16191.0625,2076.4145 16191.625,2076.727 L16191.625,2079.5239 Q16191.2656,2079.1801 16190.9688,2078.9926 Q16190.6719,2078.7895 16190.4063,2078.6801 Q16190.0938,2078.5395 16189.7813,2078.477 Q16189.4844,2078.4145 16189.1719,2078.4145 Q16187.8438,2078.4145 16187.1563,2079.477 Q16186.4688,2080.5551 16186.4688,2082.602 Q16186.4688,2084.6801 16187.1563,2085.727 Q16187.8438,2086.7895 16189.1719,2086.7895 Q16189.8125,2086.7895 16190.4063,2086.5239 Q16190.7031,2086.3832 16190.9844,2086.1957 Q16191.2813,2086.0082 16191.625,2085.6801 L16191.625,2088.477 Q16191.0469,2088.7895 16190.4063,2088.9457 Q16189.7813,2089.102 16189.0469,2089.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="16209.75" y="2088.034">CameraHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="15906" x2="16578" y1="2098.602" y2="2098.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="15906" x2="16578" y1="2106.602" y2="2106.602"/><ellipse cx="15916" cy="2117.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="197" x="15925" y="2125.5679">setAltControl(int keyAlt) : void</text><ellipse cx="15916" cy="2136.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="517" x="15925" y="2144.6358">setCameraMode(const RlCamera&amp; camera, const CameraMode&amp; mode) : void</text><ellipse cx="15916" cy="2155.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="648" x="15925" y="2163.7038">setMoveControls(int keyFront, int keyBack, int keyRight, int keyLeft, int keyUp, int keyDown) : void</text><ellipse cx="15916" cy="2174.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="211" x="15925" y="2182.7717">setPanControl(int keyPan) : void</text><ellipse cx="15916" cy="2193.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="337" x="15925" y="2201.8396">setSmoothZoomControl(int keySmoothZoom) : void</text></g><!--MD5=[dfc8580c76ca14c833565e9202216036]
class raylib.helper.ColorHelper--><g id="elem_raylib.helper.ColorHelper"><rect codeLine="643" fill="#F1F1F1" height="219.6113" id="raylib.helper.ColorHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="591" x="16614.5" y="2028.102"/><ellipse cx="16865.75" cy="2044.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M16865.5469,2050.602 Q16863.0625,2050.602 16861.7344,2048.9301 Q16860.4219,2047.2582 16860.4219,2044.102 Q16860.4219,2040.9457 16861.7344,2039.2895 Q16863.0625,2037.602 16865.5469,2037.602 Q16866.2656,2037.602 16866.9219,2037.7582 Q16867.5625,2037.9145 16868.125,2038.227 L16868.125,2041.0239 Q16867.7656,2040.6801 16867.4688,2040.4926 Q16867.1719,2040.2895 16866.9063,2040.1801 Q16866.5938,2040.0395 16866.2813,2039.977 Q16865.9844,2039.9145 16865.6719,2039.9145 Q16864.3438,2039.9145 16863.6563,2040.977 Q16862.9688,2042.0551 16862.9688,2044.102 Q16862.9688,2046.1801 16863.6563,2047.227 Q16864.3438,2048.2895 16865.6719,2048.2895 Q16866.3125,2048.2895 16866.9063,2048.0239 Q16867.2031,2047.8832 16867.4844,2047.6957 Q16867.7813,2047.5082 16868.125,2047.1801 L16868.125,2049.977 Q16867.5469,2050.2895 16866.9063,2050.4457 Q16866.2813,2050.602 16865.5469,2050.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="16886.25" y="2049.534">ColorHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="16615.5" x2="17204.5" y1="2060.102" y2="2060.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="16615.5" x2="17204.5" y1="2068.102" y2="2068.102"/><ellipse cx="16625.5" cy="2079.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="355" x="16634.5" y="2087.0679">colorAlpha(const RlColor&amp; color, float alpha) : RlColor</text><ellipse cx="16625.5" cy="2098.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="565" x="16634.5" y="2106.1358">colorAlphaBlend(const RlColor&amp; dst, const RlColor&amp; src, const RlColor&amp; tint) : RlColor</text><ellipse cx="16625.5" cy="2117.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="410" x="16634.5" y="2125.2038">colorFromHSV(float hue, float saturation, float value) : RlColor</text><ellipse cx="16625.5" cy="2136.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="433" x="16634.5" y="2144.2717">colorFromNormalized(const Vector4f&amp; normalizedColor) : RlColor</text><ellipse cx="16625.5" cy="2155.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="276" x="16634.5" y="2163.3396">getColor(unsigned int hexValue) : RlColor</text><ellipse cx="16625.5" cy="2174.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="310" x="16634.5" y="2182.4075">getPixelColor(void* srcPtr, int format) : RlColor</text><ellipse cx="16625.5" cy="2193.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="285" x="16634.5" y="2201.4754">colorToHSV(const RlColor&amp; color) : Vector3f</text><ellipse cx="16625.5" cy="2212.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="358" x="16634.5" y="2220.5433">getPixelDataSize(int width, int height, int format) : int</text><ellipse cx="16625.5" cy="2231.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="432" x="16634.5" y="2239.6113">setPixelColor(void* dstPtr, const RlColor&amp; color, int format) : void</text></g><!--MD5=[054dc182820133524a250f1982d089ae]
class raylib.helper.CoreHelper--><g id="elem_raylib.helper.CoreHelper"><rect codeLine="655" fill="#F1F1F1" height="181.4754" id="raylib.helper.CoreHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="459" x="17240.5" y="2047.602"/><ellipse cx="17427.75" cy="2063.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M17427.5469,2070.102 Q17425.0625,2070.102 17423.7344,2068.4301 Q17422.4219,2066.7582 17422.4219,2063.602 Q17422.4219,2060.4457 17423.7344,2058.7895 Q17425.0625,2057.102 17427.5469,2057.102 Q17428.2656,2057.102 17428.9219,2057.2582 Q17429.5625,2057.4145 17430.125,2057.727 L17430.125,2060.5239 Q17429.7656,2060.1801 17429.4688,2059.9926 Q17429.1719,2059.7895 17428.9063,2059.6801 Q17428.5938,2059.5395 17428.2813,2059.477 Q17427.9844,2059.4145 17427.6719,2059.4145 Q17426.3438,2059.4145 17425.6563,2060.477 Q17424.9688,2061.5551 17424.9688,2063.602 Q17424.9688,2065.6801 17425.6563,2066.727 Q17426.3438,2067.7895 17427.6719,2067.7895 Q17428.3125,2067.7895 17428.9063,2067.5239 Q17429.2031,2067.3832 17429.4844,2067.1957 Q17429.7813,2067.0082 17430.125,2066.6801 L17430.125,2069.477 Q17429.5469,2069.7895 17428.9063,2069.9457 Q17428.2813,2070.102 17427.5469,2070.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="17448.25" y="2069.034">CoreHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="17241.5" x2="17698.5" y1="2079.602" y2="2079.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="17241.5" x2="17698.5" y1="2087.602" y2="2087.602"/><ellipse cx="17251.5" cy="2098.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="433" x="17260.5" y="2106.5679">loadVrStereoConfig(const VrDeviceInfo&amp; device) : VrStereoConfig</text><ellipse cx="17251.5" cy="2117.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="122" x="17260.5" y="2125.6358">getTime() : double</text><ellipse cx="17251.5" cy="2136.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="147" x="17260.5" y="2144.7038">getFrameTime() : float</text><ellipse cx="17251.5" cy="2155.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="83" x="17260.5" y="2163.7717">getFPS() : int</text><ellipse cx="17251.5" cy="2174.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="250" x="17260.5" y="2182.8396">openURL(const std::string&amp; url) : void</text><ellipse cx="17251.5" cy="2193.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="213" x="17260.5" y="2201.9075">setFramerateLimit(int fps) : void</text><ellipse cx="17251.5" cy="2213.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="393" x="17260.5" y="2220.9754">unloadVrStereoConfig(const VrStereoConfig&amp; config) : void</text></g><!--MD5=[4cf40de1822577f09e71119bf2324adf]
class raylib.helper.FileHelper--><g id="elem_raylib.helper.FileHelper"><rect codeLine="665" fill="#F1F1F1" height="391.2225" id="raylib.helper.FileHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="972" x="15596" y="2832.602"/><ellipse cx="16043.75" cy="2848.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M16043.5469,2855.102 Q16041.0625,2855.102 16039.7344,2853.4301 Q16038.4219,2851.7582 16038.4219,2848.602 Q16038.4219,2845.4457 16039.7344,2843.7895 Q16041.0625,2842.102 16043.5469,2842.102 Q16044.2656,2842.102 16044.9219,2842.2582 Q16045.5625,2842.4145 16046.125,2842.727 L16046.125,2845.5239 Q16045.7656,2845.1801 16045.4688,2844.9926 Q16045.1719,2844.7895 16044.9063,2844.6801 Q16044.5938,2844.5395 16044.2813,2844.477 Q16043.9844,2844.4145 16043.6719,2844.4145 Q16042.3438,2844.4145 16041.6563,2845.477 Q16040.9688,2846.5551 16040.9688,2848.602 Q16040.9688,2850.6801 16041.6563,2851.727 Q16042.3438,2852.7895 16043.6719,2852.7895 Q16044.3125,2852.7895 16044.9063,2852.5239 Q16045.2031,2852.3832 16045.4844,2852.1957 Q16045.7813,2852.0082 16046.125,2851.6801 L16046.125,2854.477 Q16045.5469,2854.7895 16044.9063,2854.9457 Q16044.2813,2855.102 16043.5469,2855.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="68" x="16064.25" y="2854.034">FileHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="15597" x2="16567" y1="2864.602" y2="2864.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="15597" x2="16567" y1="2872.602" y2="2872.602"/><ellipse cx="15607" cy="2883.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="319" x="15616" y="2891.5679">directoryExists(const std::string&amp; dirPath) : bool</text><ellipse cx="15607" cy="2902.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="292" x="15616" y="2910.6358">fileExists(const std::string&amp; fileName) : bool</text><ellipse cx="15607" cy="2921.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="142" x="15616" y="2929.7038">isFileDropped() : bool</text><ellipse cx="15607" cy="2940.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="483" x="15616" y="2948.7717">isFileExtension(const std::string&amp; fileName, const std::string&amp; ext) : bool</text><ellipse cx="15607" cy="2959.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="470" x="15616" y="2967.8396">saveFileText(const std::string&amp; fileName, const std::string&amp; text) : bool</text><ellipse cx="15607" cy="2978.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="376" x="15616" y="2986.9075">getFileModTime(const std::string&amp; fileName) : long long</text><ellipse cx="15607" cy="2998.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="376" x="15616" y="3005.9754">getDirectoryPath(const std::string&amp; filePath) : std::string</text><ellipse cx="15607" cy="3017.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="383" x="15616" y="3025.0433">getFileExtension(const std::string&amp; fileName) : std::string</text><ellipse cx="15607" cy="3036.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="348" x="15616" y="3044.1113">getFileName(const std::string&amp; filePath) : std::string</text><ellipse cx="15607" cy="3055.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="421" x="15616" y="3063.1792">getFileNameWithoutExt(const std::string&amp; filePath) : std::string</text><ellipse cx="15607" cy="3074.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="403" x="15616" y="3082.2471">getPrevDirectoryPath(const std::string&amp; dirPath) : std::string</text><ellipse cx="15607" cy="3093.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="228" x="15616" y="3101.315">getWorkingDirectory() : std::string</text><ellipse cx="15607" cy="3112.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="353" x="15616" y="3120.3829">loadFileText(const std::string&amp; fileName) : std::string</text><ellipse cx="15607" cy="3131.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="460" x="15616" y="3139.4508">getDirectoryFiles(const std::string&amp; dirPath) : std::vector&lt;std::string&gt;</text><ellipse cx="15607" cy="3150.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="946" x="15616" y="3158.5188">getDirectoryFiles(const std::string&amp; dirPath, const std::function&lt;bool ( const std::string&amp; fileName )&gt;&amp; filterFunction) : std::vector&lt;std::string&gt;</text><ellipse cx="15607" cy="3169.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="286" x="15616" y="3177.5867">getDroppedFiles() : std::vector&lt;std::string&gt;</text><ellipse cx="15607" cy="3188.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="471" x="15616" y="3196.6546">loadFileData(const std::string&amp; fileName) : std::vector&lt;unsigned char&gt;</text><ellipse cx="15607" cy="3207.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="301" x="15616" y="3215.7225">changeDirectory(const std::string&amp; dir) : void</text></g><!--MD5=[54cc7663e54c6d090332d0a9a17cb499]
class raylib.helper.ImageHelper--><g id="elem_raylib.helper.ImageHelper"><rect codeLine="686" fill="#F1F1F1" height="219.6113" id="raylib.helper.ImageHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="999" x="16603.5" y="2918.102"/><ellipse cx="17054.75" cy="2934.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M17054.5469,2940.602 Q17052.0625,2940.602 17050.7344,2938.9301 Q17049.4219,2937.2582 17049.4219,2934.102 Q17049.4219,2930.9457 17050.7344,2929.2895 Q17052.0625,2927.602 17054.5469,2927.602 Q17055.2656,2927.602 17055.9219,2927.7582 Q17056.5625,2927.9145 17057.125,2928.227 L17057.125,2931.0239 Q17056.7656,2930.6801 17056.4688,2930.4926 Q17056.1719,2930.2895 17055.9063,2930.1801 Q17055.5938,2930.0395 17055.2813,2929.977 Q17054.9844,2929.9145 17054.6719,2929.9145 Q17053.3438,2929.9145 17052.6563,2930.977 Q17051.9688,2932.0551 17051.9688,2934.102 Q17051.9688,2936.1801 17052.6563,2937.227 Q17053.3438,2938.2895 17054.6719,2938.2895 Q17055.3125,2938.2895 17055.9063,2938.0239 Q17056.2031,2937.8832 17056.4844,2937.6957 Q17056.7813,2937.5082 17057.125,2937.1801 L17057.125,2939.977 Q17056.5469,2940.2895 17055.9063,2940.4457 Q17055.2813,2940.602 17054.5469,2940.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="88" x="17075.25" y="2939.534">ImageHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="16604.5" x2="17601.5" y1="2950.102" y2="2950.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="16604.5" x2="17601.5" y1="2958.102" y2="2958.102"/><ellipse cx="16614.5" cy="2969.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="607" x="16623.5" y="2977.0679">fromText(const std::string&amp; text, int fontSize, const RlColor&amp; color) : raylib::image::RlImage</text><ellipse cx="16614.5" cy="2988.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="914" x="16623.5" y="2996.1358">fromText(const raylib::text::RlFont&amp; font, const std::string&amp; text, float fontSize, float spacing, const RlColor&amp; tint) : raylib::image::RlImage</text><ellipse cx="16614.5" cy="3007.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="973" x="16623.5" y="3015.2038">genImageFontAtlas(const GlyphInfo* chars, Rectangle** recs, int glyphCount, int fontSize, int padding, int packMethod) : raylib::image::RlImage</text><ellipse cx="16614.5" cy="3026.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="385" x="16623.5" y="3034.2717">load(const std::string&amp; fileName) : raylib::image::RlImage</text><ellipse cx="16614.5" cy="3045.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="420" x="16623.5" y="3053.3396">loadAnim(const std::string&amp; fileName) : raylib::image::RlImage</text><ellipse cx="16614.5" cy="3064.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="763" x="16623.5" y="3072.4075">loadFromMemory(const std::string&amp; fileType, const unsigned char* fileData, int dataSize) : raylib::image::RlImage</text><ellipse cx="16614.5" cy="3083.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="281" x="16623.5" y="3091.4754">loadFromScreen() : raylib::image::RlImage</text><ellipse cx="16614.5" cy="3102.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="457" x="16623.5" y="3110.5433">loadFromTexture(const Texture2D&amp; texture) : raylib::image::RlImage</text><ellipse cx="16614.5" cy="3121.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="735" x="16623.5" y="3129.6113">loadRaw(const std::string&amp; fileName, int width, int height, int format, int headerSize) : raylib::image::RlImage</text></g><!--MD5=[a046b8fec0eb06a5cc4cec55ec71fd8f]
class raylib.helper.TextHelper--><g id="elem_raylib.helper.TextHelper"><rect codeLine="698" fill="#F1F1F1" height="162.4075" id="raylib.helper.TextHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="737" x="17637.5" y="2947.102"/><ellipse cx="17965.25" cy="2963.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M17965.0469,2969.602 Q17962.5625,2969.602 17961.2344,2967.9301 Q17959.9219,2966.2582 17959.9219,2963.102 Q17959.9219,2959.9457 17961.2344,2958.2895 Q17962.5625,2956.602 17965.0469,2956.602 Q17965.7656,2956.602 17966.4219,2956.7582 Q17967.0625,2956.9145 17967.625,2957.227 L17967.625,2960.0239 Q17967.2656,2959.6801 17966.9688,2959.4926 Q17966.6719,2959.2895 17966.4063,2959.1801 Q17966.0938,2959.0395 17965.7813,2958.977 Q17965.4844,2958.9145 17965.1719,2958.9145 Q17963.8438,2958.9145 17963.1563,2959.977 Q17962.4688,2961.0551 17962.4688,2963.102 Q17962.4688,2965.1801 17963.1563,2966.227 Q17963.8438,2967.2895 17965.1719,2967.2895 Q17965.8125,2967.2895 17966.4063,2967.0239 Q17966.7031,2966.8832 17966.9844,2966.6957 Q17967.2813,2966.5082 17967.625,2966.1801 L17967.625,2968.977 Q17967.0469,2969.2895 17966.4063,2969.4457 Q17965.7813,2969.602 17965.0469,2969.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="17985.75" y="2968.534">TextHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="17638.5" x2="18373.5" y1="2979.102" y2="2979.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="17638.5" x2="18373.5" y1="2987.102" y2="2987.102"/><ellipse cx="17648.5" cy="2998.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="473" x="17657.5" y="3006.0679">getGlyphInfo(const raylib::text::RlFont&amp; font, int codepoint) : GlyphInfo</text><ellipse cx="17648.5" cy="3017.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="504" x="17657.5" y="3025.1358">getGlyphAtlasRec(const raylib::text::RlFont&amp; font, int codepoint) : Rectangle</text><ellipse cx="17648.5" cy="3036.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="520" x="17657.5" y="3044.2038">measureText(const raylib::text::RlFont&amp; font, const std::string&amp; text) : Vector2f</text><ellipse cx="17648.5" cy="3055.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="711" x="17657.5" y="3063.2717">measureText(const raylib::text::RlFont&amp; font, const std::string&amp; text, float fontSize, float spacing) : Vector2f</text><ellipse cx="17648.5" cy="3074.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="436" x="17657.5" y="3082.3396">getGlyphIndex(const raylib::text::RlFont&amp; font, int codepoint) : int</text><ellipse cx="17648.5" cy="3093.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="357" x="17657.5" y="3101.4075">measureText(const std::string&amp; text, int fontSize) : int</text></g><!--MD5=[465da1b7a75d73e5a892fec67be6d952]
class raylib.helper.VectorHelper--><g id="elem_raylib.helper.VectorHelper"><rect codeLine="707" fill="#F1F1F1" height="162.4075" id="raylib.helper.VectorHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="386" x="15889" y="3932.602"/><ellipse cx="16034.25" cy="3948.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M16034.0469,3955.102 Q16031.5625,3955.102 16030.2344,3953.4301 Q16028.9219,3951.7582 16028.9219,3948.602 Q16028.9219,3945.4457 16030.2344,3943.7895 Q16031.5625,3942.102 16034.0469,3942.102 Q16034.7656,3942.102 16035.4219,3942.2582 Q16036.0625,3942.4145 16036.625,3942.727 L16036.625,3945.5239 Q16036.2656,3945.1801 16035.9688,3944.9926 Q16035.6719,3944.7895 16035.4063,3944.6801 Q16035.0938,3944.5395 16034.7813,3944.477 Q16034.4844,3944.4145 16034.1719,3944.4145 Q16032.8438,3944.4145 16032.1563,3945.477 Q16031.4688,3946.5551 16031.4688,3948.602 Q16031.4688,3950.6801 16032.1563,3951.727 Q16032.8438,3952.7895 16034.1719,3952.7895 Q16034.8125,3952.7895 16035.4063,3952.5239 Q16035.7031,3952.3832 16035.9844,3952.1957 Q16036.2813,3952.0082 16036.625,3951.6801 L16036.625,3954.477 Q16036.0469,3954.7895 16035.4063,3954.9457 Q16034.7813,3955.102 16034.0469,3955.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="87" x="16054.75" y="3954.034">VectorHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="15890" x2="16274" y1="3964.602" y2="3964.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="15890" x2="16274" y1="3972.602" y2="3972.602"/><ellipse cx="15900" cy="3983.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="284" x="15909" y="3991.5679">toVectorf(const::Vector2&amp; vector) : Vector2f</text><ellipse cx="15900" cy="4002.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="284" x="15909" y="4010.6358">toVectorf(const::Vector3&amp; vector) : Vector3f</text><ellipse cx="15900" cy="4021.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="284" x="15909" y="4029.7038">toVectorf(const::Vector4&amp; vector) : Vector4f</text><ellipse cx="15900" cy="4040.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="360" x="15909" y="4048.7717">toRaylibVector(const Vector2f&amp; vector) : static::Vector2</text><ellipse cx="15900" cy="4059.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="360" x="15909" y="4067.8396">toRaylibVector(const Vector3f&amp; vector) : static::Vector3</text><ellipse cx="15900" cy="4078.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="360" x="15909" y="4086.9075">toRaylibVector(const Vector4f&amp; vector) : static::Vector4</text></g><!--MD5=[38359bdffa633f70dec5383cb35091f3]
class raylib.helper.WorldHelper--><g id="elem_raylib.helper.WorldHelper"><rect codeLine="716" fill="#F1F1F1" height="124.2717" id="raylib.helper.WorldHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="722" x="16310" y="3951.602"/><ellipse cx="16624.25" cy="3967.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M16624.0469,3974.102 Q16621.5625,3974.102 16620.2344,3972.4301 Q16618.9219,3970.7582 16618.9219,3967.602 Q16618.9219,3964.4457 16620.2344,3962.7895 Q16621.5625,3961.102 16624.0469,3961.102 Q16624.7656,3961.102 16625.4219,3961.2582 Q16626.0625,3961.4145 16626.625,3961.727 L16626.625,3964.5239 Q16626.2656,3964.1801 16625.9688,3963.9926 Q16625.6719,3963.7895 16625.4063,3963.6801 Q16625.0938,3963.5395 16624.7813,3963.477 Q16624.4844,3963.4145 16624.1719,3963.4145 Q16622.8438,3963.4145 16622.1563,3964.477 Q16621.4688,3965.5551 16621.4688,3967.602 Q16621.4688,3969.6801 16622.1563,3970.727 Q16622.8438,3971.7895 16624.1719,3971.7895 Q16624.8125,3971.7895 16625.4063,3971.5239 Q16625.7031,3971.3832 16625.9844,3971.1957 Q16626.2813,3971.0082 16626.625,3970.6801 L16626.625,3973.477 Q16626.0469,3973.7895 16625.4063,3973.9457 Q16624.7813,3974.102 16624.0469,3974.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="85" x="16644.75" y="3973.034">WorldHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="16311" x2="17031" y1="3983.602" y2="3983.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="16311" x2="17031" y1="3991.602" y2="3991.602"/><ellipse cx="16321" cy="4002.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="562" x="16330" y="4010.5679">getScreenToWorld2D(const Vector2f&amp; position, const Camera2D&amp; camera) : Vector2f</text><ellipse cx="16321" cy="4021.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="539" x="16330" y="4029.6358">getWorldToScreen(const Vector3f&amp; position, const RlCamera&amp; camera) : Vector2f</text><ellipse cx="16321" cy="4040.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="562" x="16330" y="4048.7038">getWorldToScreen2D(const Vector2f&amp; position, const Camera2D&amp; camera) : Vector2f</text><ellipse cx="16321" cy="4059.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="696" x="16330" y="4067.7717">getWorldToScreenEx(const Vector3f&amp; position, const RlCamera&amp; camera, int width, int height) : Vector2f</text></g><!--MD5=[dd22ee461e77f179b57a3063ac52d38d]
class raylib.helper.input.CursorHelper--><g id="elem_raylib.helper.input.CursorHelper"><rect codeLine="724" fill="#F1F1F1" height="162.4075" id="raylib.helper.input.CursorHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="197" x="21294.5" y="2057.102"/><ellipse cx="21343.75" cy="2073.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M21343.5469,2079.602 Q21341.0625,2079.602 21339.7344,2077.9301 Q21338.4219,2076.2582 21338.4219,2073.102 Q21338.4219,2069.9457 21339.7344,2068.2895 Q21341.0625,2066.602 21343.5469,2066.602 Q21344.2656,2066.602 21344.9219,2066.7582 Q21345.5625,2066.9145 21346.125,2067.227 L21346.125,2070.0239 Q21345.7656,2069.6801 21345.4688,2069.4926 Q21345.1719,2069.2895 21344.9063,2069.1801 Q21344.5938,2069.0395 21344.2813,2068.977 Q21343.9844,2068.9145 21343.6719,2068.9145 Q21342.3438,2068.9145 21341.6563,2069.977 Q21340.9688,2071.0551 21340.9688,2073.102 Q21340.9688,2075.1801 21341.6563,2076.227 Q21342.3438,2077.2895 21343.6719,2077.2895 Q21344.3125,2077.2895 21344.9063,2077.0239 Q21345.2031,2076.8832 21345.4844,2076.6957 Q21345.7813,2076.5082 21346.125,2076.1801 L21346.125,2078.977 Q21345.5469,2079.2895 21344.9063,2079.4457 Q21344.2813,2079.602 21343.5469,2079.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="21364.25" y="2078.534">CursorHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="21295.5" x2="21490.5" y1="2089.102" y2="2089.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="21295.5" x2="21490.5" y1="2097.102" y2="2097.102"/><ellipse cx="21305.5" cy="2108.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="154" x="21314.5" y="2116.0679">isCursorHidden() : bool</text><ellipse cx="21305.5" cy="2127.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="171" x="21314.5" y="2135.1358">isCursorOnScreen() : bool</text><ellipse cx="21305.5" cy="2146.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="142" x="21314.5" y="2154.2038">disableCursor() : void</text><ellipse cx="21305.5" cy="2165.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="139" x="21314.5" y="2173.2717">enableCursor() : void</text><ellipse cx="21305.5" cy="2184.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="123" x="21314.5" y="2192.3396">hideCursor() : void</text><ellipse cx="21305.5" cy="2203.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="128" x="21314.5" y="2211.4075">showCursor() : void</text></g><!--MD5=[79b81ab3485f6af6f9801b1139eb9023]
class raylib.helper.input.GamepadHelper--><g id="elem_raylib.helper.input.GamepadHelper"><rect codeLine="733" fill="#F1F1F1" height="238.6792" id="raylib.helper.input.GamepadHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="610" x="21527" y="2018.602"/><ellipse cx="21772.75" cy="2034.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M21772.5469,2041.102 Q21770.0625,2041.102 21768.7344,2039.4301 Q21767.4219,2037.7582 21767.4219,2034.602 Q21767.4219,2031.4457 21768.7344,2029.7895 Q21770.0625,2028.102 21772.5469,2028.102 Q21773.2656,2028.102 21773.9219,2028.2582 Q21774.5625,2028.4145 21775.125,2028.727 L21775.125,2031.5239 Q21774.7656,2031.1801 21774.4688,2030.9926 Q21774.1719,2030.7895 21773.9063,2030.6801 Q21773.5938,2030.5395 21773.2813,2030.477 Q21772.9844,2030.4145 21772.6719,2030.4145 Q21771.3438,2030.4145 21770.6563,2031.477 Q21769.9688,2032.5551 21769.9688,2034.602 Q21769.9688,2036.6801 21770.6563,2037.727 Q21771.3438,2038.7895 21772.6719,2038.7895 Q21773.3125,2038.7895 21773.9063,2038.5239 Q21774.2031,2038.3832 21774.4844,2038.1957 Q21774.7813,2038.0082 21775.125,2037.6801 L21775.125,2040.477 Q21774.5469,2040.7895 21773.9063,2040.9457 Q21773.2813,2041.102 21772.5469,2041.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="21793.25" y="2040.034">GamepadHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="21528" x2="22136" y1="2050.602" y2="2050.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="21528" x2="22136" y1="2058.602" y2="2058.602"/><ellipse cx="21538" cy="2069.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="322" x="21547" y="2077.5679">isGamepadAvailable(const int&amp; gamepad) : bool</text><ellipse cx="21538" cy="2088.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="561" x="21547" y="2096.6358">isGamepadButtonDown(const int&amp; gamepad, const GamepadButton&amp; button) : bool</text><ellipse cx="21538" cy="2107.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="576" x="21547" y="2115.7038">isGamepadButtonPressed(const int&amp; gamepad, const GamepadButton&amp; button) : bool</text><ellipse cx="21538" cy="2126.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="584" x="21547" y="2134.7717">isGamepadButtonReleased(const int&amp; gamepad, const GamepadButton&amp; button) : bool</text><ellipse cx="21538" cy="2145.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="542" x="21547" y="2153.8396">isGamepadButtonUp(const int&amp; gamepad, const GamepadButton&amp; button) : bool</text><ellipse cx="21538" cy="2164.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="551" x="21547" y="2172.9075">getGamepadAxisMovement(const int&amp; gamepad, const GamepadAxis&amp; axis) : float</text><ellipse cx="21538" cy="2184.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="328" x="21547" y="2191.9754">getGamepadAxisCount(const int&amp; gamepad) : int</text><ellipse cx="21538" cy="2203.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="223" x="21547" y="2211.0433">getGamepadButtonPressed() : int</text><ellipse cx="21538" cy="2222.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="382" x="21547" y="2230.1113">setGamepadMappings(const std::string&amp; mappings) : int</text><ellipse cx="21538" cy="2241.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="352" x="21547" y="2249.1792">getGamepadName(const int&amp; gamepad) : std::string</text></g><!--MD5=[a103ccbc999a5c86e16d3876335d41b5]
class raylib.helper.input.KeyboardHelper--><g id="elem_raylib.helper.input.KeyboardHelper"><rect codeLine="746" fill="#F1F1F1" height="238.6792" id="raylib.helper.input.KeyboardHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="438" x="22172" y="2018.602"/><ellipse cx="22332.25" cy="2034.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M22332.0469,2041.102 Q22329.5625,2041.102 22328.2344,2039.4301 Q22326.9219,2037.7582 22326.9219,2034.602 Q22326.9219,2031.4457 22328.2344,2029.7895 Q22329.5625,2028.102 22332.0469,2028.102 Q22332.7656,2028.102 22333.4219,2028.2582 Q22334.0625,2028.4145 22334.625,2028.727 L22334.625,2031.5239 Q22334.2656,2031.1801 22333.9688,2030.9926 Q22333.6719,2030.7895 22333.4063,2030.6801 Q22333.0938,2030.5395 22332.7813,2030.477 Q22332.4844,2030.4145 22332.1719,2030.4145 Q22330.8438,2030.4145 22330.1563,2031.477 Q22329.4688,2032.5551 22329.4688,2034.602 Q22329.4688,2036.6801 22330.1563,2037.727 Q22330.8438,2038.7895 22332.1719,2038.7895 Q22332.8125,2038.7895 22333.4063,2038.5239 Q22333.7031,2038.3832 22333.9844,2038.1957 Q22334.2813,2038.0082 22334.625,2037.6801 L22334.625,2040.477 Q22334.0469,2040.7895 22333.4063,2040.9457 Q22332.7813,2041.102 22332.0469,2041.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="22352.75" y="2040.034">KeyboardHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="22173" x2="22609" y1="2050.602" y2="2050.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="22173" x2="22609" y1="2058.602" y2="2058.602"/><ellipse cx="22183" cy="2069.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="286" x="22192" y="2077.5679">isKeyDown(const KeyboardKey&amp; key) : bool</text><ellipse cx="22183" cy="2088.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="301" x="22192" y="2096.6358">isKeyPressed(const KeyboardKey&amp; key) : bool</text><ellipse cx="22183" cy="2107.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="309" x="22192" y="2115.7038">isKeyReleased(const KeyboardKey&amp; key) : bool</text><ellipse cx="22183" cy="2126.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="267" x="22192" y="2134.7717">isKeyUp(const KeyboardKey&amp; key) : bool</text><ellipse cx="22183" cy="2145.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="145" x="22192" y="2153.8396">getCharPressed() : int</text><ellipse cx="22183" cy="2164.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="137" x="22192" y="2172.9075">getKeyPressed() : int</text><ellipse cx="22183" cy="2184.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="412" x="22192" y="2191.9754">getKeyName(const int&amp; key, const int&amp; scancode) : std::string</text><ellipse cx="22183" cy="2203.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="300" x="22192" y="2211.0433">getPressedKeys() : std::vector&lt;KeyboardKey&gt;</text><ellipse cx="22183" cy="2222.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="238" x="22192" y="2230.1113">getPressedChars() : std::vector&lt;int&gt;</text><ellipse cx="22183" cy="2241.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="280" x="22192" y="2249.1792">setExitKey(const KeyboardKey&amp; key) : void</text></g><!--MD5=[cb60c79014d4d03d67e504aef510cbef]
class raylib.helper.input.MouseHelper--><g id="elem_raylib.helper.input.MouseHelper"><rect codeLine="759" fill="#F1F1F1" height="314.9508" id="raylib.helper.input.MouseHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="545" x="21294.5" y="2870.602"/><ellipse cx="21517.75" cy="2886.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M21517.5469,2893.102 Q21515.0625,2893.102 21513.7344,2891.4301 Q21512.4219,2889.7582 21512.4219,2886.602 Q21512.4219,2883.4457 21513.7344,2881.7895 Q21515.0625,2880.102 21517.5469,2880.102 Q21518.2656,2880.102 21518.9219,2880.2582 Q21519.5625,2880.4145 21520.125,2880.727 L21520.125,2883.5239 Q21519.7656,2883.1801 21519.4688,2882.9926 Q21519.1719,2882.7895 21518.9063,2882.6801 Q21518.5938,2882.5395 21518.2813,2882.477 Q21517.9844,2882.4145 21517.6719,2882.4145 Q21516.3438,2882.4145 21515.6563,2883.477 Q21514.9688,2884.5551 21514.9688,2886.602 Q21514.9688,2888.6801 21515.6563,2889.727 Q21516.3438,2890.7895 21517.6719,2890.7895 Q21518.3125,2890.7895 21518.9063,2890.5239 Q21519.2031,2890.3832 21519.4844,2890.1957 Q21519.7813,2890.0082 21520.125,2889.6801 L21520.125,2892.477 Q21519.5469,2892.7895 21518.9063,2892.9457 Q21518.2813,2893.102 21517.5469,2893.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="21538.25" y="2892.034">MouseHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="21295.5" x2="21838.5" y1="2902.602" y2="2902.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="21295.5" x2="21838.5" y1="2910.602" y2="2910.602"/><ellipse cx="21305.5" cy="2921.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="519" x="21314.5" y="2929.5679">getMouseRay(const Vector2f&amp; mousePosition, const RlCamera&amp; camera) : Ray</text><ellipse cx="21305.5" cy="2940.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="177" x="21314.5" y="2948.6358">getMouseDelta() : Vector2f</text><ellipse cx="21305.5" cy="2959.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="195" x="21314.5" y="2967.7038">getMousePosition() : Vector2f</text><ellipse cx="21305.5" cy="2978.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="377" x="21314.5" y="2986.7717">isMouseButtonDown(const MouseButton&amp; button) : bool</text><ellipse cx="21305.5" cy="2997.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="392" x="21314.5" y="3005.8396">isMouseButtonPressed(const MouseButton&amp; button) : bool</text><ellipse cx="21305.5" cy="3016.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="400" x="21314.5" y="3024.9075">isMouseButtonReleased(const MouseButton&amp; button) : bool</text><ellipse cx="21305.5" cy="3036.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="358" x="21314.5" y="3043.9754">isMouseButtonUp(const MouseButton&amp; button) : bool</text><ellipse cx="21305.5" cy="3055.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="195" x="21314.5" y="3063.0433">getMouseWheelMove() : float</text><ellipse cx="21305.5" cy="3074.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="113" x="21314.5" y="3082.1113">getMouseX() : int</text><ellipse cx="21305.5" cy="3093.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="113" x="21314.5" y="3101.1792">getMouseY() : int</text><ellipse cx="21305.5" cy="3112.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="345" x="21314.5" y="3120.2471">setMouseCursor(const MouseCursor&amp; cursor) : void</text><ellipse cx="21305.5" cy="3131.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="298" x="21314.5" y="3139.315">setMouseOffset(int offsetX, int offsetY) : void</text><ellipse cx="21305.5" cy="3150.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="232" x="21314.5" y="3158.3829">setMousePosition(int x, int y) : void</text><ellipse cx="21305.5" cy="3169.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="308" x="21314.5" y="3177.4508">setMouseScale(float scaleX, float scaleY) : void</text></g><!--MD5=[bacff03f7d85e8e70bf8356996a4a2f6]
class raylib.helper.input.TouchHelper--><g id="elem_raylib.helper.input.TouchHelper"><rect codeLine="776" fill="#F1F1F1" height="295.8829" id="raylib.helper.input.TouchHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="382" x="21875" y="2880.102"/><ellipse cx="22018.75" cy="2896.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M22018.5469,2902.602 Q22016.0625,2902.602 22014.7344,2900.9301 Q22013.4219,2899.2582 22013.4219,2896.102 Q22013.4219,2892.9457 22014.7344,2891.2895 Q22016.0625,2889.602 22018.5469,2889.602 Q22019.2656,2889.602 22019.9219,2889.7582 Q22020.5625,2889.9145 22021.125,2890.227 L22021.125,2893.0239 Q22020.7656,2892.6801 22020.4688,2892.4926 Q22020.1719,2892.2895 22019.9063,2892.1801 Q22019.5938,2892.0395 22019.2813,2891.977 Q22018.9844,2891.9145 22018.6719,2891.9145 Q22017.3438,2891.9145 22016.6563,2892.977 Q22015.9688,2894.0551 22015.9688,2896.102 Q22015.9688,2898.1801 22016.6563,2899.227 Q22017.3438,2900.2895 22018.6719,2900.2895 Q22019.3125,2900.2895 22019.9063,2900.0239 Q22020.2031,2899.8832 22020.4844,2899.6957 Q22020.7813,2899.5082 22021.125,2899.1801 L22021.125,2901.977 Q22020.5469,2902.2895 22019.9063,2902.4457 Q22019.2813,2902.602 22018.5469,2902.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="22039.25" y="2901.534">TouchHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="21876" x2="22256" y1="2912.102" y2="2912.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="21876" x2="22256" y1="2920.102" y2="2920.102"/><ellipse cx="21886" cy="2931.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="225" x="21895" y="2939.0679">getGestureDragVector() : Vector2f</text><ellipse cx="21886" cy="2950.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="229" x="21895" y="2958.1358">getGesturePinchVector() : Vector2f</text><ellipse cx="21886" cy="2969.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="300" x="21895" y="2977.2038">getTouchPosition(const int&amp; index) : Vector2f</text><ellipse cx="21886" cy="2988.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="297" x="21895" y="2996.2717">isGestureDetected(const int&amp; gesture) : bool</text><ellipse cx="21886" cy="3007.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="197" x="21895" y="3015.3396">getGestureDragAngle() : float</text><ellipse cx="21886" cy="3026.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="215" x="21895" y="3034.4075">getGestureHoldDuration() : float</text><ellipse cx="21886" cy="3045.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="201" x="21895" y="3053.4754">getGesturePinchAngle() : float</text><ellipse cx="21886" cy="3064.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="173" x="21895" y="3072.5433">getGestureDetected() : int</text><ellipse cx="21886" cy="3083.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="175" x="21895" y="3091.6113">getTouchPointCount() : int</text><ellipse cx="21886" cy="3102.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="258" x="21895" y="3110.6792">getTouchPointId(const int&amp; index) : int</text><ellipse cx="21886" cy="3121.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="109" x="21895" y="3129.7471">getTouchX() : int</text><ellipse cx="21886" cy="3140.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="109" x="21895" y="3148.815">getTouchY() : int</text><ellipse cx="21886" cy="3159.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="356" x="21895" y="3167.8829">setGesturesEnabled(const unsigned int&amp; flags) : void</text></g><!--MD5=[4e14db6015d2944397354ce607b3a3ca]
class raylib.helper.draw.Draw2DHelper--><g id="elem_raylib.helper.draw.Draw2DHelper"><rect codeLine="794" fill="#F1F1F1" height="810.7167" id="raylib.helper.draw.Draw2DHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1197" x="18407.5" y="1732.602"/><ellipse cx="18952.75" cy="1748.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M18952.5469,1755.102 Q18950.0625,1755.102 18948.7344,1753.4301 Q18947.4219,1751.7582 18947.4219,1748.602 Q18947.4219,1745.4457 18948.7344,1743.7895 Q18950.0625,1742.102 18952.5469,1742.102 Q18953.2656,1742.102 18953.9219,1742.2582 Q18954.5625,1742.4145 18955.125,1742.727 L18955.125,1745.5239 Q18954.7656,1745.1801 18954.4688,1744.9926 Q18954.1719,1744.7895 18953.9063,1744.6801 Q18953.5938,1744.5395 18953.2813,1744.477 Q18952.9844,1744.4145 18952.6719,1744.4145 Q18951.3438,1744.4145 18950.6563,1745.477 Q18949.9688,1746.5551 18949.9688,1748.602 Q18949.9688,1750.6801 18950.6563,1751.727 Q18951.3438,1752.7895 18952.6719,1752.7895 Q18953.3125,1752.7895 18953.9063,1752.5239 Q18954.2031,1752.3832 18954.4844,1752.1957 Q18954.7813,1752.0082 18955.125,1751.6801 L18955.125,1754.477 Q18954.5469,1754.7895 18953.9063,1754.9457 Q18953.2813,1755.102 18952.5469,1755.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="18973.25" y="1754.034">Draw2DHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="18408.5" x2="19603.5" y1="1764.602" y2="1764.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="18415.5" y="1772.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="218" x="18427.5" y="1783.5679">_texShapesRec : static Rectangle</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="18415.5" y="1791.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="196" x="18427.5" y="1802.6358">_texShapes : static Texture2D</text><line style="stroke:#181818;stroke-width:0.5;" x1="18408.5" x2="19603.5" y1="1810.7378" y2="1810.7378"/><ellipse cx="18418.5" cy="1821.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="502" x="18427.5" y="1829.7038">drawCircle(int centerX, int centerY, float radius, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="1840.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="500" x="18427.5" y="1848.7717">drawCircle(const Vector2f&amp; center, float radius, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="1859.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="720" x="18427.5" y="1867.8396">drawCircleGradient(int centerX, int centerY, float radius, const RlColor&amp; color1, const RlColor&amp; color2) : void</text><ellipse cx="18418.5" cy="1878.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="537" x="18427.5" y="1886.9075">drawCircleLines(int centerX, int centerY, float radius, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="1898.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="857" x="18427.5" y="1905.9754">drawCircleSector(const Vector2f&amp; center, float radius, float startAngle, float endAngle, int segments, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="1917.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="892" x="18427.5" y="1925.0433">drawCircleSectorLines(const Vector2f&amp; center, float radius, float startAngle, float endAngle, int segments, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="1936.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="611" x="18427.5" y="1944.1113">drawEllipse(int centerX, int centerY, float radiusH, float radiusV, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="1955.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="646" x="18427.5" y="1963.1792">drawEllipseLines(int centerX, int centerY, float radiusH, float radiusV, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="1974.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="603" x="18427.5" y="1982.2471">drawLine(int startPosX, int startPosY, int endPosX, int endPosY, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="1993.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="582" x="18427.5" y="2001.315">drawLine(const Vector2f&amp; startPos, const Vector2f&amp; endPos, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2012.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="656" x="18427.5" y="2020.3829">drawLine(const Vector2f&amp; startPos, const Vector2f&amp; endPos, float thick, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2031.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="698" x="18427.5" y="2039.4508">drawLineBezier(const Vector2f&amp; startPos, const Vector2f&amp; endPos, float thick, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2050.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1171" x="18427.5" y="2058.5188">drawLineBezierCubic(const Vector2f&amp; startPos, const Vector2f&amp; endPos, const Vector2f&amp; startControlPos, const Vector2f&amp; endControlPos, float thick, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2069.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="922" x="18427.5" y="2077.5867">drawLineBezierQuad(const Vector2f&amp; startPos, const Vector2f&amp; endPos, const Vector2f&amp; controlPos, float thick, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2088.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="522" x="18427.5" y="2096.6546">drawLineStrip(const std::vector&lt;Vector2f&gt;&amp; points, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2107.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="372" x="18427.5" y="2115.7225">drawPixel(int posX, int posY, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2126.8245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="419" x="18427.5" y="2134.7904">drawPixel(const Vector2f&amp; position, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2145.8924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="649" x="18427.5" y="2153.8583">drawPoly(const Vector2f&amp; center, int sides, float radius, float rotation, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2164.9603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="684" x="18427.5" y="2172.9263">drawPolyLines(const Vector2f&amp; center, int sides, float radius, float rotation, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2184.0282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="786" x="18427.5" y="2191.9942">drawPolyLines(const Vector2f&amp; center, int sides, float radius, float rotation, float lineThick, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2203.0962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="550" x="18427.5" y="2211.0621">drawRectangle(int posX, int posY, int width, int height, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2222.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="598" x="18427.5" y="2230.13">drawRectangle(const Vector2f&amp; position, const Vector2f&amp; size, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2241.232" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="434" x="18427.5" y="2249.1979">drawRectangle(const Rectangle&amp; rec, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2260.2999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="686" x="18427.5" y="2268.2658">drawRectangle(const Rectangle&amp; rec, const Vector2f&amp; origin, float rotation, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2279.3678" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="898" x="18427.5" y="2287.3338">drawRectangleGradient(const Rectangle&amp; rec, const RlColor&amp; col1, const RlColor&amp; col2, const RlColor&amp; col3, const RlColor&amp; col4) : void</text><ellipse cx="18418.5" cy="2298.4357" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="778" x="18427.5" y="2306.4017">drawRectangleGradientH(int posX, int posY, int width, int height, const RlColor&amp; color1, const RlColor&amp; color2) : void</text><ellipse cx="18418.5" cy="2317.5037" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="776" x="18427.5" y="2325.4696">drawRectangleGradientV(int posX, int posY, int width, int height, const RlColor&amp; color1, const RlColor&amp; color2) : void</text><ellipse cx="18418.5" cy="2336.5716" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="585" x="18427.5" y="2344.5375">drawRectangleLines(int posX, int posY, int width, int height, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2355.6395" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="586" x="18427.5" y="2363.6054">drawRectangleLinesEx(const Rectangle&amp; rec, float lineThick, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2374.7074" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="705" x="18427.5" y="2382.6733">drawRectangleRounded(const Rectangle&amp; rec, float roundness, int segments, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2393.7753" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="842" x="18427.5" y="2401.7413">drawRectangleRoundedLines(const Rectangle&amp; rec, float roundness, int segments, float lineThick, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2412.8432" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="971" x="18427.5" y="2420.8092">drawRing(const Vector2f&amp; center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2431.9112" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1006" x="18427.5" y="2439.8771">drawRingLines(const Vector2f&amp; center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2450.9791" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="669" x="18427.5" y="2458.945">drawTriangle(const Vector2f&amp; v1, const Vector2f&amp; v2, const Vector2f&amp; v3, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2470.047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="542" x="18427.5" y="2478.0129">drawTriangleFan(const std::vector&lt;Vector2f&gt;&amp; points, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2489.1149" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="704" x="18427.5" y="2497.0808">drawTriangleLines(const Vector2f&amp; v1, const Vector2f&amp; v2, const Vector2f&amp; v3, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2508.1828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="550" x="18427.5" y="2516.1488">drawTriangleStrip(const std::vector&lt;Vector2f&gt;&amp; points, const RlColor&amp; color) : void</text><ellipse cx="18418.5" cy="2527.2507" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="564" x="18427.5" y="2535.2167">setShapesTexture(const texture::RlTexture&amp; texture, const Rectangle&amp; source) : void</text></g><!--MD5=[22dbd257a5b9b60e0fcce8e474411a4d]
class raylib.helper.draw.DrawHelper--><g id="elem_raylib.helper.draw.DrawHelper"><rect codeLine="837" fill="#F1F1F1" height="448.4263" id="raylib.helper.draw.DrawHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1598" x="19640" y="1914.102"/><ellipse cx="20394.75" cy="1930.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M20394.5469,1936.602 Q20392.0625,1936.602 20390.7344,1934.9301 Q20389.4219,1933.2582 20389.4219,1930.102 Q20389.4219,1926.9457 20390.7344,1925.2895 Q20392.0625,1923.602 20394.5469,1923.602 Q20395.2656,1923.602 20395.9219,1923.7582 Q20396.5625,1923.9145 20397.125,1924.227 L20397.125,1927.0239 Q20396.7656,1926.6801 20396.4688,1926.4926 Q20396.1719,1926.2895 20395.9063,1926.1801 Q20395.5938,1926.0395 20395.2813,1925.977 Q20394.9844,1925.9145 20394.6719,1925.9145 Q20393.3438,1925.9145 20392.6563,1926.977 Q20391.9688,1928.0551 20391.9688,1930.102 Q20391.9688,1932.1801 20392.6563,1933.227 Q20393.3438,1934.2895 20394.6719,1934.2895 Q20395.3125,1934.2895 20395.9063,1934.0239 Q20396.2031,1933.8832 20396.4844,1933.6957 Q20396.7813,1933.5082 20397.125,1933.1801 L20397.125,1935.977 Q20396.5469,1936.2895 20395.9063,1936.4457 Q20395.2813,1936.602 20394.5469,1936.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="20415.25" y="1935.534">DrawHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="19641" x2="21237" y1="1946.102" y2="1946.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="19641" x2="21237" y1="1954.102" y2="1954.102"/><ellipse cx="19651" cy="1965.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="224" x="19660" y="1973.0679">beginBlendMode(int mode) : void</text><ellipse cx="19651" cy="1984.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="144" x="19660" y="1992.1358">beginDrawing() : void</text><ellipse cx="19651" cy="2003.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="317" x="19660" y="2011.2038">beginMode2D(const Camera2D&amp; camera) : void</text><ellipse cx="19651" cy="2022.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="312" x="19660" y="2030.2717">beginMode3D(const RlCamera&amp; camera) : void</text><ellipse cx="19651" cy="2041.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="380" x="19660" y="2049.3396">beginScissorMode(int x, int y, int width, int height) : void</text><ellipse cx="19651" cy="2060.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="322" x="19660" y="2068.4075">beginShaderMode(const Shader&amp; shader) : void</text><ellipse cx="19651" cy="2079.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="389" x="19660" y="2087.4754">beginTextureMode(const RenderTexture2D&amp; target) : void</text><ellipse cx="19651" cy="2098.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="379" x="19660" y="2106.5433">beginVrStereoMode(const VrStereoConfig&amp; config) : void</text><ellipse cx="19651" cy="2117.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="297" x="19660" y="2125.6113">clearBackground(const RlColor&amp; color) : void</text><ellipse cx="19651" cy="2136.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="914" x="19660" y="2144.6792">drawBillboard(const RlCamera&amp; camera, const texture::RlTexture&amp; texture, const Vector3f&amp; position, float size, const RlColor&amp; tint) : void</text><ellipse cx="19651" cy="2155.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1572" x="19660" y="2163.7471">drawBillboardPro(const RlCamera&amp; camera, const texture::RlTexture&amp; texture, const Rectangle&amp; source, const Vector3f&amp; position, const Vector3f&amp; up, const Vector2f&amp; size, const Vector2f&amp; origin, float rotation, const RlColor&amp; tint) : void</text><ellipse cx="19651" cy="2174.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1187" x="19660" y="2182.815">drawBillboardRec(const RlCamera&amp; camera, const texture::RlTexture&amp; texture, const Rectangle&amp; source, const Vector3f&amp; position, const Vector2f&amp; size, const RlColor&amp; tint) : void</text><ellipse cx="19651" cy="2193.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="483" x="19660" y="2201.8829">drawBoundingBox(const BoundingBox&amp; box, const RlColor&amp; color) : void</text><ellipse cx="19651" cy="2212.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="151" x="19660" y="2220.9508">endBlendMode() : void</text><ellipse cx="19651" cy="2232.0528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="131" x="19660" y="2240.0188">endDrawing() : void</text><ellipse cx="19651" cy="2251.1207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="130" x="19660" y="2259.0867">endMode2D() : void</text><ellipse cx="19651" cy="2270.1887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="130" x="19660" y="2278.1546">endMode3D() : void</text><ellipse cx="19651" cy="2289.2566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="159" x="19660" y="2297.2225">endScissorMode() : void</text><ellipse cx="19651" cy="2308.3245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="160" x="19660" y="2316.2904">endShaderMode() : void</text><ellipse cx="19651" cy="2327.3924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="163" x="19660" y="2335.3583">endTextureMode() : void</text><ellipse cx="19651" cy="2346.4603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="169" x="19660" y="2354.4263">endVrStereoMode() : void</text></g><!--MD5=[8c873c49ce49d4c3fae6911f380a097a]
class raylib.helper.draw.DrawTextHelper--><g id="elem_raylib.helper.draw.DrawTextHelper"><rect codeLine="861" fill="#F1F1F1" height="391.2225" id="raylib.helper.draw.DrawTextHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1391" x="18409.5" y="2832.602"/><ellipse cx="19046.75" cy="2848.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M19046.5469,2855.102 Q19044.0625,2855.102 19042.7344,2853.4301 Q19041.4219,2851.7582 19041.4219,2848.602 Q19041.4219,2845.4457 19042.7344,2843.7895 Q19044.0625,2842.102 19046.5469,2842.102 Q19047.2656,2842.102 19047.9219,2842.2582 Q19048.5625,2842.4145 19049.125,2842.727 L19049.125,2845.5239 Q19048.7656,2845.1801 19048.4688,2844.9926 Q19048.1719,2844.7895 19047.9063,2844.6801 Q19047.5938,2844.5395 19047.2813,2844.477 Q19046.9844,2844.4145 19046.6719,2844.4145 Q19045.3438,2844.4145 19044.6563,2845.477 Q19043.9688,2846.5551 19043.9688,2848.602 Q19043.9688,2850.6801 19044.6563,2851.727 Q19045.3438,2852.7895 19046.6719,2852.7895 Q19047.3125,2852.7895 19047.9063,2852.5239 Q19048.2031,2852.3832 19048.4844,2852.1957 Q19048.7813,2852.0082 19049.125,2851.6801 L19049.125,2854.477 Q19048.5469,2854.7895 19047.9063,2854.9457 Q19047.2813,2855.102 19046.5469,2855.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="108" x="19067.25" y="2854.034">DrawTextHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="18410.5" x2="19799.5" y1="2864.602" y2="2864.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="18410.5" x2="19799.5" y1="2872.602" y2="2872.602"/><ellipse cx="18420.5" cy="2883.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="989" x="18429.5" y="2891.5679">drawCenteredText(const std::string&amp; text, const raylib::text::RlFont&amp; font, const Vector2f&amp; position, const RlColor&amp; color, const float&amp; spacing) : void</text><ellipse cx="18420.5" cy="2902.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1135" x="18429.5" y="2910.6358">drawCenteredText(const std::string&amp; text, const raylib::text::RlFont&amp; font, const Vector2f&amp; position, const float&amp; fontSize, const RlColor&amp; color, const float&amp; spacing) : void</text><ellipse cx="18420.5" cy="2921.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="371" x="18429.5" y="2929.7038">drawCenteredText(const raylib::text::RlText&amp; text) : void</text><ellipse cx="18420.5" cy="2940.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="372" x="18429.5" y="2948.7717">drawFps(const Vector2f&amp; pos, const int&amp; fontSize) : void</text><ellipse cx="18420.5" cy="2959.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="479" x="18429.5" y="2967.8396">drawFps(const float&amp; posX, const float&amp; posY, const int&amp; fontSize) : void</text><ellipse cx="18420.5" cy="2978.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="238" x="18429.5" y="2986.9075">drawFps(const Vector2f&amp; pos) : void</text><ellipse cx="18420.5" cy="2998.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="321" x="18429.5" y="3005.9754">drawFps(const int&amp; posX, const int&amp; posY) : void</text><ellipse cx="18420.5" cy="3017.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="676" x="18429.5" y="3025.0433">drawText(const std::string&amp; text, const Vector2f&amp; pos, const int&amp; fontSize, const RlColor&amp; color) : void</text><ellipse cx="18420.5" cy="3036.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="783" x="18429.5" y="3044.1113">drawText(const std::string&amp; text, const float&amp; posX, const float&amp; posY, const int&amp; fontSize, const RlColor&amp; color) : void</text><ellipse cx="18420.5" cy="3055.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="782" x="18429.5" y="3063.1792">drawText(const std::string&amp; text, const raylib::text::RlFont&amp; font, const Vector2f&amp; position, const RlColor&amp; color) : void</text><ellipse cx="18420.5" cy="3074.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1063" x="18429.5" y="3082.2471">drawText(const std::string&amp; text, const raylib::text::RlFont&amp; font, const Vector2f&amp; position, const float&amp; fontSize, const RlColor&amp; tint, const float&amp; spacing) : void</text><ellipse cx="18420.5" cy="3093.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1208" x="18429.5" y="3101.315">drawText(const std::string&amp; text, const raylib::text::RlFont&amp; font, const Vector2f&amp; position, const float&amp; rotation, const float&amp; fontSize, const RlColor&amp; tint, const float&amp; spacing) : void</text><ellipse cx="18420.5" cy="3112.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1220" x="18429.5" y="3120.3829">drawText(const std::string&amp; text, const raylib::text::RlFont&amp; font, const Vector2f&amp; position, const Vector2f&amp; origin, const float&amp; fontSize, const RlColor&amp; tint, const float&amp; spacing) : void</text><ellipse cx="18420.5" cy="3131.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1365" x="18429.5" y="3139.4508">drawText(const std::string&amp; text, const raylib::text::RlFont&amp; font, const Vector2f&amp; position, const Vector2f&amp; origin, const float&amp; rotation, const float&amp; fontSize, const RlColor&amp; tint, const float&amp; spacing) : void</text><ellipse cx="18420.5" cy="3150.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="623" x="18429.5" y="3158.5188">drawText(const raylib::text::RlText&amp; text, const Vector2f&amp; position, const RlColor&amp; color) : void</text><ellipse cx="18420.5" cy="3169.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="700" x="18429.5" y="3177.5867">drawText(const raylib::text::RlText&amp; text, const float&amp; posX, const float&amp; posY, const RlColor&amp; color) : void</text><ellipse cx="18420.5" cy="3188.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="309" x="18429.5" y="3196.6546">drawText(const raylib::text::RlText&amp; text) : void</text><ellipse cx="18420.5" cy="3207.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="967" x="18429.5" y="3215.7225">drawTextUsingCodepoint(const raylib::text::RlFont&amp; font, const int&amp; codepoint, const Vector2f&amp; position, float fontSize, const RlColor&amp; tint) : void</text></g><!--MD5=[e884ed1053af52c66226a9c3a06f0df3]
class raylib.helper.draw.DrawTextureHelper--><g id="elem_raylib.helper.draw.DrawTextureHelper"><rect codeLine="882" fill="#F1F1F1" height="219.6113" id="raylib.helper.draw.DrawTextureHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1207" x="19835.5" y="2918.102"/><ellipse cx="20369.25" cy="2934.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M20369.0469,2940.602 Q20366.5625,2940.602 20365.2344,2938.9301 Q20363.9219,2937.2582 20363.9219,2934.102 Q20363.9219,2930.9457 20365.2344,2929.2895 Q20366.5625,2927.602 20369.0469,2927.602 Q20369.7656,2927.602 20370.4219,2927.7582 Q20371.0625,2927.9145 20371.625,2928.227 L20371.625,2931.0239 Q20371.2656,2930.6801 20370.9688,2930.4926 Q20370.6719,2930.2895 20370.4063,2930.1801 Q20370.0938,2930.0395 20369.7813,2929.977 Q20369.4844,2929.9145 20369.1719,2929.9145 Q20367.8438,2929.9145 20367.1563,2930.977 Q20366.4688,2932.0551 20366.4688,2934.102 Q20366.4688,2936.1801 20367.1563,2937.227 Q20367.8438,2938.2895 20369.1719,2938.2895 Q20369.8125,2938.2895 20370.4063,2938.0239 Q20370.7031,2937.8832 20370.9844,2937.6957 Q20371.2813,2937.5082 20371.625,2937.1801 L20371.625,2939.977 Q20371.0469,2940.2895 20370.4063,2940.4457 Q20369.7813,2940.602 20369.0469,2940.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="20389.75" y="2939.534">DrawTextureHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="19836.5" x2="21041.5" y1="2950.102" y2="2950.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="19836.5" x2="21041.5" y1="2958.102" y2="2958.102"/><ellipse cx="19846.5" cy="2969.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="612" x="19855.5" y="2977.0679">drawTexture(const texture::RlTexture&amp; texture, int posX, int posY, const RlColor&amp; tint) : void</text><ellipse cx="19846.5" cy="2988.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="659" x="19855.5" y="2996.1358">drawTexture(const texture::RlTexture&amp; texture, const Vector2f&amp; position, const RlColor&amp; tint) : void</text><ellipse cx="19846.5" cy="3007.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="830" x="19855.5" y="3015.2038">drawTexture(const texture::RlTexture&amp; texture, const Vector2f&amp; position, float rotation, float scale, const RlColor&amp; tint) : void</text><ellipse cx="19846.5" cy="3026.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1072" x="19855.5" y="3034.2717">drawTexture(const texture::RlTexture&amp; texture, const Rectangle&amp; source, const Rectangle&amp; dest, const Vector2f&amp; origin, float rotation, const RlColor&amp; tint) : void</text><ellipse cx="19846.5" cy="3045.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1156" x="19855.5" y="3053.3396">drawTextureNPatch(const texture::RlTexture&amp; texture, const NPatchInfo&amp; nPatchInfo, const Rectangle&amp; dest, const Vector2f&amp; origin, float rotation, const RlColor&amp; tint) : void</text><ellipse cx="19846.5" cy="3064.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1148" x="19855.5" y="3072.4075">drawTexturePoly(const texture::RlTexture&amp; texture, const Vector2f&amp; center, const std::vector&lt;Vector2f&gt;&amp; points, std::vector&lt;Vector2f&gt;&amp; texcoords, const RlColor&amp; tint) : void</text><ellipse cx="19846.5" cy="3083.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="996" x="19855.5" y="3091.4754">drawTextureQuad(const texture::RlTexture&amp; texture, const Vector2f&amp; tiling, const Vector2f&amp; offset, const Rectangle&amp; quad, const RlColor&amp; tint) : void</text><ellipse cx="19846.5" cy="3102.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="857" x="19855.5" y="3110.5433">drawTextureRec(const texture::RlTexture&amp; texture, const Rectangle&amp; source, const Vector2f&amp; position, const RlColor&amp; tint) : void</text><ellipse cx="19846.5" cy="3121.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1181" x="19855.5" y="3129.6113">drawTextureTiled(const texture::RlTexture&amp; texture, const Rectangle&amp; source, const Rectangle&amp; dest, const Vector2f&amp; origin, float rotation, float scale, const RlColor&amp; tint) : void</text></g><!--MD5=[09f67b4294edfd8b4f73926348b360ee]
class raylib.ex.BuilderException--><g id="elem_raylib.ex.BuilderException"><rect codeLine="897" fill="#F1F1F1" height="67.0679" id="raylib.ex.BuilderException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="300" x="15240" y="2994.602"/><ellipse cx="15328.75" cy="3010.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M15328.5469,3017.102 Q15326.0625,3017.102 15324.7344,3015.4301 Q15323.4219,3013.7582 15323.4219,3010.602 Q15323.4219,3007.4457 15324.7344,3005.7895 Q15326.0625,3004.102 15328.5469,3004.102 Q15329.2656,3004.102 15329.9219,3004.2582 Q15330.5625,3004.4145 15331.125,3004.727 L15331.125,3007.5239 Q15330.7656,3007.1801 15330.4688,3006.9926 Q15330.1719,3006.7895 15329.9063,3006.6801 Q15329.5938,3006.5395 15329.2813,3006.477 Q15328.9844,3006.4145 15328.6719,3006.4145 Q15327.3438,3006.4145 15326.6563,3007.477 Q15325.9688,3008.5551 15325.9688,3010.602 Q15325.9688,3012.6801 15326.6563,3013.727 Q15327.3438,3014.7895 15328.6719,3014.7895 Q15329.3125,3014.7895 15329.9063,3014.5239 Q15330.2031,3014.3832 15330.4844,3014.1957 Q15330.7813,3014.0082 15331.125,3013.6801 L15331.125,3016.477 Q15330.5469,3016.7895 15329.9063,3016.9457 Q15329.2813,3017.102 15328.5469,3017.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="15349.25" y="3016.034">BuilderException</text><line style="stroke:#181818;stroke-width:0.5;" x1="15241" x2="15539" y1="3026.602" y2="3026.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="15241" x2="15539" y1="3034.602" y2="3034.602"/><ellipse cx="15251" cy="3045.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="274" x="15260" y="3053.5679">BuilderException(const std::string&amp; msg)</text></g><!--MD5=[4d93514fa9216e860f0c08082e90b7b8]
class raylib.ex.CameraException--><g id="elem_raylib.ex.CameraException"><rect codeLine="901" fill="#F1F1F1" height="67.0679" id="raylib.ex.CameraException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="334" x="13731" y="2994.602"/><ellipse cx="13835.25" cy="3010.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M13835.0469,3017.102 Q13832.5625,3017.102 13831.2344,3015.4301 Q13829.9219,3013.7582 13829.9219,3010.602 Q13829.9219,3007.4457 13831.2344,3005.7895 Q13832.5625,3004.102 13835.0469,3004.102 Q13835.7656,3004.102 13836.4219,3004.2582 Q13837.0625,3004.4145 13837.625,3004.727 L13837.625,3007.5239 Q13837.2656,3007.1801 13836.9688,3006.9926 Q13836.6719,3006.7895 13836.4063,3006.6801 Q13836.0938,3006.5395 13835.7813,3006.477 Q13835.4844,3006.4145 13835.1719,3006.4145 Q13833.8438,3006.4145 13833.1563,3007.477 Q13832.4688,3008.5551 13832.4688,3010.602 Q13832.4688,3012.6801 13833.1563,3013.727 Q13833.8438,3014.7895 13835.1719,3014.7895 Q13835.8125,3014.7895 13836.4063,3014.5239 Q13836.7031,3014.3832 13836.9844,3014.1957 Q13837.2813,3014.0082 13837.625,3013.6801 L13837.625,3016.477 Q13837.0469,3016.7895 13836.4063,3016.9457 Q13835.7813,3017.102 13835.0469,3017.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="117" x="13855.75" y="3016.034">CameraException</text><line style="stroke:#181818;stroke-width:0.5;" x1="13732" x2="14064" y1="3026.602" y2="3026.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="13732" x2="14064" y1="3034.602" y2="3034.602"/><ellipse cx="13742" cy="3045.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="308" x="13751" y="3053.5679">CameraException(const std::string&amp; message)</text></g><!--MD5=[bd15cbd12d374606497c682a63ad01b2]
class raylib.ex.InvalidArgumentException--><g id="elem_raylib.ex.InvalidArgumentException"><rect codeLine="905" fill="#F1F1F1" height="67.0679" id="raylib.ex.InvalidArgumentException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="365" x="14099.5" y="2994.602"/><ellipse cx="14188.25" cy="3010.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M14188.0469,3017.102 Q14185.5625,3017.102 14184.2344,3015.4301 Q14182.9219,3013.7582 14182.9219,3010.602 Q14182.9219,3007.4457 14184.2344,3005.7895 Q14185.5625,3004.102 14188.0469,3004.102 Q14188.7656,3004.102 14189.4219,3004.2582 Q14190.0625,3004.4145 14190.625,3004.727 L14190.625,3007.5239 Q14190.2656,3007.1801 14189.9688,3006.9926 Q14189.6719,3006.7895 14189.4063,3006.6801 Q14189.0938,3006.5395 14188.7813,3006.477 Q14188.4844,3006.4145 14188.1719,3006.4145 Q14186.8438,3006.4145 14186.1563,3007.477 Q14185.4688,3008.5551 14185.4688,3010.602 Q14185.4688,3012.6801 14186.1563,3013.727 Q14186.8438,3014.7895 14188.1719,3014.7895 Q14188.8125,3014.7895 14189.4063,3014.5239 Q14189.7031,3014.3832 14189.9844,3014.1957 Q14190.2813,3014.0082 14190.625,3013.6801 L14190.625,3016.477 Q14190.0469,3016.7895 14189.4063,3016.9457 Q14188.7813,3017.102 14188.0469,3017.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="179" x="14208.75" y="3016.034">InvalidArgumentException</text><line style="stroke:#181818;stroke-width:0.5;" x1="14100.5" x2="14463.5" y1="3026.602" y2="3026.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="14100.5" x2="14463.5" y1="3034.602" y2="3034.602"/><ellipse cx="14110.5" cy="3045.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="339" x="14119.5" y="3053.5679">InvalidArgumentException(const std::string&amp; msg)</text></g><!--MD5=[3b06a239824b813c3599b273f1e06ad1]
class raylib.ex.RaylibException--><g id="elem_raylib.ex.RaylibException"><rect codeLine="909" fill="#F1F1F1" height="105.2038" id="raylib.ex.RaylibException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="372" x="14496" y="2085.602"/><ellipse cx="14624.75" cy="2101.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M14624.5469,2108.102 Q14622.0625,2108.102 14620.7344,2106.4301 Q14619.4219,2104.7582 14619.4219,2101.602 Q14619.4219,2098.4457 14620.7344,2096.7895 Q14622.0625,2095.102 14624.5469,2095.102 Q14625.2656,2095.102 14625.9219,2095.2582 Q14626.5625,2095.4145 14627.125,2095.727 L14627.125,2098.5239 Q14626.7656,2098.1801 14626.4688,2097.9926 Q14626.1719,2097.7895 14625.9063,2097.6801 Q14625.5938,2097.5395 14625.2813,2097.477 Q14624.9844,2097.4145 14624.6719,2097.4145 Q14623.3438,2097.4145 14622.6563,2098.477 Q14621.9688,2099.5551 14621.9688,2101.602 Q14621.9688,2103.6801 14622.6563,2104.727 Q14623.3438,2105.7895 14624.6719,2105.7895 Q14625.3125,2105.7895 14625.9063,2105.5239 Q14626.2031,2105.3832 14626.4844,2105.1957 Q14626.7813,2105.0082 14627.125,2104.6801 L14627.125,2107.477 Q14626.5469,2107.7895 14625.9063,2107.9457 Q14625.2813,2108.102 14624.5469,2108.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="106" x="14645.25" y="2107.034">RaylibException</text><line style="stroke:#181818;stroke-width:0.5;" x1="14497" x2="14867" y1="2117.602" y2="2117.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="14504" y="2125.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="14516" y="2136.5679">_msg : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="14497" x2="14867" y1="2144.6699" y2="2144.6699"/><ellipse cx="14507" cy="2155.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="346" x="14516" y="2163.6358">RaylibException(const std::string&amp; msg, bool prefix)</text><ellipse cx="14507" cy="2174.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="14516" y="2182.7038">what() : char* {query}</text></g><!--MD5=[7cae69f713c5407cbaf7b8e5175e0178]
class raylib.ex.RlAnimationException--><g id="elem_raylib.ex.RlAnimationException"><rect codeLine="915" fill="#F1F1F1" height="67.0679" id="raylib.ex.RlAnimationException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="364" x="14500" y="2994.602"/><ellipse cx="14604.25" cy="3010.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M14604.0469,3017.102 Q14601.5625,3017.102 14600.2344,3015.4301 Q14598.9219,3013.7582 14598.9219,3010.602 Q14598.9219,3007.4457 14600.2344,3005.7895 Q14601.5625,3004.102 14604.0469,3004.102 Q14604.7656,3004.102 14605.4219,3004.2582 Q14606.0625,3004.4145 14606.625,3004.727 L14606.625,3007.5239 Q14606.2656,3007.1801 14605.9688,3006.9926 Q14605.6719,3006.7895 14605.4063,3006.6801 Q14605.0938,3006.5395 14604.7813,3006.477 Q14604.4844,3006.4145 14604.1719,3006.4145 Q14602.8438,3006.4145 14602.1563,3007.477 Q14601.4688,3008.5551 14601.4688,3010.602 Q14601.4688,3012.6801 14602.1563,3013.727 Q14602.8438,3014.7895 14604.1719,3014.7895 Q14604.8125,3014.7895 14605.4063,3014.5239 Q14605.7031,3014.3832 14605.9844,3014.1957 Q14606.2813,3014.0082 14606.625,3013.6801 L14606.625,3016.477 Q14606.0469,3016.7895 14605.4063,3016.9457 Q14604.7813,3017.102 14604.0469,3017.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="147" x="14624.75" y="3016.034">RlAnimationException</text><line style="stroke:#181818;stroke-width:0.5;" x1="14501" x2="14863" y1="3026.602" y2="3026.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="14501" x2="14863" y1="3034.602" y2="3034.602"/><ellipse cx="14511" cy="3045.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="338" x="14520" y="3053.5679">RlAnimationException(const std::string&amp; message)</text></g><!--MD5=[374ef434073c24a094f825153c564bf2]
class raylib.ex.WindowException--><g id="elem_raylib.ex.WindowException"><rect codeLine="919" fill="#F1F1F1" height="67.0679" id="raylib.ex.WindowException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="305" x="14899.5" y="2994.602"/><ellipse cx="14988.25" cy="3010.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M14988.0469,3017.102 Q14985.5625,3017.102 14984.2344,3015.4301 Q14982.9219,3013.7582 14982.9219,3010.602 Q14982.9219,3007.4457 14984.2344,3005.7895 Q14985.5625,3004.102 14988.0469,3004.102 Q14988.7656,3004.102 14989.4219,3004.2582 Q14990.0625,3004.4145 14990.625,3004.727 L14990.625,3007.5239 Q14990.2656,3007.1801 14989.9688,3006.9926 Q14989.6719,3006.7895 14989.4063,3006.6801 Q14989.0938,3006.5395 14988.7813,3006.477 Q14988.4844,3006.4145 14988.1719,3006.4145 Q14986.8438,3006.4145 14986.1563,3007.477 Q14985.4688,3008.5551 14985.4688,3010.602 Q14985.4688,3012.6801 14986.1563,3013.727 Q14986.8438,3014.7895 14988.1719,3014.7895 Q14988.8125,3014.7895 14989.4063,3014.5239 Q14989.7031,3014.3832 14989.9844,3014.1957 Q14990.2813,3014.0082 14990.625,3013.6801 L14990.625,3016.477 Q14990.0469,3016.7895 14989.4063,3016.9457 Q14988.7813,3017.102 14988.0469,3017.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="119" x="15008.75" y="3016.034">WindowException</text><line style="stroke:#181818;stroke-width:0.5;" x1="14900.5" x2="15203.5" y1="3026.602" y2="3026.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="14900.5" x2="15203.5" y1="3034.602" y2="3034.602"/><ellipse cx="14910.5" cy="3045.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="279" x="14919.5" y="3053.5679">WindowException(const std::string&amp; msg)</text></g><!--MD5=[745590256b95e9da45dcf0ef304f0520]
class raylib.builder.IBuilder--><g id="elem_raylib.builder.IBuilder"><rect codeLine="925" fill="#F1F1F1" height="67.0679" id="raylib.builder.IBuilder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="211" x="11166.5" y="2104.602"/><ellipse cx="11181.5" cy="2120.602" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M11180.125,2113.352 L11183.1094,2113.352 L11186.4688,2126.352 L11184.0156,2126.352 L11183.25,2123.352 L11179.9688,2123.352 L11179.2188,2126.352 L11176.7813,2126.352 L11180.125,2113.352 Z M11182.7813,2121.227 L11181.6094,2115.7582 L11180.4531,2121.227 L11182.7813,2121.227 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="50" x="11195.5" y="2126.034">IBuilder</text><rect fill="#FFFFFF" height="18.3441" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="127" x="11253.5" y="2101.602"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="125" x="11254.5" y="2115.4301">template&lt;typename T&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="11167.5" x2="11376.5" y1="2136.602" y2="2136.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="11167.5" x2="11376.5" y1="2144.602" y2="2144.602"/><ellipse cx="11177.5" cy="2155.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="59" x="11186.5" y="2163.5679">build() : T</text></g><!--MD5=[806b130846df0b1593a3fee07e478ddf]
class raylib.builder.RlCameraBuilder--><g id="elem_raylib.builder.RlCameraBuilder"><rect codeLine="929" fill="#F1F1F1" height="314.9508" id="raylib.builder.RlCameraBuilder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="468" x="10346" y="2870.602"/><ellipse cx="10518.75" cy="2886.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M10518.5469,2893.102 Q10516.0625,2893.102 10514.7344,2891.4301 Q10513.4219,2889.7582 10513.4219,2886.602 Q10513.4219,2883.4457 10514.7344,2881.7895 Q10516.0625,2880.102 10518.5469,2880.102 Q10519.2656,2880.102 10519.9219,2880.2582 Q10520.5625,2880.4145 10521.125,2880.727 L10521.125,2883.5239 Q10520.7656,2883.1801 10520.4688,2882.9926 Q10520.1719,2882.7895 10519.9063,2882.6801 Q10519.5938,2882.5395 10519.2813,2882.477 Q10518.9844,2882.4145 10518.6719,2882.4145 Q10517.3438,2882.4145 10516.6563,2883.477 Q10515.9688,2884.5551 10515.9688,2886.602 Q10515.9688,2888.6801 10516.6563,2889.727 Q10517.3438,2890.7895 10518.6719,2890.7895 Q10519.3125,2890.7895 10519.9063,2890.5239 Q10520.2031,2890.3832 10520.4844,2890.1957 Q10520.7813,2890.0082 10521.125,2889.6801 L10521.125,2892.477 Q10520.5469,2892.7895 10519.9063,2892.9457 Q10519.2813,2893.102 10518.5469,2893.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="10539.25" y="2892.034">RlCameraBuilder</text><line style="stroke:#181818;stroke-width:0.5;" x1="10347" x2="10813" y1="2902.602" y2="2902.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10354" y="2910.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="10366" y="2921.5679">_cameraMode : CameraMode</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10354" y="2929.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="10366" y="2940.6358">_projection : CameraProjection</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10354" y="2948.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="10366" y="2959.7038">_lookingPoint : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10354" y="2967.8057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="10366" y="2978.7717">_position : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10354" y="2986.8736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="10366" y="2997.8396">_target : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10354" y="3005.9416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="10366" y="3016.9075">_fovy : float</text><line style="stroke:#181818;stroke-width:0.5;" x1="10347" x2="10813" y1="3025.0095" y2="3025.0095"/><ellipse cx="10357" cy="3036.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="122" x="10366" y="3043.9754">RlCameraBuilder()</text><ellipse cx="10357" cy="3055.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="10366" y="3063.0433">build() : RlCamera</text><ellipse cx="10357" cy="3074.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="436" x="10366" y="3082.1113">setCameraMode(CameraMode cameraMode) : RlCameraBuilder&amp;</text><ellipse cx="10357" cy="3093.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="254" x="10366" y="3101.1792">setFovy(float fovy) : RlCameraBuilder&amp;</text><ellipse cx="10357" cy="3112.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="442" x="10366" y="3120.2471">setLookingPoint(const Vector3f&amp; lookingPoint) : RlCameraBuilder&amp;</text><ellipse cx="10357" cy="3131.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="380" x="10366" y="3139.315">setPosition(const Vector3f&amp; position) : RlCameraBuilder&amp;</text><ellipse cx="10357" cy="3150.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="422" x="10366" y="3158.3829">setProjection(CameraProjection projection) : RlCameraBuilder&amp;</text><ellipse cx="10357" cy="3169.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="358" x="10366" y="3177.4508">setTarget(const Vector3f&amp; target) : RlCameraBuilder&amp;</text></g><!--MD5=[81e0877a4882158be22e698a9e5257e4]
class raylib.builder.RlImageBuilder--><g id="elem_raylib.builder.RlImageBuilder"><rect codeLine="946" fill="#F1F1F1" height="753.5129" id="raylib.builder.RlImageBuilder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="379" x="10849.5" y="2651.102"/><ellipse cx="10982.25" cy="2667.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M10982.0469,2673.602 Q10979.5625,2673.602 10978.2344,2671.9301 Q10976.9219,2670.2582 10976.9219,2667.102 Q10976.9219,2663.9457 10978.2344,2662.2895 Q10979.5625,2660.602 10982.0469,2660.602 Q10982.7656,2660.602 10983.4219,2660.7582 Q10984.0625,2660.9145 10984.625,2661.227 L10984.625,2664.0239 Q10984.2656,2663.6801 10983.9688,2663.4926 Q10983.6719,2663.2895 10983.4063,2663.1801 Q10983.0938,2663.0395 10982.7813,2662.977 Q10982.4844,2662.9145 10982.1719,2662.9145 Q10980.8438,2662.9145 10980.1563,2663.977 Q10979.4688,2665.0551 10979.4688,2667.102 Q10979.4688,2669.1801 10980.1563,2670.227 Q10980.8438,2671.2895 10982.1719,2671.2895 Q10982.8125,2671.2895 10983.4063,2671.0239 Q10983.7031,2670.8832 10983.9844,2670.6957 Q10984.2813,2670.5082 10984.625,2670.1801 L10984.625,2672.977 Q10984.0469,2673.2895 10983.4063,2673.4457 Q10982.7813,2673.602 10982.0469,2673.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="105" x="11002.75" y="2672.534">RlImageBuilder</text><line style="stroke:#181818;stroke-width:0.5;" x1="10850.5" x2="11227.5" y1="2683.102" y2="2683.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10857.5" y="2691.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="10869.5" y="2702.0679">_bottom : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10857.5" y="2710.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="93" x="10869.5" y="2721.1358">_col1 : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10857.5" y="2729.2378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="93" x="10869.5" y="2740.2038">_col2 : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10857.5" y="2748.3057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="10869.5" y="2759.2717">_color : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10857.5" y="2767.3736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="10869.5" y="2778.3396">_inner : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10857.5" y="2786.4416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="88" x="10869.5" y="2797.4075">_left : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10857.5" y="2805.5095"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="10869.5" y="2816.4754">_outer : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10857.5" y="2824.5774"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="10869.5" y="2835.5433">_right : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10857.5" y="2843.6453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="88" x="10869.5" y="2854.6113">_top : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10857.5" y="2862.7132"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="10869.5" y="2873.6792">_density : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10857.5" y="2881.7812"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="87" x="10869.5" y="2892.7471">_factor : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10857.5" y="2900.8491"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="10869.5" y="2911.815">_checksX : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10857.5" y="2919.917"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="10869.5" y="2930.8829">_checksY : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10857.5" y="2938.9849"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="10869.5" y="2949.9508">_height : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10857.5" y="2958.0528"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="10869.5" y="2969.0188">_titleSize : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10857.5" y="2977.1207"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="10869.5" y="2988.0867">_width : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10857.5" y="2996.1887"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="81" x="10869.5" y="3007.1546">_flags : long</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10857.5" y="3015.2566"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="10869.5" y="3026.2225">_type : long</text><line style="stroke:#181818;stroke-width:0.5;" x1="10850.5" x2="11227.5" y1="3034.3245" y2="3034.3245"/><ellipse cx="10860.5" cy="3045.3245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="10869.5" y="3053.2904">RlImageBuilder()</text><ellipse cx="10860.5" cy="3064.3924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="353" x="10869.5" y="3072.3583">setBottom(const RlColor&amp; bottom) : RlImageBuilder&amp;</text><ellipse cx="10860.5" cy="3083.4603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="335" x="10869.5" y="3091.4263">setChecksX(const int&amp; checksX) : RlImageBuilder&amp;</text><ellipse cx="10860.5" cy="3102.5282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="335" x="10869.5" y="3110.4942">setChecksY(const int&amp; checksY) : RlImageBuilder&amp;</text><ellipse cx="10860.5" cy="3121.5962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="10869.5" y="3129.5621">setCol1(const RlColor&amp; col1) : RlImageBuilder&amp;</text><ellipse cx="10860.5" cy="3140.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="10869.5" y="3148.63">setCol2(const RlColor&amp; col2) : RlImageBuilder&amp;</text><ellipse cx="10860.5" cy="3159.732" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="325" x="10869.5" y="3167.6979">setColor(const RlColor&amp; color) : RlImageBuilder&amp;</text><ellipse cx="10860.5" cy="3178.7999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="338" x="10869.5" y="3186.7658">setDensity(const float&amp; density) : RlImageBuilder&amp;</text><ellipse cx="10860.5" cy="3197.8678" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="319" x="10869.5" y="3205.8338">setFactor(const float&amp; factor) : RlImageBuilder&amp;</text><ellipse cx="10860.5" cy="3216.9357" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="316" x="10869.5" y="3224.9017">setHeight(const int&amp; height) : RlImageBuilder&amp;</text><ellipse cx="10860.5" cy="3236.0037" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="330" x="10869.5" y="3243.9696">setInner(const RlColor&amp; inner) : RlImageBuilder&amp;</text><ellipse cx="10860.5" cy="3255.0716" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="304" x="10869.5" y="3263.0375">setLeft(const RlColor&amp; left) : RlImageBuilder&amp;</text><ellipse cx="10860.5" cy="3274.1395" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="332" x="10869.5" y="3282.1054">setOuter(const RlColor&amp; outer) : RlImageBuilder&amp;</text><ellipse cx="10860.5" cy="3293.2074" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="326" x="10869.5" y="3301.1733">setRight(const RlColor&amp; right) : RlImageBuilder&amp;</text><ellipse cx="10860.5" cy="3312.2753" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="336" x="10869.5" y="3320.2413">setTitleSize(const int&amp; titleSize) : RlImageBuilder&amp;</text><ellipse cx="10860.5" cy="3331.3432" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="304" x="10869.5" y="3339.3092">setTop(const RlColor&amp; top) : RlImageBuilder&amp;</text><ellipse cx="10860.5" cy="3350.4112" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="295" x="10869.5" y="3358.3771">setType(ImageType type) : RlImageBuilder&amp;</text><ellipse cx="10860.5" cy="3369.4791" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="305" x="10869.5" y="3377.445">setWidth(const int&amp; width) : RlImageBuilder&amp;</text><ellipse cx="10860.5" cy="3388.547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="207" x="10869.5" y="3396.5129">build() : raylib::image::RlImage</text></g><!--MD5=[3b7ecc343caed62a40870f10057519fe]
class raylib.builder.RlMeshBuilder--><g id="elem_raylib.builder.RlMeshBuilder"><rect codeLine="986" fill="#F1F1F1" height="772.5808" id="raylib.builder.RlMeshBuilder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="484" x="11263" y="2641.602"/><ellipse cx="11451.25" cy="2657.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M11451.0469,2664.102 Q11448.5625,2664.102 11447.2344,2662.4301 Q11445.9219,2660.7582 11445.9219,2657.602 Q11445.9219,2654.4457 11447.2344,2652.7895 Q11448.5625,2651.102 11451.0469,2651.102 Q11451.7656,2651.102 11452.4219,2651.2582 Q11453.0625,2651.4145 11453.625,2651.727 L11453.625,2654.5239 Q11453.2656,2654.1801 11452.9688,2653.9926 Q11452.6719,2653.7895 11452.4063,2653.6801 Q11452.0938,2653.5395 11451.7813,2653.477 Q11451.4844,2653.4145 11451.1719,2653.4145 Q11449.8438,2653.4145 11449.1563,2654.477 Q11448.4688,2655.5551 11448.4688,2657.602 Q11448.4688,2659.6801 11449.1563,2660.727 Q11449.8438,2661.7895 11451.1719,2661.7895 Q11451.8125,2661.7895 11452.4063,2661.5239 Q11452.7031,2661.3832 11452.9844,2661.1957 Q11453.2813,2661.0082 11453.625,2660.6801 L11453.625,2663.477 Q11453.0469,2663.7895 11452.4063,2663.9457 Q11451.7813,2664.102 11451.0469,2664.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="11471.75" y="2663.034">RlMeshBuilder</text><line style="stroke:#181818;stroke-width:0.5;" x1="11264" x2="11746" y1="2673.602" y2="2673.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11271" y="2681.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="133" x="11283" y="2692.5679">_cubeSize : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11271" y="2700.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="135" x="11283" y="2711.6358">_vec3fSize : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11271" y="2719.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="92" x="11283" y="2730.7038">_height : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11271" y="2738.8057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="92" x="11283" y="2749.7717">_length : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11271" y="2757.8736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="91" x="11283" y="2768.8396">_radius : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11271" y="2776.9416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="11283" y="2787.9075">_size : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11271" y="2796.0095"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="11283" y="2806.9754">_width : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11271" y="2815.0774"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="190" x="11283" y="2826.0433">_cubicmap : image::RlImage</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11271" y="2834.1453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="198" x="11283" y="2845.1113">_heightmap : image::RlImage</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11271" y="2853.2132"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="84" x="11283" y="2864.1792">_radSeg : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11271" y="2872.2812"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="65" x="11283" y="2883.2471">_resX : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11271" y="2891.3491"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="65" x="11283" y="2902.315">_resZ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11271" y="2910.417"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="11283" y="2921.3829">_rings : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11271" y="2929.4849"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="11283" y="2940.4508">_sides : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11271" y="2948.5528"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="11283" y="2959.5188">_slices : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11271" y="2967.6207"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="81" x="11283" y="2978.5867">_flags : long</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11271" y="2986.6887"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="11283" y="2997.6546">_type : long</text><line style="stroke:#181818;stroke-width:0.5;" x1="11264" x2="11746" y1="3005.7566" y2="3005.7566"/><ellipse cx="11274" cy="3016.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="11283" y="3024.7225">RlMeshBuilder()</text><ellipse cx="11274" cy="3035.8245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="105" x="11283" y="3043.7904">build() : RlMesh</text><ellipse cx="11274" cy="3054.8924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="330" x="11283" y="3062.8583">setConeSlices(const int&amp; slices) : RlMeshBuilder&amp;</text><ellipse cx="11274" cy="3073.9603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="380" x="11283" y="3081.9263">setCubeSize(const Vector3f&amp; cubeSize) : RlMeshBuilder&amp;</text><ellipse cx="11274" cy="3093.0282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="443" x="11283" y="3100.9942">setCubicmap(const image::RlImage&amp; cubicmap) : RlMeshBuilder&amp;</text><ellipse cx="11274" cy="3112.0962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="322" x="11283" y="3120.0621">setHeight(const float&amp; height) : RlMeshBuilder&amp;</text><ellipse cx="11274" cy="3131.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="458" x="11283" y="3139.13">setHeightmap(const image::RlImage&amp; heightmap) : RlMeshBuilder&amp;</text><ellipse cx="11274" cy="3150.232" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="376" x="11283" y="3158.1979">setHemisphereRings(const int&amp; rings) : RlMeshBuilder&amp;</text><ellipse cx="11274" cy="3169.2999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="351" x="11283" y="3177.2658">setKnotRadSeg(const int&amp; radSeg) : RlMeshBuilder&amp;</text><ellipse cx="11274" cy="3188.3678" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="324" x="11283" y="3196.3338">setLength(const float&amp; length) : RlMeshBuilder&amp;</text><ellipse cx="11274" cy="3207.4357" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="360" x="11283" y="3215.4017">setMeshType(MeshType meshType) : RlMeshBuilder&amp;</text><ellipse cx="11274" cy="3226.5037" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="320" x="11283" y="3234.4696">setRadSeg(const int&amp; radSeg) : RlMeshBuilder&amp;</text><ellipse cx="11274" cy="3245.5716" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="322" x="11283" y="3253.5375">setRadius(const float&amp; radius) : RlMeshBuilder&amp;</text><ellipse cx="11274" cy="3264.6395" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="282" x="11283" y="3272.6054">setResX(const int&amp; resX) : RlMeshBuilder&amp;</text><ellipse cx="11274" cy="3283.7074" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="282" x="11283" y="3291.6733">setResZ(const int&amp; resZ) : RlMeshBuilder&amp;</text><ellipse cx="11274" cy="3302.7753" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="294" x="11283" y="3310.7413">setRings(const int&amp; rings) : RlMeshBuilder&amp;</text><ellipse cx="11274" cy="3321.8432" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="292" x="11283" y="3329.8092">setSides(const int&amp; sides) : RlMeshBuilder&amp;</text><ellipse cx="11274" cy="3340.9112" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="286" x="11283" y="3348.8771">setSize(const float&amp; size) : RlMeshBuilder&amp;</text><ellipse cx="11274" cy="3359.9791" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="296" x="11283" y="3367.945">setSlices(const int&amp; slices) : RlMeshBuilder&amp;</text><ellipse cx="11274" cy="3379.047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="347" x="11283" y="3387.0129">setVec3fSize(const Vector3f&amp; size) : RlMeshBuilder&amp;</text><ellipse cx="11274" cy="3398.1149" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="311" x="11283" y="3406.0808">setWidth(const float&amp; width) : RlMeshBuilder&amp;</text></g><!--MD5=[29538f7755bd2325990f0c2ee99bf13e]
class raylib.builder.RlTextBuilder--><g id="elem_raylib.builder.RlTextBuilder"><rect codeLine="1027" fill="#F1F1F1" height="505.63" id="raylib.builder.RlTextBuilder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="515" x="11782.5" y="2775.102"/><ellipse cx="11990.75" cy="2791.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M11990.5469,2797.602 Q11988.0625,2797.602 11986.7344,2795.9301 Q11985.4219,2794.2582 11985.4219,2791.102 Q11985.4219,2787.9457 11986.7344,2786.2895 Q11988.0625,2784.602 11990.5469,2784.602 Q11991.2656,2784.602 11991.9219,2784.7582 Q11992.5625,2784.9145 11993.125,2785.227 L11993.125,2788.0239 Q11992.7656,2787.6801 11992.4688,2787.4926 Q11992.1719,2787.2895 11991.9063,2787.1801 Q11991.5938,2787.0395 11991.2813,2786.977 Q11990.9844,2786.9145 11990.6719,2786.9145 Q11989.3438,2786.9145 11988.6563,2787.977 Q11987.9688,2789.0551 11987.9688,2791.102 Q11987.9688,2793.1801 11988.6563,2794.227 Q11989.3438,2795.2895 11990.6719,2795.2895 Q11991.3125,2795.2895 11991.9063,2795.0239 Q11992.2031,2794.8832 11992.4844,2794.6957 Q11992.7813,2794.5082 11993.125,2794.1801 L11993.125,2796.977 Q11992.5469,2797.2895 11991.9063,2797.4457 Q11991.2813,2797.602 11990.5469,2797.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="12011.25" y="2796.534">RlTextBuilder</text><line style="stroke:#181818;stroke-width:0.5;" x1="11783.5" x2="12296.5" y1="2807.102" y2="2807.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11790.5" y="2815.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="11802.5" y="2826.0679">_color : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11790.5" y="2834.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="11802.5" y="2845.1358">_origin : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11790.5" y="2853.2378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="11802.5" y="2864.2038">_position : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11790.5" y="2872.3057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="11802.5" y="2883.2717">_isFontPathSet : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11790.5" y="2891.3736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="108" x="11802.5" y="2902.3396">_isFontSet : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11790.5" y="2910.4416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="135" x="11802.5" y="2921.4075">_isFontSizeSet : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11790.5" y="2929.5095"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="11802.5" y="2940.4754">_isTextSet : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11790.5" y="2948.5774"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="11802.5" y="2959.5433">_fontSize : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11790.5" y="2967.6453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="11802.5" y="2978.6113">_rotation : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11790.5" y="2986.7132"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="11802.5" y="2997.6792">_textSpacing : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11790.5" y="3005.7812"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="284" x="11802.5" y="3016.7471">_font : std::shared_ptr&lt;raylib::text::RlFont&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11790.5" y="3024.8491"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="11802.5" y="3035.815">_fontPath : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11790.5" y="3043.917"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="11802.5" y="3054.8829">_text : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="11783.5" x2="12296.5" y1="3062.9849" y2="3062.9849"/><ellipse cx="11793.5" cy="3073.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="11802.5" y="3081.9508">RlTextBuilder()</text><ellipse cx="11793.5" cy="3093.0528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="310" x="11802.5" y="3101.0188">setColor(const RlColor&amp; color) : RlTextBuilder&amp;</text><ellipse cx="11793.5" cy="3112.1207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="489" x="11802.5" y="3120.0867">setFont(const std::shared_ptr&lt;raylib::text::RlFont&gt;&amp; font) : RlTextBuilder&amp;</text><ellipse cx="11793.5" cy="3131.1887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="379" x="11802.5" y="3139.1546">setFontPath(const std::string&amp; fontPath) : RlTextBuilder&amp;</text><ellipse cx="11793.5" cy="3150.2566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="334" x="11802.5" y="3158.2225">setFontSize(const float&amp; fontSize) : RlTextBuilder&amp;</text><ellipse cx="11793.5" cy="3169.3245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="332" x="11802.5" y="3177.2904">setOrigin(const Vector2f&amp; origin) : RlTextBuilder&amp;</text><ellipse cx="11793.5" cy="3188.3924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="356" x="11802.5" y="3196.3583">setPosition(const Vector2f&amp; position) : RlTextBuilder&amp;</text><ellipse cx="11793.5" cy="3207.4603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="333" x="11802.5" y="3215.4263">setRotation(const float&amp; rotation) : RlTextBuilder&amp;</text><ellipse cx="11793.5" cy="3226.5282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="331" x="11802.5" y="3234.4942">setSpacing(const float&amp; spacing) : RlTextBuilder&amp;</text><ellipse cx="11793.5" cy="3245.5962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="316" x="11802.5" y="3253.5621">setText(const std::string&amp; text) : RlTextBuilder&amp;</text><ellipse cx="11793.5" cy="3264.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="11802.5" y="3272.63">build() : raylib::text::RlText</text></g><!--MD5=[2f92eb9eddbb53a77ac8fa899ba3ae23]
class raylib.builder.RlImageBuilder::ImageType--><g id="elem_raylib.builder.RlImageBuilder::ImageType"><rect codeLine="1054" fill="#F1F1F1" height="181.4754" id="raylib.builder.RlImageBuilder::ImageType" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="220" x="10706" y="3923.102"/><ellipse cx="10721" cy="3939.102" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M10717.3906,3932.602 L10725.1094,3932.602 L10725.1094,3934.8832 L10719.8438,3934.8832 L10719.8438,3937.602 L10724.6094,3937.602 L10724.6094,3939.8832 L10719.8438,3939.8832 L10719.8438,3943.3364 L10725.1094,3943.3364 L10725.1094,3945.602 L10717.3906,3945.602 L10717.3906,3932.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="10735" y="3944.534">RlImageBuilder::ImageType</text><line style="stroke:#181818;stroke-width:0.5;" x1="10707" x2="10925" y1="3955.102" y2="3955.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="10712" y="3974.0679">ImageCellular</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="10712" y="3993.1358">ImageChecked</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="78" x="10712" y="4012.2038">ImageColor</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="10712" y="4031.2717">ImageGradientH</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="10712" y="4050.3396">ImageGradientRadial</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="10712" y="4069.4075">ImageGradientV</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="10712" y="4088.4754">ImageWhiteNoise</text><line style="stroke:#181818;stroke-width:0.5;" x1="10707" x2="10925" y1="4096.5774" y2="4096.5774"/></g><!--MD5=[3936ca64184c47e72f549fd88b81ba13]
class raylib.builder.RlImageBuilder::ParameterName--><g id="elem_raylib.builder.RlImageBuilder::ParameterName"><rect codeLine="1064" fill="#F1F1F1" height="353.0867" id="raylib.builder.RlImageBuilder::ParameterName" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="255" x="10961.5" y="3837.102"/><ellipse cx="10976.5" cy="3853.102" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M10972.8906,3846.602 L10980.6094,3846.602 L10980.6094,3848.8832 L10975.3438,3848.8832 L10975.3438,3851.602 L10980.1094,3851.602 L10980.1094,3853.8832 L10975.3438,3853.8832 L10975.3438,3857.3364 L10980.6094,3857.3364 L10980.6094,3859.602 L10972.8906,3859.602 L10972.8906,3846.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="223" x="10990.5" y="3858.534">RlImageBuilder::ParameterName</text><line style="stroke:#181818;stroke-width:0.5;" x1="10962.5" x2="11215.5" y1="3869.102" y2="3869.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="48" x="10967.5" y="3888.0679">Bottom</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="55" x="10967.5" y="3907.1358">ChecksX</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="55" x="10967.5" y="3926.2038">ChecksY</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="29" x="10967.5" y="3945.2717">Col1</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="29" x="10967.5" y="3964.3396">Col2</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="35" x="10967.5" y="3983.4075">Color</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="50" x="10967.5" y="4002.4754">Density</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="41" x="10967.5" y="4021.5433">Factor</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="45" x="10967.5" y="4040.6113">Height</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="37" x="10967.5" y="4059.6792">Inner</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="25" x="10967.5" y="4078.7471">Left</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="39" x="10967.5" y="4097.815">Outer</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="36" x="10967.5" y="4116.8829">Right</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="10967.5" y="4135.9508">TitleSize</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="25" x="10967.5" y="4155.0188">Top</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="40" x="10967.5" y="4174.0867">Width</text><line style="stroke:#181818;stroke-width:0.5;" x1="10962.5" x2="11215.5" y1="4182.1887" y2="4182.1887"/></g><!--MD5=[5b2c63a1681952f0b429955e11ff60f8]
class raylib.builder.RlMeshBuilder::MeshType--><g id="elem_raylib.builder.RlMeshBuilder::MeshType"><rect codeLine="1083" fill="#F1F1F1" height="257.7471" id="raylib.builder.RlMeshBuilder::MeshType" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="208" x="11351" y="3884.602"/><ellipse cx="11366" cy="3900.602" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M11362.3906,3894.102 L11370.1094,3894.102 L11370.1094,3896.3832 L11364.8438,3896.3832 L11364.8438,3899.102 L11369.6094,3899.102 L11369.6094,3901.3832 L11364.8438,3901.3832 L11364.8438,3904.8364 L11370.1094,3904.8364 L11370.1094,3907.102 L11362.3906,3907.102 L11362.3906,3894.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="11380" y="3906.034">RlMeshBuilder::MeshType</text><line style="stroke:#181818;stroke-width:0.5;" x1="11352" x2="11558" y1="3916.602" y2="3916.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="11357" y="3935.5679">MeshCone</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="11357" y="3954.6358">MeshCube</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="105" x="11357" y="3973.7038">MeshCubicmap</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="93" x="11357" y="3992.7717">MeshCylinder</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="11357" y="4011.8396">MeshHeightmap</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="11357" y="4030.9075">MeshHemiSphere</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="68" x="11357" y="4049.9754">MeshKnot</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="11357" y="4069.0433">MeshPlane</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="64" x="11357" y="4088.1113">MeshPoly</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="85" x="11357" y="4107.1792">MeshSphere</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="11357" y="4126.2471">MeshTorus</text><line style="stroke:#181818;stroke-width:0.5;" x1="11352" x2="11558" y1="4134.3491" y2="4134.3491"/></g><!--MD5=[7a20b23c03bc5d510bbd0cd034319bce]
class raylib.builder.RlMeshBuilder::ParameterName--><g id="elem_raylib.builder.RlMeshBuilder::ParameterName"><rect codeLine="1097" fill="#F1F1F1" height="391.2225" id="raylib.builder.RlMeshBuilder::ParameterName" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="249" x="11594.5" y="3818.102"/><ellipse cx="11609.5" cy="3834.102" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M11605.8906,3827.602 L11613.6094,3827.602 L11613.6094,3829.8832 L11608.3438,3829.8832 L11608.3438,3832.602 L11613.1094,3832.602 L11613.1094,3834.8832 L11608.3438,3834.8832 L11608.3438,3838.3364 L11613.6094,3838.3364 L11613.6094,3840.602 L11605.8906,3840.602 L11605.8906,3827.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="217" x="11623.5" y="3839.534">RlMeshBuilder::ParameterName</text><line style="stroke:#181818;stroke-width:0.5;" x1="11595.5" x2="11842.5" y1="3850.102" y2="3850.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="11600.5" y="3869.0679">ConeSlices</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="62" x="11600.5" y="3888.1358">CubeSize</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="68" x="11600.5" y="3907.2038">Cubicmap</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="45" x="11600.5" y="3926.2717">Height</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="11600.5" y="3945.3396">Heightmap</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="11600.5" y="3964.4075">HemisphereRings</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="11600.5" y="3983.4754">KnotRadSeg</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="47" x="11600.5" y="4002.5433">Length</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="51" x="11600.5" y="4021.6113">RadSeg</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="46" x="11600.5" y="4040.6792">Radius</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="32" x="11600.5" y="4059.7471">ResX</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="32" x="11600.5" y="4078.815">ResZ</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="38" x="11600.5" y="4097.8829">Rings</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="36" x="11600.5" y="4116.9508">Sides</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="11600.5" y="4136.0188">Size</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="38" x="11600.5" y="4155.0867">Slices</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="63" x="11600.5" y="4174.1546">Vec3fSize</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="40" x="11600.5" y="4193.2225">Width</text><line style="stroke:#181818;stroke-width:0.5;" x1="11595.5" x2="11842.5" y1="4201.3245" y2="4201.3245"/></g><!--MD5=[48889dbb51d175831d6f99c2c77ffabc]
class raylib.audio.RlSound--><g id="elem_raylib.audio.RlSound"><rect codeLine="1120" fill="#F1F1F1" height="391.2225" id="raylib.audio.RlSound" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="358" x="7845" y="1942.602"/><ellipse cx="7991.75" cy="1958.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M7991.5469,1965.102 Q7989.0625,1965.102 7987.7344,1963.4301 Q7986.4219,1961.7582 7986.4219,1958.602 Q7986.4219,1955.4457 7987.7344,1953.7895 Q7989.0625,1952.102 7991.5469,1952.102 Q7992.2656,1952.102 7992.9219,1952.2582 Q7993.5625,1952.4145 7994.125,1952.727 L7994.125,1955.5239 Q7993.7656,1955.1801 7993.4688,1954.9926 Q7993.1719,1954.7895 7992.9063,1954.6801 Q7992.5938,1954.5395 7992.2813,1954.477 Q7991.9844,1954.4145 7991.6719,1954.4145 Q7990.3438,1954.4145 7989.6563,1955.477 Q7988.9688,1956.5551 7988.9688,1958.602 Q7988.9688,1960.6801 7989.6563,1961.727 Q7990.3438,1962.7895 7991.6719,1962.7895 Q7992.3125,1962.7895 7992.9063,1962.5239 Q7993.2031,1962.3832 7993.4844,1962.1957 Q7993.7813,1962.0082 7994.125,1961.6801 L7994.125,1964.477 Q7993.5469,1964.7895 7992.9063,1964.9457 Q7992.2813,1965.102 7991.5469,1965.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="8012.25" y="1964.034">RlSound</text><line style="stroke:#181818;stroke-width:0.5;" x1="7846" x2="8202" y1="1974.602" y2="1974.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7853" y="1982.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="7865" y="1993.5679">_sound : Sound</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7853" y="2001.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="7865" y="2012.6358">_volume : float</text><line style="stroke:#181818;stroke-width:0.5;" x1="7846" x2="8202" y1="2020.7378" y2="2020.7378"/><ellipse cx="7856" cy="2031.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="7865" y="2039.7038">RlSound(const Sound&amp; sound)</text><ellipse cx="7856" cy="2050.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="248" x="7865" y="2058.7717">RlSound(const std::string&amp; fileName)</text><ellipse cx="7856" cy="2069.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="7865" y="2077.8396">RlSound(Wave wave)</text><ellipse cx="7856" cy="2088.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="7865" y="2096.9075">~RlSound()</text><ellipse cx="7856" cy="2108.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="7865" y="2115.9754">isPlaying() : bool</text><ellipse cx="7856" cy="2127.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="7865" y="2135.0433">getVolume() : float {query}</text><ellipse cx="7856" cy="2146.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="116" x="7865" y="2154.1113">getPlayings() : int</text><ellipse cx="7856" cy="2165.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="7865" y="2173.1792">pause() : void</text><ellipse cx="7856" cy="2184.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="7865" y="2192.2471">play() : void</text><ellipse cx="7856" cy="2203.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="7865" y="2211.315">playMulti() : void</text><ellipse cx="7856" cy="2222.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="7865" y="2230.3829">resume() : void</text><ellipse cx="7856" cy="2241.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="169" x="7865" y="2249.4508">setPitch(float pitch) : void</text><ellipse cx="7856" cy="2260.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="7865" y="2268.5188">setVolume(float volume) : void</text><ellipse cx="7856" cy="2279.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="7865" y="2287.5867">stop() : void</text><ellipse cx="7856" cy="2298.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="112" x="7865" y="2306.6546">stopMulti() : void</text><ellipse cx="7856" cy="2317.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="332" x="7865" y="2325.7225">update(const void* data, int samplesCount) : void</text></g><!--MD5=[6b250e1f0e9affbbb5eef47b032bc760]
class raylib.audio.RlWave--><g id="elem_raylib.audio.RlWave"><rect codeLine="1141" fill="#F1F1F1" height="353.0867" id="raylib.audio.RlWave" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="567" x="7242.5" y="1961.602"/><ellipse cx="7497.25" cy="1977.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M7497.0469,1984.102 Q7494.5625,1984.102 7493.2344,1982.4301 Q7491.9219,1980.7582 7491.9219,1977.602 Q7491.9219,1974.4457 7493.2344,1972.7895 Q7494.5625,1971.102 7497.0469,1971.102 Q7497.7656,1971.102 7498.4219,1971.2582 Q7499.0625,1971.4145 7499.625,1971.727 L7499.625,1974.5239 Q7499.2656,1974.1801 7498.9688,1973.9926 Q7498.6719,1973.7895 7498.4063,1973.6801 Q7498.0938,1973.5395 7497.7813,1973.477 Q7497.4844,1973.4145 7497.1719,1973.4145 Q7495.8438,1973.4145 7495.1563,1974.477 Q7494.4688,1975.5551 7494.4688,1977.602 Q7494.4688,1979.6801 7495.1563,1980.727 Q7495.8438,1981.7895 7497.1719,1981.7895 Q7497.8125,1981.7895 7498.4063,1981.5239 Q7498.7031,1981.3832 7498.9844,1981.1957 Q7499.2813,1981.0082 7499.625,1980.6801 L7499.625,1983.477 Q7499.0469,1983.7895 7498.4063,1983.9457 Q7497.7813,1984.102 7497.0469,1984.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="49" x="7517.75" y="1983.034">RlWave</text><line style="stroke:#181818;stroke-width:0.5;" x1="7243.5" x2="7808.5" y1="1993.602" y2="1993.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7250.5" y="2001.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="88" x="7262.5" y="2012.5679">_wave : Wave</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7250.5" y="2020.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="7262.5" y="2031.6358">_samplesPtr : float*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7250.5" y="2039.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="190" x="7262.5" y="2050.7038">_samples : std::vector&lt;float&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="7243.5" x2="7808.5" y1="2058.8057" y2="2058.8057"/><ellipse cx="7253.5" cy="2069.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="57" x="7262.5" y="2077.7717">RlWave()</text><ellipse cx="7253.5" cy="2088.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="181" x="7262.5" y="2096.8396">RlWave(const Wave&amp; wave)</text><ellipse cx="7253.5" cy="2107.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="211" x="7262.5" y="2115.9075">RlWave(const std::string&amp; path)</text><ellipse cx="7253.5" cy="2127.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="530" x="7262.5" y="2134.9754">RlWave(const std::string&amp; fileType, const unsigned char* fileData, int dataSize)</text><ellipse cx="7253.5" cy="2146.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="65" x="7262.5" y="2154.0433">~RlWave()</text><ellipse cx="7253.5" cy="2165.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="7262.5" y="2173.1113">copy() : RlWave</text><ellipse cx="7253.5" cy="2184.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="7262.5" y="2192.1792">getWave() : Wave&amp;</text><ellipse cx="7253.5" cy="2203.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="312" x="7262.5" y="2211.2471">exportWave(const std::string&amp; fileName) : bool</text><ellipse cx="7253.5" cy="2222.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="362" x="7262.5" y="2230.315">exportWaveAsCode(const std::string&amp; fileName) : bool</text><ellipse cx="7253.5" cy="2241.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="277" x="7262.5" y="2249.3829">toSound() : raylib::audio::RlSound {query}</text><ellipse cx="7253.5" cy="2260.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="215" x="7262.5" y="2268.4508">getSamples() : std::vector&lt;float&gt;</text><ellipse cx="7253.5" cy="2279.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="382" x="7262.5" y="2287.5188">crop(const int&amp; initSample, const int&amp; finalSample) : void</text><ellipse cx="7253.5" cy="2298.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="541" x="7262.5" y="2306.5867">format(const int&amp; sampleRate, const int&amp; sampleSize, const int&amp; channels) : void</text></g><!--MD5=[d320bb66ad027ada932e2126f8736f67]
class gameengine.AbstractBase--><g id="elem_gameengine.AbstractBase"><rect codeLine="1164" fill="#F1F1F1" height="334.0188" id="gameengine.AbstractBase" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="300" x="858" y="1252.602"/><ellipse cx="963.25" cy="1268.602" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M961.875,1261.352 L964.8594,1261.352 L968.2188,1274.352 L965.7656,1274.352 L965,1271.352 L961.7188,1271.352 L960.9688,1274.352 L958.5313,1274.352 L961.875,1261.352 Z M964.5313,1269.227 L963.3594,1263.7582 L962.2031,1269.227 L964.5313,1269.227 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="81" x="983.75" y="1274.034">AbstractBase</text><line style="stroke:#181818;stroke-width:0.5;" x1="859" x2="1157" y1="1284.602" y2="1284.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="866" y="1292.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="91" x="878" y="1303.5679">_hiding : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="866" y="1311.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="878" y="1322.6358">_group : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="866" y="1330.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="878" y="1341.7038">_name : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="859" x2="1157" y1="1349.8057" y2="1349.8057"/><ellipse cx="869" cy="1360.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="257" x="878" y="1368.7717">AbstractBase(const std::string&amp; name)</text><ellipse cx="869" cy="1379.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="238" x="878" y="1387.8396">AbstractBase(const AbstractBase &amp;)</text><ellipse cx="869" cy="1398.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="104" x="878" y="1406.9075">~AbstractBase()</text><ellipse cx="869" cy="1418.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="158" x="878" y="1425.9754">isHiding() : bool {query}</text><ellipse cx="869" cy="1437.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="173" x="878" y="1445.0433">getRotationDegrees() : float</text><ellipse cx="869" cy="1456.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="216" x="878" y="1464.1113">getGroup() : std::string&amp; {query}</text><ellipse cx="869" cy="1475.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="878" y="1483.1792">getName() : std::string&amp; {query}</text><ellipse cx="869" cy="1494.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="79" x="878" y="1502.2471">draw() : void</text><ellipse cx="869" cy="1513.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="83" x="878" y="1521.315">ready() : void</text><ellipse cx="869" cy="1532.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="274" x="878" y="1540.3829">setGroup(const std::string&amp; group) : void</text><ellipse cx="869" cy="1551.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="182" x="878" y="1559.4508">setHiding(bool value) : void</text><ellipse cx="869" cy="1570.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="156" x="878" y="1578.5188">update(float delta) : void</text></g><!--MD5=[73ba47e2addc18d86b710781c56ce235]
class gameengine.AudioManager--><g id="elem_gameengine.AudioManager"><rect codeLine="1182" fill="#F1F1F1" height="219.6113" id="gameengine.AudioManager" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="500" x="1872" y="206.602"/><ellipse cx="2067.75" cy="222.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2067.5469,229.102 Q2065.0625,229.102 2063.7344,227.4301 Q2062.4219,225.7582 2062.4219,222.602 Q2062.4219,219.4457 2063.7344,217.7895 Q2065.0625,216.102 2067.5469,216.102 Q2068.2656,216.102 2068.9219,216.2582 Q2069.5625,216.4145 2070.125,216.727 L2070.125,219.5239 Q2069.7656,219.1801 2069.4688,218.9926 Q2069.1719,218.7895 2068.9063,218.6801 Q2068.5938,218.5395 2068.2813,218.477 Q2067.9844,218.4145 2067.6719,218.4145 Q2066.3438,218.4145 2065.6563,219.477 Q2064.9688,220.5551 2064.9688,222.602 Q2064.9688,224.6801 2065.6563,225.727 Q2066.3438,226.7895 2067.6719,226.7895 Q2068.3125,226.7895 2068.9063,226.5239 Q2069.2031,226.3832 2069.4844,226.1957 Q2069.7813,226.0082 2070.125,225.6801 L2070.125,228.477 Q2069.5469,228.7895 2068.9063,228.9457 Q2068.2813,229.102 2067.5469,229.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="2088.25" y="228.034">AudioManager</text><line style="stroke:#181818;stroke-width:0.5;" x1="1873" x2="2371" y1="238.602" y2="238.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1880" y="246.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="333" x="1892" y="257.5679">_instance : static std::shared_ptr&lt;AudioManager&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1880" y="265.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="413" x="1892" y="276.6358">_sounds : std::vector&lt;std::unique_ptr&lt;gameengine::ISound&gt;&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="1873" x2="2371" y1="284.7378" y2="284.7378"/><ellipse cx="1883" cy="295.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="108" x="1892" y="303.7038">AudioManager()</text><ellipse cx="1883" cy="314.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="1892" y="322.7717">~AudioManager()</text><ellipse cx="1883" cy="333.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="328" x="1892" y="341.8396">getInstance() : std::shared_ptr&lt;AudioManager&gt;&amp;</text><ellipse cx="1883" cy="352.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="474" x="1892" y="360.9075">addSound(const std::string&amp; fileName, SoundCategory category) : void</text><ellipse cx="1883" cy="372.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="317" x="1892" y="379.9754">deleteSound(const std::string&amp; fileName) : void</text><ellipse cx="1883" cy="391.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="303" x="1892" y="399.0433">playSound(const std::string&amp; fileName) : void</text><ellipse cx="1883" cy="410.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="374" x="1892" y="418.1113">setVolume(float volume, SoundCategory category) : void</text></g><!--MD5=[53b8287e47ea96ba874def282d196b25]
class gameengine.Button--><g id="elem_gameengine.Button"><rect codeLine="1194" fill="#F1F1F1" height="524.6979" id="gameengine.Button" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="430" x="903" y="2765.602"/><ellipse cx="1092.75" cy="2781.602" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1091.375,2774.352 L1094.3594,2774.352 L1097.7188,2787.352 L1095.2656,2787.352 L1094.5,2784.352 L1091.2188,2784.352 L1090.4688,2787.352 L1088.0313,2787.352 L1091.375,2774.352 Z M1094.0313,2782.227 L1092.8594,2776.7582 L1091.7031,2782.227 L1094.0313,2782.227 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="42" x="1113.25" y="2787.034">Button</text><line style="stroke:#181818;stroke-width:0.5;" x1="904" x2="1332" y1="2797.602" y2="2797.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="911" y="2805.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="136" x="923" y="2816.5679">_bounds : Rectangle</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="911" y="2824.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="149" x="923" y="2835.6358">_rectangle : Rectangle</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="911" y="2843.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="923" y="2854.7038">_position : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="911" y="2862.8057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="923" y="2873.7717">_scale : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="911" y="2881.8736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="88" x="923" y="2892.8396">_action : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="911" y="2900.9416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="104" x="923" y="2911.9075">_isEnable : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="911" y="2920.0095"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="133" x="923" y="2930.9754">_frameHeight : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="911" y="2939.0774"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="923" y="2950.0433">_rotationDegrees : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="911" y="2958.1453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="923" y="2969.1113">_frameNum : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="911" y="2977.2132"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="923" y="2988.1792">_state : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="911" y="2996.2812"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="232" x="923" y="3007.2471">_texture : raylib::texture::RlTexture</text><line style="stroke:#181818;stroke-width:0.5;" x1="904" x2="1332" y1="3015.3491" y2="3015.3491"/><ellipse cx="914" cy="3026.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="404" x="923" y="3034.315">Button(const std::string&amp; name, const std::string&amp; filename)</text><ellipse cx="914" cy="3045.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="61" x="923" y="3053.3829">~Button()</text><ellipse cx="914" cy="3064.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="923" y="3072.4508">getPosition() : Vector2f</text><ellipse cx="914" cy="3083.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="923" y="3091.5188">getScale() : Vector2f</text><ellipse cx="914" cy="3102.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="923" y="3110.5867">getIsEnable() : bool</text><ellipse cx="914" cy="3121.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="184" x="923" y="3129.6546">getRotationDegrees() : float</text><ellipse cx="914" cy="3140.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="923" y="3148.7225">draw() : void</text><ellipse cx="914" cy="3159.8245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="95" x="923" y="3167.7904">pressed() : void</text><ellipse cx="914" cy="3178.8924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="923" y="3186.8583">ready() : void</text><ellipse cx="914" cy="3197.9603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="183" x="923" y="3205.9263">setEnable(bool value) : void</text><ellipse cx="914" cy="3217.0282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="923" y="3224.9942">setPosition(Vector2f position) : void</text><ellipse cx="914" cy="3236.0962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="323" x="923" y="3244.0621">setRotationDegrees(float rotationDegrees) : void</text><ellipse cx="914" cy="3255.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="923" y="3263.13">setScale(Vector2f scale) : void</text><ellipse cx="914" cy="3274.232" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="164" x="923" y="3282.1979">update(float delta) : void</text></g><!--MD5=[e663b9113743995422aa48378c1aeae8]
class gameengine.ISound--><g id="elem_gameengine.ISound"><rect codeLine="1222" fill="#F1F1F1" height="162.4075" id="gameengine.ISound" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="389" x="2585.5" y="839.602"/><ellipse cx="2751.75" cy="855.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2751.5469,862.102 Q2749.0625,862.102 2747.7344,860.4301 Q2746.4219,858.7582 2746.4219,855.602 Q2746.4219,852.4457 2747.7344,850.7895 Q2749.0625,849.102 2751.5469,849.102 Q2752.2656,849.102 2752.9219,849.2582 Q2753.5625,849.4145 2754.125,849.727 L2754.125,852.5239 Q2753.7656,852.1801 2753.4688,851.9926 Q2753.1719,851.7895 2752.9063,851.6801 Q2752.5938,851.5395 2752.2813,851.477 Q2751.9844,851.4145 2751.6719,851.4145 Q2750.3438,851.4145 2749.6563,852.477 Q2748.9688,853.5551 2748.9688,855.602 Q2748.9688,857.6801 2749.6563,858.727 Q2750.3438,859.7895 2751.6719,859.7895 Q2752.3125,859.7895 2752.9063,859.5239 Q2753.2031,859.3832 2753.4844,859.1957 Q2753.7813,859.0082 2754.125,858.6801 L2754.125,861.477 Q2753.5469,861.7895 2752.9063,861.9457 Q2752.2813,862.102 2751.5469,862.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="48" x="2772.25" y="861.034">ISound</text><line style="stroke:#181818;stroke-width:0.5;" x1="2586.5" x2="2973.5" y1="871.602" y2="871.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2593.5" y="879.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="179" x="2605.5" y="890.5679">_category : SoundCategory</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2593.5" y="898.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="2605.5" y="909.6358">_name : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="2586.5" x2="2973.5" y1="917.7378" y2="917.7378"/><ellipse cx="2596.5" cy="928.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="363" x="2605.5" y="936.7038">ISound(std::string fileName, SoundCategory category)</text><ellipse cx="2596.5" cy="947.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="64" x="2605.5" y="955.7717">~ISound()</text><ellipse cx="2596.5" cy="966.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="173" x="2605.5" y="974.8396">getCategory() : int {query}</text><ellipse cx="2596.5" cy="985.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="151" x="2605.5" y="993.9075">getName() : std::string</text></g><!--MD5=[253e2cf4bb34a8a29747238339daefb8]
class gameengine.KinematicBody--><g id="elem_gameengine.KinematicBody"><rect codeLine="1231" fill="#F1F1F1" height="124.2717" id="gameengine.KinematicBody" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="874" x="22" y="3951.602"/><ellipse cx="404.75" cy="3967.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M404.5469,3974.102 Q402.0625,3974.102 400.7344,3972.4301 Q399.4219,3970.7582 399.4219,3967.602 Q399.4219,3964.4457 400.7344,3962.7895 Q402.0625,3961.102 404.5469,3961.102 Q405.2656,3961.102 405.9219,3961.2582 Q406.5625,3961.4145 407.125,3961.727 L407.125,3964.5239 Q406.7656,3964.1801 406.4688,3963.9926 Q406.1719,3963.7895 405.9063,3963.6801 Q405.5938,3963.5395 405.2813,3963.477 Q404.9844,3963.4145 404.6719,3963.4145 Q403.3438,3963.4145 402.6563,3964.477 Q401.9688,3965.5551 401.9688,3967.602 Q401.9688,3969.6801 402.6563,3970.727 Q403.3438,3971.7895 404.6719,3971.7895 Q405.3125,3971.7895 405.9063,3971.5239 Q406.2031,3971.3832 406.4844,3971.1957 Q406.7813,3971.0082 407.125,3970.6801 L407.125,3973.477 Q406.5469,3973.7895 405.9063,3973.9457 Q405.2813,3974.102 404.5469,3974.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="425.25" y="3973.034">KinematicBody</text><line style="stroke:#181818;stroke-width:0.5;" x1="23" x2="895" y1="3983.602" y2="3983.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="23" x2="895" y1="3991.602" y2="3991.602"/><ellipse cx="33" cy="4002.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="848" x="42" y="4010.5679">KinematicBody(const std::string&amp; name, const raylib::builder::RlMeshBuilder::MeshType&amp; type, const std::string&amp; texturePath)</text><ellipse cx="33" cy="4021.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="681" x="42" y="4029.6358">KinematicBody(const std::string&amp; name, const std::string&amp; modelPath, const std::string&amp; texturePath)</text><ellipse cx="33" cy="4040.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="42" y="4048.7038">~KinematicBody()</text><ellipse cx="33" cy="4059.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="270" x="42" y="4067.7717">moveAndCollide(Vector3f position) : void</text></g><!--MD5=[fa2d1d19653931a39d2486476b2e8e8a]
class gameengine.MainScene--><g id="elem_gameengine.MainScene"><rect codeLine="1238" fill="#F1F1F1" height="105.2038" id="gameengine.MainScene" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="385" x="437.5" y="1367.102"/><ellipse cx="588.75" cy="1383.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M588.5469,1389.602 Q586.0625,1389.602 584.7344,1387.9301 Q583.4219,1386.2582 583.4219,1383.102 Q583.4219,1379.9457 584.7344,1378.2895 Q586.0625,1376.602 588.5469,1376.602 Q589.2656,1376.602 589.9219,1376.7582 Q590.5625,1376.9145 591.125,1377.227 L591.125,1380.0239 Q590.7656,1379.6801 590.4688,1379.4926 Q590.1719,1379.2895 589.9063,1379.1801 Q589.5938,1379.0395 589.2813,1378.977 Q588.9844,1378.9145 588.6719,1378.9145 Q587.3438,1378.9145 586.6563,1379.977 Q585.9688,1381.0551 585.9688,1383.102 Q585.9688,1385.1801 586.6563,1386.227 Q587.3438,1387.2895 588.6719,1387.2895 Q589.3125,1387.2895 589.9063,1387.0239 Q590.2031,1386.8832 590.4844,1386.6957 Q590.7813,1386.5082 591.125,1386.1801 L591.125,1388.977 Q590.5469,1389.2895 589.9063,1389.4457 Q589.2813,1389.602 588.5469,1389.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="609.25" y="1388.534">MainScene</text><line style="stroke:#181818;stroke-width:0.5;" x1="438.5" x2="821.5" y1="1399.102" y2="1399.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="438.5" x2="821.5" y1="1407.102" y2="1407.102"/><ellipse cx="448.5" cy="1418.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="359" x="457.5" y="1426.0679">MainScene(std::string name, std::string sceneSource)</text><ellipse cx="448.5" cy="1437.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="457.5" y="1445.1358">~MainScene()</text><ellipse cx="448.5" cy="1456.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="457.5" y="1464.2038">sceneLauncher() : void</text></g><!--MD5=[f3e27dc3bf01287ac5366408405ddda2]
class gameengine.Node--><g id="elem_gameengine.Node"><rect codeLine="1244" fill="#F1F1F1" height="200.5433" id="gameengine.Node" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="418" x="607" y="2037.602"/><ellipse cx="795.25" cy="2053.602" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M793.875,2046.352 L796.8594,2046.352 L800.2188,2059.352 L797.7656,2059.352 L797,2056.352 L793.7188,2056.352 L792.9688,2059.352 L790.5313,2059.352 L793.875,2046.352 Z M796.5313,2054.227 L795.3594,2048.7582 L794.2031,2054.227 L796.5313,2054.227 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="33" x="815.75" y="2059.034">Node</text><line style="stroke:#181818;stroke-width:0.5;" x1="608" x2="1024" y1="2069.602" y2="2069.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="608" x2="1024" y1="2077.602" y2="2077.602"/><ellipse cx="618" cy="2088.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="627" y="2096.5679">Node(const std::string&amp; name)</text><ellipse cx="618" cy="2107.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="134" x="627" y="2115.6358">Node(const Node &amp;)</text><ellipse cx="618" cy="2126.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="52" x="627" y="2134.7038">~Node()</text><ellipse cx="618" cy="2145.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="143" x="627" y="2153.7717">getPosition() : Vector3f</text><ellipse cx="618" cy="2164.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="124" x="627" y="2172.8396">getScale() : Vector3f</text><ellipse cx="618" cy="2183.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="194" x="627" y="2191.9075">setPosition(Vector3f pos) : void</text><ellipse cx="618" cy="2203.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="392" x="627" y="2210.9754">setRotationDegrees(float degrees, Vector3f rotationAxis) : void</text><ellipse cx="618" cy="2222.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="210" x="627" y="2230.0433">setScale(Vector3f newScale) : void</text></g><!--MD5=[4cee991f082ac44a0f25862c27e90493]
class gameengine.Node2D--><g id="elem_gameengine.Node2D"><rect codeLine="1255" fill="#F1F1F1" height="200.5433" id="gameengine.Node2D" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="277" x="1060.5" y="2037.602"/><ellipse cx="1169.75" cy="2053.602" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1168.375,2046.352 L1171.3594,2046.352 L1174.7188,2059.352 L1172.2656,2059.352 L1171.5,2056.352 L1168.2188,2056.352 L1167.4688,2059.352 L1165.0313,2059.352 L1168.375,2046.352 Z M1171.0313,2054.227 L1169.8594,2048.7582 L1168.7031,2054.227 L1171.0313,2054.227 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="50" x="1190.25" y="2059.034">Node2D</text><line style="stroke:#181818;stroke-width:0.5;" x1="1061.5" x2="1336.5" y1="2069.602" y2="2069.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="1061.5" x2="1336.5" y1="2077.602" y2="2077.602"/><ellipse cx="1071.5" cy="2088.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="223" x="1080.5" y="2096.5679">Node2D(const std::string&amp; name)</text><ellipse cx="1071.5" cy="2107.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="1080.5" y="2115.6358">Node2D(const Node2D &amp;)</text><ellipse cx="1071.5" cy="2126.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="1080.5" y="2134.7038">~Node2D()</text><ellipse cx="1071.5" cy="2145.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="143" x="1080.5" y="2153.7717">getPosition() : Vector2f</text><ellipse cx="1071.5" cy="2164.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="124" x="1080.5" y="2172.8396">getScale() : Vector2f</text><ellipse cx="1071.5" cy="2183.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="194" x="1080.5" y="2191.9075">setPosition(Vector2f pos) : void</text><ellipse cx="1071.5" cy="2203.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="251" x="1080.5" y="2210.9754">setRotationDegrees(float degrees) : void</text><ellipse cx="1071.5" cy="2222.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="210" x="1080.5" y="2230.0433">setScale(Vector2f newScale) : void</text></g><!--MD5=[45baea9acfbc71376df38649e7928e62]
class gameengine.Scene--><g id="elem_gameengine.Scene"><rect codeLine="1266" fill="#F1F1F1" height="543.7658" id="gameengine.Scene" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="564" x="509" y="648.602"/><ellipse cx="769.25" cy="664.602" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M767.875,657.352 L770.8594,657.352 L774.2188,670.352 L771.7656,670.352 L771,667.352 L767.7188,667.352 L766.9688,670.352 L764.5313,670.352 L767.875,657.352 Z M770.5313,665.227 L769.3594,659.7582 L768.2031,665.227 L770.5313,665.227 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="35" x="789.75" y="670.034">Scene</text><line style="stroke:#181818;stroke-width:0.5;" x1="510" x2="1072" y1="680.602" y2="680.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="517" y="688.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="529" y="699.5679">_isLaunched : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="517" y="707.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="529" y="718.6358">_isPaused : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="517" y="726.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="529" y="737.7038">_name : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="517" y="745.8057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="172" x="529" y="756.7717">_sceneSource : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="517" y="764.8736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="444" x="529" y="775.8396">_nodes : std::vector&lt;std::shared_ptr&lt;gameengine::AbstractBase&gt;&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="510" x2="1072" y1="783.9416" y2="783.9416"/><ellipse cx="520" cy="794.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="325" x="529" y="802.9075">Scene(std::string name, std::string sceneSource)</text><ellipse cx="520" cy="814.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="529" y="821.9754">~Scene()</text><ellipse cx="520" cy="833.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="173" x="529" y="841.0433">getPaused() : bool {query}</text><ellipse cx="520" cy="852.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="136" x="529" y="860.1113">isLaunched() : bool&amp;</text><ellipse cx="520" cy="871.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="538" x="529" y="879.1792">getNode(const std::string&amp; name) : std::shared_ptr&lt;gameengine::AbstractBase&gt;</text><ellipse cx="520" cy="890.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="151" x="529" y="898.2471">getName() : std::string</text><ellipse cx="520" cy="909.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="197" x="529" y="917.315">getSceneSource() : std::string</text><ellipse cx="520" cy="928.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="480" x="529" y="936.3829">getAllNode() : std::vector&lt;std::shared_ptr&lt;gameengine::AbstractBase&gt;&gt;</text><ellipse cx="520" cy="947.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="497" x="529" y="955.4508">addNode(const std::shared_ptr&lt;gameengine::AbstractBase&gt;&amp; node) : void</text><ellipse cx="520" cy="966.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="287" x="529" y="974.5188">deleteNode(const std::string&amp; name) : void</text><ellipse cx="520" cy="985.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="397" x="529" y="993.5867">deleteNodeIncludes(const std::string&amp; includeName) : void</text><ellipse cx="520" cy="1004.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="529" y="1012.6546">destroy() : void</text><ellipse cx="520" cy="1023.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="529" y="1031.7225">draw() : void</text><ellipse cx="520" cy="1042.8245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="529" y="1050.7904">draw2D() : void</text><ellipse cx="520" cy="1061.8924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="529" y="1069.8583">ready() : void</text><ellipse cx="520" cy="1080.9603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="118" x="529" y="1088.9263">readyScene() : void</text><ellipse cx="520" cy="1100.0282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="139" x="529" y="1107.9942">sceneLauncher() : void</text><ellipse cx="520" cy="1119.0962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="134" x="529" y="1127.0621">setLaunched() : void</text><ellipse cx="520" cy="1138.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="186" x="529" y="1146.13">setPaused(bool value) : void</text><ellipse cx="520" cy="1157.232" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="164" x="529" y="1165.1979">update(float delta) : void</text><ellipse cx="520" cy="1176.2999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="191" x="529" y="1184.2658">updateScene(float delta) : void</text></g><!--MD5=[c64c2c1fb0f8a18ba61acdfa109b25fb]
class gameengine.SceneManager--><g id="elem_gameengine.SceneManager"><rect codeLine="1295" fill="#F1F1F1" height="543.7658" id="gameengine.SceneManager" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="564" x="509" y="44.602"/><ellipse cx="736.25" cy="60.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M736.0469,67.102 Q733.5625,67.102 732.2344,65.4301 Q730.9219,63.7582 730.9219,60.602 Q730.9219,57.4457 732.2344,55.7895 Q733.5625,54.102 736.0469,54.102 Q736.7656,54.102 737.4219,54.2582 Q738.0625,54.4145 738.625,54.727 L738.625,57.5239 Q738.2656,57.1801 737.9688,56.9926 Q737.6719,56.7895 737.4063,56.6801 Q737.0938,56.5395 736.7813,56.477 Q736.4844,56.4145 736.1719,56.4145 Q734.8438,56.4145 734.1563,57.477 Q733.4688,58.5551 733.4688,60.602 Q733.4688,62.6801 734.1563,63.727 Q734.8438,64.7895 736.1719,64.7895 Q736.8125,64.7895 737.4063,64.5239 Q737.7031,64.3832 737.9844,64.1957 Q738.2813,64.0082 738.625,63.6801 L738.625,66.477 Q738.0469,66.7895 737.4063,66.9457 Q736.7813,67.102 736.0469,67.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="756.75" y="66.034">SceneManager</text><line style="stroke:#181818;stroke-width:0.5;" x1="510" x2="1072" y1="76.602" y2="76.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="517" y="84.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="334" x="529" y="95.5679">_instance : static std::shared_ptr&lt;SceneManager&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="517" y="103.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="168" x="529" y="114.6358">_actualScene : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="517" y="122.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="177" x="529" y="133.7038">_waitingScene : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="517" y="141.8057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="401" x="529" y="152.7717">_scenes : std::vector&lt;std::shared_ptr&lt;gameengine::Scene&gt;&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="517" y="160.8736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="273" x="529" y="171.8396">_nodesToDelete : std::vector&lt;std::string&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="517" y="179.9416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="331" x="529" y="190.9075">_nodesToDeleteIncludes : std::vector&lt;std::string&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="510" x2="1072" y1="199.0095" y2="199.0095"/><ellipse cx="520" cy="210.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="529" y="217.9754">SceneManager()</text><ellipse cx="520" cy="229.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="117" x="529" y="237.0433">~SceneManager()</text><ellipse cx="520" cy="248.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="529" y="256.1113">getPaused() : bool</text><ellipse cx="520" cy="267.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="538" x="529" y="275.1792">getNode(const std::string&amp; name) : std::shared_ptr&lt;gameengine::AbstractBase&gt;</text><ellipse cx="520" cy="286.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="422" x="529" y="294.2471">getInstance() : std::shared_ptr&lt;gameengine::SceneManager&gt;&amp;</text><ellipse cx="520" cy="305.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="487" x="529" y="313.315">getAllNodes() : std::vector&lt;std::shared_ptr&lt;gameengine::AbstractBase&gt;&gt;</text><ellipse cx="520" cy="324.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="497" x="529" y="332.3829">addNode(const std::shared_ptr&lt;gameengine::AbstractBase&gt;&amp; node) : void</text><ellipse cx="520" cy="343.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="458" x="529" y="351.4508">addScene(const std::shared_ptr&lt;gameengine::Scene&gt;&amp; scene) : void</text><ellipse cx="520" cy="362.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="300" x="529" y="370.5188">changeScene(const std::string&amp; scene) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="517" y="378.6207"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="204" x="529" y="389.5867">changeSceneInWaiting() : void</text><ellipse cx="520" cy="400.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="287" x="529" y="408.6546">deleteNode(const std::string&amp; name) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="517" y="416.7566"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="159" x="529" y="427.7225">deleteNodeInLst() : void</text><ellipse cx="520" cy="438.8245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="389" x="529" y="446.7904">deleteNodeInclude(const std::string&amp; Includename) : void</text><ellipse cx="520" cy="457.8924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="292" x="529" y="465.8583">deleteScene(const std::string&amp; scene) : void</text><ellipse cx="520" cy="476.9603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="529" y="484.9263">draw() : void</text><ellipse cx="520" cy="496.0282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="529" y="503.9942">draw2D() : void</text><ellipse cx="520" cy="515.0962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="274" x="529" y="523.0621">drawAll(raylib::RlCamera&amp; camera) : void</text><ellipse cx="520" cy="534.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="291" x="529" y="542.13">makeLoop(raylib::RlCamera&amp; camera) : void</text><ellipse cx="520" cy="553.232" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="186" x="529" y="561.1979">setPaused(bool value) : void</text><ellipse cx="520" cy="572.2999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="529" y="580.2658">update() : void</text></g><!--MD5=[1b6e0643218a5bfa07aea9297c787138]
class gameengine.StaticBody--><g id="elem_gameengine.StaticBody"><rect codeLine="1324" fill="#F1F1F1" height="467.4942" id="gameengine.StaticBody" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="845" x="22.5" y="2794.602"/><ellipse cx="405.75" cy="2810.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M405.5469,2817.102 Q403.0625,2817.102 401.7344,2815.4301 Q400.4219,2813.7582 400.4219,2810.602 Q400.4219,2807.4457 401.7344,2805.7895 Q403.0625,2804.102 405.5469,2804.102 Q406.2656,2804.102 406.9219,2804.2582 Q407.5625,2804.4145 408.125,2804.727 L408.125,2807.5239 Q407.7656,2807.1801 407.4688,2806.9926 Q407.1719,2806.7895 406.9063,2806.6801 Q406.5938,2806.5395 406.2813,2806.477 Q405.9844,2806.4145 405.6719,2806.4145 Q404.3438,2806.4145 403.6563,2807.477 Q402.9688,2808.5551 402.9688,2810.602 Q402.9688,2812.6801 403.6563,2813.727 Q404.3438,2814.7895 405.6719,2814.7895 Q406.3125,2814.7895 406.9063,2814.5239 Q407.2031,2814.3832 407.4844,2814.1957 Q407.7813,2814.0082 408.125,2813.6801 L408.125,2816.477 Q407.5469,2816.7895 406.9063,2816.9457 Q406.2813,2817.102 405.5469,2817.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="426.25" y="2816.034">StaticBody</text><line style="stroke:#181818;stroke-width:0.5;" x1="23.5" x2="866.5" y1="2826.602" y2="2826.602"/><polygon fill="none" points="33.5,2832.602,37.5,2836.602,33.5,2840.602,29.5,2836.602" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="42.5" y="2845.5679">_position : Vector3f</text><polygon fill="none" points="33.5,2851.6699,37.5,2855.6699,33.5,2859.6699,29.5,2855.6699" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="42.5" y="2864.6358">_scale : Vector3f</text><polygon fill="none" points="33.5,2870.7378,37.5,2874.7378,33.5,2878.7378,29.5,2874.7378" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="42.5" y="2883.7038">_collisionEnable : bool</text><polygon fill="none" points="33.5,2889.8057,37.5,2893.8057,33.5,2897.8057,29.5,2893.8057" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="42.5" y="2902.7717">_rotationDegrees : float</text><polygon fill="none" points="33.5,2908.8736,37.5,2912.8736,33.5,2916.8736,29.5,2912.8736" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="161" x="42.5" y="2921.8396">_model : raylib::RlModel</text><line style="stroke:#181818;stroke-width:0.5;" x1="23.5" x2="866.5" y1="2929.9416" y2="2929.9416"/><ellipse cx="33.5" cy="2940.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="651" x="42.5" y="2948.9075">StaticBody(const std::string&amp; name, const std::string&amp; modelPath, const std::string&amp; texturePath)</text><ellipse cx="33.5" cy="2960.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="819" x="42.5" y="2967.9754">StaticBody(const std::string&amp; name, const raylib::builder::RlMeshBuilder::MeshType&amp; type, const std::string&amp; texturepath)</text><ellipse cx="33.5" cy="2979.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="42.5" y="2987.0433">~StaticBody()</text><ellipse cx="33.5" cy="2998.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="285" x="42.5" y="3006.1113">getBoundingBox() : BoundingBox&amp; {query}</text><ellipse cx="33.5" cy="3017.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="42.5" y="3025.1792">getPosition() : Vector3f</text><ellipse cx="33.5" cy="3036.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="42.5" y="3044.2471">getScale() : Vector3f</text><ellipse cx="33.5" cy="3055.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="192" x="42.5" y="3063.315">getIsCollsionEnable() : bool&amp;</text><ellipse cx="33.5" cy="3074.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="184" x="42.5" y="3082.3829">getRotationDegrees() : float</text><ellipse cx="33.5" cy="3093.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="208" x="42.5" y="3101.4508">operator-&gt;() : raylib :: RlModel*</text><ellipse cx="33.5" cy="3112.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="42.5" y="3120.5188">draw() : void</text><ellipse cx="33.5" cy="3131.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="42.5" y="3139.5867">ready() : void</text><ellipse cx="33.5" cy="3150.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="352" x="42.5" y="3158.6546">setBoundingBox(BoundingBox&amp; boundingBox) : void</text><ellipse cx="33.5" cy="3169.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="42.5" y="3177.7225">setColor(raylib::RlColor color) : void</text><ellipse cx="33.5" cy="3188.8245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="204" x="42.5" y="3196.7904">setPosition(Vector3f pos) : void</text><ellipse cx="33.5" cy="3207.8924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="416" x="42.5" y="3215.8583">setRotationDegrees(float degrees, Vector3f rotationAxis) : void</text><ellipse cx="33.5" cy="3226.9603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="225" x="42.5" y="3234.9263">setScale(Vector3f newScale) : void</text><ellipse cx="33.5" cy="3246.0282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="164" x="42.5" y="3253.9942">update(float delta) : void</text></g><!--MD5=[0e0440acdf6ae3e3065b32492799fa9c]
class gameengine.TextureRect--><g id="elem_gameengine.TextureRect"><rect codeLine="1349" fill="#F1F1F1" height="410.2904" id="gameengine.TextureRect" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="914" x="1368" y="2823.102"/><ellipse cx="1780.75" cy="2839.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1780.5469,2845.602 Q1778.0625,2845.602 1776.7344,2843.9301 Q1775.4219,2842.2582 1775.4219,2839.102 Q1775.4219,2835.9457 1776.7344,2834.2895 Q1778.0625,2832.602 1780.5469,2832.602 Q1781.2656,2832.602 1781.9219,2832.7582 Q1782.5625,2832.9145 1783.125,2833.227 L1783.125,2836.0239 Q1782.7656,2835.6801 1782.4688,2835.4926 Q1782.1719,2835.2895 1781.9063,2835.1801 Q1781.5938,2835.0395 1781.2813,2834.977 Q1780.9844,2834.9145 1780.6719,2834.9145 Q1779.3438,2834.9145 1778.6563,2835.977 Q1777.9688,2837.0551 1777.9688,2839.102 Q1777.9688,2841.1801 1778.6563,2842.227 Q1779.3438,2843.2895 1780.6719,2843.2895 Q1781.3125,2843.2895 1781.9063,2843.0239 Q1782.2031,2842.8832 1782.4844,2842.6957 Q1782.7813,2842.5082 1783.125,2842.1801 L1783.125,2844.977 Q1782.5469,2845.2895 1781.9063,2845.4457 Q1781.2813,2845.602 1780.5469,2845.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="1801.25" y="2844.534">TextureRect</text><line style="stroke:#181818;stroke-width:0.5;" x1="1369" x2="2281" y1="2855.102" y2="2855.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1376" y="2863.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="1388" y="2874.0679">_position : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1376" y="2882.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="1388" y="2893.1358">_scale : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1376" y="2901.2378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="1388" y="2912.2038">_rotationDegrees : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1376" y="2920.3057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="1388" y="2931.2717">_color : raylib::RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1376" y="2939.3736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="232" x="1388" y="2950.3396">_texture : raylib::texture::RlTexture</text><line style="stroke:#181818;stroke-width:0.5;" x1="1369" x2="2281" y1="2958.4416" y2="2958.4416"/><ellipse cx="1379" cy="2969.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="888" x="1388" y="2977.4075">TextureRect(const std::string&amp; name, const std::string&amp; filename, Vector2f position, Vector2f scale, float, const raylib::RlColor&amp; color)</text><ellipse cx="1379" cy="2988.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="1388" y="2996.4754">~TextureRect()</text><ellipse cx="1379" cy="3007.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="1388" y="3015.5433">getPosition() : Vector2f</text><ellipse cx="1379" cy="3026.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="1388" y="3034.6113">getScale() : Vector2f</text><ellipse cx="1379" cy="3045.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="184" x="1388" y="3053.6792">getRotationDegrees() : float</text><ellipse cx="1379" cy="3064.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="181" x="1388" y="3072.7471">getColor() : raylib::RlColor&amp;</text><ellipse cx="1379" cy="3083.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="1388" y="3091.815">getColor() : raylib::RlColor&amp; {query}</text><ellipse cx="1379" cy="3102.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="1388" y="3110.8829">draw() : void</text><ellipse cx="1379" cy="3121.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="1388" y="3129.9508">ready() : void</text><ellipse cx="1379" cy="3141.0528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="519" x="1388" y="3149.0188">setColor(unsigned int r, unsigned int g, unsigned int b, unsigned int a) : void</text><ellipse cx="1379" cy="3160.1207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="1388" y="3168.0867">setPosition(Vector2f position) : void</text><ellipse cx="1379" cy="3179.1887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="323" x="1388" y="3187.1546">setRotationDegrees(float rotationDegrees) : void</text><ellipse cx="1379" cy="3198.2566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="1388" y="3206.2225">setScale(Vector2f scale) : void</text><ellipse cx="1379" cy="3217.3245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="164" x="1388" y="3225.2904">update(float delta) : void</text></g><!--MD5=[3904d397bcb7460d9533c6f380b70fa1]
class gameengine.map.MapParser--><g id="elem_gameengine.map.MapParser"><rect codeLine="1372" fill="#F1F1F1" height="372.1546" id="gameengine.map.MapParser" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="783" x="2425.5" y="130.602"/><ellipse cx="2711.75" cy="146.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2711.5469,153.102 Q2709.0625,153.102 2707.7344,151.4301 Q2706.4219,149.7582 2706.4219,146.602 Q2706.4219,143.4457 2707.7344,141.7895 Q2709.0625,140.102 2711.5469,140.102 Q2712.2656,140.102 2712.9219,140.2582 Q2713.5625,140.4145 2714.125,140.727 L2714.125,143.5239 Q2713.7656,143.1801 2713.4688,142.9926 Q2713.1719,142.7895 2712.9063,142.6801 Q2712.5938,142.5395 2712.2813,142.477 Q2711.9844,142.4145 2711.6719,142.4145 Q2710.3438,142.4145 2709.6563,143.477 Q2708.9688,144.5551 2708.9688,146.602 Q2708.9688,148.6801 2709.6563,149.727 Q2710.3438,150.7895 2711.6719,150.7895 Q2712.3125,150.7895 2712.9063,150.5239 Q2713.2031,150.3832 2713.4844,150.1957 Q2713.7813,150.0082 2714.125,149.6801 L2714.125,152.477 Q2713.5469,152.7895 2712.9063,152.9457 Q2712.2813,153.102 2711.5469,153.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="2732.25" y="152.034">MapParser</text><rect fill="#FFFFFF" height="18.3441" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="127" x="3084.5" y="127.602"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="125" x="3085.5" y="141.4301">template&lt;typename T&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="2426.5" x2="3207.5" y1="162.602" y2="162.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2433.5" y="170.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="2445.5" y="181.5679">_maxSize : Vector2u</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2433.5" y="189.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="2445.5" y="200.6358">_size : Vector2u</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2433.5" y="208.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="2445.5" y="219.7038">_file : std::ifstream</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2433.5" y="227.8057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="2445.5" y="238.7717">_buffer : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2433.5" y="246.8736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="2445.5" y="257.8396">_fileName : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2433.5" y="265.9416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="272" x="2445.5" y="276.9075">_symbols : std::unordered_map&lt;char, T&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2433.5" y="285.0095"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="228" x="2445.5" y="295.9754">_map : std::vector&lt;std::vector&lt;T&gt;&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="2426.5" x2="3207.5" y1="304.0774" y2="304.0774"/><ellipse cx="2436.5" cy="315.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="757" x="2445.5" y="323.0433">MapParser(const std::string&amp; fileName, const std::unordered_map&lt;char, T&gt;&amp; symbols, const Vector2u&amp; maxSize)</text><ellipse cx="2436.5" cy="334.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="2445.5" y="342.1113">getMaxSize() : Vector2u&amp; {query}</text><ellipse cx="2436.5" cy="353.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="191" x="2445.5" y="361.1792">getSize() : Vector2u&amp; {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2433.5" y="369.2812"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="352" x="2445.5" y="380.2471">removeComment(const std::string&amp; line) : std::string</text><ellipse cx="2436.5" cy="391.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="216" x="2445.5" y="399.315">getBuffer() : std::string&amp; {query}</text><ellipse cx="2436.5" cy="410.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="237" x="2445.5" y="418.3829">getFileName() : std::string&amp; {query}</text><ellipse cx="2436.5" cy="429.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="364" x="2445.5" y="437.4508">getSymbols() : std::unordered_map&lt;char , T&gt;&amp; {query}</text><ellipse cx="2436.5" cy="448.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="315" x="2445.5" y="456.5188">getMap() : std::vector&lt;std::vector&lt;T&gt;&gt;&amp; {query}</text><ellipse cx="2436.5" cy="467.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="2445.5" y="475.5867">parse() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2433.5" y="483.6887"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="2445.5" y="494.6546">parseMap() : void</text></g><!--MD5=[15b65ae4bc5685ca3b6e1ff48e50a091]
class gameengine.ex.GameEngineException--><g id="elem_gameengine.ex.GameEngineException"><rect codeLine="1394" fill="#F1F1F1" height="105.2038" id="gameengine.ex.GameEngineException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="498" x="1207" y="264.102"/><ellipse cx="1376.25" cy="280.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1376.0469,286.602 Q1373.5625,286.602 1372.2344,284.9301 Q1370.9219,283.2582 1370.9219,280.102 Q1370.9219,276.9457 1372.2344,275.2895 Q1373.5625,273.602 1376.0469,273.602 Q1376.7656,273.602 1377.4219,273.7582 Q1378.0625,273.9145 1378.625,274.227 L1378.625,277.0239 Q1378.2656,276.6801 1377.9688,276.4926 Q1377.6719,276.2895 1377.4063,276.1801 Q1377.0938,276.0395 1376.7813,275.977 Q1376.4844,275.9145 1376.1719,275.9145 Q1374.8438,275.9145 1374.1563,276.977 Q1373.4688,278.0551 1373.4688,280.102 Q1373.4688,282.1801 1374.1563,283.227 Q1374.8438,284.2895 1376.1719,284.2895 Q1376.8125,284.2895 1377.4063,284.0239 Q1377.7031,283.8832 1377.9844,283.6957 Q1378.2813,283.5082 1378.625,283.1801 L1378.625,285.977 Q1378.0469,286.2895 1377.4063,286.4457 Q1376.7813,286.602 1376.0469,286.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="151" x="1396.75" y="285.534">GameEngineException</text><line style="stroke:#181818;stroke-width:0.5;" x1="1208" x2="1704" y1="296.102" y2="296.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1215" y="304.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="1227" y="315.0679">_msg : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="1208" x2="1704" y1="323.1699" y2="323.1699"/><ellipse cx="1218" cy="334.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="472" x="1227" y="342.1358">GameEngineException(const std::string&amp; message, const bool&amp; prefix)</text><ellipse cx="1218" cy="353.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="1227" y="361.2038">what() : char* {query}</text></g><!--MD5=[162b77df7aa9b543c57f5af1eb80f9dc]
class gameengine.ex.MapParserException--><g id="elem_gameengine.ex.MapParserException"><rect codeLine="1400" fill="#F1F1F1" height="67.0679" id="gameengine.ex.MapParserException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="355" x="1278.5" y="887.102"/><ellipse cx="1382.75" cy="903.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1382.5469,909.602 Q1380.0625,909.602 1378.7344,907.9301 Q1377.4219,906.2582 1377.4219,903.102 Q1377.4219,899.9457 1378.7344,898.2895 Q1380.0625,896.602 1382.5469,896.602 Q1383.2656,896.602 1383.9219,896.7582 Q1384.5625,896.9145 1385.125,897.227 L1385.125,900.0239 Q1384.7656,899.6801 1384.4688,899.4926 Q1384.1719,899.2895 1383.9063,899.1801 Q1383.5938,899.0395 1383.2813,898.977 Q1382.9844,898.9145 1382.6719,898.9145 Q1381.3438,898.9145 1380.6563,899.977 Q1379.9688,901.0551 1379.9688,903.102 Q1379.9688,905.1801 1380.6563,906.227 Q1381.3438,907.2895 1382.6719,907.2895 Q1383.3125,907.2895 1383.9063,907.0239 Q1384.2031,906.8832 1384.4844,906.6957 Q1384.7813,906.5082 1385.125,906.1801 L1385.125,908.977 Q1384.5469,909.2895 1383.9063,909.4457 Q1383.2813,909.602 1382.5469,909.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="1403.25" y="908.534">MapParserException</text><line style="stroke:#181818;stroke-width:0.5;" x1="1279.5" x2="1632.5" y1="919.102" y2="919.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="1279.5" x2="1632.5" y1="927.102" y2="927.102"/><ellipse cx="1289.5" cy="938.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="329" x="1298.5" y="946.0679">MapParserException(const std::string&amp; message)</text></g><!--MD5=[67a2915d5a4fda5da08e87ec3b98f92e]
class gameengine.component.GridComponent--><g id="elem_gameengine.component.GridComponent"><rect codeLine="1406" fill="#F1F1F1" height="372.1546" id="gameengine.component.GridComponent" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="893" x="2316.5" y="2842.102"/><ellipse cx="2705.25" cy="2858.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2705.0469,2864.602 Q2702.5625,2864.602 2701.2344,2862.9301 Q2699.9219,2861.2582 2699.9219,2858.102 Q2699.9219,2854.9457 2701.2344,2853.2895 Q2702.5625,2851.602 2705.0469,2851.602 Q2705.7656,2851.602 2706.4219,2851.7582 Q2707.0625,2851.9145 2707.625,2852.227 L2707.625,2855.0239 Q2707.2656,2854.6801 2706.9688,2854.4926 Q2706.6719,2854.2895 2706.4063,2854.1801 Q2706.0938,2854.0395 2705.7813,2853.977 Q2705.4844,2853.9145 2705.1719,2853.9145 Q2703.8438,2853.9145 2703.1563,2854.977 Q2702.4688,2856.0551 2702.4688,2858.102 Q2702.4688,2860.1801 2703.1563,2861.227 Q2703.8438,2862.2895 2705.1719,2862.2895 Q2705.8125,2862.2895 2706.4063,2862.0239 Q2706.7031,2861.8832 2706.9844,2861.6957 Q2707.2813,2861.5082 2707.625,2861.1801 L2707.625,2863.977 Q2707.0469,2864.2895 2706.4063,2864.4457 Q2705.7813,2864.602 2705.0469,2864.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="2725.75" y="2863.534">GridComponent</text><line style="stroke:#181818;stroke-width:0.5;" x1="2317.5" x2="3208.5" y1="2874.102" y2="2874.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2324.5" y="2882.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="2336.5" y="2893.0679">_tint : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2324.5" y="2901.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="2336.5" y="2912.1358">_size : Vector2i</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2324.5" y="2920.2378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="2336.5" y="2931.2038">_position : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2324.5" y="2939.3057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="2336.5" y="2950.2717">_scale : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2324.5" y="2958.3736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="2336.5" y="2969.3396">_rotationDegrees : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2324.5" y="2977.4416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="2336.5" y="2988.4075">_spacing : float</text><line style="stroke:#181818;stroke-width:0.5;" x1="2317.5" x2="3208.5" y1="2996.5095" y2="2996.5095"/><ellipse cx="2327.5" cy="3007.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="867" x="2336.5" y="3015.4754">GridComponent(const Vector2i&amp; size, const Vector3f&amp; position, const float&amp; spacing, const RlColor&amp; tint, const std::string&amp; name)</text><ellipse cx="2327.5" cy="3026.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="276" x="2336.5" y="3034.5433">GridComponent(const GridComponent &amp;)</text><ellipse cx="2327.5" cy="3045.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="2336.5" y="3053.6113">getPosition() : Vector3f</text><ellipse cx="2327.5" cy="3064.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="2336.5" y="3072.6792">getScale() : Vector3f</text><ellipse cx="2327.5" cy="3083.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="184" x="2336.5" y="3091.7471">getRotationDegrees() : float</text><ellipse cx="2327.5" cy="3102.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="2336.5" y="3110.815">draw() : void</text><ellipse cx="2327.5" cy="3121.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="2336.5" y="3129.8829">ready() : void</text><ellipse cx="2327.5" cy="3140.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="204" x="2336.5" y="3148.9508">setPosition(Vector3f pos) : void</text><ellipse cx="2327.5" cy="3160.0528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="416" x="2336.5" y="3168.0188">setRotationDegrees(float degrees, Vector3f rotationAxis) : void</text><ellipse cx="2327.5" cy="3179.1207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="225" x="2336.5" y="3187.0867">setScale(Vector3f newScale) : void</text><ellipse cx="2327.5" cy="3198.1887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="164" x="2336.5" y="3206.1546">update(float delta) : void</text></g><!--MD5=[17d1b1656e4e513fb20f2103d44bd992]
class gameengine.audio.Fx--><g id="elem_gameengine.audio.Fx"><rect codeLine="1428" fill="#F1F1F1" height="67.0679" id="gameengine.audio.Fx" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="405" x="2803.5" y="1386.102"/><ellipse cx="2994.75" cy="1402.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2994.5469,1408.602 Q2992.0625,1408.602 2990.7344,1406.9301 Q2989.4219,1405.2582 2989.4219,1402.102 Q2989.4219,1398.9457 2990.7344,1397.2895 Q2992.0625,1395.602 2994.5469,1395.602 Q2995.2656,1395.602 2995.9219,1395.7582 Q2996.5625,1395.9145 2997.125,1396.227 L2997.125,1399.0239 Q2996.7656,1398.6801 2996.4688,1398.4926 Q2996.1719,1398.2895 2995.9063,1398.1801 Q2995.5938,1398.0395 2995.2813,1397.977 Q2994.9844,1397.9145 2994.6719,1397.9145 Q2993.3438,1397.9145 2992.6563,1398.977 Q2991.9688,1400.0551 2991.9688,1402.102 Q2991.9688,1404.1801 2992.6563,1405.227 Q2993.3438,1406.2895 2994.6719,1406.2895 Q2995.3125,1406.2895 2995.9063,1406.0239 Q2996.2031,1405.8832 2996.4844,1405.6957 Q2996.7813,1405.5082 2997.125,1405.1801 L2997.125,1407.977 Q2996.5469,1408.2895 2995.9063,1408.4457 Q2995.2813,1408.602 2994.5469,1408.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="14" x="3015.25" y="1407.534">Fx</text><line style="stroke:#181818;stroke-width:0.5;" x1="2804.5" x2="3207.5" y1="1418.102" y2="1418.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="2804.5" x2="3207.5" y1="1426.102" y2="1426.102"/><ellipse cx="2814.5" cy="1437.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="379" x="2823.5" y="1445.0679">Fx(const std::string&amp; fileName, SoundCategory category)</text></g><!--MD5=[feae6325ffe0bc21c6160f3da30bebc6]
class gameengine.audio.Music--><g id="elem_gameengine.audio.Music"><rect codeLine="1432" fill="#F1F1F1" height="67.0679" id="gameengine.audio.Music" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="431" x="2337.5" y="1386.102"/><ellipse cx="2528.75" cy="1402.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2528.5469,1408.602 Q2526.0625,1408.602 2524.7344,1406.9301 Q2523.4219,1405.2582 2523.4219,1402.102 Q2523.4219,1398.9457 2524.7344,1397.2895 Q2526.0625,1395.602 2528.5469,1395.602 Q2529.2656,1395.602 2529.9219,1395.7582 Q2530.5625,1395.9145 2531.125,1396.227 L2531.125,1399.0239 Q2530.7656,1398.6801 2530.4688,1398.4926 Q2530.1719,1398.2895 2529.9063,1398.1801 Q2529.5938,1398.0395 2529.2813,1397.977 Q2528.9844,1397.9145 2528.6719,1397.9145 Q2527.3438,1397.9145 2526.6563,1398.977 Q2525.9688,1400.0551 2525.9688,1402.102 Q2525.9688,1404.1801 2526.6563,1405.227 Q2527.3438,1406.2895 2528.6719,1406.2895 Q2529.3125,1406.2895 2529.9063,1406.0239 Q2530.2031,1405.8832 2530.4844,1405.6957 Q2530.7813,1405.5082 2531.125,1405.1801 L2531.125,1407.977 Q2530.5469,1408.2895 2529.9063,1408.4457 Q2529.2813,1408.602 2528.5469,1408.602 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="40" x="2549.25" y="1407.534">Music</text><line style="stroke:#181818;stroke-width:0.5;" x1="2338.5" x2="2767.5" y1="1418.102" y2="1418.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="2338.5" x2="2767.5" y1="1426.102" y2="1426.102"/><ellipse cx="2348.5" cy="1437.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="405" x="2357.5" y="1445.0679">Music(const std::string&amp; fileName, SoundCategory category)</text></g><!--MD5=[ccec8dc08a962e1b6712bdf310ee29d5]
class SoundCategory--><g id="elem_SoundCategory"><rect codeLine="8" fill="#F1F1F1" height="86.1358" id="SoundCategory" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="135" x="3265.5" y="1376.602"/><ellipse cx="3280.5" cy="1392.602" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M3276.8906,1386.102 L3284.6094,1386.102 L3284.6094,1388.3832 L3279.3438,1388.3832 L3279.3438,1391.102 L3284.1094,1391.102 L3284.1094,1393.3832 L3279.3438,1393.3832 L3279.3438,1396.8364 L3284.6094,1396.8364 L3284.6094,1399.102 L3276.8906,1399.102 L3276.8906,1386.102 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="3294.5" y="1398.034">SoundCategory</text><line style="stroke:#181818;stroke-width:0.5;" x1="3266.5" x2="3399.5" y1="1408.602" y2="1408.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="15" x="3271.5" y="1427.5679">FX</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="45" x="3271.5" y="1446.6358">MUSIC</text><line style="stroke:#181818;stroke-width:0.5;" x1="3266.5" x2="3399.5" y1="1454.7378" y2="1454.7378"/></g><!--MD5=[f131ecac4bc38d2ec124674e24f70c68]
reverse link gameengine.AbstractBase to gameengine.Node--><g id="link_gameengine.AbstractBase_gameengine.Node"><path codeLine="1444" d="M958.23,1606.332 C921.34,1744.012 872.47,1926.362 842.68,2037.522 " fill="none" id="gameengine.AbstractBase-backto-gameengine.Node" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="951.53,1604.292,963.47,1586.782,965.05,1607.912,951.53,1604.292" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[efb988f10d9154d8e6ac80664a238ee4]
reverse link gameengine.AbstractBase to gameengine.Node2D--><g id="link_gameengine.AbstractBase_gameengine.Node2D"><path codeLine="1447" d="M1057.51,1606.332 C1094.21,1744.012 1142.82,1926.362 1172.45,2037.522 " fill="none" id="gameengine.AbstractBase-backto-gameengine.Node2D" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1050.69,1607.912,1052.3,1586.782,1064.21,1604.302,1050.69,1607.912" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[bf6f3e0d155eb7a983e1bb04fa93cb1f]
reverse link raylib.helper.AudioDeviceHelper to gameengine.AudioManager--><g id="link_raylib.helper.AudioDeviceHelper_gameengine.AudioManager"><path codeLine="1450" d="M15732.3,2046.342 C15725.96,1922.442 15694.41,1703.332 15556,1594.602 C15411.99,1481.472 2576.47,662.702 2409,588.602 C2328.94,553.182 2257.31,485.622 2205.64,426.832 " fill="none" id="raylib.helper.AudioDeviceHelper-backto-gameengine.AudioManager" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="15739.3,2046.212,15733.15,2066.482,15725.32,2046.802,15739.3,2046.212" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[6aaf7fd83be418e6cb78484b370462d0]
reverse link gameengine.ex.GameEngineException to gameengine.ex.MapParserException--><g id="link_gameengine.ex.GameEngineException_gameengine.ex.MapParserException"><path codeLine="1453" d="M1456,389.282 C1456,520.072 1456,792.602 1456,886.762 " fill="none" id="gameengine.ex.GameEngineException-backto-gameengine.ex.MapParserException" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1449,389.192,1456,369.192,1463,389.192,1449,389.192" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[30381d7319adf431596087d67ef97e98]
reverse link raylib.builder.IBuilder to raylib.builder.RlCameraBuilder--><g id="link_raylib.builder.IBuilder_raylib.builder.RlCameraBuilder"><path codeLine="1456" d="M11226.63,2186.312 C11144.08,2273.172 10965.56,2465.572 10832,2641.602 C10776.78,2714.382 10720.66,2798.972 10675.44,2870.352 " fill="none" id="raylib.builder.IBuilder-backto-raylib.builder.RlCameraBuilder" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="11221.56,2181.482,11240.43,2171.842,11231.69,2191.142,11221.56,2181.482" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[4ed3a3e3ebc4c0d7f4405072494191a6]
reverse link raylib.builder.IBuilder to raylib.builder.RlImageBuilder--><g id="link_raylib.builder.IBuilder_raylib.builder.RlImageBuilder"><path codeLine="1459" d="M11258.35,2191.132 C11234.72,2281.182 11184.26,2473.492 11137.69,2650.982 " fill="none" id="raylib.builder.IBuilder-backto-raylib.builder.RlImageBuilder" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="11251.58,2189.332,11263.43,2171.762,11265.13,2192.882,11251.58,2189.332" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[2a052aa86a01b1a0b25738c1f3ec000a]
reverse link raylib.builder.IBuilder to raylib.builder.RlMeshBuilder--><g id="link_raylib.builder.IBuilder_raylib.builder.RlMeshBuilder"><path codeLine="1462" d="M11285.71,2191.342 C11308.94,2279.892 11358,2466.872 11403.84,2641.572 " fill="none" id="raylib.builder.IBuilder-backto-raylib.builder.RlMeshBuilder" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="11278.87,2192.882,11280.57,2171.762,11292.42,2189.332,11278.87,2192.882" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[de88adb95550fd32056d05e01112f96a]
reverse link raylib.builder.IBuilder to raylib.builder.RlTextBuilder--><g id="link_raylib.builder.IBuilder_raylib.builder.RlTextBuilder"><path codeLine="1465" d="M11322.61,2185.622 C11415,2271.612 11615.25,2462.992 11765,2641.602 C11800.13,2683.492 11835.56,2729.632 11868.77,2774.992 " fill="none" id="raylib.builder.IBuilder-backto-raylib.builder.RlTextBuilder" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="11317.59,2190.512,11307.69,2171.782,11327.12,2180.252,11317.59,2190.512" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[f2ec1b627f0a86fa1ce0f19eac40465f]
reverse link gameengine.ISound to gameengine.audio.Fx--><g id="link_gameengine.ISound_gameengine.audio.Fx"><path codeLine="1468" d="M2824.73,1019.972 C2876.18,1133.112 2957.82,1312.642 2991.12,1385.872 " fill="none" id="gameengine.ISound-backto-gameengine.audio.Fx" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="2818.34,1022.832,2816.44,1001.732,2831.09,1017.042,2818.34,1022.832" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[433320f27361ae3c591a53d1dc8cfdae]
reverse link gameengine.ISound to gameengine.audio.Music--><g id="link_gameengine.ISound_gameengine.audio.Music"><path codeLine="1471" d="M2735.07,1019.972 C2683.4,1133.112 2601.4,1312.642 2567.95,1385.872 " fill="none" id="gameengine.ISound-backto-gameengine.audio.Music" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="2728.73,1017.012,2743.4,1001.732,2741.46,1022.832,2728.73,1017.012" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[f97a2bfad96135ba91279deff714c038]
reverse link gameengine.Node to gameengine.component.GridComponent--><g id="link_gameengine.Node_gameengine.component.GridComponent"><path codeLine="1474" d="M837.96,2258.742 C865.27,2369.602 923.72,2528.622 1043,2605.602 C1161.52,2682.092 2180.38,2590.882 2312,2641.602 C2421.69,2683.872 2523.21,2765.062 2602.05,2842.082 " fill="none" id="gameengine.Node-backto-gameengine.component.GridComponent" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="831.08,2260.052,833.3,2238.972,844.7,2256.832,831.08,2260.052" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[b7192005893156a42939824a3ccb5fe9]
reverse link gameengine.Node to gameengine.StaticBody--><g id="link_gameengine.Node_gameengine.StaticBody"><path codeLine="1477" d="M766.55,2257.462 C709.49,2394.032 614.29,2621.912 542.24,2794.352 " fill="none" id="gameengine.Node-backto-gameengine.StaticBody" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="760.17,2254.562,774.34,2238.812,773.09,2259.962,760.17,2254.562" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[35c8018c994789c9f7b0f532cce6aa04]
reverse link gameengine.Node2D to gameengine.Button--><g id="link_gameengine.Node2D_gameengine.Button"><path codeLine="1480" d="M1188.08,2258.832 C1176.3,2388.002 1157.17,2597.712 1141.87,2765.412 " fill="none" id="gameengine.Node2D-backto-gameengine.Button" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1181.12,2258.092,1189.9,2238.812,1195.06,2259.362,1181.12,2258.092" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[6ae634d39cd58933163fc67095605235]
reverse link gameengine.Node2D to gameengine.TextureRect--><g id="link_gameengine.Node2D_gameengine.TextureRect"><path codeLine="1483" d="M1280.99,2255.412 C1382.44,2399.322 1556.93,2646.842 1680.93,2822.732 " fill="none" id="gameengine.Node2D-backto-gameengine.TextureRect" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1275.09,2259.192,1269.29,2238.812,1286.54,2251.122,1275.09,2259.192" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[594fd83bbf35132381e03cc5570fee7f]
reverse link raylib.ex.RaylibException to raylib.ex.BuilderException--><g id="link_raylib.ex.RaylibException_raylib.ex.BuilderException"><path codeLine="1486" d="M14770.44,2202.782 C14886.96,2290.442 15092.25,2458.382 15222,2641.602 C15305.33,2759.272 15360.07,2924.822 15380.74,2994.342 " fill="none" id="raylib.ex.RaylibException-backto-raylib.ex.BuilderException" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="14766.1,2208.272,14754.26,2190.692,14774.47,2197.052,14766.1,2208.272" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[115b9455005e0d79b8b691f0cd2aab7b]
reverse link raylib.ex.RaylibException to raylib.ex.CameraException--><g id="link_raylib.ex.RaylibException_raylib.ex.CameraException"><path codeLine="1489" d="M14583.6,2201.722 C14454.62,2287.832 14227.7,2453.662 14082,2641.602 C13992.03,2757.652 13931.16,2924.792 13908.2,2994.572 " fill="none" id="raylib.ex.RaylibException-backto-raylib.ex.CameraException" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="14579.83,2195.822,14600.37,2190.612,14587.56,2207.492,14579.83,2195.822" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[a327c222be3f0fe40d077b3b42830860]
reverse link raylib.ex.RaylibException to raylib.ex.InvalidArgumentException--><g id="link_raylib.ex.RaylibException_raylib.ex.InvalidArgumentException"><path codeLine="1492" d="M14650.54,2208.942 C14569.29,2389.322 14354.71,2865.682 14296.66,2994.562 " fill="none" id="raylib.ex.RaylibException-backto-raylib.ex.InvalidArgumentException" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="14644.17,2206.042,14658.77,2190.682,14656.93,2211.792,14644.17,2206.042" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[14c21ddaeb1aacf60197128b294e0624]
reverse link raylib.ex.RaylibException to raylib.ex.RlAnimationException--><g id="link_raylib.ex.RaylibException_raylib.ex.RlAnimationException"><path codeLine="1495" d="M14682,2210.872 C14682,2392.692 14682,2866.132 14682,2994.562 " fill="none" id="raylib.ex.RaylibException-backto-raylib.ex.RlAnimationException" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="14675,2210.682,14682,2190.682,14689,2210.682,14675,2210.682" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[a01b12088367bcf6f418a7df98aae60a]
reverse link raylib.ex.RaylibException to raylib.ex.WindowException--><g id="link_raylib.ex.RaylibException_raylib.ex.WindowException"><path codeLine="1498" d="M14711.21,2209.212 C14786.46,2389.812 14984.77,2865.742 15038.44,2994.562 " fill="none" id="raylib.ex.RaylibException-backto-raylib.ex.WindowException" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="14704.72,2211.832,14703.49,2190.682,14717.65,2206.452,14704.72,2211.832" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[338885ed8fb2b129e48d47249dfa6027]
reverse link raylib.RlMusic to gameengine.audio.Music--><g id="link_raylib.RlMusic_gameengine.audio.Music"><path codeLine="1501" d="M3471.07,1932.762 C3426.21,1812.002 3352.95,1668.642 3232,1594.602 C3210.06,1581.172 2793.43,1594.652 2769,1586.602 C2687.39,1559.722 2609.67,1493.362 2573.11,1453.162 " fill="none" id="raylib.RlMusic-backto-gameengine.audio.Music" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="3477.79,1930.742,3478.03,1951.932,3464.63,1935.522,3477.79,1930.742" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[338885ed8fb2b129e48d47249dfa6027]
reverse link raylib.RlMusic to gameengine.audio.Music--><g id="link_raylib.RlMusic_gameengine.audio.Music"><path codeLine="1548" d="M3503.36,1939.442 C3463.9,1817.332 3390.19,1670.012 3267,1594.602 C3245.06,1581.172 2828.43,1594.652 2804,1586.602 C2722.39,1559.722 2644.67,1493.362 2597.3,1453.162 " fill="none" id="raylib.RlMusic-backto-gameengine.audio.Music-1" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="3507.3,1951.932,3509.3083,1945.0062,3503.6877,1940.4886,3501.6794,1947.4144,3507.3,1951.932" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[08df3b831c863bad74d2bea0adc305d1]
reverse link raylib.audio.RlSound to gameengine.audio.Fx--><g id="link_raylib.audio.RlSound_gameengine.audio.Fx"><path codeLine="1504" d="M8004.54,1922.712 C7981.66,1805.152 7932.44,1668.632 7827,1594.602 C7813.99,1585.462 3263.18,1591.322 3248,1586.602 C3163.84,1560.432 3082.91,1493.822 3039.28,1453.382 " fill="none" id="raylib.audio.RlSound-backto-gameengine.audio.Fx" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="8011.45,1921.592,8008.18,1942.532,7997.68,1924.122,8011.45,1921.592" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[25640ba719ec1261240715a251a614d0]
reverse link gameengine.Scene to gameengine.MainScene--><g id="link_gameengine.Scene_gameengine.MainScene"><path codeLine="1507" d="M697.01,1211.742 C677.62,1271.592 659.31,1328.122 646.74,1366.912 " fill="none" id="gameengine.Scene-backto-gameengine.MainScene" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="690.37,1209.512,703.2,1192.642,703.69,1213.832,690.37,1209.512" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[4c3b5599b50eb749bda8bc829dc3f44e]
reverse link gameengine.StaticBody to gameengine.KinematicBody--><g id="link_gameengine.StaticBody_gameengine.KinematicBody"><path codeLine="1510" d="M448.6,3282.002 C451.81,3507.152 456.27,3820.542 458.13,3951.392 " fill="none" id="gameengine.StaticBody-backto-gameengine.KinematicBody" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="441.6,3281.962,448.31,3261.862,455.6,3281.762,441.6,3281.962" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[4f8ff6c56a00a2ebaf4f30ad0f2dca72]
reverse link gameengine.AudioManager to gameengine.AudioManager--><g id="link_gameengine.AudioManager_gameengine.AudioManager"><path codeLine="1518" d="M2282.5,204.422 C2349.81,196.362 2407,233.762 2407,316.602 C2407,404.782 2342.2,441.472 2269.37,426.652 " fill="none" id="gameengine.AudioManager-backto-gameengine.AudioManager" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="2269.37,206.552,2275.9309,209.5444,2281.2166,204.6391,2274.6557,201.6467,2269.37,206.552" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[3b5c3322ac4436b5639acd5b02c9d4da]
reverse link gameengine.AudioManager to gameengine.ISound--><g id="link_gameengine.AudioManager_gameengine.ISound"><path codeLine="1521" d="M2245.79,435.942 C2296.13,483.682 2355.05,539.082 2409,588.602 C2503.43,675.282 2613.15,772.772 2688.64,839.372 " fill="none" id="gameengine.AudioManager-backto-gameengine.ISound" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="2236.17,426.812,2237.7706,433.8432,2244.8766,435.07,2243.276,428.0388,2236.17,426.812" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[ca6befbe1b5b3148f37e632184a8ceec]
reverse link gameengine.Button to raylib.texture.RlTexture--><g id="link_gameengine.Button_raylib.texture.RlTexture"><path codeLine="1524" d="M1233.82,3301.652 C1265,3346.532 1303.37,3387.262 1350,3414.602 C1532.11,3521.382 3067.17,3367.352 3249,3474.602 C3366.36,3543.822 3445.52,3674.282 3495.75,3789.392 " fill="none" id="gameengine.Button-backto-raylib.texture.RlTexture" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1226.46,3290.782,1226.5083,3297.9929,1233.1832,3300.7217,1233.1348,3293.5108,1226.46,3290.782" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[fc390190d83f2c325b3e826eeafa7962]
reverse link gameengine.component.GridComponent to raylib.RlColor--><g id="link_gameengine.component.GridComponent_raylib.RlColor"><path codeLine="1527" d="M2958.22,3222.872 C3046.69,3297.652 3157.33,3374.682 3273,3414.602 C3455,3477.402 6571.88,3377.292 6738,3474.602 C6743.83,3478.022 6749.57,3481.592 6755.21,3485.302 " fill="none" id="gameengine.component.GridComponent-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="2948.09,3214.232,2950.0655,3221.1672,2957.2271,3222.011,2955.2516,3215.0758,2948.09,3214.232" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[07ea62b73a00dca149f5b94236612cef]
reverse link gameengine.ISound to SoundCategory--><g id="link_gameengine.ISound_SoundCategory"><path codeLine="1530" d="M2922.84,1008.862 C3015.6,1069.862 3135.44,1157.242 3225,1252.602 C3260.42,1290.322 3291.52,1341.062 3311.14,1376.482 " fill="none" id="gameengine.ISound-backto-SoundCategory" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="2911.95,1001.742,2914.7802,1008.3745,2921.9911,1008.3129,2919.1608,1001.6804,2911.95,1001.742" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[94e509f36c49741c8429a003012c323d]
reverse link raylib.RlColor to raylib.RlColor--><g id="link_raylib.RlColor_raylib.RlColor"><path codeLine="1533" d="M7357.18,3926.552 C7373.69,3947.832 7383.5,3976.842 7383.5,4013.602 C7383.5,4056.372 7370.22,4088.662 7348.55,4110.472 " fill="none" id="raylib.RlColor-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="7348.55,3916.732,7349.5055,3923.8795,7356.4707,3925.7466,7355.5152,3918.599,7348.55,3916.732" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="14" x="7356.613" y="3910.8439">26</text></g><!--MD5=[2aea7884344b5a8b69e7a6974e4a1ba5]
reverse link raylib.builder.RlImageBuilder to raylib.RlColor--><g id="link_raylib.builder.RlImageBuilder_raylib.RlColor"><path codeLine="1536" d="M10838.23,3410.672 C10836.18,3412.012 10834.1,3413.322 10832,3414.602 C10668.54,3514.312 7552.51,3380.072 7386,3474.602 C7373.09,3481.932 7360.62,3489.982 7348.57,3498.652 " fill="none" id="raylib.builder.RlImageBuilder-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="10849.05,3403.262,10841.8396,3403.3609,10839.1577,3410.0547,10846.3681,3409.9558,10849.05,3403.262" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="7" x="10834.4934" y="3414.505">9</text></g><!--MD5=[18d5b75976bea932094b369bd40bf7e6]
reverse link raylib.builder.RlMeshBuilder to raylib.image.RlImage--><g id="link_raylib.builder.RlMeshBuilder_raylib.image.RlImage"><path codeLine="1539" d="M11251.63,3411.452 C11249.76,3412.522 11247.89,3413.572 11246,3414.602 C10934.53,3584.362 8362.49,3299.472 8054,3474.602 C7989.29,3511.332 7935.39,3566.202 7891.11,3627.062 " fill="none" id="raylib.builder.RlMeshBuilder-backto-raylib.image.RlImage" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="11262.94,3404.642,11255.7366,3404.3099,11252.6594,3410.8315,11259.8629,3411.1636,11262.94,3404.642" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="7" x="11247.8826" y="3413.6338">2</text></g><!--MD5=[3bc1731a1d38ce86d757e1faea49e055]
reverse link raylib.RlModel to raylib.texture.RlTexture--><g id="link_raylib.RlModel_raylib.texture.RlTexture"><path codeLine="1542" d="M3771.36,3388.712 C3727.84,3522.882 3679.72,3671.232 3641.33,3789.592 " fill="none" id="raylib.RlModel-backto-raylib.texture.RlTexture" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="3775.42,3376.192,3769.7634,3380.6645,3771.7163,3387.6061,3777.3729,3383.1336,3775.42,3376.192" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[6b9070afcefb715cd64ac850e8e067ae]
reverse link raylib.RlModelAnim to raylib.RlModel--><g id="link_raylib.RlModelAnim_raylib.RlModel"><path codeLine="1545" d="M4027.51,2289.702 C4007.29,2396.592 3979.3,2544.532 3953.69,2679.872 " fill="none" id="raylib.RlModelAnim-backto-raylib.RlModel" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="4029.93,2276.882,4024.8851,2282.0346,4027.701,2288.6732,4032.7459,2283.5206,4029.93,2276.882" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[a34d1202787e2d26bdf3dc801bdfd7a0]
reverse link raylib.text.RlText to raylib.RlColor--><g id="link_raylib.text.RlText_raylib.RlColor"><path codeLine="1551" d="M12963.23,3345.742 C12923.41,3373.422 12881.04,3397.412 12837,3414.602 C12554.87,3524.712 7649.85,3325.932 7386,3474.602 C7373.07,3481.892 7360.57,3489.902 7348.5,3498.542 " fill="none" id="raylib.text.RlText-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="12973.84,3338.232,12966.6317,3338.4341,12964.0459,3345.1656,12971.2542,3344.9635,12973.84,3338.232" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[f3c9dbf6e404129b748a032c0ab73af3]
reverse link raylib.text.RlText to raylib.text.RlFont--><g id="link_raylib.text.RlText_raylib.text.RlFont"><path codeLine="1554" d="M13182.87,3350.922 C13139.62,3520.382 13088.54,3720.522 13053.97,3855.972 " fill="none" id="raylib.text.RlText-backto-raylib.text.RlFont" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="13186.1,3338.262,13180.7397,3343.0856,13183.1306,3349.8888,13188.4909,3345.0652,13186.1,3338.262" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[d0584c6d35f7901126ceaca0c87e3266]
reverse link raylib.builder.RlTextBuilder to raylib.RlColor--><g id="link_raylib.builder.RlTextBuilder_raylib.RlColor"><path codeLine="1557" d="M11903.77,3291.982 C11865.74,3341.162 11819.56,3386.022 11765,3414.602 C11549.47,3527.482 7597.81,3354.882 7386,3474.602 C7373.08,3481.902 7360.59,3489.932 7348.53,3498.592 " fill="none" id="raylib.builder.RlTextBuilder-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="11911.77,3281.432,11904.9585,3283.7991,11904.5237,3290.9971,11911.3352,3288.63,11911.77,3281.432" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[f6e2a15b6aaa1e142560f2787a529a30]
reverse link raylib.builder.RlTextBuilder to raylib.text.RlFont--><g id="link_raylib.builder.RlTextBuilder_raylib.text.RlFont"><path codeLine="1560" d="M12232.05,3291.452 C12266.04,3333.762 12302.08,3376.222 12338,3414.602 C12488.7,3575.622 12678.04,3740.352 12817.97,3856.032 " fill="none" id="raylib.builder.RlTextBuilder-backto-raylib.text.RlFont" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="12223.92,3281.292,12224.5398,3288.4764,12231.4099,3290.6676,12230.7901,3283.4831,12223.92,3281.292" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[2d1902020d1429030924ed8291c86121]
reverse link raylib.window.RlWindow to raylib.RlCamera--><g id="link_raylib.window.RlWindow_raylib.RlCamera"><path codeLine="1563" d="M23785,2594.332 C23765.35,2649.552 23745.79,2704.532 23727.52,2755.872 " fill="none" id="raylib.window.RlWindow-backto-raylib.RlCamera" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="23789.46,2581.802,23783.6798,2586.1135,23785.4365,2593.1074,23791.2167,2588.7958,23789.46,2581.802" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[de5fa45ff9b5ccdec6fe053e1f6eb009]
reverse link raylib.window.RlWindow to raylib.window.RlWindow--><g id="link_raylib.window.RlWindow_raylib.window.RlWindow"><path codeLine="1566" d="M24211.87,2044.222 C24228.19,2066.442 24238,2097.732 24238,2138.102 C24238,2185.082 24224.71,2219.762 24203.35,2242.152 " fill="none" id="raylib.window.RlWindow-backto-raylib.window.RlWindow" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="24203.35,2034.052,24204.1323,2041.2205,24211.0504,2043.2555,24210.268,2036.087,24203.35,2034.052" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[61a3cc26e3723ff8753746e2368c9b5a]
reverse link gameengine.Scene to gameengine.AbstractBase--><g id="link_gameengine.Scene_gameengine.AbstractBase"><path codeLine="1569" d="M914.74,1205.002 C921.77,1221.122 928.72,1237.032 935.46,1252.472 " fill="none" id="gameengine.Scene-backto-gameengine.AbstractBase" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="909.34,1192.642,908.0812,1199.7424,914.1512,1203.6353,915.41,1196.5349,909.34,1192.642" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[519e6d30487e81531be5af59eba60ce9]
reverse link gameengine.SceneManager to gameengine.Scene--><g id="link_gameengine.SceneManager_gameengine.Scene"><path codeLine="1572" d="M791,601.692 C791,617.222 791,632.812 791,648.292 " fill="none" id="gameengine.SceneManager-backto-gameengine.Scene" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="791,588.662,787,594.662,791,600.662,795,594.662,791,588.662" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[4eac60ab9997476953a47de8a7a24ed2]
reverse link gameengine.SceneManager to gameengine.SceneManager--><g id="link_gameengine.SceneManager_gameengine.SceneManager"><path codeLine="1575" d="M1082.36,240.732 C1098.44,259.192 1108,284.482 1108,316.602 C1108,354.502 1094.69,382.882 1073.08,401.762 " fill="none" id="gameengine.SceneManager-backto-gameengine.SceneManager" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1073.08,231.442,1074.4942,238.513,1081.5653,239.9273,1080.1511,232.8562,1073.08,231.442" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[84a45d35b304daba7ecd448602bc986c]
reverse link gameengine.StaticBody to raylib.RlModel--><g id="link_gameengine.StaticBody_raylib.RlModel"><path codeLine="1578" d="M655.57,2785.152 C726.68,2720.002 811.36,2658.112 902.5,2623.602 C962.38,2600.932 3145.76,2606.642 3207.5,2623.602 C3259.52,2637.892 3311.58,2657.312 3362.45,2679.952 " fill="none" id="gameengine.StaticBody-backto-raylib.RlModel" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="645.63,2794.362,652.7489,2793.2125,654.4259,2786.1991,647.307,2787.3486,645.63,2794.362" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[0c4d66c840aec1ef4c5f1ef50b699b62]
reverse link gameengine.TextureRect to raylib.RlColor--><g id="link_gameengine.TextureRect_raylib.RlColor"><path codeLine="1581" d="M2026.55,3242.132 C2104.96,3310.602 2200.19,3378.132 2301,3414.602 C2532.82,3498.472 6525.05,3350.402 6738,3474.602 C6743.84,3478.012 6749.58,3481.572 6755.22,3485.272 " fill="none" id="gameengine.TextureRect-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="2016.58,3233.342,2018.4312,3240.3114,2025.5765,3241.2832,2023.7253,3234.3137,2016.58,3233.342" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[fa6de74023eae6f4cf2210d47a9bcc87]
reverse link gameengine.TextureRect to raylib.texture.RlTexture--><g id="link_gameengine.TextureRect_raylib.texture.RlTexture"><path codeLine="1584" d="M2030.39,3241.812 C2108.36,3309.192 2202.31,3376.102 2301,3414.602 C2497.65,3491.322 3068.9,3364.502 3249,3474.602 C3364.79,3545.382 3443.76,3675.132 3494.27,3789.462 " fill="none" id="gameengine.TextureRect-backto-raylib.texture.RlTexture" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="2020.47,3233.172,2022.3644,3240.1298,2029.5156,3241.0572,2027.6212,3234.0994,2020.47,3233.172" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[87e56c4211670b48ac015ac7c0732ee1]
reverse link raylib.builder.RlImageBuilder to raylib.builder.RlImageBuilder::ImageType--><g id="link_raylib.builder.RlImageBuilder_raylib.builder.RlImageBuilder::ImageType"><path codeLine="1593" d="M10950.41,3419.792 C10908.56,3604.362 10862.22,3808.772 10836.34,3922.882 " fill="none" id="raylib.builder.RlImageBuilder-backto-raylib.builder.RlImageBuilder::ImageType" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="10951.9723" cy="3412.9342" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="10950.2046" x2="10953.74" y1="3420.7365" y2="3405.132"/><line style="stroke:#181818;stroke-width:1.0;" x1="10944.17" x2="10959.7746" y1="3411.1665" y2="3414.7019"/></g><!--MD5=[619ea495583f73875fb05cbb74c96711]
reverse link raylib.builder.RlImageBuilder to raylib.builder.RlImageBuilder::ParameterName--><g id="link_raylib.builder.RlImageBuilder_raylib.builder.RlImageBuilder::ParameterName"><path codeLine="1596" d="M11058.89,3420.402 C11066.23,3564.692 11074.18,3721.042 11080.06,3836.842 " fill="none" id="raylib.builder.RlImageBuilder-backto-raylib.builder.RlImageBuilder::ParameterName" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="11058.5317" cy="3413.1214" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="11058.9433" x2="11058.12" y1="3421.1108" y2="3405.132"/><line style="stroke:#181818;stroke-width:1.0;" x1="11050.5423" x2="11066.5211" y1="3413.5331" y2="3412.7097"/></g><!--MD5=[2d6ee4870631d8e6302b49837df72893]
reverse link raylib.builder.RlMeshBuilder to raylib.builder.RlMeshBuilder::MeshType--><g id="link_raylib.builder.RlMeshBuilder_raylib.builder.RlMeshBuilder::MeshType"><path codeLine="1599" d="M11484.63,3429.822 C11476.36,3592.442 11467.39,3768.832 11461.52,3884.452 " fill="none" id="raylib.builder.RlMeshBuilder-backto-raylib.builder.RlMeshBuilder::MeshType" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="11484.9883" cy="3422.6214" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="11484.5767" x2="11485.4" y1="3430.6108" y2="3414.632"/><line style="stroke:#181818;stroke-width:1.0;" x1="11476.9989" x2="11492.9777" y1="3422.2097" y2="3423.0331"/></g><!--MD5=[fc072d3e7813001ec5d73af69cd4ed1b]
reverse link raylib.builder.RlMeshBuilder to raylib.builder.RlMeshBuilder::ParameterName--><g id="link_raylib.builder.RlMeshBuilder_raylib.builder.RlMeshBuilder::ParameterName"><path codeLine="1602" d="M11592.16,3429.662 C11621.31,3563.632 11652.5,3706.972 11676.65,3817.982 " fill="none" id="raylib.builder.RlMeshBuilder-backto-raylib.builder.RlMeshBuilder::ParameterName" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="11590.5891" cy="3422.4495" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="11592.2882" x2="11588.89" y1="3430.2669" y2="3414.632"/><line style="stroke:#181818;stroke-width:1.0;" x1="11582.7716" x2="11598.4066" y1="3424.1486" y2="3420.7503"/></g><!--MD5=[109ac35d645f8b2519ae18771f03bba8]
@startuml





/' Objects '/

enum SoundCategory {
	FX
	MUSIC
}


namespace raylib {
	class Collision2DHelper {
		+{static} getCollisionRec(const Rectangle& rec1, const Rectangle& rec2) : Rectangle
		+{static} checkCollisionCircleRec(const Vector2f& center, float radius, const Rectangle& rec) : bool
		+{static} checkCollisionCircles(const Vector2f& center1, float radius1, const Vector2f& center2, float radius2) : bool
		+{static} checkCollisionLines(const Vector2f& startPos1, const Vector2f& endPos1, const Vector2f& startPos2, const Vector2f& endPos2, Vector2f& collisionPoint) : bool
		+{static} checkCollisionPointCircle(const Vector2f& point, const Vector2f& center, float radius) : bool
		+{static} checkCollisionPointLine(const Vector2f& point, const Vector2f& p1, const Vector2f& p2, int threshold) : bool
		+{static} checkCollisionPointRec(const Vector2f& point, const Rectangle& rec) : bool
		+{static} checkCollisionPointTriangle(const Vector2f& point, const Vector2f& p1, const Vector2f& p2, const Vector2f& p3) : bool
		+{static} checkCollisionRecs(const Rectangle& rec1, const Rectangle& rec2) : bool
	}

	class Collision3dHelper {
		+{static} getRayCollisionBox(Ray ray, BoundingBox box) : RayCollision
		+{static} getRayCollisionMesh(Ray ray, RlMesh mesh, Matrix transform) : RayCollision
		+{static} getRayCollisionModel(Ray ray, RlModel model) : RayCollision
		+{static} getRayCollisionQuad(Ray ray, Vector3f p1, Vector3f p2, Vector3f p3, Vector3f p4) : RayCollision
		+{static} getRayCollisionSphere(Ray ray, Vector3f center, float radius) : RayCollision
		+{static} getRayCollisionTriangle(Ray ray, Vector3f p1, Vector3f p2, Vector3f p3) : RayCollision
		+{static} checkCollisionBoxSphere(BoundingBox box, Vector3f center, float radius) : bool
		+{static} checkCollisionBoxes(BoundingBox box1, BoundingBox box2) : bool
		+{static} checkCollisionSpheres(Vector3f center1, float radius1, Vector3f center2, float radius2) : bool
	}

	class GlStateManager {
		+{static} color(const RlColor& color) : void
		+{static} color(unsigned char r, unsigned char g, unsigned char b, unsigned char a) : void
		+{static} color(float r, float g, float b, float a) : void
		+{static} color(unsigned char r, unsigned char g, unsigned char b) : void
		+{static} disableBackfaceCulling() : void
		+{static} disableColorBlend() : void
		+{static} disableDepthMask() : void
		+{static} disableDepthTest() : void
		+{static} disableScissorTest() : void
		+{static} disableSmoothLines() : void
		+{static} disableWireMode() : void
		+{static} enableBackfaceCulling() : void
		+{static} enableColorBlend() : void
		+{static} enableDepthMask() : void
		+{static} enableDepthTest() : void
		+{static} enableScissorTest() : void
		+{static} enableSmoothLines() : void
		+{static} enableWireMode() : void
		+{static} popMatrix() : void
		+{static} pushMatrix() : void
		+{static} rotate(const Vector3f& rotation) : void
		+{static} scale(const Vector3f& scale) : void
		+{static} scissor(int x, int y, int width, int height) : void
		+{static} scissor(const Rectangle& rect) : void
		+{static} translate(const Vector3f& translation) : void
	}

	class MeshGenerator {
		+{static} genMeshCone(float radius, float height, int slices) : RlMesh
		+{static} genMeshCube(float width, float height, float length) : RlMesh
		+{static} genMeshCubicmap(Image cubicmap, Vector3f cubeSize) : RlMesh
		+{static} genMeshCylinder(float radius, float height, int slices) : RlMesh
		+{static} genMeshHeightmap(Image heightmap, Vector3f size) : RlMesh
		+{static} genMeshHemiSphere(float radius, int rings, int slices) : RlMesh
		+{static} genMeshKnot(float radius, float size, int radSeg, int sides) : RlMesh
		+{static} genMeshPlane(float width, float length, int resX, int resZ) : RlMesh
		+{static} genMeshPoly(int sides, float radius) : RlMesh
		+{static} genMeshSphere(float radius, int rings, int slices) : RlMesh
		+{static} genMeshTorus(float radius, float size, int radSeg, int sides) : RlMesh
	}

	class MeshHelper {
		+{static} getMeshBoundingBox(Mesh mesh) : BoundingBox
		+{static} exportMesh(Mesh mesh, const std::string& fileName) : bool
		+{static} drawMesh(Mesh mesh, Material material, Matrix transform) : void
		+{static} drawMeshInstanced(Mesh mesh, Material material, Matrix* transforms, int instances) : void
		+{static} genMeshBinormals(Mesh* mesh) : void
		+{static} genMeshTangents(Mesh* mesh) : void
		+{static} updateMeshBuffer(Mesh mesh, int index, void* data, int dataSize, int offset) : void
		+{static} uploadMesh(Mesh* mesh, bool dynamic) : void
	}

	class ModelHelper {
		+{static} getModelBoundingBox(Model model) : BoundingBox
		+{static} drawModel(const RlModel& model) : void
		+{static} drawModelWires(const RlModel& model) : void
		+{static} unloadModelKeepMeshes(Model model) : void
	}

	class Random {
		+Random()
		+generate(double min, double max) : double
		+generate(float min, float max) : float
		+generate(int min, int max) : int
		+generate(long min, long max) : long
		+generate(short min, short max) : short
		-_random_device : std::random_device
		+generateSizeT(std::size_t min, std::size_t max) : std::size_t
	}

	class RlAnimation {
		+RlAnimation()
		+RlAnimation(const std::string& animationDir, const std::string& extension)
		+~RlAnimation()
		-_isLoaded : bool
		+isLoaded() : bool& {query}
		+getAnimationsSize() : std::size_t {query}
		-_animationModels : std::vector<Model>
		+getAnimationModels() : std::vector<Model>& {query}
		-_frame : unsigned int
		+getFrame() : unsigned int& {query}
		+update() : void
	}

	class RlAudioStream {
		+RlAudioStream(unsigned int sampleRate, unsigned int sampleSize, unsigned int channels)
		+~RlAudioStream()
		-stream : AudioStream
		+isPlaying() : bool
		+isProcessed() : bool
		+getVolume() : float {query}
		-volume : float
		+pause() : void
		+play() : void
		+resume() : void
		+setPitch(float pitch) : void
		+setVolume(float volume) : void
		+stop() : void
		+update(const void* data, int samplesCount) : void
	}

	class RlCamera {
		+RlCamera()
		+RlCamera(const Vector3f& position, const Vector3f& target, const Vector3f& lookingPoint, const float& fovy, const CameraProjection& projection, const CameraMode& cameraMode)
		-_camera : Camera3D
		+get() : Camera3D& {query}
		-_cameraMode : CameraMode
		-_mode : CameraMode
		+getConstructedCameraMode() : CameraMode& {query}
		+getMode() : CameraMode& {query}
		-_projection : CameraProjection
		+getConstructedProjection() : CameraProjection& {query}
		+geMatrix() : Matrix
		-_lookingPoint : Vector3f
		-_position : Vector3f
		-_target : Vector3f
		+getConstructedLookingPoint() : Vector3f& {query}
		+getConstructedPosition() : Vector3f& {query}
		+getConstructedTarget() : Vector3f& {query}
		-_fovy : float
		+getConstructedFovy() : float& {query}
		+reset() : void
		+setCameraMode(const CameraMode& mode) : void
		+setFov(const float& fovy) : void
		+setPosition(const Vector3f& position) : void
		+setProjection(const CameraProjection& projection) : void
		+setTarget(const Vector3f& target) : void
		+update() : void
	}

	class RlColor {
		+RlColor(Color color)
		+RlColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
		+RlColor(std::uint32_t color)
		+RlColor(const Vector4f& normalizedColor)
		+RlColor(float hue, float saturation, float value)
		-_color : Color
		+getColor() : Color& {query}
		+operator+(unsigned char value) : RlColor&
		+operator+=(unsigned char value) : RlColor&
		+operator-(unsigned char value) : RlColor&
		+operator-=(unsigned char value) : RlColor&
		+setAlpha(unsigned char a) : RlColor&
		+setBlue(unsigned char b) : RlColor&
		+setGreen(unsigned char g) : RlColor&
		+setRed(unsigned char r) : RlColor&
		+toHSV() : Vector3f
		+normalize() : Vector4f {query}
		+operator!=(const RlColor& rhs) : bool {query}
		+operator==(const RlColor& rhs) : bool {query}
		+{static} Beige : static const RlColor
		+{static} Black : static const RlColor
		+{static} Blue : static const RlColor
		+{static} Brown : static const RlColor
		+{static} DarkBlue : static const RlColor
		+{static} DarkBrown : static const RlColor
		+{static} DarkGray : static const RlColor
		+{static} DarkGreen : static const RlColor
		+{static} DarkPurple : static const RlColor
		+{static} Gold : static const RlColor
		+{static} Gray : static const RlColor
		+{static} Green : static const RlColor
		+{static} LightGray : static const RlColor
		+{static} Lime : static const RlColor
		+{static} Magenta : static const RlColor
		+{static} Maroon : static const RlColor
		+{static} Orange : static const RlColor
		+{static} Pink : static const RlColor
		+{static} Purple : static const RlColor
		+{static} RayWhite : static const RlColor
		+{static} Red : static const RlColor
		+{static} SkyBlue : static const RlColor
		+{static} Transparent : static const RlColor
		+{static} Violet : static const RlColor
		+{static} White : static const RlColor
		+{static} Yellow : static const RlColor
		+toInteger() : std::uint32_t {query}
		+getAlpha() : unsigned char& {query}
		+getBlue() : unsigned char& {query}
		+getGreen() : unsigned char& {query}
		+getRed() : unsigned char& {query}
		+alpha(float alpha) : void
		+alphaBlend(const RlColor& src, const RlColor& tint) : void
		+setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a) : void
		+setColor(const Color& color) : void
	}

	class RlMaterial {
		+RlMaterial()
		+~RlMaterial()
		-_material : Material
		+getMaterial() : Material& {query}
		+loadMaterials(const std::string& fileName, int* materialCount) : Material*
		-_materialCount : int
		+getMaterialCount() : int& {query}
		+setMaterialTexture(Material* material, int mapType, Texture2D texture) : void
		+setModelMeshMaterial(Model* model, int meshId, int materialId) : void
	}

	class RlMesh {
		+RlMesh(const Mesh& mesh)
		-_mesh : Mesh
		+getMesh() : Mesh& {query}
		+setMesh(const Mesh& mesh) : void
	}

	class RlModel {
		+RlModel(const std::string& fileName, const std::string& texturePath, Vector3f position, Vector3f scale, Color color, Vector3f rotationAxis, float rotationAngle)
		+RlModel(const Mesh& mesh, const std::string& texturePath, Vector3f position, Vector3f scale, Color color, Vector3f rotationAxis, float rotationAngle)
		+RlModel(const RlMesh& mesh, const std::string& texturePath, Vector3f position, Vector3f scale, Color color, Vector3f rotationAxis, float rotationAngle)
		+RlModel(const builder::RlMeshBuilder::MeshType& type, const std::string& texturePath, Vector3f position, Vector3f scale, Color color, Vector3f rotationAxis, float rotationAngle)
		+~RlModel()
		-_boundingBox : BoundingBox
		-_baseBoudingBox : BoundingBox
		+getBoundingBox() : BoundingBox& {query}
		-_color : Color
		+getColor() : Color& {query}
		-_model : Model
		+getModel() : Model& {query}
		-_position : Vector3f
		-_rotationAxis : Vector3f
		-_scale : Vector3f
		+getPosition() : Vector3f& {query}
		+getRotationAxis() : Vector3f& {query}
		+getScale() : Vector3f& {query}
		-_rotationAngle : float
		+getRotationAngle() : float& {query}
		+operator->() : texture :: RlTexture*
		-_texture : texture::RlTexture
		+getTexture() : texture::RlTexture& {query}
		+setBoundingBox(const BoundingBox& boundingBox) : void
		+setColor(Color color) : void
		+setPosition(Vector3f position) : void
		+setPosition(float x, float y, float z) : void
		+setRotationAngle(float rotationAngle) : void
		+setRotationAxis(Vector3f rotationAxis) : void
		+setRotationAxis(float x, float y, float z) : void
		+setScale(Vector3f scale) : void
		+setScale(float x, float y, float z) : void
		+setTexture(const texture::RlTexture& texture) : void
		+setTextureMaterial() : void
	}

	class RlModelAnim {
		+RlModelAnim(const RlModel& model, const std::string& fileName)
		+~RlModelAnim()
		-_anims : ModelAnimation*
		+animationIndexIsValid(const unsigned int& animIndex) : bool
		-_model : const RlModel&
		-_frameCount : int
		-_animations : std::vector<ModelAnimation>
		-_count : unsigned int
		+getCount() : unsigned int {query}
		+incrementFrameCount(const int& value) : void
		+unload(const unsigned int& animIndex) : void
		+update(const unsigned int& animIndex) : void
	}

	class RlMusic {
		+RlMusic(const std::string& fileName)
		+RlMusic(const std::string& fileType, unsigned char* data, int dataSize)
		+~RlMusic()
		-music : Music
		+isPlaying() : bool
		+getTimeLength() : float
		+getTimePlayed() : float
		+getVolume() : float {query}
		-volume : float
		+pause() : void
		+play() : void
		+resume() : void
		+seek(float position) : void
		+setPitch(float pitch) : void
		+setVolume(float volume) : void
		+stop() : void
		+update() : void
	}

	class Shape3DHelper {
		+{static} drawCircle3D(Vector3f center, float radius, Vector3f rotationAxis, float rotationAngle, RlColor color) : void
		+{static} drawCube(Vector3f position, float width, float height, float length, RlColor color) : void
		+{static} drawCubeTexture(Texture2D texture, Vector3f position, float width, float height, float length, RlColor color) : void
		+{static} drawCubeTextureRec(Texture2D texture, Rectangle source, Vector3f position, float width, float height, float length, RlColor color) : void
		+{static} drawCubeV(Vector3f position, Vector3f size, RlColor color) : void
		+{static} drawCubeWires(Vector3f position, float width, float height, float length, RlColor color) : void
		+{static} drawCubeWiresV(Vector3f position, Vector3f size, RlColor color) : void
		+{static} drawCylinder(Vector3f position, float radiusTop, float radiusBottom, float height, int slices, RlColor color) : void
		+{static} drawCylinderEx(Vector3f startPos, Vector3f endPos, float startRadius, float endRadius, int sides, RlColor color) : void
		+{static} drawCylinderWires(Vector3f position, float radiusTop, float radiusBottom, float height, int slices, RlColor color) : void
		+{static} drawCylinderWiresEx(Vector3f startPos, Vector3f endPos, float startRadius, float endRadius, int sides, RlColor color) : void
		+{static} drawGrid(int slices, float spacing) : void
		+{static} drawGrid(const Vector2i& size, const float& spacing) : void
		+{static} drawGrid(const Vector2i& size, const Vector3f& position, const float& spacing) : void
		+{static} drawGrid(const Vector2i& size, const Vector3f& position, const float& spacing, const RlColor& color) : void
		+{static} drawLine3D(Vector3f startPos, Vector3f endPos, RlColor color) : void
		+{static} drawPlane(Vector3f centerPos, Vector2f size, RlColor color) : void
		+{static} drawPoint3D(Vector3f position, RlColor color) : void
		+{static} drawRay(Ray ray, RlColor color) : void
		+{static} drawSphere(Vector3f centerPos, float radius, RlColor color) : void
		+{static} drawSphereEx(Vector3f centerPos, float radius, int rings, int slices, RlColor color) : void
		+{static} drawSphereWires(Vector3f centerPos, float radius, int rings, int slices, RlColor color) : void
		+{static} drawTriangle3D(Vector3f v1, Vector3f v2, Vector3f v3, RlColor color) : void
		+{static} drawTriangleStrip3D(::Vector3* points, int pointsCount, RlColor color) : void
	}

	class Vector2 <template<typename T>> {
		+Vector2()
		+Vector2(T x, T y)
		+x : T
		+y : T
		+operator!=(const Vector2<T>& other) : bool {query}
		+operator==(const Vector2<T>& other) : bool {query}
	}

	class Vector3 <template<typename T>> {
		+Vector3()
		+Vector3(T x, T y, T z)
		+x : T
		+y : T
		+z : T
		+operator!=(const Vector3<T>& other) : bool {query}
		+operator==(const Vector3<T>& other) : bool {query}
	}

	class Vector4 <template<typename T>> {
		+Vector4()
		+Vector4(T x, T y, T z, T w)
		+w : T
		+x : T
		+y : T
		+z : T
		+operator!=(const Vector4& other) : bool {query}
		+operator==(const Vector4& other) : bool {query}
	}

	namespace window {
		class RlWindow {
			+RlWindow()
			+~RlWindow()
			-_isCreated : bool
			+hasWindowState(const ConfigFlags& flag) : bool
			+isOpen() : bool
			+isWindowFocused() : bool
			+isWindowFullscreen() : bool
			+isWindowHidden() : bool
			+isWindowMaximized() : bool
			+isWindowMinimized() : bool
			+isWindowReady() : bool
			+isWindowResized() : bool
			+isIsCreated() : bool& {query}
			-_height : int
			-_minHeight : int
			-_minWidth : int
			-_width : int
			+getHeight() : int& {query}
			+getMinHeight() : int& {query}
			+getMinWidth() : int& {query}
			+getWidth() : int& {query}
			-_camera : raylib::RlCamera
			+getCamera() : raylib::RlCamera&
			+getCamera() : raylib::RlCamera& {query}
			-{static} _instance : static std::shared_ptr<RlWindow>
			+{static} getInstance() : std::shared_ptr<RlWindow>&
			-_title : std::string
			+getTitle() : std::string& {query}
			+clearWindowState(unsigned int flags) : void
			+createWindow(const std::string& title, int width, int height, int fps) : void
			+maximizeWindow() : void
			+minimizeWindow() : void
			+restoreWindow() : void
			+setCamera(const RlCamera& camera) : void
			+setConfigFlags(unsigned int flags) : void
			+setWindowIcon(const image::RlImage& image) : void
			+setWindowMinSize(int width, int height) : void
			+setWindowMonitor(int monitor) : void
			+setWindowPosition(int x, int y) : void
			+setWindowSize(int width, int height) : void
			+setWindowState(unsigned int flags) : void
			+setWindowTitle(const std::string& title) : void
			+takeScreenshot(const std::string& fileName) : void
			+toggleFullscreen() : void
		}

		class System {
			+{static} getMonitorPosition(int monitorIndex) : Vector2f
			+{static} getWindowPosition() : Vector2f
			+{static} getWindowScaleDPI() : Vector2f
			+{static} getMonitorPhysicalSize(int monitorIndex) : Vector2i
			+{static} getMonitorSize(int monitorIndex) : Vector2i
			+{static} getScreenSize() : Vector2i
			+{static} getCurrentMonitor() : int
			+{static} getMonitorCount() : int
			+{static} getMonitorHeight(int monitorIndex) : int
			+{static} getMonitorPhysicalHeight(int monitorIndex) : int
			+{static} getMonitorPhysicalWidth(int monitorIndex) : int
			+{static} getMonitorRefreshRate(int monitorIndex) : int
			+{static} getMonitorWidth(int monitorIndex) : int
			+{static} getScreenHeight() : int
			+{static} getScreenWidth() : int
			+{static} getClipboardText() : std::string
			+{static} getMonitorName(int monitorIndex) : std::string
			+{static} setClipboardText(const std::string& text) : void
		}
	}

	namespace texture {
		class RlRenderTexture {
			+RlRenderTexture(int width, int height)
			+~RlRenderTexture()
			-_renderTexture : RenderTexture2D
			+getRenderTexture() : RenderTexture2D& {query}
		}

		class RlTexture {
			+RlTexture(const std::string& fileName)
			+RlTexture(const image::RlImage& image)
			+RlTexture(const image::RlImage& image, const CubemapLayout& layout)
			+~RlTexture()
			-_textureRec : Rectangle
			+getTextureRec() : Rectangle& {query}
			-_texture : Texture2D
			+get() : Texture2D&
			+get() : Texture2D& {query}
			+getFormat() : int& {query}
			+getHeight() : int& {query}
			+getMipmaps() : int& {query}
			+getWidth() : int& {query}
			-_texturePath : std::string
			+getPath() : std::string& {query}
			+getID() : unsigned int& {query}
			+genTextureMipmaps() : void
			+setFilter(const TextureFilter& filter) : void
			+setWrap(const TextureWrap& wrap) : void
			+update(const void* pixels) : void
			+updateRect(const Rectangle& rec, const void* pixels) : void
		}
	}

	namespace text {
		class RlFont {
			+RlFont()
			+RlFont(const std::string& fontPath)
			+RlFont(const int& fontSize)
			+RlFont(const std::string& fontPath, const int& fontSize, int* fontChars, const int& glyphCount)
			+RlFont(const image::RlImage& image, const RlColor& key, const int& firstChar)
			+RlFont(const std::string& fileType, const unsigned char* fileData, int dataSize, const int& fontSize, int* fontChars, const int& glyphCount)
			+~RlFont()
			-_font : Font
			+getFont() : Font& {query}
			-_fontSize : int
			+getFontSize() : int {query}
			+{static} getDefaultFont() : std::shared_ptr<RlFont>
			-_fontPath : std::string
			+getFontPath() : std::string& {query}
		}

		class RlText {
			+RlText(const std::string& text, const Vector2f& position, const RlColor& color)
			+RlText(const std::string& text, std::shared_ptr<RlFont>& font, const Vector2f& position, const RlColor& color)
			+RlText(const std::string& text, const std::string& fontPath, float fontSize, const Vector2f& position, const RlColor& color)
			-_color : RlColor
			+getColor() : RlColor& {query}
			-_origin : Vector2f
			-_position : Vector2f
			+getSize() : Vector2f {query}
			+getOrigin() : Vector2f& {query}
			+getPosition() : Vector2f& {query}
			-_fontSize : float
			-_rotation : float
			-_textSpacing : float
			+getFontSize() : float {query}
			+getRotation() : float {query}
			+getTextSpacing() : float {query}
			+getWidth() : float {query}
			-_font : std::shared_ptr<RlFont>
			+getFont() : std::shared_ptr<RlFont>& {query}
			-_text : std::string
			+getText() : std::string& {query}
			+setColor(const RlColor& color) : void
			+setFont(const std::shared_ptr<RlFont>& font) : void
			+setFontSize(float fontSize) : void
			+setOrigin(const Vector2f& origin) : void
			+setPosition(float x, float y) : void
			+setPosition(const Vector2f& pos) : void
			+setRotation(float rotation) : void
			+setText(const std::string& text) : void
			+setTextSpacing(float textSpacing) : void
		}

		class TextCodepoint {
			+TextCodepoint(const std::string& text)
			+getCodepointsCount() : int {query}
			+{static} codePointToUTF8(const int& codepoint, int& byteSize) : std::string
			+toUTF8String(const int& bytesLength) : std::string
			-_codepoints : std::vector<int>
			+getCodepoints() : std::vector<int>& {query}
		}
	}

	namespace shader {
		class RlShader {
			+RlShader()
			+~RlShader()
			-_shader : Shader
			+getShader() : Shader& {query}
			+getLocation(const std::string& uniformName) : int
			+getLocationAttrib(const std::string& attribName) : int
			+load(const std::string& vsFileName, const std::string& fsFileName) : void
			+loadFromMemory(const std::string& vsCode, const std::string& fsCode) : void
			+setValue(int locIndex, const void* value, int uniformType) : void
			+setValueMatrix(int locIndex, const Matrix& mat) : void
			+setValueTexture(int locIndex, const texture::RlTexture& texture) : void
			+setValueV(int locIndex, const void* value, int uniformType, int count) : void
		}
	}

	namespace image {
		class ImageDrawHelper {
			+{static} clearBackground(image::RlImage& dst, const RlColor& color) : void
			+{static} drawCircle(image::RlImage& dst, int centerX, int centerY, int radius, const RlColor& color) : void
			+{static} drawCircle(image::RlImage& dst, const Vector2f& center, int radius, const RlColor& color) : void
			+{static} drawImage(image::RlImage& dst, const image::RlImage& src, const Rectangle& srcRec, const Rectangle& dstRec, const RlColor& tint) : void
			+{static} drawImageText(image::RlImage& dst, const std::string& text, int posX, int posY, int fontSize, const RlColor& color) : void
			+{static} drawImageText(image::RlImage& dst, const raylib::text::RlFont& font, const std::string& text, const Vector2f& position, float fontSize, float spacing, const RlColor& tint) : void
			+{static} drawLine(image::RlImage& dst, int startPosX, int startPosY, int endPosX, int endPosY, const RlColor& color) : void
			+{static} drawLine(image::RlImage& dst, const Vector2f& start, const Vector2f& end, const RlColor& color) : void
			+{static} drawPixel(image::RlImage& dst, int posX, int posY, const RlColor& color) : void
			+{static} drawPixel(image::RlImage& dst, const Vector2f& position, const RlColor& color) : void
			+{static} drawRectangle(image::RlImage& dst, int posX, int posY, int width, int height, const RlColor& color) : void
			+{static} drawRectangle(image::RlImage& dst, const Vector2f& position, const Vector2f& size, const RlColor& color) : void
			+{static} drawRectangleLines(image::RlImage& dst, const Rectangle& rec, int thick, const RlColor& color) : void
			+{static} drawRectangleRec(image::RlImage& dst, const Rectangle& rec, const RlColor& color) : void
		}

		class ImageGenerator {
			+{static} genImageCellular(const int& width, const int& height, const int& tileSize) : RlImage
			+{static} genImageChecked(const int& width, const int& height, const int& checksX, const int& checksY, const RlColor& col1, const RlColor& col2) : RlImage
			+{static} genImageColor(const int& width, const int& height, const RlColor& color) : RlImage
			+{static} genImageGradientH(const int& width, const int& height, const RlColor& left, const RlColor& right) : RlImage
			+{static} genImageGradientRadial(const int& width, const int& height, float density, const RlColor& inner, const RlColor& outer) : RlImage
			+{static} genImageGradientV(const int& width, const int& height, const RlColor& top, const RlColor& bottom) : RlImage
			+{static} genImageWhiteNoise(const int& width, const int& height, float factor) : RlImage
		}

		class RlImage {
			+RlImage(const Image& image)
			+RlImage(const Image& image, int frameCount)
			+~RlImage()
			-_image : Image
			+getImage() : Image& {query}
			+getImage() : Image&
			+getImageAlphaBorder(float threshold) : Rectangle
			+getImageColor(int x, int y) : RlColor
			+copy() : RlImage
			+subImage(const Rectangle& rec) : RlImage
			+save(const std::string& fileName) : bool
			+saveAsCode(const std::string& fileName) : bool
			-_frameCount : int
			+getFrameCount() : int& {query}
			+loadImageColors() : std::vector<RlColor>
			+loadImagePalette(int maxPaletteSize) : std::vector<RlColor>
			+alphaClear(const RlColor& color, float threshold) : void
			+alphaCrop(float threshold) : void
			+alphaMask(const RlImage& alphaMask) : void
			+alphaPremultiply() : void
			+changeFormat(int newFormat) : void
			+colorBrightness(int brightness) : void
			+colorContrast(float contrast) : void
			+colorGrayscale() : void
			+colorInvert() : void
			+colorReplace(const RlColor& color, const RlColor& replace) : void
			+colorTint(const RlColor& color) : void
			+crop(const Rectangle& crop) : void
			+dither(int rBpp, int gBpp, int bBpp, int aBpp) : void
			+flipHorizontal() : void
			+flipVertical() : void
			+mipmaps() : void
			+resize(int newWidth, int newHeight) : void
			+resizeCanvas(int newWidth, int newHeight, int offsetX, int offsetY, const RlColor& fill) : void
			+resizeNearesetNeighbor(int newWidth, int newHeight) : void
			+rotateClockwise() : void
			+rotateCounterClockwise() : void
			+toPot(const RlColor& fill) : void
		}
	}

	namespace helper {
		class AudioDeviceHelper {
			+{static} isAudioDeviceReady() : bool
			-{static} _audioDeviceInit : static bool
			+{static} closeAudioDevice() : void
			+{static} initAudioDevice() : void
			+{static} setMasterVolume(float volume) : void
		}

		class CameraHelper {
			+{static} setAltControl(int keyAlt) : void
			+{static} setCameraMode(const RlCamera& camera, const CameraMode& mode) : void
			+{static} setMoveControls(int keyFront, int keyBack, int keyRight, int keyLeft, int keyUp, int keyDown) : void
			+{static} setPanControl(int keyPan) : void
			+{static} setSmoothZoomControl(int keySmoothZoom) : void
		}

		class ColorHelper {
			+{static} colorAlpha(const RlColor& color, float alpha) : RlColor
			+{static} colorAlphaBlend(const RlColor& dst, const RlColor& src, const RlColor& tint) : RlColor
			+{static} colorFromHSV(float hue, float saturation, float value) : RlColor
			+{static} colorFromNormalized(const Vector4f& normalizedColor) : RlColor
			+{static} getColor(unsigned int hexValue) : RlColor
			+{static} getPixelColor(void* srcPtr, int format) : RlColor
			+{static} colorToHSV(const RlColor& color) : Vector3f
			+{static} getPixelDataSize(int width, int height, int format) : int
			+{static} setPixelColor(void* dstPtr, const RlColor& color, int format) : void
		}

		class CoreHelper {
			+{static} loadVrStereoConfig(const VrDeviceInfo& device) : VrStereoConfig
			+{static} getTime() : double
			+{static} getFrameTime() : float
			+{static} getFPS() : int
			+{static} openURL(const std::string& url) : void
			+{static} setFramerateLimit(int fps) : void
			+{static} unloadVrStereoConfig(const VrStereoConfig& config) : void
		}

		class FileHelper {
			+{static} directoryExists(const std::string& dirPath) : bool
			+{static} fileExists(const std::string& fileName) : bool
			+{static} isFileDropped() : bool
			+{static} isFileExtension(const std::string& fileName, const std::string& ext) : bool
			+{static} saveFileText(const std::string& fileName, const std::string& text) : bool
			+{static} getFileModTime(const std::string& fileName) : long long
			+{static} getDirectoryPath(const std::string& filePath) : std::string
			+{static} getFileExtension(const std::string& fileName) : std::string
			+{static} getFileName(const std::string& filePath) : std::string
			+{static} getFileNameWithoutExt(const std::string& filePath) : std::string
			+{static} getPrevDirectoryPath(const std::string& dirPath) : std::string
			+{static} getWorkingDirectory() : std::string
			+{static} loadFileText(const std::string& fileName) : std::string
			+{static} getDirectoryFiles(const std::string& dirPath) : std::vector<std::string>
			+{static} getDirectoryFiles(const std::string& dirPath, const std::function<bool ( const std::string& fileName )>& filterFunction) : std::vector<std::string>
			+{static} getDroppedFiles() : std::vector<std::string>
			+{static} loadFileData(const std::string& fileName) : std::vector<unsigned char>
			+{static} changeDirectory(const std::string& dir) : void
		}

		class ImageHelper {
			+{static} fromText(const std::string& text, int fontSize, const RlColor& color) : raylib::image::RlImage
			+{static} fromText(const raylib::text::RlFont& font, const std::string& text, float fontSize, float spacing, const RlColor& tint) : raylib::image::RlImage
			+{static} genImageFontAtlas(const GlyphInfo* chars, Rectangle** recs, int glyphCount, int fontSize, int padding, int packMethod) : raylib::image::RlImage
			+{static} load(const std::string& fileName) : raylib::image::RlImage
			+{static} loadAnim(const std::string& fileName) : raylib::image::RlImage
			+{static} loadFromMemory(const std::string& fileType, const unsigned char* fileData, int dataSize) : raylib::image::RlImage
			+{static} loadFromScreen() : raylib::image::RlImage
			+{static} loadFromTexture(const Texture2D& texture) : raylib::image::RlImage
			+{static} loadRaw(const std::string& fileName, int width, int height, int format, int headerSize) : raylib::image::RlImage
		}

		class TextHelper {
			+{static} getGlyphInfo(const raylib::text::RlFont& font, int codepoint) : GlyphInfo
			+{static} getGlyphAtlasRec(const raylib::text::RlFont& font, int codepoint) : Rectangle
			+{static} measureText(const raylib::text::RlFont& font, const std::string& text) : Vector2f
			+{static} measureText(const raylib::text::RlFont& font, const std::string& text, float fontSize, float spacing) : Vector2f
			+{static} getGlyphIndex(const raylib::text::RlFont& font, int codepoint) : int
			+{static} measureText(const std::string& text, int fontSize) : int
		}

		class VectorHelper {
			+{static} toVectorf(const::Vector2& vector) : Vector2f
			+{static} toVectorf(const::Vector3& vector) : Vector3f
			+{static} toVectorf(const::Vector4& vector) : Vector4f
			+toRaylibVector(const Vector2f& vector) : static::Vector2
			+toRaylibVector(const Vector3f& vector) : static::Vector3
			+toRaylibVector(const Vector4f& vector) : static::Vector4
		}

		class WorldHelper {
			+{static} getScreenToWorld2D(const Vector2f& position, const Camera2D& camera) : Vector2f
			+{static} getWorldToScreen(const Vector3f& position, const RlCamera& camera) : Vector2f
			+{static} getWorldToScreen2D(const Vector2f& position, const Camera2D& camera) : Vector2f
			+{static} getWorldToScreenEx(const Vector3f& position, const RlCamera& camera, int width, int height) : Vector2f
		}

		namespace input {
			class CursorHelper {
				+{static} isCursorHidden() : bool
				+{static} isCursorOnScreen() : bool
				+{static} disableCursor() : void
				+{static} enableCursor() : void
				+{static} hideCursor() : void
				+{static} showCursor() : void
			}

			class GamepadHelper {
				+{static} isGamepadAvailable(const int& gamepad) : bool
				+{static} isGamepadButtonDown(const int& gamepad, const GamepadButton& button) : bool
				+{static} isGamepadButtonPressed(const int& gamepad, const GamepadButton& button) : bool
				+{static} isGamepadButtonReleased(const int& gamepad, const GamepadButton& button) : bool
				+{static} isGamepadButtonUp(const int& gamepad, const GamepadButton& button) : bool
				+{static} getGamepadAxisMovement(const int& gamepad, const GamepadAxis& axis) : float
				+{static} getGamepadAxisCount(const int& gamepad) : int
				+{static} getGamepadButtonPressed() : int
				+{static} setGamepadMappings(const std::string& mappings) : int
				+{static} getGamepadName(const int& gamepad) : std::string
			}

			class KeyboardHelper {
				+{static} isKeyDown(const KeyboardKey& key) : bool
				+{static} isKeyPressed(const KeyboardKey& key) : bool
				+{static} isKeyReleased(const KeyboardKey& key) : bool
				+{static} isKeyUp(const KeyboardKey& key) : bool
				+{static} getCharPressed() : int
				+{static} getKeyPressed() : int
				+{static} getKeyName(const int& key, const int& scancode) : std::string
				+{static} getPressedKeys() : std::vector<KeyboardKey>
				+{static} getPressedChars() : std::vector<int>
				+{static} setExitKey(const KeyboardKey& key) : void
			}

			class MouseHelper {
				+{static} getMouseRay(const Vector2f& mousePosition, const RlCamera& camera) : Ray
				+{static} getMouseDelta() : Vector2f
				+{static} getMousePosition() : Vector2f
				+{static} isMouseButtonDown(const MouseButton& button) : bool
				+{static} isMouseButtonPressed(const MouseButton& button) : bool
				+{static} isMouseButtonReleased(const MouseButton& button) : bool
				+{static} isMouseButtonUp(const MouseButton& button) : bool
				+{static} getMouseWheelMove() : float
				+{static} getMouseX() : int
				+{static} getMouseY() : int
				+{static} setMouseCursor(const MouseCursor& cursor) : void
				+{static} setMouseOffset(int offsetX, int offsetY) : void
				+{static} setMousePosition(int x, int y) : void
				+{static} setMouseScale(float scaleX, float scaleY) : void
			}

			class TouchHelper {
				+{static} getGestureDragVector() : Vector2f
				+{static} getGesturePinchVector() : Vector2f
				+{static} getTouchPosition(const int& index) : Vector2f
				+{static} isGestureDetected(const int& gesture) : bool
				+{static} getGestureDragAngle() : float
				+{static} getGestureHoldDuration() : float
				+{static} getGesturePinchAngle() : float
				+{static} getGestureDetected() : int
				+{static} getTouchPointCount() : int
				+{static} getTouchPointId(const int& index) : int
				+{static} getTouchX() : int
				+{static} getTouchY() : int
				+{static} setGesturesEnabled(const unsigned int& flags) : void
			}
		}

		namespace draw {
			class Draw2DHelper {
				-{static} _texShapesRec : static Rectangle
				-{static} _texShapes : static Texture2D
				+{static} drawCircle(int centerX, int centerY, float radius, const RlColor& color) : void
				+{static} drawCircle(const Vector2f& center, float radius, const RlColor& color) : void
				+{static} drawCircleGradient(int centerX, int centerY, float radius, const RlColor& color1, const RlColor& color2) : void
				+{static} drawCircleLines(int centerX, int centerY, float radius, const RlColor& color) : void
				+{static} drawCircleSector(const Vector2f& center, float radius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawCircleSectorLines(const Vector2f& center, float radius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawEllipse(int centerX, int centerY, float radiusH, float radiusV, const RlColor& color) : void
				+{static} drawEllipseLines(int centerX, int centerY, float radiusH, float radiusV, const RlColor& color) : void
				+{static} drawLine(int startPosX, int startPosY, int endPosX, int endPosY, const RlColor& color) : void
				+{static} drawLine(const Vector2f& startPos, const Vector2f& endPos, const RlColor& color) : void
				+{static} drawLine(const Vector2f& startPos, const Vector2f& endPos, float thick, const RlColor& color) : void
				+{static} drawLineBezier(const Vector2f& startPos, const Vector2f& endPos, float thick, const RlColor& color) : void
				+{static} drawLineBezierCubic(const Vector2f& startPos, const Vector2f& endPos, const Vector2f& startControlPos, const Vector2f& endControlPos, float thick, const RlColor& color) : void
				+{static} drawLineBezierQuad(const Vector2f& startPos, const Vector2f& endPos, const Vector2f& controlPos, float thick, const RlColor& color) : void
				+{static} drawLineStrip(const std::vector<Vector2f>& points, const RlColor& color) : void
				+{static} drawPixel(int posX, int posY, const RlColor& color) : void
				+{static} drawPixel(const Vector2f& position, const RlColor& color) : void
				+{static} drawPoly(const Vector2f& center, int sides, float radius, float rotation, const RlColor& color) : void
				+{static} drawPolyLines(const Vector2f& center, int sides, float radius, float rotation, const RlColor& color) : void
				+{static} drawPolyLines(const Vector2f& center, int sides, float radius, float rotation, float lineThick, const RlColor& color) : void
				+{static} drawRectangle(int posX, int posY, int width, int height, const RlColor& color) : void
				+{static} drawRectangle(const Vector2f& position, const Vector2f& size, const RlColor& color) : void
				+{static} drawRectangle(const Rectangle& rec, const RlColor& color) : void
				+{static} drawRectangle(const Rectangle& rec, const Vector2f& origin, float rotation, const RlColor& color) : void
				+{static} drawRectangleGradient(const Rectangle& rec, const RlColor& col1, const RlColor& col2, const RlColor& col3, const RlColor& col4) : void
				+{static} drawRectangleGradientH(int posX, int posY, int width, int height, const RlColor& color1, const RlColor& color2) : void
				+{static} drawRectangleGradientV(int posX, int posY, int width, int height, const RlColor& color1, const RlColor& color2) : void
				+{static} drawRectangleLines(int posX, int posY, int width, int height, const RlColor& color) : void
				+{static} drawRectangleLinesEx(const Rectangle& rec, float lineThick, const RlColor& color) : void
				+{static} drawRectangleRounded(const Rectangle& rec, float roundness, int segments, const RlColor& color) : void
				+{static} drawRectangleRoundedLines(const Rectangle& rec, float roundness, int segments, float lineThick, const RlColor& color) : void
				+{static} drawRing(const Vector2f& center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawRingLines(const Vector2f& center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawTriangle(const Vector2f& v1, const Vector2f& v2, const Vector2f& v3, const RlColor& color) : void
				+{static} drawTriangleFan(const std::vector<Vector2f>& points, const RlColor& color) : void
				+{static} drawTriangleLines(const Vector2f& v1, const Vector2f& v2, const Vector2f& v3, const RlColor& color) : void
				+{static} drawTriangleStrip(const std::vector<Vector2f>& points, const RlColor& color) : void
				+{static} setShapesTexture(const texture::RlTexture& texture, const Rectangle& source) : void
			}

			class DrawHelper {
				+{static} beginBlendMode(int mode) : void
				+{static} beginDrawing() : void
				+{static} beginMode2D(const Camera2D& camera) : void
				+{static} beginMode3D(const RlCamera& camera) : void
				+{static} beginScissorMode(int x, int y, int width, int height) : void
				+{static} beginShaderMode(const Shader& shader) : void
				+{static} beginTextureMode(const RenderTexture2D& target) : void
				+{static} beginVrStereoMode(const VrStereoConfig& config) : void
				+{static} clearBackground(const RlColor& color) : void
				+{static} drawBillboard(const RlCamera& camera, const texture::RlTexture& texture, const Vector3f& position, float size, const RlColor& tint) : void
				+{static} drawBillboardPro(const RlCamera& camera, const texture::RlTexture& texture, const Rectangle& source, const Vector3f& position, const Vector3f& up, const Vector2f& size, const Vector2f& origin, float rotation, const RlColor& tint) : void
				+{static} drawBillboardRec(const RlCamera& camera, const texture::RlTexture& texture, const Rectangle& source, const Vector3f& position, const Vector2f& size, const RlColor& tint) : void
				+{static} drawBoundingBox(const BoundingBox& box, const RlColor& color) : void
				+{static} endBlendMode() : void
				+{static} endDrawing() : void
				+{static} endMode2D() : void
				+{static} endMode3D() : void
				+{static} endScissorMode() : void
				+{static} endShaderMode() : void
				+{static} endTextureMode() : void
				+{static} endVrStereoMode() : void
			}

			class DrawTextHelper {
				+{static} drawCenteredText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const RlColor& color, const float& spacing) : void
				+{static} drawCenteredText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const float& fontSize, const RlColor& color, const float& spacing) : void
				+{static} drawCenteredText(const raylib::text::RlText& text) : void
				+{static} drawFps(const Vector2f& pos, const int& fontSize) : void
				+{static} drawFps(const float& posX, const float& posY, const int& fontSize) : void
				+{static} drawFps(const Vector2f& pos) : void
				+{static} drawFps(const int& posX, const int& posY) : void
				+{static} drawText(const std::string& text, const Vector2f& pos, const int& fontSize, const RlColor& color) : void
				+{static} drawText(const std::string& text, const float& posX, const float& posY, const int& fontSize, const RlColor& color) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const RlColor& color) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const float& rotation, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const Vector2f& origin, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const Vector2f& origin, const float& rotation, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const raylib::text::RlText& text, const Vector2f& position, const RlColor& color) : void
				+{static} drawText(const raylib::text::RlText& text, const float& posX, const float& posY, const RlColor& color) : void
				+{static} drawText(const raylib::text::RlText& text) : void
				+{static} drawTextUsingCodepoint(const raylib::text::RlFont& font, const int& codepoint, const Vector2f& position, float fontSize, const RlColor& tint) : void
			}

			class DrawTextureHelper {
				+{static} drawTexture(const texture::RlTexture& texture, int posX, int posY, const RlColor& tint) : void
				+{static} drawTexture(const texture::RlTexture& texture, const Vector2f& position, const RlColor& tint) : void
				+{static} drawTexture(const texture::RlTexture& texture, const Vector2f& position, float rotation, float scale, const RlColor& tint) : void
				+{static} drawTexture(const texture::RlTexture& texture, const Rectangle& source, const Rectangle& dest, const Vector2f& origin, float rotation, const RlColor& tint) : void
				+{static} drawTextureNPatch(const texture::RlTexture& texture, const NPatchInfo& nPatchInfo, const Rectangle& dest, const Vector2f& origin, float rotation, const RlColor& tint) : void
				+{static} drawTexturePoly(const texture::RlTexture& texture, const Vector2f& center, const std::vector<Vector2f>& points, std::vector<Vector2f>& texcoords, const RlColor& tint) : void
				+{static} drawTextureQuad(const texture::RlTexture& texture, const Vector2f& tiling, const Vector2f& offset, const Rectangle& quad, const RlColor& tint) : void
				+{static} drawTextureRec(const texture::RlTexture& texture, const Rectangle& source, const Vector2f& position, const RlColor& tint) : void
				+{static} drawTextureTiled(const texture::RlTexture& texture, const Rectangle& source, const Rectangle& dest, const Vector2f& origin, float rotation, float scale, const RlColor& tint) : void
			}
		}
	}

	namespace ex {
		class BuilderException {
			+BuilderException(const std::string& msg)
		}

		class CameraException {
			+CameraException(const std::string& message)
		}

		class InvalidArgumentException {
			+InvalidArgumentException(const std::string& msg)
		}

		class RaylibException {
			+RaylibException(const std::string& msg, bool prefix)
			+what() : char* {query}
			-_msg : std::string
		}

		class RlAnimationException {
			+RlAnimationException(const std::string& message)
		}

		class WindowException {
			+WindowException(const std::string& msg)
		}
	}

	namespace builder {
		abstract class IBuilder <template<typename T>> {
			+{abstract} build() : T
		}

		class RlCameraBuilder {
			+RlCameraBuilder()
			-_cameraMode : CameraMode
			-_projection : CameraProjection
			+build() : RlCamera
			+setCameraMode(CameraMode cameraMode) : RlCameraBuilder&
			+setFovy(float fovy) : RlCameraBuilder&
			+setLookingPoint(const Vector3f& lookingPoint) : RlCameraBuilder&
			+setPosition(const Vector3f& position) : RlCameraBuilder&
			+setProjection(CameraProjection projection) : RlCameraBuilder&
			+setTarget(const Vector3f& target) : RlCameraBuilder&
			-_lookingPoint : Vector3f
			-_position : Vector3f
			-_target : Vector3f
			-_fovy : float
		}

		class RlImageBuilder {
			+RlImageBuilder()
			-_bottom : RlColor
			-_col1 : RlColor
			-_col2 : RlColor
			-_color : RlColor
			-_inner : RlColor
			-_left : RlColor
			-_outer : RlColor
			-_right : RlColor
			-_top : RlColor
			+setBottom(const RlColor& bottom) : RlImageBuilder&
			+setChecksX(const int& checksX) : RlImageBuilder&
			+setChecksY(const int& checksY) : RlImageBuilder&
			+setCol1(const RlColor& col1) : RlImageBuilder&
			+setCol2(const RlColor& col2) : RlImageBuilder&
			+setColor(const RlColor& color) : RlImageBuilder&
			+setDensity(const float& density) : RlImageBuilder&
			+setFactor(const float& factor) : RlImageBuilder&
			+setHeight(const int& height) : RlImageBuilder&
			+setInner(const RlColor& inner) : RlImageBuilder&
			+setLeft(const RlColor& left) : RlImageBuilder&
			+setOuter(const RlColor& outer) : RlImageBuilder&
			+setRight(const RlColor& right) : RlImageBuilder&
			+setTitleSize(const int& titleSize) : RlImageBuilder&
			+setTop(const RlColor& top) : RlImageBuilder&
			+setType(ImageType type) : RlImageBuilder&
			+setWidth(const int& width) : RlImageBuilder&
			-_density : float
			-_factor : float
			-_checksX : int
			-_checksY : int
			-_height : int
			-_titleSize : int
			-_width : int
			-_flags : long
			-_type : long
			+build() : raylib::image::RlImage
		}

		class RlMeshBuilder {
			+RlMeshBuilder()
			+build() : RlMesh
			+setConeSlices(const int& slices) : RlMeshBuilder&
			+setCubeSize(const Vector3f& cubeSize) : RlMeshBuilder&
			+setCubicmap(const image::RlImage& cubicmap) : RlMeshBuilder&
			+setHeight(const float& height) : RlMeshBuilder&
			+setHeightmap(const image::RlImage& heightmap) : RlMeshBuilder&
			+setHemisphereRings(const int& rings) : RlMeshBuilder&
			+setKnotRadSeg(const int& radSeg) : RlMeshBuilder&
			+setLength(const float& length) : RlMeshBuilder&
			+setMeshType(MeshType meshType) : RlMeshBuilder&
			+setRadSeg(const int& radSeg) : RlMeshBuilder&
			+setRadius(const float& radius) : RlMeshBuilder&
			+setResX(const int& resX) : RlMeshBuilder&
			+setResZ(const int& resZ) : RlMeshBuilder&
			+setRings(const int& rings) : RlMeshBuilder&
			+setSides(const int& sides) : RlMeshBuilder&
			+setSize(const float& size) : RlMeshBuilder&
			+setSlices(const int& slices) : RlMeshBuilder&
			+setVec3fSize(const Vector3f& size) : RlMeshBuilder&
			+setWidth(const float& width) : RlMeshBuilder&
			-_cubeSize : Vector3f
			-_vec3fSize : Vector3f
			-_height : float
			-_length : float
			-_radius : float
			-_size : float
			-_width : float
			-_cubicmap : image::RlImage
			-_heightmap : image::RlImage
			-_radSeg : int
			-_resX : int
			-_resZ : int
			-_rings : int
			-_sides : int
			-_slices : int
			-_flags : long
			-_type : long
		}

		class RlTextBuilder {
			+RlTextBuilder()
			-_color : RlColor
			+setColor(const RlColor& color) : RlTextBuilder&
			+setFont(const std::shared_ptr<raylib::text::RlFont>& font) : RlTextBuilder&
			+setFontPath(const std::string& fontPath) : RlTextBuilder&
			+setFontSize(const float& fontSize) : RlTextBuilder&
			+setOrigin(const Vector2f& origin) : RlTextBuilder&
			+setPosition(const Vector2f& position) : RlTextBuilder&
			+setRotation(const float& rotation) : RlTextBuilder&
			+setSpacing(const float& spacing) : RlTextBuilder&
			+setText(const std::string& text) : RlTextBuilder&
			-_origin : Vector2f
			-_position : Vector2f
			-_isFontPathSet : bool
			-_isFontSet : bool
			-_isFontSizeSet : bool
			-_isTextSet : bool
			-_fontSize : float
			-_rotation : float
			-_textSpacing : float
			+build() : raylib::text::RlText
			-_font : std::shared_ptr<raylib::text::RlFont>
			-_fontPath : std::string
			-_text : std::string
		}

		enum RlImageBuilder::ImageType {
			ImageCellular
			ImageChecked
			ImageColor
			ImageGradientH
			ImageGradientRadial
			ImageGradientV
			ImageWhiteNoise
		}

		enum RlImageBuilder::ParameterName {
			Bottom
			ChecksX
			ChecksY
			Col1
			Col2
			Color
			Density
			Factor
			Height
			Inner
			Left
			Outer
			Right
			TitleSize
			Top
			Width
		}

		enum RlMeshBuilder::MeshType {
			MeshCone
			MeshCube
			MeshCubicmap
			MeshCylinder
			MeshHeightmap
			MeshHemiSphere
			MeshKnot
			MeshPlane
			MeshPoly
			MeshSphere
			MeshTorus
		}

		enum RlMeshBuilder::ParameterName {
			ConeSlices
			CubeSize
			Cubicmap
			Height
			Heightmap
			HemisphereRings
			KnotRadSeg
			Length
			RadSeg
			Radius
			ResX
			ResZ
			Rings
			Sides
			Size
			Slices
			Vec3fSize
			Width
		}
	}

	namespace audio {
		class RlSound {
			+RlSound(const Sound& sound)
			+RlSound(const std::string& fileName)
			+RlSound(Wave wave)
			+~RlSound()
			-_sound : Sound
			+isPlaying() : bool
			-_volume : float
			+getVolume() : float {query}
			+{static} getPlayings() : int
			+pause() : void
			+play() : void
			+playMulti() : void
			+resume() : void
			+setPitch(float pitch) : void
			+setVolume(float volume) : void
			+stop() : void
			+{static} stopMulti() : void
			+update(const void* data, int samplesCount) : void
		}

		class RlWave {
			+RlWave()
			+RlWave(const Wave& wave)
			+RlWave(const std::string& path)
			+RlWave(const std::string& fileType, const unsigned char* fileData, int dataSize)
			+~RlWave()
			+copy() : RlWave
			-_wave : Wave
			+getWave() : Wave&
			+exportWave(const std::string& fileName) : bool
			+exportWaveAsCode(const std::string& fileName) : bool
			-_samplesPtr : float*
			+toSound() : raylib::audio::RlSound {query}
			-_samples : std::vector<float>
			+getSamples() : std::vector<float>
			+crop(const int& initSample, const int& finalSample) : void
			+format(const int& sampleRate, const int& sampleSize, const int& channels) : void
		}
	}
}


namespace gameengine {
	abstract class AbstractBase {
		+AbstractBase(const std::string& name)
		+AbstractBase(const AbstractBase &)
		+~AbstractBase()
		-_hiding : bool
		+isHiding() : bool {query}
		+{abstract} getRotationDegrees() : float
		-_group : std::string
		-_name : std::string
		+getGroup() : std::string& {query}
		+getName() : std::string& {query}
		+{abstract} draw() : void
		+{abstract} ready() : void
		+setGroup(const std::string& group) : void
		+setHiding(bool value) : void
		+{abstract} update(float delta) : void
	}

	class AudioManager {
		+AudioManager()
		+~AudioManager()
		-{static} _instance : static std::shared_ptr<AudioManager>
		+{static} getInstance() : std::shared_ptr<AudioManager>&
		-_sounds : std::vector<std::unique_ptr<gameengine::ISound>>
		+addSound(const std::string& fileName, SoundCategory category) : void
		+deleteSound(const std::string& fileName) : void
		+playSound(const std::string& fileName) : void
		+setVolume(float volume, SoundCategory category) : void
	}

	abstract class Button {
		+Button(const std::string& name, const std::string& filename)
		+~Button()
		-_bounds : Rectangle
		-_rectangle : Rectangle
		-_position : Vector2f
		-_scale : Vector2f
		+getPosition() : Vector2f
		+getScale() : Vector2f
		-_action : bool
		-_isEnable : bool
		+getIsEnable() : bool
		-_frameHeight : float
		-_rotationDegrees : float
		+getRotationDegrees() : float
		-_frameNum : int
		-_state : int
		-_texture : raylib::texture::RlTexture
		+draw() : void
		+{abstract} pressed() : void
		+ready() : void
		+setEnable(bool value) : void
		+setPosition(Vector2f position) : void
		+setRotationDegrees(float rotationDegrees) : void
		+setScale(Vector2f scale) : void
		+update(float delta) : void
	}

	class ISound {
		+ISound(std::string fileName, SoundCategory category)
		+~ISound()
		-_category : SoundCategory
		+getCategory() : int {query}
		-_name : std::string
		+getName() : std::string
	}

	class KinematicBody {
		+KinematicBody(const std::string& name, const raylib::builder::RlMeshBuilder::MeshType& type, const std::string& texturePath)
		+KinematicBody(const std::string& name, const std::string& modelPath, const std::string& texturePath)
		+~KinematicBody()
		+moveAndCollide(Vector3f position) : void
	}

	class MainScene {
		+MainScene(std::string name, std::string sceneSource)
		+~MainScene()
		+sceneLauncher() : void
	}

	abstract class Node {
		+Node(const std::string& name)
		+Node(const Node &)
		+~Node()
		+{abstract} getPosition() : Vector3f
		+{abstract} getScale() : Vector3f
		+{abstract} setPosition(Vector3f pos) : void
		+{abstract} setRotationDegrees(float degrees, Vector3f rotationAxis) : void
		+{abstract} setScale(Vector3f newScale) : void
	}

	abstract class Node2D {
		+Node2D(const std::string& name)
		+Node2D(const Node2D &)
		+~Node2D()
		+{abstract} getPosition() : Vector2f
		+{abstract} getScale() : Vector2f
		+{abstract} setPosition(Vector2f pos) : void
		+{abstract} setRotationDegrees(float degrees) : void
		+{abstract} setScale(Vector2f newScale) : void
	}

	abstract class Scene {
		+Scene(std::string name, std::string sceneSource)
		+~Scene()
		-_isLaunched : bool
		-_isPaused : bool
		+getPaused() : bool {query}
		+isLaunched() : bool&
		+getNode(const std::string& name) : std::shared_ptr<gameengine::AbstractBase>
		-_name : std::string
		-_sceneSource : std::string
		+getName() : std::string
		+getSceneSource() : std::string
		-_nodes : std::vector<std::shared_ptr<gameengine::AbstractBase>>
		+getAllNode() : std::vector<std::shared_ptr<gameengine::AbstractBase>>
		+addNode(const std::shared_ptr<gameengine::AbstractBase>& node) : void
		+deleteNode(const std::string& name) : void
		+deleteNodeIncludes(const std::string& includeName) : void
		+destroy() : void
		+draw() : void
		+draw2D() : void
		+ready() : void
		+{abstract} readyScene() : void
		+{abstract} sceneLauncher() : void
		+setLaunched() : void
		+setPaused(bool value) : void
		+update(float delta) : void
		+{abstract} updateScene(float delta) : void
	}

	class SceneManager {
		+SceneManager()
		+~SceneManager()
		+getPaused() : bool
		-{static} _instance : static std::shared_ptr<SceneManager>
		+getNode(const std::string& name) : std::shared_ptr<gameengine::AbstractBase>
		+{static} getInstance() : std::shared_ptr<gameengine::SceneManager>&
		-_actualScene : std::string
		-_waitingScene : std::string
		+getAllNodes() : std::vector<std::shared_ptr<gameengine::AbstractBase>>
		-_scenes : std::vector<std::shared_ptr<gameengine::Scene>>
		-_nodesToDelete : std::vector<std::string>
		-_nodesToDeleteIncludes : std::vector<std::string>
		+addNode(const std::shared_ptr<gameengine::AbstractBase>& node) : void
		+addScene(const std::shared_ptr<gameengine::Scene>& scene) : void
		+changeScene(const std::string& scene) : void
		-changeSceneInWaiting() : void
		+deleteNode(const std::string& name) : void
		-deleteNodeInLst() : void
		+deleteNodeInclude(const std::string& Includename) : void
		+deleteScene(const std::string& scene) : void
		+draw() : void
		+draw2D() : void
		+drawAll(raylib::RlCamera& camera) : void
		+makeLoop(raylib::RlCamera& camera) : void
		+setPaused(bool value) : void
		+update() : void
	}

	class StaticBody {
		+StaticBody(const std::string& name, const std::string& modelPath, const std::string& texturePath)
		+StaticBody(const std::string& name, const raylib::builder::RlMeshBuilder::MeshType& type, const std::string& texturepath)
		+~StaticBody()
		+getBoundingBox() : BoundingBox& {query}
		#_position : Vector3f
		#_scale : Vector3f
		+getPosition() : Vector3f
		+getScale() : Vector3f
		#_collisionEnable : bool
		+getIsCollsionEnable() : bool&
		#_rotationDegrees : float
		+getRotationDegrees() : float
		+operator->() : raylib :: RlModel*
		#_model : raylib::RlModel
		+draw() : void
		+ready() : void
		+setBoundingBox(BoundingBox& boundingBox) : void
		+setColor(raylib::RlColor color) : void
		+setPosition(Vector3f pos) : void
		+setRotationDegrees(float degrees, Vector3f rotationAxis) : void
		+setScale(Vector3f newScale) : void
		+update(float delta) : void
	}

	class TextureRect {
		+TextureRect(const std::string& name, const std::string& filename, Vector2f position, Vector2f scale, float, const raylib::RlColor& color)
		+~TextureRect()
		-_position : Vector2f
		-_scale : Vector2f
		+getPosition() : Vector2f
		+getScale() : Vector2f
		-_rotationDegrees : float
		+getRotationDegrees() : float
		-_color : raylib::RlColor
		+getColor() : raylib::RlColor&
		+getColor() : raylib::RlColor& {query}
		-_texture : raylib::texture::RlTexture
		+draw() : void
		+ready() : void
		+setColor(unsigned int r, unsigned int g, unsigned int b, unsigned int a) : void
		+setPosition(Vector2f position) : void
		+setRotationDegrees(float rotationDegrees) : void
		+setScale(Vector2f scale) : void
		+update(float delta) : void
	}

	namespace map {
		class MapParser <template<typename T>> {
			+MapParser(const std::string& fileName, const std::unordered_map<char, T>& symbols, const Vector2u& maxSize)
			-_maxSize : Vector2u
			-_size : Vector2u
			+getMaxSize() : Vector2u& {query}
			+getSize() : Vector2u& {query}
			-_file : std::ifstream
			-_buffer : std::string
			-_fileName : std::string
			-removeComment(const std::string& line) : std::string
			+getBuffer() : std::string& {query}
			+getFileName() : std::string& {query}
			+getSymbols() : std::unordered_map<char , T>& {query}
			-_symbols : std::unordered_map<char, T>
			-_map : std::vector<std::vector<T>>
			+getMap() : std::vector<std::vector<T>>& {query}
			+parse() : void
			-parseMap() : void
		}
	}

	namespace ex {
		class GameEngineException {
			+GameEngineException(const std::string& message, const bool& prefix)
			+what() : char* {query}
			-_msg : std::string
		}

		class MapParserException {
			+MapParserException(const std::string& message)
		}
	}

	namespace component {
		class GridComponent {
			+GridComponent(const Vector2i& size, const Vector3f& position, const float& spacing, const RlColor& tint, const std::string& name)
			+GridComponent(const GridComponent &)
			-_tint : RlColor
			-_size : Vector2i
			-_position : Vector3f
			-_scale : Vector3f
			+getPosition() : Vector3f
			+getScale() : Vector3f
			-_rotationDegrees : float
			-_spacing : float
			+getRotationDegrees() : float
			+draw() : void
			+ready() : void
			+setPosition(Vector3f pos) : void
			+setRotationDegrees(float degrees, Vector3f rotationAxis) : void
			+setScale(Vector3f newScale) : void
			+update(float delta) : void
		}
	}

	namespace audio {
		class Fx {
			+Fx(const std::string& fileName, SoundCategory category)
		}

		class Music {
			+Music(const std::string& fileName, SoundCategory category)
		}
	}
}





/' Inheritance relationships '/

gameengine.AbstractBase <|- - gameengine.Node


gameengine.AbstractBase <|- - gameengine.Node2D


raylib.helper.AudioDeviceHelper <|- - gameengine.AudioManager


gameengine.ex.GameEngineException <|- - gameengine.ex.MapParserException


raylib.builder.IBuilder <|- - raylib.builder.RlCameraBuilder


raylib.builder.IBuilder <|- - raylib.builder.RlImageBuilder


raylib.builder.IBuilder <|- - raylib.builder.RlMeshBuilder


raylib.builder.IBuilder <|- - raylib.builder.RlTextBuilder


gameengine.ISound <|- - gameengine.audio.Fx


gameengine.ISound <|- - gameengine.audio.Music


gameengine.Node <|- - gameengine.component.GridComponent


gameengine.Node <|- - gameengine.StaticBody


gameengine.Node2D <|- - gameengine.Button


gameengine.Node2D <|- - gameengine.TextureRect


raylib.ex.RaylibException <|- - raylib.ex.BuilderException


raylib.ex.RaylibException <|- - raylib.ex.CameraException


raylib.ex.RaylibException <|- - raylib.ex.InvalidArgumentException


raylib.ex.RaylibException <|- - raylib.ex.RlAnimationException


raylib.ex.RaylibException <|- - raylib.ex.WindowException


raylib.RlMusic <|- - gameengine.audio.Music


raylib.audio.RlSound <|- - gameengine.audio.Fx


gameengine.Scene <|- - gameengine.MainScene


gameengine.StaticBody <|- - gameengine.KinematicBody





/' Aggregation relationships '/

gameengine.AudioManager *- - gameengine.AudioManager


gameengine.AudioManager *- - gameengine.ISound


gameengine.Button *- - raylib.texture.RlTexture


gameengine.component.GridComponent *- - raylib.RlColor


gameengine.ISound *- - .SoundCategory


raylib.RlColor "26" *- - raylib.RlColor


raylib.builder.RlImageBuilder "9" *- - raylib.RlColor


raylib.builder.RlMeshBuilder "2" *- - raylib.image.RlImage


raylib.RlModel *- - raylib.texture.RlTexture


raylib.RlModelAnim *- - raylib.RlModel


raylib.RlMusic *- - gameengine.audio.Music


raylib.text.RlText *- - raylib.RlColor


raylib.text.RlText *- - raylib.text.RlFont


raylib.builder.RlTextBuilder *- - raylib.RlColor


raylib.builder.RlTextBuilder *- - raylib.text.RlFont


raylib.window.RlWindow *- - raylib.RlCamera


raylib.window.RlWindow *- - raylib.window.RlWindow


gameengine.Scene *- - gameengine.AbstractBase


gameengine.SceneManager *- - gameengine.Scene


gameengine.SceneManager *- - gameengine.SceneManager


gameengine.StaticBody *- - raylib.RlModel


gameengine.TextureRect *- - raylib.RlColor


gameengine.TextureRect *- - raylib.texture.RlTexture






/' Nested objects '/

raylib.builder.RlImageBuilder +- - raylib.builder.RlImageBuilder::ImageType


raylib.builder.RlImageBuilder +- - raylib.builder.RlImageBuilder::ParameterName


raylib.builder.RlMeshBuilder +- - raylib.builder.RlMeshBuilder::MeshType


raylib.builder.RlMeshBuilder +- - raylib.builder.RlMeshBuilder::ParameterName




@enduml

@startuml






enum SoundCategory {
	FX
	MUSIC
}


namespace raylib {
	class Collision2DHelper {
		+{static} getCollisionRec(const Rectangle& rec1, const Rectangle& rec2) : Rectangle
		+{static} checkCollisionCircleRec(const Vector2f& center, float radius, const Rectangle& rec) : bool
		+{static} checkCollisionCircles(const Vector2f& center1, float radius1, const Vector2f& center2, float radius2) : bool
		+{static} checkCollisionLines(const Vector2f& startPos1, const Vector2f& endPos1, const Vector2f& startPos2, const Vector2f& endPos2, Vector2f& collisionPoint) : bool
		+{static} checkCollisionPointCircle(const Vector2f& point, const Vector2f& center, float radius) : bool
		+{static} checkCollisionPointLine(const Vector2f& point, const Vector2f& p1, const Vector2f& p2, int threshold) : bool
		+{static} checkCollisionPointRec(const Vector2f& point, const Rectangle& rec) : bool
		+{static} checkCollisionPointTriangle(const Vector2f& point, const Vector2f& p1, const Vector2f& p2, const Vector2f& p3) : bool
		+{static} checkCollisionRecs(const Rectangle& rec1, const Rectangle& rec2) : bool
	}

	class Collision3dHelper {
		+{static} getRayCollisionBox(Ray ray, BoundingBox box) : RayCollision
		+{static} getRayCollisionMesh(Ray ray, RlMesh mesh, Matrix transform) : RayCollision
		+{static} getRayCollisionModel(Ray ray, RlModel model) : RayCollision
		+{static} getRayCollisionQuad(Ray ray, Vector3f p1, Vector3f p2, Vector3f p3, Vector3f p4) : RayCollision
		+{static} getRayCollisionSphere(Ray ray, Vector3f center, float radius) : RayCollision
		+{static} getRayCollisionTriangle(Ray ray, Vector3f p1, Vector3f p2, Vector3f p3) : RayCollision
		+{static} checkCollisionBoxSphere(BoundingBox box, Vector3f center, float radius) : bool
		+{static} checkCollisionBoxes(BoundingBox box1, BoundingBox box2) : bool
		+{static} checkCollisionSpheres(Vector3f center1, float radius1, Vector3f center2, float radius2) : bool
	}

	class GlStateManager {
		+{static} color(const RlColor& color) : void
		+{static} color(unsigned char r, unsigned char g, unsigned char b, unsigned char a) : void
		+{static} color(float r, float g, float b, float a) : void
		+{static} color(unsigned char r, unsigned char g, unsigned char b) : void
		+{static} disableBackfaceCulling() : void
		+{static} disableColorBlend() : void
		+{static} disableDepthMask() : void
		+{static} disableDepthTest() : void
		+{static} disableScissorTest() : void
		+{static} disableSmoothLines() : void
		+{static} disableWireMode() : void
		+{static} enableBackfaceCulling() : void
		+{static} enableColorBlend() : void
		+{static} enableDepthMask() : void
		+{static} enableDepthTest() : void
		+{static} enableScissorTest() : void
		+{static} enableSmoothLines() : void
		+{static} enableWireMode() : void
		+{static} popMatrix() : void
		+{static} pushMatrix() : void
		+{static} rotate(const Vector3f& rotation) : void
		+{static} scale(const Vector3f& scale) : void
		+{static} scissor(int x, int y, int width, int height) : void
		+{static} scissor(const Rectangle& rect) : void
		+{static} translate(const Vector3f& translation) : void
	}

	class MeshGenerator {
		+{static} genMeshCone(float radius, float height, int slices) : RlMesh
		+{static} genMeshCube(float width, float height, float length) : RlMesh
		+{static} genMeshCubicmap(Image cubicmap, Vector3f cubeSize) : RlMesh
		+{static} genMeshCylinder(float radius, float height, int slices) : RlMesh
		+{static} genMeshHeightmap(Image heightmap, Vector3f size) : RlMesh
		+{static} genMeshHemiSphere(float radius, int rings, int slices) : RlMesh
		+{static} genMeshKnot(float radius, float size, int radSeg, int sides) : RlMesh
		+{static} genMeshPlane(float width, float length, int resX, int resZ) : RlMesh
		+{static} genMeshPoly(int sides, float radius) : RlMesh
		+{static} genMeshSphere(float radius, int rings, int slices) : RlMesh
		+{static} genMeshTorus(float radius, float size, int radSeg, int sides) : RlMesh
	}

	class MeshHelper {
		+{static} getMeshBoundingBox(Mesh mesh) : BoundingBox
		+{static} exportMesh(Mesh mesh, const std::string& fileName) : bool
		+{static} drawMesh(Mesh mesh, Material material, Matrix transform) : void
		+{static} drawMeshInstanced(Mesh mesh, Material material, Matrix* transforms, int instances) : void
		+{static} genMeshBinormals(Mesh* mesh) : void
		+{static} genMeshTangents(Mesh* mesh) : void
		+{static} updateMeshBuffer(Mesh mesh, int index, void* data, int dataSize, int offset) : void
		+{static} uploadMesh(Mesh* mesh, bool dynamic) : void
	}

	class ModelHelper {
		+{static} getModelBoundingBox(Model model) : BoundingBox
		+{static} drawModel(const RlModel& model) : void
		+{static} drawModelWires(const RlModel& model) : void
		+{static} unloadModelKeepMeshes(Model model) : void
	}

	class Random {
		+Random()
		+generate(double min, double max) : double
		+generate(float min, float max) : float
		+generate(int min, int max) : int
		+generate(long min, long max) : long
		+generate(short min, short max) : short
		-_random_device : std::random_device
		+generateSizeT(std::size_t min, std::size_t max) : std::size_t
	}

	class RlAnimation {
		+RlAnimation()
		+RlAnimation(const std::string& animationDir, const std::string& extension)
		+~RlAnimation()
		-_isLoaded : bool
		+isLoaded() : bool& {query}
		+getAnimationsSize() : std::size_t {query}
		-_animationModels : std::vector<Model>
		+getAnimationModels() : std::vector<Model>& {query}
		-_frame : unsigned int
		+getFrame() : unsigned int& {query}
		+update() : void
	}

	class RlAudioStream {
		+RlAudioStream(unsigned int sampleRate, unsigned int sampleSize, unsigned int channels)
		+~RlAudioStream()
		-stream : AudioStream
		+isPlaying() : bool
		+isProcessed() : bool
		+getVolume() : float {query}
		-volume : float
		+pause() : void
		+play() : void
		+resume() : void
		+setPitch(float pitch) : void
		+setVolume(float volume) : void
		+stop() : void
		+update(const void* data, int samplesCount) : void
	}

	class RlCamera {
		+RlCamera()
		+RlCamera(const Vector3f& position, const Vector3f& target, const Vector3f& lookingPoint, const float& fovy, const CameraProjection& projection, const CameraMode& cameraMode)
		-_camera : Camera3D
		+get() : Camera3D& {query}
		-_cameraMode : CameraMode
		-_mode : CameraMode
		+getConstructedCameraMode() : CameraMode& {query}
		+getMode() : CameraMode& {query}
		-_projection : CameraProjection
		+getConstructedProjection() : CameraProjection& {query}
		+geMatrix() : Matrix
		-_lookingPoint : Vector3f
		-_position : Vector3f
		-_target : Vector3f
		+getConstructedLookingPoint() : Vector3f& {query}
		+getConstructedPosition() : Vector3f& {query}
		+getConstructedTarget() : Vector3f& {query}
		-_fovy : float
		+getConstructedFovy() : float& {query}
		+reset() : void
		+setCameraMode(const CameraMode& mode) : void
		+setFov(const float& fovy) : void
		+setPosition(const Vector3f& position) : void
		+setProjection(const CameraProjection& projection) : void
		+setTarget(const Vector3f& target) : void
		+update() : void
	}

	class RlColor {
		+RlColor(Color color)
		+RlColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
		+RlColor(std::uint32_t color)
		+RlColor(const Vector4f& normalizedColor)
		+RlColor(float hue, float saturation, float value)
		-_color : Color
		+getColor() : Color& {query}
		+operator+(unsigned char value) : RlColor&
		+operator+=(unsigned char value) : RlColor&
		+operator-(unsigned char value) : RlColor&
		+operator-=(unsigned char value) : RlColor&
		+setAlpha(unsigned char a) : RlColor&
		+setBlue(unsigned char b) : RlColor&
		+setGreen(unsigned char g) : RlColor&
		+setRed(unsigned char r) : RlColor&
		+toHSV() : Vector3f
		+normalize() : Vector4f {query}
		+operator!=(const RlColor& rhs) : bool {query}
		+operator==(const RlColor& rhs) : bool {query}
		+{static} Beige : static const RlColor
		+{static} Black : static const RlColor
		+{static} Blue : static const RlColor
		+{static} Brown : static const RlColor
		+{static} DarkBlue : static const RlColor
		+{static} DarkBrown : static const RlColor
		+{static} DarkGray : static const RlColor
		+{static} DarkGreen : static const RlColor
		+{static} DarkPurple : static const RlColor
		+{static} Gold : static const RlColor
		+{static} Gray : static const RlColor
		+{static} Green : static const RlColor
		+{static} LightGray : static const RlColor
		+{static} Lime : static const RlColor
		+{static} Magenta : static const RlColor
		+{static} Maroon : static const RlColor
		+{static} Orange : static const RlColor
		+{static} Pink : static const RlColor
		+{static} Purple : static const RlColor
		+{static} RayWhite : static const RlColor
		+{static} Red : static const RlColor
		+{static} SkyBlue : static const RlColor
		+{static} Transparent : static const RlColor
		+{static} Violet : static const RlColor
		+{static} White : static const RlColor
		+{static} Yellow : static const RlColor
		+toInteger() : std::uint32_t {query}
		+getAlpha() : unsigned char& {query}
		+getBlue() : unsigned char& {query}
		+getGreen() : unsigned char& {query}
		+getRed() : unsigned char& {query}
		+alpha(float alpha) : void
		+alphaBlend(const RlColor& src, const RlColor& tint) : void
		+setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a) : void
		+setColor(const Color& color) : void
	}

	class RlMaterial {
		+RlMaterial()
		+~RlMaterial()
		-_material : Material
		+getMaterial() : Material& {query}
		+loadMaterials(const std::string& fileName, int* materialCount) : Material*
		-_materialCount : int
		+getMaterialCount() : int& {query}
		+setMaterialTexture(Material* material, int mapType, Texture2D texture) : void
		+setModelMeshMaterial(Model* model, int meshId, int materialId) : void
	}

	class RlMesh {
		+RlMesh(const Mesh& mesh)
		-_mesh : Mesh
		+getMesh() : Mesh& {query}
		+setMesh(const Mesh& mesh) : void
	}

	class RlModel {
		+RlModel(const std::string& fileName, const std::string& texturePath, Vector3f position, Vector3f scale, Color color, Vector3f rotationAxis, float rotationAngle)
		+RlModel(const Mesh& mesh, const std::string& texturePath, Vector3f position, Vector3f scale, Color color, Vector3f rotationAxis, float rotationAngle)
		+RlModel(const RlMesh& mesh, const std::string& texturePath, Vector3f position, Vector3f scale, Color color, Vector3f rotationAxis, float rotationAngle)
		+RlModel(const builder::RlMeshBuilder::MeshType& type, const std::string& texturePath, Vector3f position, Vector3f scale, Color color, Vector3f rotationAxis, float rotationAngle)
		+~RlModel()
		-_boundingBox : BoundingBox
		-_baseBoudingBox : BoundingBox
		+getBoundingBox() : BoundingBox& {query}
		-_color : Color
		+getColor() : Color& {query}
		-_model : Model
		+getModel() : Model& {query}
		-_position : Vector3f
		-_rotationAxis : Vector3f
		-_scale : Vector3f
		+getPosition() : Vector3f& {query}
		+getRotationAxis() : Vector3f& {query}
		+getScale() : Vector3f& {query}
		-_rotationAngle : float
		+getRotationAngle() : float& {query}
		+operator->() : texture :: RlTexture*
		-_texture : texture::RlTexture
		+getTexture() : texture::RlTexture& {query}
		+setBoundingBox(const BoundingBox& boundingBox) : void
		+setColor(Color color) : void
		+setPosition(Vector3f position) : void
		+setPosition(float x, float y, float z) : void
		+setRotationAngle(float rotationAngle) : void
		+setRotationAxis(Vector3f rotationAxis) : void
		+setRotationAxis(float x, float y, float z) : void
		+setScale(Vector3f scale) : void
		+setScale(float x, float y, float z) : void
		+setTexture(const texture::RlTexture& texture) : void
		+setTextureMaterial() : void
	}

	class RlModelAnim {
		+RlModelAnim(const RlModel& model, const std::string& fileName)
		+~RlModelAnim()
		-_anims : ModelAnimation*
		+animationIndexIsValid(const unsigned int& animIndex) : bool
		-_model : const RlModel&
		-_frameCount : int
		-_animations : std::vector<ModelAnimation>
		-_count : unsigned int
		+getCount() : unsigned int {query}
		+incrementFrameCount(const int& value) : void
		+unload(const unsigned int& animIndex) : void
		+update(const unsigned int& animIndex) : void
	}

	class RlMusic {
		+RlMusic(const std::string& fileName)
		+RlMusic(const std::string& fileType, unsigned char* data, int dataSize)
		+~RlMusic()
		-music : Music
		+isPlaying() : bool
		+getTimeLength() : float
		+getTimePlayed() : float
		+getVolume() : float {query}
		-volume : float
		+pause() : void
		+play() : void
		+resume() : void
		+seek(float position) : void
		+setPitch(float pitch) : void
		+setVolume(float volume) : void
		+stop() : void
		+update() : void
	}

	class Shape3DHelper {
		+{static} drawCircle3D(Vector3f center, float radius, Vector3f rotationAxis, float rotationAngle, RlColor color) : void
		+{static} drawCube(Vector3f position, float width, float height, float length, RlColor color) : void
		+{static} drawCubeTexture(Texture2D texture, Vector3f position, float width, float height, float length, RlColor color) : void
		+{static} drawCubeTextureRec(Texture2D texture, Rectangle source, Vector3f position, float width, float height, float length, RlColor color) : void
		+{static} drawCubeV(Vector3f position, Vector3f size, RlColor color) : void
		+{static} drawCubeWires(Vector3f position, float width, float height, float length, RlColor color) : void
		+{static} drawCubeWiresV(Vector3f position, Vector3f size, RlColor color) : void
		+{static} drawCylinder(Vector3f position, float radiusTop, float radiusBottom, float height, int slices, RlColor color) : void
		+{static} drawCylinderEx(Vector3f startPos, Vector3f endPos, float startRadius, float endRadius, int sides, RlColor color) : void
		+{static} drawCylinderWires(Vector3f position, float radiusTop, float radiusBottom, float height, int slices, RlColor color) : void
		+{static} drawCylinderWiresEx(Vector3f startPos, Vector3f endPos, float startRadius, float endRadius, int sides, RlColor color) : void
		+{static} drawGrid(int slices, float spacing) : void
		+{static} drawGrid(const Vector2i& size, const float& spacing) : void
		+{static} drawGrid(const Vector2i& size, const Vector3f& position, const float& spacing) : void
		+{static} drawGrid(const Vector2i& size, const Vector3f& position, const float& spacing, const RlColor& color) : void
		+{static} drawLine3D(Vector3f startPos, Vector3f endPos, RlColor color) : void
		+{static} drawPlane(Vector3f centerPos, Vector2f size, RlColor color) : void
		+{static} drawPoint3D(Vector3f position, RlColor color) : void
		+{static} drawRay(Ray ray, RlColor color) : void
		+{static} drawSphere(Vector3f centerPos, float radius, RlColor color) : void
		+{static} drawSphereEx(Vector3f centerPos, float radius, int rings, int slices, RlColor color) : void
		+{static} drawSphereWires(Vector3f centerPos, float radius, int rings, int slices, RlColor color) : void
		+{static} drawTriangle3D(Vector3f v1, Vector3f v2, Vector3f v3, RlColor color) : void
		+{static} drawTriangleStrip3D(::Vector3* points, int pointsCount, RlColor color) : void
	}

	class Vector2 <template<typename T>> {
		+Vector2()
		+Vector2(T x, T y)
		+x : T
		+y : T
		+operator!=(const Vector2<T>& other) : bool {query}
		+operator==(const Vector2<T>& other) : bool {query}
	}

	class Vector3 <template<typename T>> {
		+Vector3()
		+Vector3(T x, T y, T z)
		+x : T
		+y : T
		+z : T
		+operator!=(const Vector3<T>& other) : bool {query}
		+operator==(const Vector3<T>& other) : bool {query}
	}

	class Vector4 <template<typename T>> {
		+Vector4()
		+Vector4(T x, T y, T z, T w)
		+w : T
		+x : T
		+y : T
		+z : T
		+operator!=(const Vector4& other) : bool {query}
		+operator==(const Vector4& other) : bool {query}
	}

	namespace window {
		class RlWindow {
			+RlWindow()
			+~RlWindow()
			-_isCreated : bool
			+hasWindowState(const ConfigFlags& flag) : bool
			+isOpen() : bool
			+isWindowFocused() : bool
			+isWindowFullscreen() : bool
			+isWindowHidden() : bool
			+isWindowMaximized() : bool
			+isWindowMinimized() : bool
			+isWindowReady() : bool
			+isWindowResized() : bool
			+isIsCreated() : bool& {query}
			-_height : int
			-_minHeight : int
			-_minWidth : int
			-_width : int
			+getHeight() : int& {query}
			+getMinHeight() : int& {query}
			+getMinWidth() : int& {query}
			+getWidth() : int& {query}
			-_camera : raylib::RlCamera
			+getCamera() : raylib::RlCamera&
			+getCamera() : raylib::RlCamera& {query}
			-{static} _instance : static std::shared_ptr<RlWindow>
			+{static} getInstance() : std::shared_ptr<RlWindow>&
			-_title : std::string
			+getTitle() : std::string& {query}
			+clearWindowState(unsigned int flags) : void
			+createWindow(const std::string& title, int width, int height, int fps) : void
			+maximizeWindow() : void
			+minimizeWindow() : void
			+restoreWindow() : void
			+setCamera(const RlCamera& camera) : void
			+setConfigFlags(unsigned int flags) : void
			+setWindowIcon(const image::RlImage& image) : void
			+setWindowMinSize(int width, int height) : void
			+setWindowMonitor(int monitor) : void
			+setWindowPosition(int x, int y) : void
			+setWindowSize(int width, int height) : void
			+setWindowState(unsigned int flags) : void
			+setWindowTitle(const std::string& title) : void
			+takeScreenshot(const std::string& fileName) : void
			+toggleFullscreen() : void
		}

		class System {
			+{static} getMonitorPosition(int monitorIndex) : Vector2f
			+{static} getWindowPosition() : Vector2f
			+{static} getWindowScaleDPI() : Vector2f
			+{static} getMonitorPhysicalSize(int monitorIndex) : Vector2i
			+{static} getMonitorSize(int monitorIndex) : Vector2i
			+{static} getScreenSize() : Vector2i
			+{static} getCurrentMonitor() : int
			+{static} getMonitorCount() : int
			+{static} getMonitorHeight(int monitorIndex) : int
			+{static} getMonitorPhysicalHeight(int monitorIndex) : int
			+{static} getMonitorPhysicalWidth(int monitorIndex) : int
			+{static} getMonitorRefreshRate(int monitorIndex) : int
			+{static} getMonitorWidth(int monitorIndex) : int
			+{static} getScreenHeight() : int
			+{static} getScreenWidth() : int
			+{static} getClipboardText() : std::string
			+{static} getMonitorName(int monitorIndex) : std::string
			+{static} setClipboardText(const std::string& text) : void
		}
	}

	namespace texture {
		class RlRenderTexture {
			+RlRenderTexture(int width, int height)
			+~RlRenderTexture()
			-_renderTexture : RenderTexture2D
			+getRenderTexture() : RenderTexture2D& {query}
		}

		class RlTexture {
			+RlTexture(const std::string& fileName)
			+RlTexture(const image::RlImage& image)
			+RlTexture(const image::RlImage& image, const CubemapLayout& layout)
			+~RlTexture()
			-_textureRec : Rectangle
			+getTextureRec() : Rectangle& {query}
			-_texture : Texture2D
			+get() : Texture2D&
			+get() : Texture2D& {query}
			+getFormat() : int& {query}
			+getHeight() : int& {query}
			+getMipmaps() : int& {query}
			+getWidth() : int& {query}
			-_texturePath : std::string
			+getPath() : std::string& {query}
			+getID() : unsigned int& {query}
			+genTextureMipmaps() : void
			+setFilter(const TextureFilter& filter) : void
			+setWrap(const TextureWrap& wrap) : void
			+update(const void* pixels) : void
			+updateRect(const Rectangle& rec, const void* pixels) : void
		}
	}

	namespace text {
		class RlFont {
			+RlFont()
			+RlFont(const std::string& fontPath)
			+RlFont(const int& fontSize)
			+RlFont(const std::string& fontPath, const int& fontSize, int* fontChars, const int& glyphCount)
			+RlFont(const image::RlImage& image, const RlColor& key, const int& firstChar)
			+RlFont(const std::string& fileType, const unsigned char* fileData, int dataSize, const int& fontSize, int* fontChars, const int& glyphCount)
			+~RlFont()
			-_font : Font
			+getFont() : Font& {query}
			-_fontSize : int
			+getFontSize() : int {query}
			+{static} getDefaultFont() : std::shared_ptr<RlFont>
			-_fontPath : std::string
			+getFontPath() : std::string& {query}
		}

		class RlText {
			+RlText(const std::string& text, const Vector2f& position, const RlColor& color)
			+RlText(const std::string& text, std::shared_ptr<RlFont>& font, const Vector2f& position, const RlColor& color)
			+RlText(const std::string& text, const std::string& fontPath, float fontSize, const Vector2f& position, const RlColor& color)
			-_color : RlColor
			+getColor() : RlColor& {query}
			-_origin : Vector2f
			-_position : Vector2f
			+getSize() : Vector2f {query}
			+getOrigin() : Vector2f& {query}
			+getPosition() : Vector2f& {query}
			-_fontSize : float
			-_rotation : float
			-_textSpacing : float
			+getFontSize() : float {query}
			+getRotation() : float {query}
			+getTextSpacing() : float {query}
			+getWidth() : float {query}
			-_font : std::shared_ptr<RlFont>
			+getFont() : std::shared_ptr<RlFont>& {query}
			-_text : std::string
			+getText() : std::string& {query}
			+setColor(const RlColor& color) : void
			+setFont(const std::shared_ptr<RlFont>& font) : void
			+setFontSize(float fontSize) : void
			+setOrigin(const Vector2f& origin) : void
			+setPosition(float x, float y) : void
			+setPosition(const Vector2f& pos) : void
			+setRotation(float rotation) : void
			+setText(const std::string& text) : void
			+setTextSpacing(float textSpacing) : void
		}

		class TextCodepoint {
			+TextCodepoint(const std::string& text)
			+getCodepointsCount() : int {query}
			+{static} codePointToUTF8(const int& codepoint, int& byteSize) : std::string
			+toUTF8String(const int& bytesLength) : std::string
			-_codepoints : std::vector<int>
			+getCodepoints() : std::vector<int>& {query}
		}
	}

	namespace shader {
		class RlShader {
			+RlShader()
			+~RlShader()
			-_shader : Shader
			+getShader() : Shader& {query}
			+getLocation(const std::string& uniformName) : int
			+getLocationAttrib(const std::string& attribName) : int
			+load(const std::string& vsFileName, const std::string& fsFileName) : void
			+loadFromMemory(const std::string& vsCode, const std::string& fsCode) : void
			+setValue(int locIndex, const void* value, int uniformType) : void
			+setValueMatrix(int locIndex, const Matrix& mat) : void
			+setValueTexture(int locIndex, const texture::RlTexture& texture) : void
			+setValueV(int locIndex, const void* value, int uniformType, int count) : void
		}
	}

	namespace image {
		class ImageDrawHelper {
			+{static} clearBackground(image::RlImage& dst, const RlColor& color) : void
			+{static} drawCircle(image::RlImage& dst, int centerX, int centerY, int radius, const RlColor& color) : void
			+{static} drawCircle(image::RlImage& dst, const Vector2f& center, int radius, const RlColor& color) : void
			+{static} drawImage(image::RlImage& dst, const image::RlImage& src, const Rectangle& srcRec, const Rectangle& dstRec, const RlColor& tint) : void
			+{static} drawImageText(image::RlImage& dst, const std::string& text, int posX, int posY, int fontSize, const RlColor& color) : void
			+{static} drawImageText(image::RlImage& dst, const raylib::text::RlFont& font, const std::string& text, const Vector2f& position, float fontSize, float spacing, const RlColor& tint) : void
			+{static} drawLine(image::RlImage& dst, int startPosX, int startPosY, int endPosX, int endPosY, const RlColor& color) : void
			+{static} drawLine(image::RlImage& dst, const Vector2f& start, const Vector2f& end, const RlColor& color) : void
			+{static} drawPixel(image::RlImage& dst, int posX, int posY, const RlColor& color) : void
			+{static} drawPixel(image::RlImage& dst, const Vector2f& position, const RlColor& color) : void
			+{static} drawRectangle(image::RlImage& dst, int posX, int posY, int width, int height, const RlColor& color) : void
			+{static} drawRectangle(image::RlImage& dst, const Vector2f& position, const Vector2f& size, const RlColor& color) : void
			+{static} drawRectangleLines(image::RlImage& dst, const Rectangle& rec, int thick, const RlColor& color) : void
			+{static} drawRectangleRec(image::RlImage& dst, const Rectangle& rec, const RlColor& color) : void
		}

		class ImageGenerator {
			+{static} genImageCellular(const int& width, const int& height, const int& tileSize) : RlImage
			+{static} genImageChecked(const int& width, const int& height, const int& checksX, const int& checksY, const RlColor& col1, const RlColor& col2) : RlImage
			+{static} genImageColor(const int& width, const int& height, const RlColor& color) : RlImage
			+{static} genImageGradientH(const int& width, const int& height, const RlColor& left, const RlColor& right) : RlImage
			+{static} genImageGradientRadial(const int& width, const int& height, float density, const RlColor& inner, const RlColor& outer) : RlImage
			+{static} genImageGradientV(const int& width, const int& height, const RlColor& top, const RlColor& bottom) : RlImage
			+{static} genImageWhiteNoise(const int& width, const int& height, float factor) : RlImage
		}

		class RlImage {
			+RlImage(const Image& image)
			+RlImage(const Image& image, int frameCount)
			+~RlImage()
			-_image : Image
			+getImage() : Image& {query}
			+getImage() : Image&
			+getImageAlphaBorder(float threshold) : Rectangle
			+getImageColor(int x, int y) : RlColor
			+copy() : RlImage
			+subImage(const Rectangle& rec) : RlImage
			+save(const std::string& fileName) : bool
			+saveAsCode(const std::string& fileName) : bool
			-_frameCount : int
			+getFrameCount() : int& {query}
			+loadImageColors() : std::vector<RlColor>
			+loadImagePalette(int maxPaletteSize) : std::vector<RlColor>
			+alphaClear(const RlColor& color, float threshold) : void
			+alphaCrop(float threshold) : void
			+alphaMask(const RlImage& alphaMask) : void
			+alphaPremultiply() : void
			+changeFormat(int newFormat) : void
			+colorBrightness(int brightness) : void
			+colorContrast(float contrast) : void
			+colorGrayscale() : void
			+colorInvert() : void
			+colorReplace(const RlColor& color, const RlColor& replace) : void
			+colorTint(const RlColor& color) : void
			+crop(const Rectangle& crop) : void
			+dither(int rBpp, int gBpp, int bBpp, int aBpp) : void
			+flipHorizontal() : void
			+flipVertical() : void
			+mipmaps() : void
			+resize(int newWidth, int newHeight) : void
			+resizeCanvas(int newWidth, int newHeight, int offsetX, int offsetY, const RlColor& fill) : void
			+resizeNearesetNeighbor(int newWidth, int newHeight) : void
			+rotateClockwise() : void
			+rotateCounterClockwise() : void
			+toPot(const RlColor& fill) : void
		}
	}

	namespace helper {
		class AudioDeviceHelper {
			+{static} isAudioDeviceReady() : bool
			-{static} _audioDeviceInit : static bool
			+{static} closeAudioDevice() : void
			+{static} initAudioDevice() : void
			+{static} setMasterVolume(float volume) : void
		}

		class CameraHelper {
			+{static} setAltControl(int keyAlt) : void
			+{static} setCameraMode(const RlCamera& camera, const CameraMode& mode) : void
			+{static} setMoveControls(int keyFront, int keyBack, int keyRight, int keyLeft, int keyUp, int keyDown) : void
			+{static} setPanControl(int keyPan) : void
			+{static} setSmoothZoomControl(int keySmoothZoom) : void
		}

		class ColorHelper {
			+{static} colorAlpha(const RlColor& color, float alpha) : RlColor
			+{static} colorAlphaBlend(const RlColor& dst, const RlColor& src, const RlColor& tint) : RlColor
			+{static} colorFromHSV(float hue, float saturation, float value) : RlColor
			+{static} colorFromNormalized(const Vector4f& normalizedColor) : RlColor
			+{static} getColor(unsigned int hexValue) : RlColor
			+{static} getPixelColor(void* srcPtr, int format) : RlColor
			+{static} colorToHSV(const RlColor& color) : Vector3f
			+{static} getPixelDataSize(int width, int height, int format) : int
			+{static} setPixelColor(void* dstPtr, const RlColor& color, int format) : void
		}

		class CoreHelper {
			+{static} loadVrStereoConfig(const VrDeviceInfo& device) : VrStereoConfig
			+{static} getTime() : double
			+{static} getFrameTime() : float
			+{static} getFPS() : int
			+{static} openURL(const std::string& url) : void
			+{static} setFramerateLimit(int fps) : void
			+{static} unloadVrStereoConfig(const VrStereoConfig& config) : void
		}

		class FileHelper {
			+{static} directoryExists(const std::string& dirPath) : bool
			+{static} fileExists(const std::string& fileName) : bool
			+{static} isFileDropped() : bool
			+{static} isFileExtension(const std::string& fileName, const std::string& ext) : bool
			+{static} saveFileText(const std::string& fileName, const std::string& text) : bool
			+{static} getFileModTime(const std::string& fileName) : long long
			+{static} getDirectoryPath(const std::string& filePath) : std::string
			+{static} getFileExtension(const std::string& fileName) : std::string
			+{static} getFileName(const std::string& filePath) : std::string
			+{static} getFileNameWithoutExt(const std::string& filePath) : std::string
			+{static} getPrevDirectoryPath(const std::string& dirPath) : std::string
			+{static} getWorkingDirectory() : std::string
			+{static} loadFileText(const std::string& fileName) : std::string
			+{static} getDirectoryFiles(const std::string& dirPath) : std::vector<std::string>
			+{static} getDirectoryFiles(const std::string& dirPath, const std::function<bool ( const std::string& fileName )>& filterFunction) : std::vector<std::string>
			+{static} getDroppedFiles() : std::vector<std::string>
			+{static} loadFileData(const std::string& fileName) : std::vector<unsigned char>
			+{static} changeDirectory(const std::string& dir) : void
		}

		class ImageHelper {
			+{static} fromText(const std::string& text, int fontSize, const RlColor& color) : raylib::image::RlImage
			+{static} fromText(const raylib::text::RlFont& font, const std::string& text, float fontSize, float spacing, const RlColor& tint) : raylib::image::RlImage
			+{static} genImageFontAtlas(const GlyphInfo* chars, Rectangle** recs, int glyphCount, int fontSize, int padding, int packMethod) : raylib::image::RlImage
			+{static} load(const std::string& fileName) : raylib::image::RlImage
			+{static} loadAnim(const std::string& fileName) : raylib::image::RlImage
			+{static} loadFromMemory(const std::string& fileType, const unsigned char* fileData, int dataSize) : raylib::image::RlImage
			+{static} loadFromScreen() : raylib::image::RlImage
			+{static} loadFromTexture(const Texture2D& texture) : raylib::image::RlImage
			+{static} loadRaw(const std::string& fileName, int width, int height, int format, int headerSize) : raylib::image::RlImage
		}

		class TextHelper {
			+{static} getGlyphInfo(const raylib::text::RlFont& font, int codepoint) : GlyphInfo
			+{static} getGlyphAtlasRec(const raylib::text::RlFont& font, int codepoint) : Rectangle
			+{static} measureText(const raylib::text::RlFont& font, const std::string& text) : Vector2f
			+{static} measureText(const raylib::text::RlFont& font, const std::string& text, float fontSize, float spacing) : Vector2f
			+{static} getGlyphIndex(const raylib::text::RlFont& font, int codepoint) : int
			+{static} measureText(const std::string& text, int fontSize) : int
		}

		class VectorHelper {
			+{static} toVectorf(const::Vector2& vector) : Vector2f
			+{static} toVectorf(const::Vector3& vector) : Vector3f
			+{static} toVectorf(const::Vector4& vector) : Vector4f
			+toRaylibVector(const Vector2f& vector) : static::Vector2
			+toRaylibVector(const Vector3f& vector) : static::Vector3
			+toRaylibVector(const Vector4f& vector) : static::Vector4
		}

		class WorldHelper {
			+{static} getScreenToWorld2D(const Vector2f& position, const Camera2D& camera) : Vector2f
			+{static} getWorldToScreen(const Vector3f& position, const RlCamera& camera) : Vector2f
			+{static} getWorldToScreen2D(const Vector2f& position, const Camera2D& camera) : Vector2f
			+{static} getWorldToScreenEx(const Vector3f& position, const RlCamera& camera, int width, int height) : Vector2f
		}

		namespace input {
			class CursorHelper {
				+{static} isCursorHidden() : bool
				+{static} isCursorOnScreen() : bool
				+{static} disableCursor() : void
				+{static} enableCursor() : void
				+{static} hideCursor() : void
				+{static} showCursor() : void
			}

			class GamepadHelper {
				+{static} isGamepadAvailable(const int& gamepad) : bool
				+{static} isGamepadButtonDown(const int& gamepad, const GamepadButton& button) : bool
				+{static} isGamepadButtonPressed(const int& gamepad, const GamepadButton& button) : bool
				+{static} isGamepadButtonReleased(const int& gamepad, const GamepadButton& button) : bool
				+{static} isGamepadButtonUp(const int& gamepad, const GamepadButton& button) : bool
				+{static} getGamepadAxisMovement(const int& gamepad, const GamepadAxis& axis) : float
				+{static} getGamepadAxisCount(const int& gamepad) : int
				+{static} getGamepadButtonPressed() : int
				+{static} setGamepadMappings(const std::string& mappings) : int
				+{static} getGamepadName(const int& gamepad) : std::string
			}

			class KeyboardHelper {
				+{static} isKeyDown(const KeyboardKey& key) : bool
				+{static} isKeyPressed(const KeyboardKey& key) : bool
				+{static} isKeyReleased(const KeyboardKey& key) : bool
				+{static} isKeyUp(const KeyboardKey& key) : bool
				+{static} getCharPressed() : int
				+{static} getKeyPressed() : int
				+{static} getKeyName(const int& key, const int& scancode) : std::string
				+{static} getPressedKeys() : std::vector<KeyboardKey>
				+{static} getPressedChars() : std::vector<int>
				+{static} setExitKey(const KeyboardKey& key) : void
			}

			class MouseHelper {
				+{static} getMouseRay(const Vector2f& mousePosition, const RlCamera& camera) : Ray
				+{static} getMouseDelta() : Vector2f
				+{static} getMousePosition() : Vector2f
				+{static} isMouseButtonDown(const MouseButton& button) : bool
				+{static} isMouseButtonPressed(const MouseButton& button) : bool
				+{static} isMouseButtonReleased(const MouseButton& button) : bool
				+{static} isMouseButtonUp(const MouseButton& button) : bool
				+{static} getMouseWheelMove() : float
				+{static} getMouseX() : int
				+{static} getMouseY() : int
				+{static} setMouseCursor(const MouseCursor& cursor) : void
				+{static} setMouseOffset(int offsetX, int offsetY) : void
				+{static} setMousePosition(int x, int y) : void
				+{static} setMouseScale(float scaleX, float scaleY) : void
			}

			class TouchHelper {
				+{static} getGestureDragVector() : Vector2f
				+{static} getGesturePinchVector() : Vector2f
				+{static} getTouchPosition(const int& index) : Vector2f
				+{static} isGestureDetected(const int& gesture) : bool
				+{static} getGestureDragAngle() : float
				+{static} getGestureHoldDuration() : float
				+{static} getGesturePinchAngle() : float
				+{static} getGestureDetected() : int
				+{static} getTouchPointCount() : int
				+{static} getTouchPointId(const int& index) : int
				+{static} getTouchX() : int
				+{static} getTouchY() : int
				+{static} setGesturesEnabled(const unsigned int& flags) : void
			}
		}

		namespace draw {
			class Draw2DHelper {
				-{static} _texShapesRec : static Rectangle
				-{static} _texShapes : static Texture2D
				+{static} drawCircle(int centerX, int centerY, float radius, const RlColor& color) : void
				+{static} drawCircle(const Vector2f& center, float radius, const RlColor& color) : void
				+{static} drawCircleGradient(int centerX, int centerY, float radius, const RlColor& color1, const RlColor& color2) : void
				+{static} drawCircleLines(int centerX, int centerY, float radius, const RlColor& color) : void
				+{static} drawCircleSector(const Vector2f& center, float radius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawCircleSectorLines(const Vector2f& center, float radius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawEllipse(int centerX, int centerY, float radiusH, float radiusV, const RlColor& color) : void
				+{static} drawEllipseLines(int centerX, int centerY, float radiusH, float radiusV, const RlColor& color) : void
				+{static} drawLine(int startPosX, int startPosY, int endPosX, int endPosY, const RlColor& color) : void
				+{static} drawLine(const Vector2f& startPos, const Vector2f& endPos, const RlColor& color) : void
				+{static} drawLine(const Vector2f& startPos, const Vector2f& endPos, float thick, const RlColor& color) : void
				+{static} drawLineBezier(const Vector2f& startPos, const Vector2f& endPos, float thick, const RlColor& color) : void
				+{static} drawLineBezierCubic(const Vector2f& startPos, const Vector2f& endPos, const Vector2f& startControlPos, const Vector2f& endControlPos, float thick, const RlColor& color) : void
				+{static} drawLineBezierQuad(const Vector2f& startPos, const Vector2f& endPos, const Vector2f& controlPos, float thick, const RlColor& color) : void
				+{static} drawLineStrip(const std::vector<Vector2f>& points, const RlColor& color) : void
				+{static} drawPixel(int posX, int posY, const RlColor& color) : void
				+{static} drawPixel(const Vector2f& position, const RlColor& color) : void
				+{static} drawPoly(const Vector2f& center, int sides, float radius, float rotation, const RlColor& color) : void
				+{static} drawPolyLines(const Vector2f& center, int sides, float radius, float rotation, const RlColor& color) : void
				+{static} drawPolyLines(const Vector2f& center, int sides, float radius, float rotation, float lineThick, const RlColor& color) : void
				+{static} drawRectangle(int posX, int posY, int width, int height, const RlColor& color) : void
				+{static} drawRectangle(const Vector2f& position, const Vector2f& size, const RlColor& color) : void
				+{static} drawRectangle(const Rectangle& rec, const RlColor& color) : void
				+{static} drawRectangle(const Rectangle& rec, const Vector2f& origin, float rotation, const RlColor& color) : void
				+{static} drawRectangleGradient(const Rectangle& rec, const RlColor& col1, const RlColor& col2, const RlColor& col3, const RlColor& col4) : void
				+{static} drawRectangleGradientH(int posX, int posY, int width, int height, const RlColor& color1, const RlColor& color2) : void
				+{static} drawRectangleGradientV(int posX, int posY, int width, int height, const RlColor& color1, const RlColor& color2) : void
				+{static} drawRectangleLines(int posX, int posY, int width, int height, const RlColor& color) : void
				+{static} drawRectangleLinesEx(const Rectangle& rec, float lineThick, const RlColor& color) : void
				+{static} drawRectangleRounded(const Rectangle& rec, float roundness, int segments, const RlColor& color) : void
				+{static} drawRectangleRoundedLines(const Rectangle& rec, float roundness, int segments, float lineThick, const RlColor& color) : void
				+{static} drawRing(const Vector2f& center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawRingLines(const Vector2f& center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawTriangle(const Vector2f& v1, const Vector2f& v2, const Vector2f& v3, const RlColor& color) : void
				+{static} drawTriangleFan(const std::vector<Vector2f>& points, const RlColor& color) : void
				+{static} drawTriangleLines(const Vector2f& v1, const Vector2f& v2, const Vector2f& v3, const RlColor& color) : void
				+{static} drawTriangleStrip(const std::vector<Vector2f>& points, const RlColor& color) : void
				+{static} setShapesTexture(const texture::RlTexture& texture, const Rectangle& source) : void
			}

			class DrawHelper {
				+{static} beginBlendMode(int mode) : void
				+{static} beginDrawing() : void
				+{static} beginMode2D(const Camera2D& camera) : void
				+{static} beginMode3D(const RlCamera& camera) : void
				+{static} beginScissorMode(int x, int y, int width, int height) : void
				+{static} beginShaderMode(const Shader& shader) : void
				+{static} beginTextureMode(const RenderTexture2D& target) : void
				+{static} beginVrStereoMode(const VrStereoConfig& config) : void
				+{static} clearBackground(const RlColor& color) : void
				+{static} drawBillboard(const RlCamera& camera, const texture::RlTexture& texture, const Vector3f& position, float size, const RlColor& tint) : void
				+{static} drawBillboardPro(const RlCamera& camera, const texture::RlTexture& texture, const Rectangle& source, const Vector3f& position, const Vector3f& up, const Vector2f& size, const Vector2f& origin, float rotation, const RlColor& tint) : void
				+{static} drawBillboardRec(const RlCamera& camera, const texture::RlTexture& texture, const Rectangle& source, const Vector3f& position, const Vector2f& size, const RlColor& tint) : void
				+{static} drawBoundingBox(const BoundingBox& box, const RlColor& color) : void
				+{static} endBlendMode() : void
				+{static} endDrawing() : void
				+{static} endMode2D() : void
				+{static} endMode3D() : void
				+{static} endScissorMode() : void
				+{static} endShaderMode() : void
				+{static} endTextureMode() : void
				+{static} endVrStereoMode() : void
			}

			class DrawTextHelper {
				+{static} drawCenteredText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const RlColor& color, const float& spacing) : void
				+{static} drawCenteredText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const float& fontSize, const RlColor& color, const float& spacing) : void
				+{static} drawCenteredText(const raylib::text::RlText& text) : void
				+{static} drawFps(const Vector2f& pos, const int& fontSize) : void
				+{static} drawFps(const float& posX, const float& posY, const int& fontSize) : void
				+{static} drawFps(const Vector2f& pos) : void
				+{static} drawFps(const int& posX, const int& posY) : void
				+{static} drawText(const std::string& text, const Vector2f& pos, const int& fontSize, const RlColor& color) : void
				+{static} drawText(const std::string& text, const float& posX, const float& posY, const int& fontSize, const RlColor& color) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const RlColor& color) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const float& rotation, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const Vector2f& origin, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const Vector2f& origin, const float& rotation, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const raylib::text::RlText& text, const Vector2f& position, const RlColor& color) : void
				+{static} drawText(const raylib::text::RlText& text, const float& posX, const float& posY, const RlColor& color) : void
				+{static} drawText(const raylib::text::RlText& text) : void
				+{static} drawTextUsingCodepoint(const raylib::text::RlFont& font, const int& codepoint, const Vector2f& position, float fontSize, const RlColor& tint) : void
			}

			class DrawTextureHelper {
				+{static} drawTexture(const texture::RlTexture& texture, int posX, int posY, const RlColor& tint) : void
				+{static} drawTexture(const texture::RlTexture& texture, const Vector2f& position, const RlColor& tint) : void
				+{static} drawTexture(const texture::RlTexture& texture, const Vector2f& position, float rotation, float scale, const RlColor& tint) : void
				+{static} drawTexture(const texture::RlTexture& texture, const Rectangle& source, const Rectangle& dest, const Vector2f& origin, float rotation, const RlColor& tint) : void
				+{static} drawTextureNPatch(const texture::RlTexture& texture, const NPatchInfo& nPatchInfo, const Rectangle& dest, const Vector2f& origin, float rotation, const RlColor& tint) : void
				+{static} drawTexturePoly(const texture::RlTexture& texture, const Vector2f& center, const std::vector<Vector2f>& points, std::vector<Vector2f>& texcoords, const RlColor& tint) : void
				+{static} drawTextureQuad(const texture::RlTexture& texture, const Vector2f& tiling, const Vector2f& offset, const Rectangle& quad, const RlColor& tint) : void
				+{static} drawTextureRec(const texture::RlTexture& texture, const Rectangle& source, const Vector2f& position, const RlColor& tint) : void
				+{static} drawTextureTiled(const texture::RlTexture& texture, const Rectangle& source, const Rectangle& dest, const Vector2f& origin, float rotation, float scale, const RlColor& tint) : void
			}
		}
	}

	namespace ex {
		class BuilderException {
			+BuilderException(const std::string& msg)
		}

		class CameraException {
			+CameraException(const std::string& message)
		}

		class InvalidArgumentException {
			+InvalidArgumentException(const std::string& msg)
		}

		class RaylibException {
			+RaylibException(const std::string& msg, bool prefix)
			+what() : char* {query}
			-_msg : std::string
		}

		class RlAnimationException {
			+RlAnimationException(const std::string& message)
		}

		class WindowException {
			+WindowException(const std::string& msg)
		}
	}

	namespace builder {
		abstract class IBuilder <template<typename T>> {
			+{abstract} build() : T
		}

		class RlCameraBuilder {
			+RlCameraBuilder()
			-_cameraMode : CameraMode
			-_projection : CameraProjection
			+build() : RlCamera
			+setCameraMode(CameraMode cameraMode) : RlCameraBuilder&
			+setFovy(float fovy) : RlCameraBuilder&
			+setLookingPoint(const Vector3f& lookingPoint) : RlCameraBuilder&
			+setPosition(const Vector3f& position) : RlCameraBuilder&
			+setProjection(CameraProjection projection) : RlCameraBuilder&
			+setTarget(const Vector3f& target) : RlCameraBuilder&
			-_lookingPoint : Vector3f
			-_position : Vector3f
			-_target : Vector3f
			-_fovy : float
		}

		class RlImageBuilder {
			+RlImageBuilder()
			-_bottom : RlColor
			-_col1 : RlColor
			-_col2 : RlColor
			-_color : RlColor
			-_inner : RlColor
			-_left : RlColor
			-_outer : RlColor
			-_right : RlColor
			-_top : RlColor
			+setBottom(const RlColor& bottom) : RlImageBuilder&
			+setChecksX(const int& checksX) : RlImageBuilder&
			+setChecksY(const int& checksY) : RlImageBuilder&
			+setCol1(const RlColor& col1) : RlImageBuilder&
			+setCol2(const RlColor& col2) : RlImageBuilder&
			+setColor(const RlColor& color) : RlImageBuilder&
			+setDensity(const float& density) : RlImageBuilder&
			+setFactor(const float& factor) : RlImageBuilder&
			+setHeight(const int& height) : RlImageBuilder&
			+setInner(const RlColor& inner) : RlImageBuilder&
			+setLeft(const RlColor& left) : RlImageBuilder&
			+setOuter(const RlColor& outer) : RlImageBuilder&
			+setRight(const RlColor& right) : RlImageBuilder&
			+setTitleSize(const int& titleSize) : RlImageBuilder&
			+setTop(const RlColor& top) : RlImageBuilder&
			+setType(ImageType type) : RlImageBuilder&
			+setWidth(const int& width) : RlImageBuilder&
			-_density : float
			-_factor : float
			-_checksX : int
			-_checksY : int
			-_height : int
			-_titleSize : int
			-_width : int
			-_flags : long
			-_type : long
			+build() : raylib::image::RlImage
		}

		class RlMeshBuilder {
			+RlMeshBuilder()
			+build() : RlMesh
			+setConeSlices(const int& slices) : RlMeshBuilder&
			+setCubeSize(const Vector3f& cubeSize) : RlMeshBuilder&
			+setCubicmap(const image::RlImage& cubicmap) : RlMeshBuilder&
			+setHeight(const float& height) : RlMeshBuilder&
			+setHeightmap(const image::RlImage& heightmap) : RlMeshBuilder&
			+setHemisphereRings(const int& rings) : RlMeshBuilder&
			+setKnotRadSeg(const int& radSeg) : RlMeshBuilder&
			+setLength(const float& length) : RlMeshBuilder&
			+setMeshType(MeshType meshType) : RlMeshBuilder&
			+setRadSeg(const int& radSeg) : RlMeshBuilder&
			+setRadius(const float& radius) : RlMeshBuilder&
			+setResX(const int& resX) : RlMeshBuilder&
			+setResZ(const int& resZ) : RlMeshBuilder&
			+setRings(const int& rings) : RlMeshBuilder&
			+setSides(const int& sides) : RlMeshBuilder&
			+setSize(const float& size) : RlMeshBuilder&
			+setSlices(const int& slices) : RlMeshBuilder&
			+setVec3fSize(const Vector3f& size) : RlMeshBuilder&
			+setWidth(const float& width) : RlMeshBuilder&
			-_cubeSize : Vector3f
			-_vec3fSize : Vector3f
			-_height : float
			-_length : float
			-_radius : float
			-_size : float
			-_width : float
			-_cubicmap : image::RlImage
			-_heightmap : image::RlImage
			-_radSeg : int
			-_resX : int
			-_resZ : int
			-_rings : int
			-_sides : int
			-_slices : int
			-_flags : long
			-_type : long
		}

		class RlTextBuilder {
			+RlTextBuilder()
			-_color : RlColor
			+setColor(const RlColor& color) : RlTextBuilder&
			+setFont(const std::shared_ptr<raylib::text::RlFont>& font) : RlTextBuilder&
			+setFontPath(const std::string& fontPath) : RlTextBuilder&
			+setFontSize(const float& fontSize) : RlTextBuilder&
			+setOrigin(const Vector2f& origin) : RlTextBuilder&
			+setPosition(const Vector2f& position) : RlTextBuilder&
			+setRotation(const float& rotation) : RlTextBuilder&
			+setSpacing(const float& spacing) : RlTextBuilder&
			+setText(const std::string& text) : RlTextBuilder&
			-_origin : Vector2f
			-_position : Vector2f
			-_isFontPathSet : bool
			-_isFontSet : bool
			-_isFontSizeSet : bool
			-_isTextSet : bool
			-_fontSize : float
			-_rotation : float
			-_textSpacing : float
			+build() : raylib::text::RlText
			-_font : std::shared_ptr<raylib::text::RlFont>
			-_fontPath : std::string
			-_text : std::string
		}

		enum RlImageBuilder::ImageType {
			ImageCellular
			ImageChecked
			ImageColor
			ImageGradientH
			ImageGradientRadial
			ImageGradientV
			ImageWhiteNoise
		}

		enum RlImageBuilder::ParameterName {
			Bottom
			ChecksX
			ChecksY
			Col1
			Col2
			Color
			Density
			Factor
			Height
			Inner
			Left
			Outer
			Right
			TitleSize
			Top
			Width
		}

		enum RlMeshBuilder::MeshType {
			MeshCone
			MeshCube
			MeshCubicmap
			MeshCylinder
			MeshHeightmap
			MeshHemiSphere
			MeshKnot
			MeshPlane
			MeshPoly
			MeshSphere
			MeshTorus
		}

		enum RlMeshBuilder::ParameterName {
			ConeSlices
			CubeSize
			Cubicmap
			Height
			Heightmap
			HemisphereRings
			KnotRadSeg
			Length
			RadSeg
			Radius
			ResX
			ResZ
			Rings
			Sides
			Size
			Slices
			Vec3fSize
			Width
		}
	}

	namespace audio {
		class RlSound {
			+RlSound(const Sound& sound)
			+RlSound(const std::string& fileName)
			+RlSound(Wave wave)
			+~RlSound()
			-_sound : Sound
			+isPlaying() : bool
			-_volume : float
			+getVolume() : float {query}
			+{static} getPlayings() : int
			+pause() : void
			+play() : void
			+playMulti() : void
			+resume() : void
			+setPitch(float pitch) : void
			+setVolume(float volume) : void
			+stop() : void
			+{static} stopMulti() : void
			+update(const void* data, int samplesCount) : void
		}

		class RlWave {
			+RlWave()
			+RlWave(const Wave& wave)
			+RlWave(const std::string& path)
			+RlWave(const std::string& fileType, const unsigned char* fileData, int dataSize)
			+~RlWave()
			+copy() : RlWave
			-_wave : Wave
			+getWave() : Wave&
			+exportWave(const std::string& fileName) : bool
			+exportWaveAsCode(const std::string& fileName) : bool
			-_samplesPtr : float*
			+toSound() : raylib::audio::RlSound {query}
			-_samples : std::vector<float>
			+getSamples() : std::vector<float>
			+crop(const int& initSample, const int& finalSample) : void
			+format(const int& sampleRate, const int& sampleSize, const int& channels) : void
		}
	}
}


namespace gameengine {
	abstract class AbstractBase {
		+AbstractBase(const std::string& name)
		+AbstractBase(const AbstractBase &)
		+~AbstractBase()
		-_hiding : bool
		+isHiding() : bool {query}
		+{abstract} getRotationDegrees() : float
		-_group : std::string
		-_name : std::string
		+getGroup() : std::string& {query}
		+getName() : std::string& {query}
		+{abstract} draw() : void
		+{abstract} ready() : void
		+setGroup(const std::string& group) : void
		+setHiding(bool value) : void
		+{abstract} update(float delta) : void
	}

	class AudioManager {
		+AudioManager()
		+~AudioManager()
		-{static} _instance : static std::shared_ptr<AudioManager>
		+{static} getInstance() : std::shared_ptr<AudioManager>&
		-_sounds : std::vector<std::unique_ptr<gameengine::ISound>>
		+addSound(const std::string& fileName, SoundCategory category) : void
		+deleteSound(const std::string& fileName) : void
		+playSound(const std::string& fileName) : void
		+setVolume(float volume, SoundCategory category) : void
	}

	abstract class Button {
		+Button(const std::string& name, const std::string& filename)
		+~Button()
		-_bounds : Rectangle
		-_rectangle : Rectangle
		-_position : Vector2f
		-_scale : Vector2f
		+getPosition() : Vector2f
		+getScale() : Vector2f
		-_action : bool
		-_isEnable : bool
		+getIsEnable() : bool
		-_frameHeight : float
		-_rotationDegrees : float
		+getRotationDegrees() : float
		-_frameNum : int
		-_state : int
		-_texture : raylib::texture::RlTexture
		+draw() : void
		+{abstract} pressed() : void
		+ready() : void
		+setEnable(bool value) : void
		+setPosition(Vector2f position) : void
		+setRotationDegrees(float rotationDegrees) : void
		+setScale(Vector2f scale) : void
		+update(float delta) : void
	}

	class ISound {
		+ISound(std::string fileName, SoundCategory category)
		+~ISound()
		-_category : SoundCategory
		+getCategory() : int {query}
		-_name : std::string
		+getName() : std::string
	}

	class KinematicBody {
		+KinematicBody(const std::string& name, const raylib::builder::RlMeshBuilder::MeshType& type, const std::string& texturePath)
		+KinematicBody(const std::string& name, const std::string& modelPath, const std::string& texturePath)
		+~KinematicBody()
		+moveAndCollide(Vector3f position) : void
	}

	class MainScene {
		+MainScene(std::string name, std::string sceneSource)
		+~MainScene()
		+sceneLauncher() : void
	}

	abstract class Node {
		+Node(const std::string& name)
		+Node(const Node &)
		+~Node()
		+{abstract} getPosition() : Vector3f
		+{abstract} getScale() : Vector3f
		+{abstract} setPosition(Vector3f pos) : void
		+{abstract} setRotationDegrees(float degrees, Vector3f rotationAxis) : void
		+{abstract} setScale(Vector3f newScale) : void
	}

	abstract class Node2D {
		+Node2D(const std::string& name)
		+Node2D(const Node2D &)
		+~Node2D()
		+{abstract} getPosition() : Vector2f
		+{abstract} getScale() : Vector2f
		+{abstract} setPosition(Vector2f pos) : void
		+{abstract} setRotationDegrees(float degrees) : void
		+{abstract} setScale(Vector2f newScale) : void
	}

	abstract class Scene {
		+Scene(std::string name, std::string sceneSource)
		+~Scene()
		-_isLaunched : bool
		-_isPaused : bool
		+getPaused() : bool {query}
		+isLaunched() : bool&
		+getNode(const std::string& name) : std::shared_ptr<gameengine::AbstractBase>
		-_name : std::string
		-_sceneSource : std::string
		+getName() : std::string
		+getSceneSource() : std::string
		-_nodes : std::vector<std::shared_ptr<gameengine::AbstractBase>>
		+getAllNode() : std::vector<std::shared_ptr<gameengine::AbstractBase>>
		+addNode(const std::shared_ptr<gameengine::AbstractBase>& node) : void
		+deleteNode(const std::string& name) : void
		+deleteNodeIncludes(const std::string& includeName) : void
		+destroy() : void
		+draw() : void
		+draw2D() : void
		+ready() : void
		+{abstract} readyScene() : void
		+{abstract} sceneLauncher() : void
		+setLaunched() : void
		+setPaused(bool value) : void
		+update(float delta) : void
		+{abstract} updateScene(float delta) : void
	}

	class SceneManager {
		+SceneManager()
		+~SceneManager()
		+getPaused() : bool
		-{static} _instance : static std::shared_ptr<SceneManager>
		+getNode(const std::string& name) : std::shared_ptr<gameengine::AbstractBase>
		+{static} getInstance() : std::shared_ptr<gameengine::SceneManager>&
		-_actualScene : std::string
		-_waitingScene : std::string
		+getAllNodes() : std::vector<std::shared_ptr<gameengine::AbstractBase>>
		-_scenes : std::vector<std::shared_ptr<gameengine::Scene>>
		-_nodesToDelete : std::vector<std::string>
		-_nodesToDeleteIncludes : std::vector<std::string>
		+addNode(const std::shared_ptr<gameengine::AbstractBase>& node) : void
		+addScene(const std::shared_ptr<gameengine::Scene>& scene) : void
		+changeScene(const std::string& scene) : void
		-changeSceneInWaiting() : void
		+deleteNode(const std::string& name) : void
		-deleteNodeInLst() : void
		+deleteNodeInclude(const std::string& Includename) : void
		+deleteScene(const std::string& scene) : void
		+draw() : void
		+draw2D() : void
		+drawAll(raylib::RlCamera& camera) : void
		+makeLoop(raylib::RlCamera& camera) : void
		+setPaused(bool value) : void
		+update() : void
	}

	class StaticBody {
		+StaticBody(const std::string& name, const std::string& modelPath, const std::string& texturePath)
		+StaticBody(const std::string& name, const raylib::builder::RlMeshBuilder::MeshType& type, const std::string& texturepath)
		+~StaticBody()
		+getBoundingBox() : BoundingBox& {query}
		#_position : Vector3f
		#_scale : Vector3f
		+getPosition() : Vector3f
		+getScale() : Vector3f
		#_collisionEnable : bool
		+getIsCollsionEnable() : bool&
		#_rotationDegrees : float
		+getRotationDegrees() : float
		+operator->() : raylib :: RlModel*
		#_model : raylib::RlModel
		+draw() : void
		+ready() : void
		+setBoundingBox(BoundingBox& boundingBox) : void
		+setColor(raylib::RlColor color) : void
		+setPosition(Vector3f pos) : void
		+setRotationDegrees(float degrees, Vector3f rotationAxis) : void
		+setScale(Vector3f newScale) : void
		+update(float delta) : void
	}

	class TextureRect {
		+TextureRect(const std::string& name, const std::string& filename, Vector2f position, Vector2f scale, float, const raylib::RlColor& color)
		+~TextureRect()
		-_position : Vector2f
		-_scale : Vector2f
		+getPosition() : Vector2f
		+getScale() : Vector2f
		-_rotationDegrees : float
		+getRotationDegrees() : float
		-_color : raylib::RlColor
		+getColor() : raylib::RlColor&
		+getColor() : raylib::RlColor& {query}
		-_texture : raylib::texture::RlTexture
		+draw() : void
		+ready() : void
		+setColor(unsigned int r, unsigned int g, unsigned int b, unsigned int a) : void
		+setPosition(Vector2f position) : void
		+setRotationDegrees(float rotationDegrees) : void
		+setScale(Vector2f scale) : void
		+update(float delta) : void
	}

	namespace map {
		class MapParser <template<typename T>> {
			+MapParser(const std::string& fileName, const std::unordered_map<char, T>& symbols, const Vector2u& maxSize)
			-_maxSize : Vector2u
			-_size : Vector2u
			+getMaxSize() : Vector2u& {query}
			+getSize() : Vector2u& {query}
			-_file : std::ifstream
			-_buffer : std::string
			-_fileName : std::string
			-removeComment(const std::string& line) : std::string
			+getBuffer() : std::string& {query}
			+getFileName() : std::string& {query}
			+getSymbols() : std::unordered_map<char , T>& {query}
			-_symbols : std::unordered_map<char, T>
			-_map : std::vector<std::vector<T>>
			+getMap() : std::vector<std::vector<T>>& {query}
			+parse() : void
			-parseMap() : void
		}
	}

	namespace ex {
		class GameEngineException {
			+GameEngineException(const std::string& message, const bool& prefix)
			+what() : char* {query}
			-_msg : std::string
		}

		class MapParserException {
			+MapParserException(const std::string& message)
		}
	}

	namespace component {
		class GridComponent {
			+GridComponent(const Vector2i& size, const Vector3f& position, const float& spacing, const RlColor& tint, const std::string& name)
			+GridComponent(const GridComponent &)
			-_tint : RlColor
			-_size : Vector2i
			-_position : Vector3f
			-_scale : Vector3f
			+getPosition() : Vector3f
			+getScale() : Vector3f
			-_rotationDegrees : float
			-_spacing : float
			+getRotationDegrees() : float
			+draw() : void
			+ready() : void
			+setPosition(Vector3f pos) : void
			+setRotationDegrees(float degrees, Vector3f rotationAxis) : void
			+setScale(Vector3f newScale) : void
			+update(float delta) : void
		}
	}

	namespace audio {
		class Fx {
			+Fx(const std::string& fileName, SoundCategory category)
		}

		class Music {
			+Music(const std::string& fileName, SoundCategory category)
		}
	}
}






gameengine.AbstractBase <|- - gameengine.Node


gameengine.AbstractBase <|- - gameengine.Node2D


raylib.helper.AudioDeviceHelper <|- - gameengine.AudioManager


gameengine.ex.GameEngineException <|- - gameengine.ex.MapParserException


raylib.builder.IBuilder <|- - raylib.builder.RlCameraBuilder


raylib.builder.IBuilder <|- - raylib.builder.RlImageBuilder


raylib.builder.IBuilder <|- - raylib.builder.RlMeshBuilder


raylib.builder.IBuilder <|- - raylib.builder.RlTextBuilder


gameengine.ISound <|- - gameengine.audio.Fx


gameengine.ISound <|- - gameengine.audio.Music


gameengine.Node <|- - gameengine.component.GridComponent


gameengine.Node <|- - gameengine.StaticBody


gameengine.Node2D <|- - gameengine.Button


gameengine.Node2D <|- - gameengine.TextureRect


raylib.ex.RaylibException <|- - raylib.ex.BuilderException


raylib.ex.RaylibException <|- - raylib.ex.CameraException


raylib.ex.RaylibException <|- - raylib.ex.InvalidArgumentException


raylib.ex.RaylibException <|- - raylib.ex.RlAnimationException


raylib.ex.RaylibException <|- - raylib.ex.WindowException


raylib.RlMusic <|- - gameengine.audio.Music


raylib.audio.RlSound <|- - gameengine.audio.Fx


gameengine.Scene <|- - gameengine.MainScene


gameengine.StaticBody <|- - gameengine.KinematicBody






gameengine.AudioManager *- - gameengine.AudioManager


gameengine.AudioManager *- - gameengine.ISound


gameengine.Button *- - raylib.texture.RlTexture


gameengine.component.GridComponent *- - raylib.RlColor


gameengine.ISound *- - .SoundCategory


raylib.RlColor "26" *- - raylib.RlColor


raylib.builder.RlImageBuilder "9" *- - raylib.RlColor


raylib.builder.RlMeshBuilder "2" *- - raylib.image.RlImage


raylib.RlModel *- - raylib.texture.RlTexture


raylib.RlModelAnim *- - raylib.RlModel


raylib.RlMusic *- - gameengine.audio.Music


raylib.text.RlText *- - raylib.RlColor


raylib.text.RlText *- - raylib.text.RlFont


raylib.builder.RlTextBuilder *- - raylib.RlColor


raylib.builder.RlTextBuilder *- - raylib.text.RlFont


raylib.window.RlWindow *- - raylib.RlCamera


raylib.window.RlWindow *- - raylib.window.RlWindow


gameengine.Scene *- - gameengine.AbstractBase


gameengine.SceneManager *- - gameengine.Scene


gameengine.SceneManager *- - gameengine.SceneManager


gameengine.StaticBody *- - raylib.RlModel


gameengine.TextureRect *- - raylib.RlColor


gameengine.TextureRect *- - raylib.texture.RlTexture







raylib.builder.RlImageBuilder +- - raylib.builder.RlImageBuilder::ImageType


raylib.builder.RlImageBuilder +- - raylib.builder.RlImageBuilder::ParameterName


raylib.builder.RlMeshBuilder +- - raylib.builder.RlMeshBuilder::MeshType


raylib.builder.RlMeshBuilder +- - raylib.builder.RlMeshBuilder::ParameterName




@enduml

PlantUML version 1.2022.5(Sat Apr 30 14:55:52 RET 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: GB
--></g></svg>