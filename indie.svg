<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="5886px" preserveAspectRatio="none" style="width:46004px;height:5886px;background:#FFFFFF;" version="1.1" viewBox="0 0 46004 5886" width="46004px" zoomAndPan="magnify"><defs/><g><!--MD5=[8b0b89b7b3bae182f8f5f5903bac16d6]
cluster raylib--><g id="cluster_raylib"><path d="M116.5,1583.602 L156.5,1583.602 A3.75,3.75 0 0 1 159,1586.102 L166,1608.6699 L27232.5,1608.6699 A2.5,2.5 0 0 1 27235,1611.1699 L27235,4615.102 A2.5,2.5 0 0 1 27232.5,4617.602 L116.5,4617.602 A2.5,2.5 0 0 1 114,4615.102 L114,1586.102 A2.5,2.5 0 0 1 116.5,1583.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="114" x2="166" y1="1608.6699" y2="1608.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="39" x="118" y="1600.5679">raylib</text></g><!--MD5=[899334e90318ecd4a8e5a68f5811988b]
cluster raylib.window--><g id="cluster_raylib.window"><path d="M26246.5,1629.602 L26302.5,1629.602 A3.75,3.75 0 0 1 26305,1632.102 L26312,1654.6699 L27208.5,1654.6699 A2.5,2.5 0 0 1 27211,1657.1699 L27211,2606.102 A2.5,2.5 0 0 1 27208.5,2608.602 L26246.5,2608.602 A2.5,2.5 0 0 1 26244,2606.102 L26244,1632.102 A2.5,2.5 0 0 1 26246.5,1629.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="26244" x2="26312" y1="1654.6699" y2="1654.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="55" x="26248" y="1646.5679">window</text></g><!--MD5=[12eaa1df17f3dcf9f80cb509c0578256]
cluster raylib.texture--><g id="cluster_raylib.texture"><path d="M11756.5,3800.602 L11808.5,3800.602 A3.75,3.75 0 0 1 11811,3803.102 L11818,3825.6699 L12680.5,3825.6699 A2.5,2.5 0 0 1 12683,3828.1699 L12683,4300.102 A2.5,2.5 0 0 1 12680.5,4302.602 L11756.5,4302.602 A2.5,2.5 0 0 1 11754,4300.102 L11754,3803.102 A2.5,2.5 0 0 1 11756.5,3800.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="11754" x2="11818" y1="3825.6699" y2="3825.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="51" x="11758" y="3817.5679">texture</text></g><!--MD5=[92864a1e6c6f69c3cea72200347dbd18]
cluster raylib.text--><g id="cluster_raylib.text"><path d="M13331.5,2710.102 L13360.5,2710.102 A3.75,3.75 0 0 1 13363,2712.602 L13370,2735.1699 L14679.5,2735.1699 A2.5,2.5 0 0 1 14682,2737.6699 L14682,4233.602 A2.5,2.5 0 0 1 14679.5,4236.102 L13331.5,4236.102 A2.5,2.5 0 0 1 13329,4233.602 L13329,2712.602 A2.5,2.5 0 0 1 13331.5,2710.102 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="13329" x2="13370" y1="2735.1699" y2="2735.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="28" x="13333" y="2727.0679">text</text></g><!--MD5=[84688b521a6e648eded8a3b019fe3b1b]
cluster raylib.shader--><g id="cluster_raylib.shader"><path d="M25650.5,1953.602 L25698.5,1953.602 A3.75,3.75 0 0 1 25701,1956.102 L25708,1978.6699 L26217.5,1978.6699 A2.5,2.5 0 0 1 26220,1981.1699 L26220,2282.102 A2.5,2.5 0 0 1 26217.5,2284.602 L25650.5,2284.602 A2.5,2.5 0 0 1 25648,2282.102 L25648,1956.102 A2.5,2.5 0 0 1 25650.5,1953.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="25648" x2="25708" y1="1978.6699" y2="1978.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="47" x="25652" y="1970.5679">shader</text></g><!--MD5=[c431ac0f028acd34a2a96a94cdec1319]
cluster raylib.model--><g id="cluster_raylib.model"><path d="M9599.5,1953.602 L9644.5,1953.602 A3.75,3.75 0 0 1 9647,1956.102 L9654,1978.6699 L11727.5,1978.6699 A2.5,2.5 0 0 1 11730,1981.1699 L11730,4224.102 A2.5,2.5 0 0 1 11727.5,4226.602 L9599.5,4226.602 A2.5,2.5 0 0 1 9597,4224.102 L9597,1956.102 A2.5,2.5 0 0 1 9599.5,1953.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="9597" x2="9654" y1="1978.6699" y2="1978.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="44" x="9601" y="1970.5679">model</text></g><!--MD5=[6f0614c6d95b265dbc48a4bd364eb222]
cluster raylib.image--><g id="cluster_raylib.image"><path d="M6655.5,3638.102 L6699.5,3638.102 A3.75,3.75 0 0 1 6702,3640.602 L6709,3663.1699 L9570.5,3663.1699 A2.5,2.5 0 0 1 9573,3665.6699 L9573,4462.602 A2.5,2.5 0 0 1 9570.5,4465.102 L6655.5,4465.102 A2.5,2.5 0 0 1 6653,4462.602 L6653,3640.602 A2.5,2.5 0 0 1 6655.5,3638.102 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="6653" x2="6709" y1="3663.1699" y2="3663.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="43" x="6657" y="3655.0679">image</text></g><!--MD5=[0171f304adc156ffdb059f4a8f6eca21]
cluster raylib.helper--><g id="cluster_raylib.helper"><path d="M16945.5,1640.602 L16990.5,1640.602 A3.75,3.75 0 0 1 16993,1643.102 L17000,1665.6699 L25621.5,1665.6699 A2.5,2.5 0 0 1 25624,1668.1699 L25624,4157.102 A2.5,2.5 0 0 1 25621.5,4159.602 L16945.5,4159.602 A2.5,2.5 0 0 1 16943,4157.102 L16943,1643.102 A2.5,2.5 0 0 1 16945.5,1640.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="16943" x2="17000" y1="1665.6699" y2="1665.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="44" x="16947" y="1657.5679">helper</text></g><!--MD5=[7c6e76a8c2d442b278df6f3b410dd15a]
cluster raylib.helper.input--><g id="cluster_raylib.helper.input"><path d="M24254.5,1972.602 L24292.5,1972.602 A3.75,3.75 0 0 1 24295,1975.102 L24302,1997.6699 L25597.5,1997.6699 A2.5,2.5 0 0 1 25600,2000.1699 L25600,3229.102 A2.5,2.5 0 0 1 25597.5,3231.602 L24254.5,3231.602 A2.5,2.5 0 0 1 24252,3229.102 L24252,1975.102 A2.5,2.5 0 0 1 24254.5,1972.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="24252" x2="24302" y1="1997.6699" y2="1997.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="37" x="24256" y="1989.5679">input</text></g><!--MD5=[cff780a46a811e9554eabdaec41bbaee]
cluster raylib.helper.draw--><g id="cluster_raylib.helper.draw"><path d="M20258.5,1686.602 L20294.5,1686.602 A3.75,3.75 0 0 1 20297,1689.102 L20304,1711.6699 L24225.5,1711.6699 A2.5,2.5 0 0 1 24228,1714.1699 L24228,3267.102 A2.5,2.5 0 0 1 24225.5,3269.602 L20258.5,3269.602 A2.5,2.5 0 0 1 20256,3267.102 L20256,1689.102 A2.5,2.5 0 0 1 20258.5,1686.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="20256" x2="20304" y1="1711.6699" y2="1711.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="35" x="20260" y="1703.5679">draw</text></g><!--MD5=[c1ec99b9bcb40ec11e5d573bb468eb91]
cluster raylib.ex--><g id="cluster_raylib.ex"><path d="M14708.5,2039.602 L14725.5,2039.602 A3.75,3.75 0 0 1 14728,2042.102 L14735,2064.6699 L16916.5,2064.6699 A2.5,2.5 0 0 1 16919,2067.1699 L16919,3105.102 A2.5,2.5 0 0 1 16916.5,3107.602 L14708.5,3107.602 A2.5,2.5 0 0 1 14706,3105.102 L14706,2042.102 A2.5,2.5 0 0 1 14708.5,2039.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="14706" x2="14735" y1="2064.6699" y2="2064.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="16" x="14710" y="2056.5679">ex</text></g><!--MD5=[a80ed57d422e622acc65e8bcc993edc1]
cluster raylib.builder--><g id="cluster_raylib.builder"><path d="M4040.5,2058.602 L4090.5,2058.602 A3.75,3.75 0 0 1 4093,2061.102 L4100,2083.6699 L6626.5,2083.6699 A2.5,2.5 0 0 1 6629,2086.1699 L6629,4271.602 A2.5,2.5 0 0 1 6626.5,4274.102 L4040.5,4274.102 A2.5,2.5 0 0 1 4038,4271.602 L4038,2061.102 A2.5,2.5 0 0 1 4040.5,2058.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="4038" x2="4100" y1="2083.6699" y2="2083.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="49" x="4042" y="2075.5679">builder</text></g><!--MD5=[5c5663f1476690eb89a50501bb5d75a5]
cluster raylib.audio--><g id="cluster_raylib.audio"><path d="M1569.5,1887.102 L1609.5,1887.102 A3.75,3.75 0 0 1 1612,1889.602 L1619,1912.1699 L4011.5,1912.1699 A2.5,2.5 0 0 1 4014,1914.6699 L4014,2348.602 A2.5,2.5 0 0 1 4011.5,2351.102 L1569.5,2351.102 A2.5,2.5 0 0 1 1567,2348.602 L1567,1889.602 A2.5,2.5 0 0 1 1569.5,1887.102 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="1567" x2="1619" y1="1912.1699" y2="1912.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="39" x="1571" y="1904.0679">audio</text></g><!--MD5=[18e78e8243f546f82f9623bd56d0ad44]
cluster indie--><g id="cluster_indie"><path d="M27261.5,3752.602 L27296.5,3752.602 A3.75,3.75 0 0 1 27299,3755.102 L27306,3777.6699 L39733.5,3777.6699 A2.5,2.5 0 0 1 39736,3780.1699 L39736,5877.102 A2.5,2.5 0 0 1 39733.5,5879.602 L27261.5,5879.602 A2.5,2.5 0 0 1 27259,5877.102 L27259,3755.102 A2.5,2.5 0 0 1 27261.5,3752.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="27259" x2="27306" y1="3777.6699" y2="3777.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="34" x="27263" y="3769.5679">indie</text></g><!--MD5=[01fd3cc4356a9698d202dbbac299755f]
cluster indie.map--><g id="cluster_indie.map"><path d="M27771.5,4641.602 L27803.5,4641.602 A3.75,3.75 0 0 1 27806,4644.102 L27813,4666.6699 L29051.5,4666.6699 A2.5,2.5 0 0 1 29054,4669.1699 L29054,5853.102 A2.5,2.5 0 0 1 29051.5,5855.602 L27771.5,5855.602 A2.5,2.5 0 0 1 27769,5853.102 L27769,4644.102 A2.5,2.5 0 0 1 27771.5,4641.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="27769" x2="27813" y1="4666.6699" y2="4666.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="31" x="27773" y="4658.5679">map</text></g><!--MD5=[77d065c7ccc9133d0158816a6e36e63b]
cluster indie.button--><g id="cluster_indie.button"><path d="M36836.5,3972.102 L36885.5,3972.102 A3.75,3.75 0 0 1 36888,3974.602 L36895,3997.1699 L39709.5,3997.1699 A2.5,2.5 0 0 1 39712,3999.6699 L39712,4922.102 A2.5,2.5 0 0 1 39709.5,4924.602 L36836.5,4924.602 A2.5,2.5 0 0 1 36834,4922.102 L36834,3974.602 A2.5,2.5 0 0 1 36836.5,3972.102 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="36834" x2="36895" y1="3997.1699" y2="3997.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="48" x="36838" y="3989.0679">button</text></g><!--MD5=[ed5108d926612df2b403672b7cd71ed5]
cluster gameengine--><g id="cluster_gameengine"><path d="M39762.5,6.602 L39849.5,6.602 A3.75,3.75 0 0 1 39852,9.102 L39859,31.6699 L45957.5,31.6699 A2.5,2.5 0 0 1 45960,34.1699 L45960,4186.102 A2.5,2.5 0 0 1 45957.5,4188.602 L39762.5,4188.602 A2.5,2.5 0 0 1 39760,4186.102 L39760,9.102 A2.5,2.5 0 0 1 39762.5,6.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="39760" x2="39859" y1="31.6699" y2="31.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="86" x="39764" y="23.5679">gameengine</text></g><!--MD5=[69742786c97692da41924383d792a56d]
cluster gameengine.node--><g id="cluster_gameengine.node"><path d="M40849.5,1195.602 L40885.5,1195.602 A3.75,3.75 0 0 1 40888,1198.102 L40895,1220.6699 L45683.5,1220.6699 A2.5,2.5 0 0 1 45686,1223.1699 L45686,4162.102 A2.5,2.5 0 0 1 45683.5,4164.602 L40849.5,4164.602 A2.5,2.5 0 0 1 40847,4162.102 L40847,1198.102 A2.5,2.5 0 0 1 40849.5,1195.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="40847" x2="40895" y1="1220.6699" y2="1220.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="35" x="40851" y="1212.5679">node</text></g><!--MD5=[7d7a8e46fe9bf731b652aff3302eda4c]
cluster gameengine.node._3D--><g id="cluster_gameengine.node._3D"><path d="M43849.5,1991.602 L43874.5,1991.602 A3.75,3.75 0 0 1 43877,1994.102 L43884,2016.6699 L45659.5,2016.6699 A2.5,2.5 0 0 1 45662,2019.1699 L45662,4138.102 A2.5,2.5 0 0 1 45659.5,4140.602 L43849.5,4140.602 A2.5,2.5 0 0 1 43847,4138.102 L43847,1994.102 A2.5,2.5 0 0 1 43849.5,1991.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="43847" x2="43884" y1="2016.6699" y2="2016.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="24" x="43851" y="2008.5679">_3D</text></g><!--MD5=[fb06932d25d9cd344939db94e694de66]
cluster gameengine.node._2D--><g id="cluster_gameengine.node._2D"><path d="M40873.5,1991.602 L40898.5,1991.602 A3.75,3.75 0 0 1 40901,1994.102 L40908,2016.6699 L43820.5,2016.6699 A2.5,2.5 0 0 1 43823,2019.1699 L43823,3391.102 A2.5,2.5 0 0 1 43820.5,3393.602 L40873.5,3393.602 A2.5,2.5 0 0 1 40871,3391.102 L40871,1994.102 A2.5,2.5 0 0 1 40873.5,1991.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="40871" x2="40908" y1="2016.6699" y2="2016.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="24" x="40875" y="2008.5679">_2D</text></g><!--MD5=[e7a039f90400c1c4e746752acbc78bf3]
cluster gameengine.map--><g id="cluster_gameengine.map"><path d="M45122.5,83.102 L45154.5,83.102 A3.75,3.75 0 0 1 45157,85.602 L45164,108.1699 L45933.5,108.1699 A2.5,2.5 0 0 1 45936,110.6699 L45936,506.602 A2.5,2.5 0 0 1 45933.5,509.102 L45122.5,509.102 A2.5,2.5 0 0 1 45120,506.602 L45120,85.602 A2.5,2.5 0 0 1 45122.5,83.102 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="45120" x2="45164" y1="108.1699" y2="108.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="31" x="45124" y="100.0679">map</text></g><!--MD5=[99cd3379f71692488bba8e2520ac9d6e]
cluster gameengine.ex--><g id="cluster_gameengine.ex"><path d="M43360.5,216.602 L43377.5,216.602 A3.75,3.75 0 0 1 43380,219.102 L43387,241.6699 L43885.5,241.6699 A2.5,2.5 0 0 1 43888,244.1699 L43888,948.602 A2.5,2.5 0 0 1 43885.5,951.102 L43360.5,951.102 A2.5,2.5 0 0 1 43358,948.602 L43358,219.102 A2.5,2.5 0 0 1 43360.5,216.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="43358" x2="43387" y1="241.6699" y2="241.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="16" x="43362" y="233.5679">ex</text></g><!--MD5=[86e1be46e0197c507d214d96b69260e4]
cluster gameengine.audio--><g id="cluster_gameengine.audio"><path d="M39786.5,1319.602 L39826.5,1319.602 A3.75,3.75 0 0 1 39829,1322.102 L39836,1344.6699 L40820.5,1344.6699 A2.5,2.5 0 0 1 40823,1347.1699 L40823,1457.102 A2.5,2.5 0 0 1 40820.5,1459.602 L39786.5,1459.602 A2.5,2.5 0 0 1 39784,1457.102 L39784,1322.102 A2.5,2.5 0 0 1 39786.5,1319.602 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="39784" x2="39836" y1="1344.6699" y2="1344.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="39" x="39788" y="1336.5679">audio</text></g><!--MD5=[562f4d60ca1c61b03823192b657c8d8e]
class raylib.GlStateManager--><g id="elem_raylib.GlStateManager"><rect codeLine="9" fill="#F1F1F1" height="524.6979" id="raylib.GlStateManager" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="571" x="130.5" y="1867.602"/><ellipse cx="357.25" cy="1883.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M357.0469,1890.3364 Q354.5625,1890.3364 353.2344,1888.6957 Q351.9219,1887.0239 351.9219,1883.9145 Q351.9219,1880.7895 353.2344,1879.1332 Q354.5625,1877.477 357.0469,1877.477 Q357.7656,1877.477 358.4219,1877.6332 Q359.0625,1877.7895 359.625,1878.0864 L359.625,1880.8051 Q359.2656,1880.4614 358.9688,1880.2739 Q358.6719,1880.0707 358.4063,1879.9457 Q358.0938,1879.8051 357.7813,1879.7426 Q357.4844,1879.6801 357.1719,1879.6801 Q355.8438,1879.6801 355.1563,1880.7426 Q354.4688,1881.8364 354.4688,1883.9145 Q354.4688,1886.0082 355.1563,1887.0707 Q355.8438,1888.1489 357.1719,1888.1489 Q357.8125,1888.1489 358.4063,1887.8676 Q358.7031,1887.7426 358.9844,1887.5551 Q359.2813,1887.352 359.625,1887.0239 L359.625,1889.7426 Q359.0469,1890.0395 358.4063,1890.1957 Q357.7813,1890.3364 357.0469,1890.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="377.75" y="1889.034">GlStateManager</text><line style="stroke:#181818;stroke-width:0.5;" x1="131.5" x2="700.5" y1="1899.602" y2="1899.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="131.5" x2="700.5" y1="1907.602" y2="1907.602"/><ellipse cx="141.5" cy="1918.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="216" x="150.5" y="1926.5679">color(const RlColor&amp; color) : void</text><ellipse cx="141.5" cy="1937.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="545" x="150.5" y="1945.6358">color(unsigned char r, unsigned char g, unsigned char b, unsigned char a) : void</text><ellipse cx="141.5" cy="1956.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="273" x="150.5" y="1964.7038">color(float r, float g, float b, float a) : void</text><ellipse cx="141.5" cy="1975.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="150.5" y="1983.7717">color(unsigned char r, unsigned char g, unsigned char b) : void</text><ellipse cx="141.5" cy="1994.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="204" x="150.5" y="2002.8396">disableBackfaceCulling() : void</text><ellipse cx="141.5" cy="2013.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="171" x="150.5" y="2021.9075">disableColorBlend() : void</text><ellipse cx="141.5" cy="2033.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="173" x="150.5" y="2040.9754">disableDepthMask() : void</text><ellipse cx="141.5" cy="2052.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="166" x="150.5" y="2060.0433">disableDepthTest() : void</text><ellipse cx="141.5" cy="2071.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="172" x="150.5" y="2079.1113">disableScissorTest() : void</text><ellipse cx="141.5" cy="2090.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="150.5" y="2098.1792">disableSmoothLines() : void</text><ellipse cx="141.5" cy="2109.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="166" x="150.5" y="2117.2471">disableWireMode() : void</text><ellipse cx="141.5" cy="2128.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="201" x="150.5" y="2136.315">enableBackfaceCulling() : void</text><ellipse cx="141.5" cy="2147.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="168" x="150.5" y="2155.3829">enableColorBlend() : void</text><ellipse cx="141.5" cy="2166.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="150.5" y="2174.4508">enableDepthMask() : void</text><ellipse cx="141.5" cy="2185.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="163" x="150.5" y="2193.5188">enableDepthTest() : void</text><ellipse cx="141.5" cy="2204.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="169" x="150.5" y="2212.5867">enableScissorTest() : void</text><ellipse cx="141.5" cy="2223.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="150.5" y="2231.6546">enableSmoothLines() : void</text><ellipse cx="141.5" cy="2242.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="163" x="150.5" y="2250.7225">enableWireMode() : void</text><ellipse cx="141.5" cy="2261.8245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="117" x="150.5" y="2269.7904">popMatrix() : void</text><ellipse cx="141.5" cy="2280.8924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="125" x="150.5" y="2288.8583">pushMatrix() : void</text><ellipse cx="141.5" cy="2299.9603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="250" x="150.5" y="2307.9263">rotate(const Vector3f&amp; rotation) : void</text><ellipse cx="141.5" cy="2319.0282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="225" x="150.5" y="2326.9942">scale(const Vector3f&amp; scale) : void</text><ellipse cx="141.5" cy="2338.0962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="302" x="150.5" y="2346.0621">scissor(int x, int y, int width, int height) : void</text><ellipse cx="141.5" cy="2357.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="241" x="150.5" y="2365.13">scissor(const Rectangle&amp; rect) : void</text><ellipse cx="141.5" cy="2376.232" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="290" x="150.5" y="2384.1979">translate(const Vector3f&amp; translation) : void</text></g><!--MD5=[1069a8adf8bd5c0dfff5844a1b703547]
class raylib.Random--><g id="elem_raylib.Random"><rect codeLine="37" fill="#F1F1F1" height="200.5433" id="raylib.Random" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="410" x="737" y="2029.602"/><ellipse cx="909.75" cy="2045.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M909.5469,2052.3364 Q907.0625,2052.3364 905.7344,2050.6957 Q904.4219,2049.0239 904.4219,2045.9145 Q904.4219,2042.7895 905.7344,2041.1332 Q907.0625,2039.477 909.5469,2039.477 Q910.2656,2039.477 910.9219,2039.6332 Q911.5625,2039.7895 912.125,2040.0864 L912.125,2042.8051 Q911.7656,2042.4614 911.4688,2042.2739 Q911.1719,2042.0707 910.9063,2041.9457 Q910.5938,2041.8051 910.2813,2041.7426 Q909.9844,2041.6801 909.6719,2041.6801 Q908.3438,2041.6801 907.6563,2042.7426 Q906.9688,2043.8364 906.9688,2045.9145 Q906.9688,2048.0082 907.6563,2049.0707 Q908.3438,2050.1489 909.6719,2050.1489 Q910.3125,2050.1489 910.9063,2049.8676 Q911.2031,2049.7426 911.4844,2049.5551 Q911.7813,2049.352 912.125,2049.0239 L912.125,2051.7426 Q911.5469,2052.0395 910.9063,2052.1957 Q910.2813,2052.3364 909.5469,2052.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="930.25" y="2051.034">Random</text><line style="stroke:#181818;stroke-width:0.5;" x1="738" x2="1146" y1="2061.602" y2="2061.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="745" y="2069.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="251" x="757" y="2080.5679">_random_device : std::random_device</text><line style="stroke:#181818;stroke-width:0.5;" x1="738" x2="1146" y1="2088.6699" y2="2088.6699"/><ellipse cx="748" cy="2099.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="64" x="757" y="2107.6358">Random()</text><ellipse cx="748" cy="2118.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="292" x="757" y="2126.7038">generate(double min, double max) : double</text><ellipse cx="748" cy="2137.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="241" x="757" y="2145.7717">generate(float min, float max) : float</text><ellipse cx="748" cy="2156.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="757" y="2164.8396">generate(int min, int max) : int</text><ellipse cx="748" cy="2175.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="241" x="757" y="2183.9075">generate(long min, long max) : long</text><ellipse cx="748" cy="2195.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="256" x="757" y="2202.9754">generate(short min, short max) : short</text><ellipse cx="748" cy="2214.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="384" x="757" y="2222.0433">generateSizeT(std::size_t min, std::size_t max) : std::size_t</text></g><!--MD5=[9ab3681ae809c7ee68d2b8ebbb553aa2]
class raylib.RlCamera--><g id="elem_raylib.RlCamera"><rect codeLine="48" fill="#F1F1F1" height="543.7658" id="raylib.RlCamera" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1228" x="25991" y="2786.102"/><ellipse cx="26568.25" cy="2802.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M26568.0469,2808.8364 Q26565.5625,2808.8364 26564.2344,2807.1957 Q26562.9219,2805.5239 26562.9219,2802.4145 Q26562.9219,2799.2895 26564.2344,2797.6332 Q26565.5625,2795.977 26568.0469,2795.977 Q26568.7656,2795.977 26569.4219,2796.1332 Q26570.0625,2796.2895 26570.625,2796.5864 L26570.625,2799.3051 Q26570.2656,2798.9614 26569.9688,2798.7739 Q26569.6719,2798.5707 26569.4063,2798.4457 Q26569.0938,2798.3051 26568.7813,2798.2426 Q26568.4844,2798.1801 26568.1719,2798.1801 Q26566.8438,2798.1801 26566.1563,2799.2426 Q26565.4688,2800.3364 26565.4688,2802.4145 Q26565.4688,2804.5082 26566.1563,2805.5707 Q26566.8438,2806.6489 26568.1719,2806.6489 Q26568.8125,2806.6489 26569.4063,2806.3676 Q26569.7031,2806.2426 26569.9844,2806.0551 Q26570.2813,2805.852 26570.625,2805.5239 L26570.625,2808.2426 Q26570.0469,2808.5395 26569.4063,2808.6957 Q26568.7813,2808.8364 26568.0469,2808.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="65" x="26588.75" y="2807.534">RlCamera</text><line style="stroke:#181818;stroke-width:0.5;" x1="25992" x2="27218" y1="2818.102" y2="2818.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="25999" y="2826.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="26011" y="2837.0679">_camera : Camera3D</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="25999" y="2845.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="26011" y="2856.1358">_cameraMode : CameraMode</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="25999" y="2864.2378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="146" x="26011" y="2875.2038">_mode : CameraMode</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="25999" y="2883.3057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="26011" y="2894.2717">_projection : CameraProjection</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="25999" y="2902.3736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="26011" y="2913.3396">_lookingPoint : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="25999" y="2921.4416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="26011" y="2932.4075">_position : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="25999" y="2940.5095"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="26011" y="2951.4754">_target : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="25999" y="2959.5774"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="26011" y="2970.5433">_fovy : float</text><line style="stroke:#181818;stroke-width:0.5;" x1="25992" x2="27218" y1="2978.6453" y2="2978.6453"/><ellipse cx="26002" cy="2989.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="26011" y="2997.6113">RlCamera()</text><ellipse cx="26002" cy="3008.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1202" x="26011" y="3016.6792">RlCamera(const Vector3f&amp; position, const Vector3f&amp; target, const Vector3f&amp; lookingPoint, const float&amp; fovy, const CameraProjection&amp; projection, const CameraMode&amp; cameraMode)</text><ellipse cx="26002" cy="3027.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="26011" y="3035.7471">get() : Camera3D&amp; {query}</text><ellipse cx="26002" cy="3046.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="367" x="26011" y="3054.815">getConstructedCameraMode() : CameraMode&amp; {query}</text><ellipse cx="26002" cy="3065.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="233" x="26011" y="3073.8829">getMode() : CameraMode&amp; {query}</text><ellipse cx="26002" cy="3084.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="373" x="26011" y="3092.9508">getConstructedProjection() : CameraProjection&amp; {query}</text><ellipse cx="26002" cy="3104.0528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="123" x="26011" y="3112.0188">geMatrix() : Matrix</text><ellipse cx="26002" cy="3123.1207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="328" x="26011" y="3131.0867">getConstructedLookingPoint() : Vector3f&amp; {query}</text><ellipse cx="26002" cy="3142.1887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="295" x="26011" y="3150.1546">getConstructedPosition() : Vector3f&amp; {query}</text><ellipse cx="26002" cy="3161.2566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="286" x="26011" y="3169.2225">getConstructedTarget() : Vector3f&amp; {query}</text><ellipse cx="26002" cy="3180.3245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="246" x="26011" y="3188.2904">getConstructedFovy() : float&amp; {query}</text><ellipse cx="26002" cy="3199.3924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="26011" y="3207.3583">reset() : void</text><ellipse cx="26002" cy="3218.4603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="340" x="26011" y="3226.4263">setCameraMode(const CameraMode&amp; mode) : void</text><ellipse cx="26002" cy="3237.5282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="26011" y="3245.4942">setFov(const float&amp; fovy) : void</text><ellipse cx="26002" cy="3256.5962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="284" x="26011" y="3264.5621">setPosition(const Vector3f&amp; position) : void</text><ellipse cx="26002" cy="3275.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="376" x="26011" y="3283.63">setProjection(const CameraProjection&amp; projection) : void</text><ellipse cx="26002" cy="3294.732" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="262" x="26011" y="3302.6979">setTarget(const Vector3f&amp; target) : void</text><ellipse cx="26002" cy="3313.7999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="26011" y="3321.7658">update() : void</text></g><!--MD5=[f2f5f380f64d713e3d162bbf473d6463]
class raylib.RlColor--><g id="elem_raylib.RlColor"><rect codeLine="77" fill="#F1F1F1" height="1077.6675" id="raylib.RlColor" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="593" x="12701.5" y="3523.602"/><ellipse cx="12969.75" cy="3539.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M12969.5469,3546.3364 Q12967.0625,3546.3364 12965.7344,3544.6957 Q12964.4219,3543.0239 12964.4219,3539.9145 Q12964.4219,3536.7895 12965.7344,3535.1332 Q12967.0625,3533.477 12969.5469,3533.477 Q12970.2656,3533.477 12970.9219,3533.6332 Q12971.5625,3533.7895 12972.125,3534.0864 L12972.125,3536.8051 Q12971.7656,3536.4614 12971.4688,3536.2739 Q12971.1719,3536.0707 12970.9063,3535.9457 Q12970.5938,3535.8051 12970.2813,3535.7426 Q12969.9844,3535.6801 12969.6719,3535.6801 Q12968.3438,3535.6801 12967.6563,3536.7426 Q12966.9688,3537.8364 12966.9688,3539.9145 Q12966.9688,3542.0082 12967.6563,3543.0707 Q12968.3438,3544.1489 12969.6719,3544.1489 Q12970.3125,3544.1489 12970.9063,3543.8676 Q12971.2031,3543.7426 12971.4844,3543.5551 Q12971.7813,3543.352 12972.125,3543.0239 L12972.125,3545.7426 Q12971.5469,3546.0395 12970.9063,3546.1957 Q12970.2813,3546.3364 12969.5469,3546.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="48" x="12990.25" y="3545.034">RlColor</text><line style="stroke:#181818;stroke-width:0.5;" x1="12702.5" x2="13293.5" y1="3555.602" y2="3555.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12709.5" y="3563.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="12721.5" y="3574.5679">_color : Color</text><ellipse cx="12712.5" cy="3585.6699" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="178" x="12721.5" y="3593.6358">Beige : static const RlColor</text><ellipse cx="12712.5" cy="3604.7378" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="175" x="12721.5" y="3612.7038">Black : static const RlColor</text><ellipse cx="12712.5" cy="3623.8057" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="12721.5" y="3631.7717">Blue : static const RlColor</text><ellipse cx="12712.5" cy="3642.8736" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="12721.5" y="3650.8396">Brown : static const RlColor</text><ellipse cx="12712.5" cy="3661.9416" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="201" x="12721.5" y="3669.9075">DarkBlue : static const RlColor</text><ellipse cx="12712.5" cy="3681.0095" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="214" x="12721.5" y="3688.9754">DarkBrown : static const RlColor</text><ellipse cx="12712.5" cy="3700.0774" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="202" x="12721.5" y="3708.0433">DarkGray : static const RlColor</text><ellipse cx="12712.5" cy="3719.1453" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="212" x="12721.5" y="3727.1113">DarkGreen : static const RlColor</text><ellipse cx="12712.5" cy="3738.2132" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="215" x="12721.5" y="3746.1792">DarkPurple : static const RlColor</text><ellipse cx="12712.5" cy="3757.2812" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="171" x="12721.5" y="3765.2471">Gold : static const RlColor</text><ellipse cx="12712.5" cy="3776.3491" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="171" x="12721.5" y="3784.315">Gray : static const RlColor</text><ellipse cx="12712.5" cy="3795.417" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="181" x="12721.5" y="3803.3829">Green : static const RlColor</text><ellipse cx="12712.5" cy="3814.4849" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="205" x="12721.5" y="3822.4508">LightGray : static const RlColor</text><ellipse cx="12712.5" cy="3833.5528" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="172" x="12721.5" y="3841.5188">Lime : static const RlColor</text><ellipse cx="12712.5" cy="3852.6207" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="200" x="12721.5" y="3860.5867">Magenta : static const RlColor</text><ellipse cx="12712.5" cy="3871.6887" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="192" x="12721.5" y="3879.6546">Maroon : static const RlColor</text><ellipse cx="12712.5" cy="3890.7566" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="191" x="12721.5" y="3898.7225">Orange : static const RlColor</text><ellipse cx="12712.5" cy="3909.8245" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="168" x="12721.5" y="3917.7904">Pink : static const RlColor</text><ellipse cx="12712.5" cy="3928.8924" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="184" x="12721.5" y="3936.8583">Purple : static const RlColor</text><ellipse cx="12712.5" cy="3947.9603" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="203" x="12721.5" y="3955.9263">RayWhite : static const RlColor</text><ellipse cx="12712.5" cy="3967.0282" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="166" x="12721.5" y="3974.9942">Red : static const RlColor</text><ellipse cx="12712.5" cy="3986.0962" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="192" x="12721.5" y="3994.0621">SkyBlue : static const RlColor</text><ellipse cx="12712.5" cy="4005.1641" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="223" x="12721.5" y="4013.13">Transparent : static const RlColor</text><ellipse cx="12712.5" cy="4024.232" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="177" x="12721.5" y="4032.1979">Violet : static const RlColor</text><ellipse cx="12712.5" cy="4043.2999" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="179" x="12721.5" y="4051.2658">White : static const RlColor</text><ellipse cx="12712.5" cy="4062.3678" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="12721.5" y="4070.3338">Yellow : static const RlColor</text><line style="stroke:#181818;stroke-width:0.5;" x1="12702.5" x2="13293.5" y1="4078.4357" y2="4078.4357"/><ellipse cx="12712.5" cy="4089.4357" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="12721.5" y="4097.4017">RlColor(Color color)</text><ellipse cx="12712.5" cy="4108.5037" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="520" x="12721.5" y="4116.4696">RlColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)</text><ellipse cx="12712.5" cy="4127.5716" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="12721.5" y="4135.5375">RlColor(std::uint32_t color)</text><ellipse cx="12712.5" cy="4146.6395" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="276" x="12721.5" y="4154.6054">RlColor(const Vector4f&amp; normalizedColor)</text><ellipse cx="12712.5" cy="4165.7074" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="305" x="12721.5" y="4173.6733">RlColor(float hue, float saturation, float value)</text><ellipse cx="12712.5" cy="4184.7753" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="12721.5" y="4192.7413">getColor() : Color&amp; {query}</text><ellipse cx="12712.5" cy="4203.8432" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="282" x="12721.5" y="4211.8092">operator+(unsigned char value) : RlColor&amp;</text><ellipse cx="12712.5" cy="4222.9112" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="290" x="12721.5" y="4230.8771">operator+=(unsigned char value) : RlColor&amp;</text><ellipse cx="12712.5" cy="4241.9791" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="279" x="12721.5" y="4249.945">operator-(unsigned char value) : RlColor&amp;</text><ellipse cx="12712.5" cy="4261.047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="287" x="12721.5" y="4269.0129">operator-=(unsigned char value) : RlColor&amp;</text><ellipse cx="12712.5" cy="4280.1149" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="247" x="12721.5" y="4288.0808">setAlpha(unsigned char a) : RlColor&amp;</text><ellipse cx="12712.5" cy="4299.1828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="239" x="12721.5" y="4307.1488">setBlue(unsigned char b) : RlColor&amp;</text><ellipse cx="12712.5" cy="4318.2507" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="250" x="12721.5" y="4326.2167">setGreen(unsigned char g) : RlColor&amp;</text><ellipse cx="12712.5" cy="4337.3187" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="232" x="12721.5" y="4345.2846">setRed(unsigned char r) : RlColor&amp;</text><ellipse cx="12712.5" cy="4356.3866" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="12721.5" y="4364.3525">toHSV() : Vector3f</text><ellipse cx="12712.5" cy="4375.4545" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="12721.5" y="4383.4204">normalize() : Vector4f {query}</text><ellipse cx="12712.5" cy="4394.5224" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="296" x="12721.5" y="4402.4883">operator!=(const RlColor&amp; rhs) : bool {query}</text><ellipse cx="12712.5" cy="4413.5903" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="300" x="12721.5" y="4421.5563">operator==(const RlColor&amp; rhs) : bool {query}</text><ellipse cx="12712.5" cy="4432.6582" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="12721.5" y="4440.6242">toInteger() : std::uint32_t {query}</text><ellipse cx="12712.5" cy="4451.7262" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="242" x="12721.5" y="4459.6921">getAlpha() : unsigned char&amp; {query}</text><ellipse cx="12712.5" cy="4470.7941" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="233" x="12721.5" y="4478.76">getBlue() : unsigned char&amp; {query}</text><ellipse cx="12712.5" cy="4489.862" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="244" x="12721.5" y="4497.8279">getGreen() : unsigned char&amp; {query}</text><ellipse cx="12712.5" cy="4508.9299" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="229" x="12721.5" y="4516.8958">getRed() : unsigned char&amp; {query}</text><ellipse cx="12712.5" cy="4527.9978" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="158" x="12721.5" y="4535.9638">alpha(float alpha) : void</text><ellipse cx="12712.5" cy="4547.0657" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="380" x="12721.5" y="4555.0317">alphaBlend(const RlColor&amp; src, const RlColor&amp; tint) : void</text><ellipse cx="12712.5" cy="4566.1337" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="567" x="12721.5" y="4574.0996">setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a) : void</text><ellipse cx="12712.5" cy="4585.2016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="225" x="12721.5" y="4593.1675">setColor(const Color&amp; color) : void</text></g><!--MD5=[b50c075f80b10262884e7ec27bc531ec]
class raylib.Vector2--><g id="elem_raylib.Vector2"><rect codeLine="134" fill="#F1F1F1" height="162.4075" id="raylib.Vector2" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="366" x="1182" y="2049.102"/><ellipse cx="1271.25" cy="2065.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1271.0469,2071.8364 Q1268.5625,2071.8364 1267.2344,2070.1957 Q1265.9219,2068.5239 1265.9219,2065.4145 Q1265.9219,2062.2895 1267.2344,2060.6332 Q1268.5625,2058.977 1271.0469,2058.977 Q1271.7656,2058.977 1272.4219,2059.1332 Q1273.0625,2059.2895 1273.625,2059.5864 L1273.625,2062.3051 Q1273.2656,2061.9614 1272.9688,2061.7739 Q1272.6719,2061.5707 1272.4063,2061.4457 Q1272.0938,2061.3051 1271.7813,2061.2426 Q1271.4844,2061.1801 1271.1719,2061.1801 Q1269.8438,2061.1801 1269.1563,2062.2426 Q1268.4688,2063.3364 1268.4688,2065.4145 Q1268.4688,2067.5082 1269.1563,2068.5707 Q1269.8438,2069.6489 1271.1719,2069.6489 Q1271.8125,2069.6489 1272.4063,2069.3676 Q1272.7031,2069.2426 1272.9844,2069.0551 Q1273.2813,2068.852 1273.625,2068.5239 L1273.625,2071.2426 Q1273.0469,2071.5395 1272.4063,2071.6957 Q1271.7813,2071.8364 1271.0469,2071.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="50" x="1291.75" y="2070.534">Vector2</text><rect fill="#FFFFFF" height="18.3441" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="127" x="1424" y="2046.102"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="125" x="1425" y="2059.9301">template&lt;typename T&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="1183" x2="1547" y1="2081.102" y2="2081.102"/><ellipse cx="1193" cy="2092.102" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="1202" y="2100.0679">x : T</text><ellipse cx="1193" cy="2111.1699" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="1202" y="2119.1358">y : T</text><line style="stroke:#181818;stroke-width:0.5;" x1="1183" x2="1547" y1="2127.2378" y2="2127.2378"/><ellipse cx="1193" cy="2138.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="58" x="1202" y="2146.2038">Vector2()</text><ellipse cx="1193" cy="2157.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="104" x="1202" y="2165.2717">Vector2(T x, T y)</text><ellipse cx="1193" cy="2176.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="336" x="1202" y="2184.3396">operator!=(const Vector2&lt;T&gt;&amp; other) : bool {query}</text><ellipse cx="1193" cy="2195.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="340" x="1202" y="2203.4075">operator==(const Vector2&lt;T&gt;&amp; other) : bool {query}</text></g><!--MD5=[2276c85978bc3f01be17943659f1d083]
class raylib.Vector3--><g id="elem_raylib.Vector3"><rect codeLine="143" fill="#F1F1F1" height="181.4754" id="raylib.Vector3" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="366" x="233" y="2967.602"/><ellipse cx="322.25" cy="2983.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M322.0469,2990.3364 Q319.5625,2990.3364 318.2344,2988.6957 Q316.9219,2987.0239 316.9219,2983.9145 Q316.9219,2980.7895 318.2344,2979.1332 Q319.5625,2977.477 322.0469,2977.477 Q322.7656,2977.477 323.4219,2977.6332 Q324.0625,2977.7895 324.625,2978.0864 L324.625,2980.8051 Q324.2656,2980.4614 323.9688,2980.2739 Q323.6719,2980.0707 323.4063,2979.9457 Q323.0938,2979.8051 322.7813,2979.7426 Q322.4844,2979.6801 322.1719,2979.6801 Q320.8438,2979.6801 320.1563,2980.7426 Q319.4688,2981.8364 319.4688,2983.9145 Q319.4688,2986.0082 320.1563,2987.0707 Q320.8438,2988.1489 322.1719,2988.1489 Q322.8125,2988.1489 323.4063,2987.8676 Q323.7031,2987.7426 323.9844,2987.5551 Q324.2813,2987.352 324.625,2987.0239 L324.625,2989.7426 Q324.0469,2990.0395 323.4063,2990.1957 Q322.7813,2990.3364 322.0469,2990.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="50" x="342.75" y="2989.034">Vector3</text><rect fill="#FFFFFF" height="18.3441" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="127" x="475" y="2964.602"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="125" x="476" y="2978.4301">template&lt;typename T&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="234" x2="598" y1="2999.602" y2="2999.602"/><ellipse cx="244" cy="3010.602" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="253" y="3018.5679">x : T</text><ellipse cx="244" cy="3029.6699" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="253" y="3037.6358">y : T</text><ellipse cx="244" cy="3048.7378" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="253" y="3056.7038">z : T</text><line style="stroke:#181818;stroke-width:0.5;" x1="234" x2="598" y1="3064.8057" y2="3064.8057"/><ellipse cx="244" cy="3075.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="58" x="253" y="3083.7717">Vector3()</text><ellipse cx="244" cy="3094.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="253" y="3102.8396">Vector3(T x, T y, T z)</text><ellipse cx="244" cy="3113.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="336" x="253" y="3121.9075">operator!=(const Vector3&lt;T&gt;&amp; other) : bool {query}</text><ellipse cx="244" cy="3133.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="340" x="253" y="3140.9754">operator==(const Vector3&lt;T&gt;&amp; other) : bool {query}</text></g><!--MD5=[c79ba26e6db5c6c137ad6311257236a9]
class raylib.Vector4--><g id="elem_raylib.Vector4"><rect codeLine="153" fill="#F1F1F1" height="200.5433" id="raylib.Vector4" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="342" x="634" y="2957.602"/><ellipse cx="711.25" cy="2973.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M711.0469,2980.3364 Q708.5625,2980.3364 707.2344,2978.6957 Q705.9219,2977.0239 705.9219,2973.9145 Q705.9219,2970.7895 707.2344,2969.1332 Q708.5625,2967.477 711.0469,2967.477 Q711.7656,2967.477 712.4219,2967.6332 Q713.0625,2967.7895 713.625,2968.0864 L713.625,2970.8051 Q713.2656,2970.4614 712.9688,2970.2739 Q712.6719,2970.0707 712.4063,2969.9457 Q712.0938,2969.8051 711.7813,2969.7426 Q711.4844,2969.6801 711.1719,2969.6801 Q709.8438,2969.6801 709.1563,2970.7426 Q708.4688,2971.8364 708.4688,2973.9145 Q708.4688,2976.0082 709.1563,2977.0707 Q709.8438,2978.1489 711.1719,2978.1489 Q711.8125,2978.1489 712.4063,2977.8676 Q712.7031,2977.7426 712.9844,2977.5551 Q713.2813,2977.352 713.625,2977.0239 L713.625,2979.7426 Q713.0469,2980.0395 712.4063,2980.1957 Q711.7813,2980.3364 711.0469,2980.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="50" x="731.75" y="2979.034">Vector4</text><rect fill="#FFFFFF" height="18.3441" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="127" x="852" y="2954.602"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="125" x="853" y="2968.4301">template&lt;typename T&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="635" x2="975" y1="2989.602" y2="2989.602"/><ellipse cx="645" cy="3000.602" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="31" x="654" y="3008.5679">w : T</text><ellipse cx="645" cy="3019.6699" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="654" y="3027.6358">x : T</text><ellipse cx="645" cy="3038.7378" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="654" y="3046.7038">y : T</text><ellipse cx="645" cy="3057.8057" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="654" y="3065.7717">z : T</text><line style="stroke:#181818;stroke-width:0.5;" x1="635" x2="975" y1="3073.8736" y2="3073.8736"/><ellipse cx="645" cy="3084.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="58" x="654" y="3092.8396">Vector4()</text><ellipse cx="645" cy="3103.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="654" y="3111.9075">Vector4(T x, T y, T z, T w)</text><ellipse cx="645" cy="3123.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="312" x="654" y="3130.9754">operator!=(const Vector4&amp; other) : bool {query}</text><ellipse cx="645" cy="3142.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="316" x="654" y="3150.0433">operator==(const Vector4&amp; other) : bool {query}</text></g><!--MD5=[c90c0145e5e403502970efe32264e1f9]
class raylib.window.RlWindow--><g id="elem_raylib.window.RlWindow"><rect codeLine="165" fill="#F1F1F1" height="925.1242" id="raylib.window.RlWindow" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="512" x="26665" y="1667.602"/><ellipse cx="26883.25" cy="1683.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M26883.0469,1690.3364 Q26880.5625,1690.3364 26879.2344,1688.6957 Q26877.9219,1687.0239 26877.9219,1683.9145 Q26877.9219,1680.7895 26879.2344,1679.1332 Q26880.5625,1677.477 26883.0469,1677.477 Q26883.7656,1677.477 26884.4219,1677.6332 Q26885.0625,1677.7895 26885.625,1678.0864 L26885.625,1680.8051 Q26885.2656,1680.4614 26884.9688,1680.2739 Q26884.6719,1680.0707 26884.4063,1679.9457 Q26884.0938,1679.8051 26883.7813,1679.7426 Q26883.4844,1679.6801 26883.1719,1679.6801 Q26881.8438,1679.6801 26881.1563,1680.7426 Q26880.4688,1681.8364 26880.4688,1683.9145 Q26880.4688,1686.0082 26881.1563,1687.0707 Q26881.8438,1688.1489 26883.1719,1688.1489 Q26883.8125,1688.1489 26884.4063,1687.8676 Q26884.7031,1687.7426 26884.9844,1687.5551 Q26885.2813,1687.352 26885.625,1687.0239 L26885.625,1689.7426 Q26885.0469,1690.0395 26884.4063,1690.1957 Q26883.7813,1690.3364 26883.0469,1690.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="67" x="26903.75" y="1689.034">RlWindow</text><line style="stroke:#181818;stroke-width:0.5;" x1="26666" x2="27176" y1="1699.602" y2="1699.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="26673" y="1707.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="26685" y="1718.5679">_isCreated : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="26673" y="1726.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="26685" y="1737.6358">_isOpen : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="26673" y="1745.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="26685" y="1756.7038">_height : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="26673" y="1764.8057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="26685" y="1775.7717">_minHeight : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="26673" y="1783.8736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="26685" y="1794.8396">_minWidth : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="26673" y="1802.9416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="26685" y="1813.9075">_width : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="26673" y="1822.0095"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="179" x="26685" y="1832.9754">_camera : raylib::RlCamera</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="26673" y="1841.0774"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="300" x="26685" y="1852.0433">_instance : static std::shared_ptr&lt;RlWindow&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="26673" y="1860.1453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="26685" y="1871.1113">_title : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="26666" x2="27176" y1="1879.2132" y2="1879.2132"/><ellipse cx="26676" cy="1890.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="26685" y="1898.1792">RlWindow()</text><ellipse cx="26676" cy="1909.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="26685" y="1917.2471">~RlWindow()</text><ellipse cx="26676" cy="1928.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="266" x="26685" y="1936.315">hasState(const ConfigFlags&amp; flag) : bool</text><ellipse cx="26676" cy="1947.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="115" x="26685" y="1955.3829">isFocused() : bool</text><ellipse cx="26676" cy="1966.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="26685" y="1974.4508">isFullScreen() : bool</text><ellipse cx="26676" cy="1985.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="26685" y="1993.5188">isHidden() : bool</text><ellipse cx="26676" cy="2004.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="133" x="26685" y="2012.5867">isMaximized() : bool</text><ellipse cx="26676" cy="2023.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="26685" y="2031.6546">isMinimized() : bool</text><ellipse cx="26676" cy="2042.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="26685" y="2050.7225">isOpen() : bool</text><ellipse cx="26676" cy="2061.8245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="26685" y="2069.7904">isReady() : bool</text><ellipse cx="26676" cy="2080.8924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="26685" y="2088.8583">isResized() : bool</text><ellipse cx="26676" cy="2099.9603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="26685" y="2107.9263">isIsCreated() : bool&amp; {query}</text><ellipse cx="26676" cy="2119.0282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="168" x="26685" y="2126.9942">getHeight() : int&amp; {query}</text><ellipse cx="26676" cy="2138.0962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="194" x="26685" y="2146.0621">getMinHeight() : int&amp; {query}</text><ellipse cx="26676" cy="2157.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="189" x="26685" y="2165.13">getMinWidth() : int&amp; {query}</text><ellipse cx="26676" cy="2176.232" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="163" x="26685" y="2184.1979">getWidth() : int&amp; {query}</text><ellipse cx="26676" cy="2195.2999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="215" x="26685" y="2203.2658">getCamera() : raylib::RlCamera&amp;</text><ellipse cx="26676" cy="2214.3678" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="268" x="26685" y="2222.3338">getCamera() : raylib::RlCamera&amp; {query}</text><ellipse cx="26676" cy="2233.4357" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="295" x="26685" y="2241.4017">getInstance() : std::shared_ptr&lt;RlWindow&gt;&amp;</text><ellipse cx="26676" cy="2252.5037" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="26685" y="2260.4696">getTitle() : std::string&amp; {query}</text><ellipse cx="26676" cy="2271.5716" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="238" x="26685" y="2279.5375">clearState(unsigned int flags) : void</text><ellipse cx="26676" cy="2290.6395" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="26685" y="2298.6054">createWindow(const std::string&amp; title, int width, int height, int fps) : void</text><ellipse cx="26676" cy="2309.7074" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="26685" y="2317.6733">maximize() : void</text><ellipse cx="26676" cy="2328.7753" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="26685" y="2336.7413">minimize() : void</text><ellipse cx="26676" cy="2347.8432" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="26685" y="2355.8092">restore() : void</text><ellipse cx="26676" cy="2366.9112" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="289" x="26685" y="2374.8771">setCamera(const RlCamera&amp; camera) : void</text><ellipse cx="26676" cy="2385.9791" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="270" x="26685" y="2393.945">setConfigFlags(unsigned int flags) : void</text><ellipse cx="26676" cy="2405.047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="299" x="26685" y="2413.0129">setIcon(const image::RlImage&amp; image) : void</text><ellipse cx="26676" cy="2424.1149" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="248" x="26685" y="2432.0808">setIsOpen(const bool&amp; isOpen) : void</text><ellipse cx="26676" cy="2443.1828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="255" x="26685" y="2451.1488">setMinSize(int width, int height) : void</text><ellipse cx="26676" cy="2462.2507" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="26685" y="2470.2167">setMonitor(int monitor) : void</text><ellipse cx="26676" cy="2481.3187" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="187" x="26685" y="2489.2846">setPosition(int x, int y) : void</text><ellipse cx="26676" cy="2500.3866" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="229" x="26685" y="2508.3525">setSize(int width, int height) : void</text><ellipse cx="26676" cy="2519.4545" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="225" x="26685" y="2527.4204">setState(unsigned int flags) : void</text><ellipse cx="26676" cy="2538.5224" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="246" x="26685" y="2546.4883">setTitle(const std::string&amp; title) : void</text><ellipse cx="26676" cy="2557.5903" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="335" x="26685" y="2565.5563">takeScreenshot(const std::string&amp; fileName) : void</text><ellipse cx="26676" cy="2576.6582" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="160" x="26685" y="2584.6242">toggleFullscreen() : void</text></g><!--MD5=[7205982789043c7c272c32a3ef0e4818]
class raylib.window.System--><g id="elem_raylib.window.System"><rect codeLine="214" fill="#F1F1F1" height="391.2225" id="raylib.window.System" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="369" x="26260.5" y="1934.602"/><ellipse cx="26416.75" cy="1950.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M26416.5469,1957.3364 Q26414.0625,1957.3364 26412.7344,1955.6957 Q26411.4219,1954.0239 26411.4219,1950.9145 Q26411.4219,1947.7895 26412.7344,1946.1332 Q26414.0625,1944.477 26416.5469,1944.477 Q26417.2656,1944.477 26417.9219,1944.6332 Q26418.5625,1944.7895 26419.125,1945.0864 L26419.125,1947.8051 Q26418.7656,1947.4614 26418.4688,1947.2739 Q26418.1719,1947.0707 26417.9063,1946.9457 Q26417.5938,1946.8051 26417.2813,1946.7426 Q26416.9844,1946.6801 26416.6719,1946.6801 Q26415.3438,1946.6801 26414.6563,1947.7426 Q26413.9688,1948.8364 26413.9688,1950.9145 Q26413.9688,1953.0082 26414.6563,1954.0707 Q26415.3438,1955.1489 26416.6719,1955.1489 Q26417.3125,1955.1489 26417.9063,1954.8676 Q26418.2031,1954.7426 26418.4844,1954.5551 Q26418.7813,1954.352 26419.125,1954.0239 L26419.125,1956.7426 Q26418.5469,1957.0395 26417.9063,1957.1957 Q26417.2813,1957.3364 26416.5469,1957.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="48" x="26437.25" y="1956.034">System</text><line style="stroke:#181818;stroke-width:0.5;" x1="26261.5" x2="26628.5" y1="1966.602" y2="1966.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="26261.5" x2="26628.5" y1="1974.602" y2="1974.602"/><ellipse cx="26271.5" cy="1985.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="316" x="26280.5" y="1993.5679">getMonitorPosition(int monitorIndex) : Vector2f</text><ellipse cx="26271.5" cy="2004.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="204" x="26280.5" y="2012.6358">getWindowPosition() : Vector2f</text><ellipse cx="26271.5" cy="2023.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="209" x="26280.5" y="2031.7038">getWindowScaleDPI() : Vector2f</text><ellipse cx="26271.5" cy="2042.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="343" x="26280.5" y="2050.7717">getMonitorPhysicalSize(int monitorIndex) : Vector2i</text><ellipse cx="26271.5" cy="2061.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="289" x="26280.5" y="2069.8396">getMonitorSize(int monitorIndex) : Vector2i</text><ellipse cx="26271.5" cy="2080.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="169" x="26280.5" y="2088.9075">getScreenSize() : Vector2i</text><ellipse cx="26271.5" cy="2100.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="165" x="26280.5" y="2107.9754">getCurrentMonitor() : int</text><ellipse cx="26271.5" cy="2119.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="153" x="26280.5" y="2127.0433">getMonitorCount() : int</text><ellipse cx="26271.5" cy="2138.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="271" x="26280.5" y="2146.1113">getMonitorHeight(int monitorIndex) : int</text><ellipse cx="26271.5" cy="2157.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="325" x="26280.5" y="2165.1792">getMonitorPhysicalHeight(int monitorIndex) : int</text><ellipse cx="26271.5" cy="2176.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="320" x="26280.5" y="2184.2471">getMonitorPhysicalWidth(int monitorIndex) : int</text><ellipse cx="26271.5" cy="2195.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="308" x="26280.5" y="2203.315">getMonitorRefreshRate(int monitorIndex) : int</text><ellipse cx="26271.5" cy="2214.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="266" x="26280.5" y="2222.3829">getMonitorWidth(int monitorIndex) : int</text><ellipse cx="26271.5" cy="2233.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="151" x="26280.5" y="2241.4508">getScreenHeight() : int</text><ellipse cx="26271.5" cy="2252.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="146" x="26280.5" y="2260.5188">getScreenWidth() : int</text><ellipse cx="26271.5" cy="2271.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="205" x="26280.5" y="2279.5867">getClipboardText() : std::string</text><ellipse cx="26271.5" cy="2290.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="317" x="26280.5" y="2298.6546">getMonitorName(int monitorIndex) : std::string</text><ellipse cx="26271.5" cy="2309.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="310" x="26280.5" y="2317.7225">setClipboardText(const std::string&amp; text) : void</text></g><!--MD5=[fc44ad1c963e96c4734aeb4fba4ea08d]
class raylib.texture.RlRenderTexture--><g id="elem_raylib.texture.RlRenderTexture"><rect codeLine="237" fill="#F1F1F1" height="124.2717" id="raylib.texture.RlRenderTexture" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="349" x="12317.5" y="4000.602"/><ellipse cx="12431.25" cy="4016.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M12431.0469,4023.3364 Q12428.5625,4023.3364 12427.2344,4021.6957 Q12425.9219,4020.0239 12425.9219,4016.9145 Q12425.9219,4013.7895 12427.2344,4012.1332 Q12428.5625,4010.477 12431.0469,4010.477 Q12431.7656,4010.477 12432.4219,4010.6332 Q12433.0625,4010.7895 12433.625,4011.0864 L12433.625,4013.8051 Q12433.2656,4013.4614 12432.9688,4013.2739 Q12432.6719,4013.0707 12432.4063,4012.9457 Q12432.0938,4012.8051 12431.7813,4012.7426 Q12431.4844,4012.6801 12431.1719,4012.6801 Q12429.8438,4012.6801 12429.1563,4013.7426 Q12428.4688,4014.8364 12428.4688,4016.9145 Q12428.4688,4019.0082 12429.1563,4020.0707 Q12429.8438,4021.1489 12431.1719,4021.1489 Q12431.8125,4021.1489 12432.4063,4020.8676 Q12432.7031,4020.7426 12432.9844,4020.5551 Q12433.2813,4020.352 12433.625,4020.0239 L12433.625,4022.7426 Q12433.0469,4023.0395 12432.4063,4023.1957 Q12431.7813,4023.3364 12431.0469,4023.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="12451.75" y="4022.034">RlRenderTexture</text><line style="stroke:#181818;stroke-width:0.5;" x1="12318.5" x2="12665.5" y1="4032.602" y2="4032.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12325.5" y="4040.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="233" x="12337.5" y="4051.5679">_renderTexture : RenderTexture2D</text><line style="stroke:#181818;stroke-width:0.5;" x1="12318.5" x2="12665.5" y1="4059.6699" y2="4059.6699"/><ellipse cx="12328.5" cy="4070.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="255" x="12337.5" y="4078.6358">RlRenderTexture(int width, int height)</text><ellipse cx="12328.5" cy="4089.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="12337.5" y="4097.7038">~RlRenderTexture()</text><ellipse cx="12328.5" cy="4108.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="323" x="12337.5" y="4116.7717">getRenderTexture() : RenderTexture2D&amp; {query}</text></g><!--MD5=[7379ad9370be35f6a7d5c3a27ad4c3cd]
class raylib.texture.RlTexture--><g id="elem_raylib.texture.RlTexture"><rect codeLine="244" fill="#F1F1F1" height="448.4263" id="raylib.texture.RlTexture" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="512" x="11770" y="3838.602"/><ellipse cx="11989.75" cy="3854.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M11989.5469,3861.3364 Q11987.0625,3861.3364 11985.7344,3859.6957 Q11984.4219,3858.0239 11984.4219,3854.9145 Q11984.4219,3851.7895 11985.7344,3850.1332 Q11987.0625,3848.477 11989.5469,3848.477 Q11990.2656,3848.477 11990.9219,3848.6332 Q11991.5625,3848.7895 11992.125,3849.0864 L11992.125,3851.8051 Q11991.7656,3851.4614 11991.4688,3851.2739 Q11991.1719,3851.0707 11990.9063,3850.9457 Q11990.5938,3850.8051 11990.2813,3850.7426 Q11989.9844,3850.6801 11989.6719,3850.6801 Q11988.3438,3850.6801 11987.6563,3851.7426 Q11986.9688,3852.8364 11986.9688,3854.9145 Q11986.9688,3857.0082 11987.6563,3858.0707 Q11988.3438,3859.1489 11989.6719,3859.1489 Q11990.3125,3859.1489 11990.9063,3858.8676 Q11991.2031,3858.7426 11991.4844,3858.5551 Q11991.7813,3858.352 11992.125,3858.0239 L11992.125,3860.7426 Q11991.5469,3861.0395 11990.9063,3861.1957 Q11990.2813,3861.3364 11989.5469,3861.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="64" x="12010.25" y="3860.034">RlTexture</text><line style="stroke:#181818;stroke-width:0.5;" x1="11771" x2="12281" y1="3870.602" y2="3870.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11778" y="3878.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="11790" y="3889.5679">_textureRec : Rectangle</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11778" y="3897.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="135" x="11790" y="3908.6358">_texture : Texture2D</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11778" y="3916.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="165" x="11790" y="3927.7038">_texturePath : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="11771" x2="12281" y1="3935.8057" y2="3935.8057"/><ellipse cx="11781" cy="3946.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="256" x="11790" y="3954.7717">RlTexture(const std::string&amp; fileName)</text><ellipse cx="11781" cy="3965.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="274" x="11790" y="3973.8396">RlTexture(const image::RlImage&amp; image)</text><ellipse cx="11781" cy="3984.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="11790" y="3992.9075">RlTexture(const image::RlImage&amp; image, const CubemapLayout&amp; layout)</text><ellipse cx="11781" cy="4004.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="11790" y="4011.9754">~RlTexture()</text><ellipse cx="11781" cy="4023.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="247" x="11790" y="4031.0433">getTextureRec() : Rectangle&amp; {query}</text><ellipse cx="11781" cy="4042.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="174" x="11790" y="4050.1113">get() : Texture2D&amp; {query}</text><ellipse cx="11781" cy="4061.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="172" x="11790" y="4069.1792">getTexture() : Texture2D&amp;</text><ellipse cx="11781" cy="4080.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="11790" y="4088.2471">getFormat() : int&amp; {query}</text><ellipse cx="11781" cy="4099.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="168" x="11790" y="4107.315">getHeight() : int&amp; {query}</text><ellipse cx="11781" cy="4118.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="186" x="11790" y="4126.3829">getMipmaps() : int&amp; {query}</text><ellipse cx="11781" cy="4137.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="163" x="11790" y="4145.4508">getWidth() : int&amp; {query}</text><ellipse cx="11781" cy="4156.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="204" x="11790" y="4164.5188">getPath() : std::string&amp; {query}</text><ellipse cx="11781" cy="4175.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="206" x="11790" y="4183.5867">getID() : unsigned int&amp; {query}</text><ellipse cx="11781" cy="4194.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="11790" y="4202.6546">genTextureMipmaps() : void</text><ellipse cx="11781" cy="4213.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="273" x="11790" y="4221.7225">setFilter(const TextureFilter&amp; filter) : void</text><ellipse cx="11781" cy="4232.8245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="279" x="11790" y="4240.7904">setWrap(const TextureWrap&amp; wrap) : void</text><ellipse cx="11781" cy="4251.8924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="215" x="11790" y="4259.8583">update(const void* pixels) : void</text><ellipse cx="11781" cy="4270.9603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="394" x="11790" y="4278.9263">updateRect(const Rectangle&amp; rec, const void* pixels) : void</text></g><!--MD5=[bc479f3e982e72a86dbb927c603cf7ff]
class raylib.text.RlFont--><g id="elem_raylib.text.RlFont"><rect codeLine="270" fill="#F1F1F1" height="314.9508" id="raylib.text.RlFont" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="945" x="13533.5" y="3905.102"/><ellipse cx="13980.75" cy="3921.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M13980.5469,3927.8364 Q13978.0625,3927.8364 13976.7344,3926.1957 Q13975.4219,3924.5239 13975.4219,3921.4145 Q13975.4219,3918.2895 13976.7344,3916.6332 Q13978.0625,3914.977 13980.5469,3914.977 Q13981.2656,3914.977 13981.9219,3915.1332 Q13982.5625,3915.2895 13983.125,3915.5864 L13983.125,3918.3051 Q13982.7656,3917.9614 13982.4688,3917.7739 Q13982.1719,3917.5707 13981.9063,3917.4457 Q13981.5938,3917.3051 13981.2813,3917.2426 Q13980.9844,3917.1801 13980.6719,3917.1801 Q13979.3438,3917.1801 13978.6563,3918.2426 Q13977.9688,3919.3364 13977.9688,3921.4145 Q13977.9688,3923.5082 13978.6563,3924.5707 Q13979.3438,3925.6489 13980.6719,3925.6489 Q13981.3125,3925.6489 13981.9063,3925.3676 Q13982.2031,3925.2426 13982.4844,3925.0551 Q13982.7813,3924.852 13983.125,3924.5239 L13983.125,3927.2426 Q13982.5469,3927.5395 13981.9063,3927.6957 Q13981.2813,3927.8364 13980.5469,3927.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="42" x="14001.25" y="3926.534">RlFont</text><line style="stroke:#181818;stroke-width:0.5;" x1="13534.5" x2="14477.5" y1="3937.102" y2="3937.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="13541.5" y="3945.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="13553.5" y="3956.0679">_font : Font</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="13541.5" y="3964.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="13553.5" y="3975.1358">_fontSize : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="13541.5" y="3983.2378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="13553.5" y="3994.2038">_fontPath : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="13534.5" x2="14477.5" y1="4002.3057" y2="4002.3057"/><ellipse cx="13544.5" cy="4013.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="50" x="13553.5" y="4021.2717">RlFont()</text><ellipse cx="13544.5" cy="4032.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="230" x="13553.5" y="4040.3396">RlFont(const std::string&amp; fontPath)</text><ellipse cx="13544.5" cy="4051.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="13553.5" y="4059.4075">RlFont(const int&amp; fontSize)</text><ellipse cx="13544.5" cy="4070.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="626" x="13553.5" y="4078.4754">RlFont(const std::string&amp; fontPath, const int&amp; fontSize, int* fontChars, const int&amp; glyphCount)</text><ellipse cx="13544.5" cy="4089.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="523" x="13553.5" y="4097.5433">RlFont(const image::RlImage&amp; image, const RlColor&amp; key, const int&amp; firstChar)</text><ellipse cx="13544.5" cy="4108.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="919" x="13553.5" y="4116.6113">RlFont(const std::string&amp; fileType, const unsigned char* fileData, int dataSize, const int&amp; fontSize, int* fontChars, const int&amp; glyphCount)</text><ellipse cx="13544.5" cy="4127.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="58" x="13553.5" y="4135.6792">~RlFont()</text><ellipse cx="13544.5" cy="4146.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="163" x="13553.5" y="4154.7471">getFont() : Font&amp; {query}</text><ellipse cx="13544.5" cy="4165.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="169" x="13553.5" y="4173.815">getFontSize() : int {query}</text><ellipse cx="13544.5" cy="4184.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="280" x="13553.5" y="4192.8829">getDefaultFont() : std::shared_ptr&lt;RlFont&gt;</text><ellipse cx="13544.5" cy="4203.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="233" x="13553.5" y="4211.9508">getFontPath() : std::string&amp; {query}</text></g><!--MD5=[a08e6e857956ab5fef281e57096395c2]
class raylib.text.RlText--><g id="elem_raylib.text.RlText"><rect codeLine="287" fill="#F1F1F1" height="620.0375" id="raylib.text.RlText" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="821" x="13845.5" y="2748.102"/><ellipse cx="14231.25" cy="2764.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M14231.0469,2770.8364 Q14228.5625,2770.8364 14227.2344,2769.1957 Q14225.9219,2767.5239 14225.9219,2764.4145 Q14225.9219,2761.2895 14227.2344,2759.6332 Q14228.5625,2757.977 14231.0469,2757.977 Q14231.7656,2757.977 14232.4219,2758.1332 Q14233.0625,2758.2895 14233.625,2758.5864 L14233.625,2761.3051 Q14233.2656,2760.9614 14232.9688,2760.7739 Q14232.6719,2760.5707 14232.4063,2760.4457 Q14232.0938,2760.3051 14231.7813,2760.2426 Q14231.4844,2760.1801 14231.1719,2760.1801 Q14229.8438,2760.1801 14229.1563,2761.2426 Q14228.4688,2762.3364 14228.4688,2764.4145 Q14228.4688,2766.5082 14229.1563,2767.5707 Q14229.8438,2768.6489 14231.1719,2768.6489 Q14231.8125,2768.6489 14232.4063,2768.3676 Q14232.7031,2768.2426 14232.9844,2768.0551 Q14233.2813,2767.852 14233.625,2767.5239 L14233.625,2770.2426 Q14233.0469,2770.5395 14232.4063,2770.6957 Q14231.7813,2770.8364 14231.0469,2770.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="41" x="14251.75" y="2769.534">RlText</text><line style="stroke:#181818;stroke-width:0.5;" x1="13846.5" x2="14665.5" y1="2780.102" y2="2780.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="13853.5" y="2788.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="13865.5" y="2799.0679">_color : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="13853.5" y="2807.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="13865.5" y="2818.1358">_origin : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="13853.5" y="2826.2378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="13865.5" y="2837.2038">_position : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="13853.5" y="2845.3057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="13865.5" y="2856.2717">_fontSize : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="13853.5" y="2864.3736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="13865.5" y="2875.3396">_rotation : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="13853.5" y="2883.4416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="13865.5" y="2894.4075">_textSpacing : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="13853.5" y="2902.5095"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="13865.5" y="2913.4754">_font : std::shared_ptr&lt;RlFont&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="13853.5" y="2921.5774"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="13865.5" y="2932.5433">_text : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="13846.5" x2="14665.5" y1="2940.6453" y2="2940.6453"/><ellipse cx="13856.5" cy="2951.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="511" x="13865.5" y="2959.6113">RlText(const std::string&amp; text, const Vector2f&amp; position, const RlColor&amp; color)</text><ellipse cx="13856.5" cy="2970.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="720" x="13865.5" y="2978.6792">RlText(const std::string&amp; text, std::shared_ptr&lt;RlFont&gt;&amp; font, const Vector2f&amp; position, const RlColor&amp; color)</text><ellipse cx="13856.5" cy="2989.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="795" x="13865.5" y="2997.7471">RlText(const std::string&amp; text, const std::string&amp; fontPath, float fontSize, const Vector2f&amp; position, const RlColor&amp; color)</text><ellipse cx="13856.5" cy="3008.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="13865.5" y="3016.815">getColor() : RlColor&amp; {query}</text><ellipse cx="13856.5" cy="3027.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="177" x="13865.5" y="3035.8829">getSize() : Vector2f {query}</text><ellipse cx="13856.5" cy="3046.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="13865.5" y="3054.9508">getOrigin() : Vector2f&amp; {query}</text><ellipse cx="13856.5" cy="3066.0528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="13865.5" y="3074.0188">getPosition() : Vector2f&amp; {query}</text><ellipse cx="13856.5" cy="3085.1207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="181" x="13865.5" y="3093.0867">getFontSize() : float {query}</text><ellipse cx="13856.5" cy="3104.1887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="181" x="13865.5" y="3112.1546">getRotation() : float {query}</text><ellipse cx="13856.5" cy="3123.2566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="207" x="13865.5" y="3131.2225">getTextSpacing() : float {query}</text><ellipse cx="13856.5" cy="3142.3245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="165" x="13865.5" y="3150.2904">getWidth() : float {query}</text><ellipse cx="13856.5" cy="3161.3924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="294" x="13865.5" y="3169.3583">getFont() : std::shared_ptr&lt;RlFont&gt;&amp; {query}</text><ellipse cx="13856.5" cy="3180.4603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="202" x="13865.5" y="3188.4263">getText() : std::string&amp; {query}</text><ellipse cx="13856.5" cy="3199.5282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="238" x="13865.5" y="3207.4942">setColor(const RlColor&amp; color) : void</text><ellipse cx="13856.5" cy="3218.5962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="338" x="13865.5" y="3226.5621">setFont(const std::shared_ptr&lt;RlFont&gt;&amp; font) : void</text><ellipse cx="13856.5" cy="3237.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="212" x="13865.5" y="3245.63">setFontSize(float fontSize) : void</text><ellipse cx="13856.5" cy="3256.732" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="260" x="13865.5" y="3264.6979">setOrigin(const Vector2f&amp; origin) : void</text><ellipse cx="13856.5" cy="3275.7999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="211" x="13865.5" y="3283.7658">setPosition(float x, float y) : void</text><ellipse cx="13856.5" cy="3294.8678" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="254" x="13865.5" y="3302.8338">setPosition(const Vector2f&amp; pos) : void</text><ellipse cx="13856.5" cy="3313.9357" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="211" x="13865.5" y="3321.9017">setRotation(float rotation) : void</text><ellipse cx="13856.5" cy="3333.0037" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="244" x="13865.5" y="3340.9696">setText(const std::string&amp; text) : void</text><ellipse cx="13856.5" cy="3352.0716" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="263" x="13865.5" y="3360.0375">setTextSpacing(float textSpacing) : void</text></g><!--MD5=[414a3c818b9afa2f2bb0e0e7f1df53da]
class raylib.text.TextCodepoint--><g id="elem_raylib.text.TextCodepoint"><rect codeLine="320" fill="#F1F1F1" height="162.4075" id="raylib.text.TextCodepoint" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="465" x="13345.5" y="2977.102"/><ellipse cx="13525.25" cy="2993.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M13525.0469,2999.8364 Q13522.5625,2999.8364 13521.2344,2998.1957 Q13519.9219,2996.5239 13519.9219,2993.4145 Q13519.9219,2990.2895 13521.2344,2988.6332 Q13522.5625,2986.977 13525.0469,2986.977 Q13525.7656,2986.977 13526.4219,2987.1332 Q13527.0625,2987.2895 13527.625,2987.5864 L13527.625,2990.3051 Q13527.2656,2989.9614 13526.9688,2989.7739 Q13526.6719,2989.5707 13526.4063,2989.4457 Q13526.0938,2989.3051 13525.7813,2989.2426 Q13525.4844,2989.1801 13525.1719,2989.1801 Q13523.8438,2989.1801 13523.1563,2990.2426 Q13522.4688,2991.3364 13522.4688,2993.4145 Q13522.4688,2995.5082 13523.1563,2996.5707 Q13523.8438,2997.6489 13525.1719,2997.6489 Q13525.8125,2997.6489 13526.4063,2997.3676 Q13526.7031,2997.2426 13526.9844,2997.0551 Q13527.2813,2996.852 13527.625,2996.5239 L13527.625,2999.2426 Q13527.0469,2999.5395 13526.4063,2999.6957 Q13525.7813,2999.8364 13525.0469,2999.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="13545.75" y="2998.534">TextCodepoint</text><line style="stroke:#181818;stroke-width:0.5;" x1="13346.5" x2="13809.5" y1="3009.102" y2="3009.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="13353.5" y="3017.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="13365.5" y="3028.0679">_codepoints : std::vector&lt;int&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="13346.5" x2="13809.5" y1="3036.1699" y2="3036.1699"/><ellipse cx="13356.5" cy="3047.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="253" x="13365.5" y="3055.1358">TextCodepoint(const std::string&amp; text)</text><ellipse cx="13356.5" cy="3066.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="229" x="13365.5" y="3074.2038">getCodepointsCount() : int {query}</text><ellipse cx="13356.5" cy="3085.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="439" x="13365.5" y="3093.2717">codePointToUTF8(const int&amp; codepoint, int&amp; byteSize) : std::string</text><ellipse cx="13356.5" cy="3104.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="331" x="13365.5" y="3112.3396">toUTF8String(const int&amp; bytesLength) : std::string</text><ellipse cx="13356.5" cy="3123.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="285" x="13365.5" y="3131.4075">getCodepoints() : std::vector&lt;int&gt;&amp; {query}</text></g><!--MD5=[cd96a88098b489e1eff701340b7b474a]
class raylib.shader.RlShader--><g id="elem_raylib.shader.RlShader"><rect codeLine="331" fill="#F1F1F1" height="276.815" id="raylib.shader.RlShader" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="540" x="25664" y="1991.602"/><ellipse cx="25899.25" cy="2007.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M25899.0469,2014.3364 Q25896.5625,2014.3364 25895.2344,2012.6957 Q25893.9219,2011.0239 25893.9219,2007.9145 Q25893.9219,2004.7895 25895.2344,2003.1332 Q25896.5625,2001.477 25899.0469,2001.477 Q25899.7656,2001.477 25900.4219,2001.6332 Q25901.0625,2001.7895 25901.625,2002.0864 L25901.625,2004.8051 Q25901.2656,2004.4614 25900.9688,2004.2739 Q25900.6719,2004.0707 25900.4063,2003.9457 Q25900.0938,2003.8051 25899.7813,2003.7426 Q25899.4844,2003.6801 25899.1719,2003.6801 Q25897.8438,2003.6801 25897.1563,2004.7426 Q25896.4688,2005.8364 25896.4688,2007.9145 Q25896.4688,2010.0082 25897.1563,2011.0707 Q25897.8438,2012.1489 25899.1719,2012.1489 Q25899.8125,2012.1489 25900.4063,2011.8676 Q25900.7031,2011.7426 25900.9844,2011.5551 Q25901.2813,2011.352 25901.625,2011.0239 L25901.625,2013.7426 Q25901.0469,2014.0395 25900.4063,2014.1957 Q25899.7813,2014.3364 25899.0469,2014.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="61" x="25919.75" y="2013.034">RlShader</text><line style="stroke:#181818;stroke-width:0.5;" x1="25665" x2="26203" y1="2023.602" y2="2023.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="25672" y="2031.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="25684" y="2042.5679">_shader : Shader</text><line style="stroke:#181818;stroke-width:0.5;" x1="25665" x2="26203" y1="2050.6699" y2="2050.6699"/><ellipse cx="25675" cy="2061.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="25684" y="2069.6358">RlShader()</text><ellipse cx="25675" cy="2080.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="25684" y="2088.7038">~RlShader()</text><ellipse cx="25675" cy="2099.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="25684" y="2107.7717">getShader() : Shader&amp; {query}</text><ellipse cx="25675" cy="2118.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="333" x="25684" y="2126.8396">getLocation(const std::string&amp; uniformName) : int</text><ellipse cx="25675" cy="2137.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="354" x="25684" y="2145.9075">getLocationAttrib(const std::string&amp; attribName) : int</text><ellipse cx="25675" cy="2157.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="483" x="25684" y="2164.9754">load(const std::string&amp; vsFileName, const std::string&amp; fsFileName) : void</text><ellipse cx="25675" cy="2176.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="514" x="25684" y="2184.0433">loadFromMemory(const std::string&amp; vsCode, const std::string&amp; fsCode) : void</text><ellipse cx="25675" cy="2195.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="424" x="25684" y="2203.1113">setValue(int locIndex, const void* value, int uniformType) : void</text><ellipse cx="25675" cy="2214.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="358" x="25684" y="2222.1792">setValueMatrix(int locIndex, const Matrix&amp; mat) : void</text><ellipse cx="25675" cy="2233.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="465" x="25684" y="2241.2471">setValueTexture(int locIndex, const texture::RlTexture&amp; texture) : void</text><ellipse cx="25675" cy="2252.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="500" x="25684" y="2260.315">setValueV(int locIndex, const void* value, int uniformType, int count) : void</text></g><!--MD5=[3a75f0316c44a70a064a37217c323314]
class raylib.model.MeshGenerator--><g id="elem_raylib.model.MeshGenerator"><rect codeLine="348" fill="#F1F1F1" height="257.7471" id="raylib.model.MeshGenerator" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="685" x="11029.5" y="2001.102"/><ellipse cx="11315.25" cy="2017.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M11315.0469,2023.8364 Q11312.5625,2023.8364 11311.2344,2022.1957 Q11309.9219,2020.5239 11309.9219,2017.4145 Q11309.9219,2014.2895 11311.2344,2012.6332 Q11312.5625,2010.977 11315.0469,2010.977 Q11315.7656,2010.977 11316.4219,2011.1332 Q11317.0625,2011.2895 11317.625,2011.5864 L11317.625,2014.3051 Q11317.2656,2013.9614 11316.9688,2013.7739 Q11316.6719,2013.5707 11316.4063,2013.4457 Q11316.0938,2013.3051 11315.7813,2013.2426 Q11315.4844,2013.1801 11315.1719,2013.1801 Q11313.8438,2013.1801 11313.1563,2014.2426 Q11312.4688,2015.3364 11312.4688,2017.4145 Q11312.4688,2019.5082 11313.1563,2020.5707 Q11313.8438,2021.6489 11315.1719,2021.6489 Q11315.8125,2021.6489 11316.4063,2021.3676 Q11316.7031,2021.2426 11316.9844,2021.0551 Q11317.2813,2020.852 11317.625,2020.5239 L11317.625,2023.2426 Q11317.0469,2023.5395 11316.4063,2023.6957 Q11315.7813,2023.8364 11315.0469,2023.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="105" x="11335.75" y="2022.534">MeshGenerator</text><line style="stroke:#181818;stroke-width:0.5;" x1="11030.5" x2="11713.5" y1="2033.102" y2="2033.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="11030.5" x2="11713.5" y1="2041.102" y2="2041.102"/><ellipse cx="11040.5" cy="2052.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="547" x="11049.5" y="2060.0679">genMeshCone(const float&amp; radius, const float&amp; height, const int&amp; slices) : RlMesh</text><ellipse cx="11040.5" cy="2071.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="562" x="11049.5" y="2079.1358">genMeshCube(const float&amp; width, const float&amp; height, const float&amp; length) : RlMesh</text><ellipse cx="11040.5" cy="2090.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="604" x="11049.5" y="2098.2038">genMeshCubicmap(const image::RlImage&amp; cubicmap, const Vector3f&amp; cubeSize) : RlMesh</text><ellipse cx="11040.5" cy="2109.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="569" x="11049.5" y="2117.2717">genMeshCylinder(const float&amp; radius, const float&amp; height, const int&amp; slices) : RlMesh</text><ellipse cx="11040.5" cy="2128.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="585" x="11049.5" y="2136.3396">genMeshHeightmap(const image::RlImage&amp; heightmap, const Vector3f&amp; size) : RlMesh</text><ellipse cx="11040.5" cy="2147.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="575" x="11049.5" y="2155.4075">genMeshHemiSphere(const float&amp; radius, const int&amp; rings, const int&amp; slices) : RlMesh</text><ellipse cx="11040.5" cy="2166.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="652" x="11049.5" y="2174.4754">genMeshKnot(const float&amp; radius, const float&amp; size, const int&amp; radSeg, const int&amp; sides) : RlMesh</text><ellipse cx="11040.5" cy="2185.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="646" x="11049.5" y="2193.5433">genMeshPlane(const float&amp; width, const float&amp; length, const int&amp; resX, const int&amp; resZ) : RlMesh</text><ellipse cx="11040.5" cy="2204.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="402" x="11049.5" y="2212.6113">genMeshPoly(const int&amp; sides, const float&amp; radius) : RlMesh</text><ellipse cx="11040.5" cy="2223.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="540" x="11049.5" y="2231.6792">genMeshSphere(const float&amp; radius, const int&amp; rings, const int&amp; slices) : RlMesh</text><ellipse cx="11040.5" cy="2242.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="659" x="11049.5" y="2250.7471">genMeshTorus(const float&amp; radius, const float&amp; size, const int&amp; radSeg, const int&amp; sides) : RlMesh</text></g><!--MD5=[ea61e7fe6e31189d20317c2f28baaaca]
class raylib.model.RlAnimation--><g id="elem_raylib.model.RlAnimation"><rect codeLine="362" fill="#F1F1F1" height="238.6792" id="raylib.model.RlAnimation" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="523" x="9613.5" y="2010.602"/><ellipse cx="9829.75" cy="2026.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M9829.5469,2033.3364 Q9827.0625,2033.3364 9825.7344,2031.6957 Q9824.4219,2030.0239 9824.4219,2026.9145 Q9824.4219,2023.7895 9825.7344,2022.1332 Q9827.0625,2020.477 9829.5469,2020.477 Q9830.2656,2020.477 9830.9219,2020.6332 Q9831.5625,2020.7895 9832.125,2021.0864 L9832.125,2023.8051 Q9831.7656,2023.4614 9831.4688,2023.2739 Q9831.1719,2023.0707 9830.9063,2022.9457 Q9830.5938,2022.8051 9830.2813,2022.7426 Q9829.9844,2022.6801 9829.6719,2022.6801 Q9828.3438,2022.6801 9827.6563,2023.7426 Q9826.9688,2024.8364 9826.9688,2026.9145 Q9826.9688,2029.0082 9827.6563,2030.0707 Q9828.3438,2031.1489 9829.6719,2031.1489 Q9830.3125,2031.1489 9830.9063,2030.8676 Q9831.2031,2030.7426 9831.4844,2030.5551 Q9831.7813,2030.352 9832.125,2030.0239 L9832.125,2032.7426 Q9831.5469,2033.0395 9830.9063,2033.1957 Q9830.2813,2033.3364 9829.5469,2033.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="9850.25" y="2032.034">RlAnimation</text><line style="stroke:#181818;stroke-width:0.5;" x1="9614.5" x2="10135.5" y1="2042.602" y2="2042.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9621.5" y="2050.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="9633.5" y="2061.5679">_isLoaded : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9621.5" y="2069.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="276" x="9633.5" y="2080.6358">_animationModels : std::vector&lt;RlModel&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9621.5" y="2088.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="9633.5" y="2099.7038">_frame : unsigned int</text><line style="stroke:#181818;stroke-width:0.5;" x1="9614.5" x2="10135.5" y1="2107.8057" y2="2107.8057"/><ellipse cx="9624.5" cy="2118.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="9633.5" y="2126.7717">RlAnimation()</text><ellipse cx="9624.5" cy="2137.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="497" x="9633.5" y="2145.8396">RlAnimation(const std::string&amp; animationDir, const std::string&amp; extension)</text><ellipse cx="9624.5" cy="2156.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="172" x="9633.5" y="2164.9075">isLoaded() : bool&amp; {query}</text><ellipse cx="9624.5" cy="2176.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="264" x="9633.5" y="2183.9754">getAnimationsSize() : std::size_t {query}</text><ellipse cx="9624.5" cy="2195.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="364" x="9633.5" y="2203.0433">getAnimationModels() : std::vector&lt;RlModel&gt;&amp; {query}</text><ellipse cx="9624.5" cy="2214.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="233" x="9633.5" y="2222.1113">getFrame() : unsigned int&amp; {query}</text><ellipse cx="9624.5" cy="2233.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="9633.5" y="2241.1792">update() : void</text></g><!--MD5=[158c9382e708bcdce4d4e6c38fe9647b]
class raylib.model.RlMaterial--><g id="elem_raylib.model.RlMaterial"><rect codeLine="375" fill="#F1F1F1" height="162.4075" id="raylib.model.RlMaterial" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="287" x="10171.5" y="2049.102"/><ellipse cx="10276.25" cy="2065.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M10276.0469,2071.8364 Q10273.5625,2071.8364 10272.2344,2070.1957 Q10270.9219,2068.5239 10270.9219,2065.4145 Q10270.9219,2062.2895 10272.2344,2060.6332 Q10273.5625,2058.977 10276.0469,2058.977 Q10276.7656,2058.977 10277.4219,2059.1332 Q10278.0625,2059.2895 10278.625,2059.5864 L10278.625,2062.3051 Q10278.2656,2061.9614 10277.9688,2061.7739 Q10277.6719,2061.5707 10277.4063,2061.4457 Q10277.0938,2061.3051 10276.7813,2061.2426 Q10276.4844,2061.1801 10276.1719,2061.1801 Q10274.8438,2061.1801 10274.1563,2062.2426 Q10273.4688,2063.3364 10273.4688,2065.4145 Q10273.4688,2067.5082 10274.1563,2068.5707 Q10274.8438,2069.6489 10276.1719,2069.6489 Q10276.8125,2069.6489 10277.4063,2069.3676 Q10277.7031,2069.2426 10277.9844,2069.0551 Q10278.2813,2068.852 10278.625,2068.5239 L10278.625,2071.2426 Q10278.0469,2071.5395 10277.4063,2071.6957 Q10276.7813,2071.8364 10276.0469,2071.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="10296.75" y="2070.534">RlMaterial</text><line style="stroke:#181818;stroke-width:0.5;" x1="10172.5" x2="10457.5" y1="2081.102" y2="2081.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10179.5" y="2089.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="10191.5" y="2100.0679">_material : Material</text><line style="stroke:#181818;stroke-width:0.5;" x1="10172.5" x2="10457.5" y1="2108.1699" y2="2108.1699"/><ellipse cx="10182.5" cy="2119.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="261" x="10191.5" y="2127.1358">RlMaterial(const std::string&amp; fileName)</text><ellipse cx="10182.5" cy="2138.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="10191.5" y="2146.2038">RlMaterial(Material&amp; material)</text><ellipse cx="10182.5" cy="2157.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="85" x="10191.5" y="2165.2717">~RlMaterial()</text><ellipse cx="10182.5" cy="2176.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="217" x="10191.5" y="2184.3396">getMaterial() : Material&amp; {query}</text><ellipse cx="10182.5" cy="2195.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="164" x="10191.5" y="2203.4075">getMaterial() : Material&amp;</text></g><!--MD5=[a662ceebf40526b929c182dded1ce946]
class raylib.model.RlMesh--><g id="elem_raylib.model.RlMesh"><rect codeLine="384" fill="#F1F1F1" height="295.8829" id="raylib.model.RlMesh" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="606" x="10027" y="3914.602"/><ellipse cx="10300.75" cy="3930.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M10300.5469,3937.3364 Q10298.0625,3937.3364 10296.7344,3935.6957 Q10295.4219,3934.0239 10295.4219,3930.9145 Q10295.4219,3927.7895 10296.7344,3926.1332 Q10298.0625,3924.477 10300.5469,3924.477 Q10301.2656,3924.477 10301.9219,3924.6332 Q10302.5625,3924.7895 10303.125,3925.0864 L10303.125,3927.8051 Q10302.7656,3927.4614 10302.4688,3927.2739 Q10302.1719,3927.0707 10301.9063,3926.9457 Q10301.5938,3926.8051 10301.2813,3926.7426 Q10300.9844,3926.6801 10300.6719,3926.6801 Q10299.3438,3926.6801 10298.6563,3927.7426 Q10297.9688,3928.8364 10297.9688,3930.9145 Q10297.9688,3933.0082 10298.6563,3934.0707 Q10299.3438,3935.1489 10300.6719,3935.1489 Q10301.3125,3935.1489 10301.9063,3934.8676 Q10302.2031,3934.7426 10302.4844,3934.5551 Q10302.7813,3934.352 10303.125,3934.0239 L10303.125,3936.7426 Q10302.5469,3937.0395 10301.9063,3937.1957 Q10301.2813,3937.3364 10300.5469,3937.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="50" x="10321.25" y="3936.034">RlMesh</text><line style="stroke:#181818;stroke-width:0.5;" x1="10028" x2="10632" y1="3946.602" y2="3946.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10035" y="3954.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="210" x="10047" y="3965.5679">_mesh : std::shared_ptr&lt;Mesh&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="10028" x2="10632" y1="3973.6699" y2="3973.6699"/><ellipse cx="10038" cy="3984.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="186" x="10047" y="3992.6358">RlMesh(const Mesh&amp; mesh)</text><ellipse cx="10038" cy="4003.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="199" x="10047" y="4011.7038">RlMesh(const RlMesh&amp; mesh)</text><ellipse cx="10038" cy="4022.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="66" x="10047" y="4030.7717">~RlMesh()</text><ellipse cx="10038" cy="4041.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="222" x="10047" y="4049.8396">getBoundingBox() : BoundingBox</text><ellipse cx="10038" cy="4060.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="179" x="10047" y="4068.9075">getMesh() : Mesh&amp; {query}</text><ellipse cx="10038" cy="4080.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="287" x="10047" y="4087.9754">operator=(const RlMesh&amp; mesh) : RlMesh&amp;</text><ellipse cx="10038" cy="4099.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="10047" y="4107.0433">exportMesh(const std::string&amp; fileName) : bool</text><ellipse cx="10038" cy="4118.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="364" x="10047" y="4126.1113">getMeshSharedPtr() : std::shared_ptr&lt;Mesh&gt;&amp; {query}</text><ellipse cx="10038" cy="4137.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="142" x="10047" y="4145.1792">genBinormals() : void</text><ellipse cx="10038" cy="4156.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="137" x="10047" y="4164.2471">genTangents() : void</text><ellipse cx="10038" cy="4175.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="580" x="10047" y="4183.315">updateBuffer(const int&amp; index, void* data, const int&amp; dataSize, const int&amp; offset) : void</text><ellipse cx="10038" cy="4194.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="277" x="10047" y="4202.3829">uploadInGPU(const bool&amp; dynamic) : void</text></g><!--MD5=[85c0f06d372a814258bf1f07ffd0ff6c]
class raylib.model.RlModel--><g id="elem_raylib.model.RlModel"><rect codeLine="400" fill="#F1F1F1" height="810.7167" id="raylib.model.RlModel" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="930" x="10531" y="2652.602"/><ellipse cx="10964.25" cy="2668.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M10964.0469,2675.3364 Q10961.5625,2675.3364 10960.2344,2673.6957 Q10958.9219,2672.0239 10958.9219,2668.9145 Q10958.9219,2665.7895 10960.2344,2664.1332 Q10961.5625,2662.477 10964.0469,2662.477 Q10964.7656,2662.477 10965.4219,2662.6332 Q10966.0625,2662.7895 10966.625,2663.0864 L10966.625,2665.8051 Q10966.2656,2665.4614 10965.9688,2665.2739 Q10965.6719,2665.0707 10965.4063,2664.9457 Q10965.0938,2664.8051 10964.7813,2664.7426 Q10964.4844,2664.6801 10964.1719,2664.6801 Q10962.8438,2664.6801 10962.1563,2665.7426 Q10961.4688,2666.8364 10961.4688,2668.9145 Q10961.4688,2671.0082 10962.1563,2672.0707 Q10962.8438,2673.1489 10964.1719,2673.1489 Q10964.8125,2673.1489 10965.4063,2672.8676 Q10965.7031,2672.7426 10965.9844,2672.5551 Q10966.2813,2672.352 10966.625,2672.0239 L10966.625,2674.7426 Q10966.0469,2675.0395 10965.4063,2675.1957 Q10964.7813,2675.3364 10964.0469,2675.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="55" x="10984.75" y="2674.034">RlModel</text><line style="stroke:#181818;stroke-width:0.5;" x1="10532" x2="11460" y1="2684.602" y2="2684.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10539" y="2692.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="10551" y="2703.5679">_baseBoudingBox : BoundingBox</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10539" y="2711.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="198" x="10551" y="2722.6358">_boundingBox : BoundingBox</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10539" y="2730.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="10551" y="2741.7038">_color : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10539" y="2749.8057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="10551" y="2760.7717">_position : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10539" y="2768.8736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="10551" y="2779.8396">_rotationAxis : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10539" y="2787.9416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="10551" y="2798.9075">_scale : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10539" y="2807.0095"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="140" x="10551" y="2817.9754">_rotationAngle : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10539" y="2826.0774"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="220" x="10551" y="2837.0433">_model : std::shared_ptr&lt;Model&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10539" y="2845.1453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="223" x="10551" y="2856.1113">_mesh : std::shared_ptr&lt;RlMesh&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10539" y="2864.2132"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="304" x="10551" y="2875.1792">_texture : std::shared_ptr&lt;texture::RlTexture&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="10532" x2="11460" y1="2883.2812" y2="2883.2812"/><ellipse cx="10542" cy="2894.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="247" x="10551" y="2902.2471">RlModel(const std::string&amp; fileName)</text><ellipse cx="10542" cy="2913.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="466" x="10551" y="2921.315">RlModel(const std::string&amp; fileName, const std::string&amp; textureName)</text><ellipse cx="10542" cy="2932.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="322" x="10551" y="2940.3829">RlModel(const std::shared_ptr&lt;RlMesh&gt;&amp; mesh)</text><ellipse cx="10542" cy="2951.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="204" x="10551" y="2959.4508">RlModel(const RlMesh&amp; mesh)</text><ellipse cx="10542" cy="2970.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="10551" y="2978.5188">RlModel(const RlModel&amp; model)</text><ellipse cx="10542" cy="2989.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="10551" y="2997.5867">~RlModel()</text><ellipse cx="10542" cy="3008.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="324" x="10551" y="3016.6546">getDefaultBoundingBox() : BoundingBox {query}</text><ellipse cx="10542" cy="3027.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="317" x="10551" y="3035.7225">getBaseBoundingBox() : BoundingBox&amp; {query}</text><ellipse cx="10542" cy="3046.8245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="285" x="10551" y="3054.7904">getBoundingBox() : BoundingBox&amp; {query}</text><ellipse cx="10542" cy="3065.8924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="189" x="10551" y="3073.8583">getModel() : Model&amp; {query}</text><ellipse cx="10542" cy="3084.9603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="10551" y="3092.9263">getColor() : RlColor&amp; {query}</text><ellipse cx="10542" cy="3104.0282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="302" x="10551" y="3111.9942">operator=(const RlModel&amp; model) : RlModel&amp;</text><ellipse cx="10542" cy="3123.0962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="10551" y="3131.0621">getPosition() : Vector3f&amp; {query}</text><ellipse cx="10542" cy="3142.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="243" x="10551" y="3150.13">getRotationAxis() : Vector3f&amp; {query}</text><ellipse cx="10542" cy="3161.232" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="10551" y="3169.1979">getScale() : Vector3f&amp; {query}</text><ellipse cx="10542" cy="3180.2999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="230" x="10551" y="3188.2658">getRotationAngle() : float&amp; {query}</text><ellipse cx="10542" cy="3199.3678" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="394" x="10551" y="3207.3338">getTexture() : std::shared_ptr&lt;texture::RlTexture&gt;&amp; {query}</text><ellipse cx="10542" cy="3218.4357" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="392" x="10551" y="3226.4017">setBoundingBox(const BoundingBox&amp; boundingBox) : void</text><ellipse cx="10542" cy="3237.5037" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="238" x="10551" y="3245.4696">setColor(const RlColor&amp; color) : void</text><ellipse cx="10542" cy="3256.5716" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="515" x="10551" y="3264.5375">setMaterialTexture(const std::shared_ptr&lt;texture::RlTexture&gt;&amp; texture) : void</text><ellipse cx="10542" cy="3275.6395" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="689" x="10551" y="3283.6054">setMaterialTexture(const std::shared_ptr&lt;texture::RlTexture&gt;&amp; texture, const int&amp; materialIndex) : void</text><ellipse cx="10542" cy="3294.7074" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="904" x="10551" y="3302.6733">setMaterialTexture(const std::shared_ptr&lt;texture::RlTexture&gt;&amp; texture, const int&amp; materialIndex, const MaterialMapIndex&amp; type) : void</text><ellipse cx="10542" cy="3313.7753" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="434" x="10551" y="3321.7413">setMeshMaterial(const int&amp; meshId, const int&amp; materialId) : void</text><ellipse cx="10542" cy="3332.8432" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="284" x="10551" y="3340.8092">setPosition(const Vector3f&amp; position) : void</text><ellipse cx="10542" cy="3351.9112" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="410" x="10551" y="3359.8771">setPosition(const float&amp; x, const float&amp; y, const float&amp; z) : void</text><ellipse cx="10542" cy="3370.9791" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="289" x="10551" y="3378.945">setRotationAngle(float rotationAngle) : void</text><ellipse cx="10542" cy="3390.047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="340" x="10551" y="3398.0129">setRotationAxis(const Vector3f&amp; rotationAxis) : void</text><ellipse cx="10542" cy="3409.1149" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="440" x="10551" y="3417.0808">setRotationAxis(const float&amp; x, const float&amp; y, const float&amp; z) : void</text><ellipse cx="10542" cy="3428.1828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="246" x="10551" y="3436.1488">setScale(const Vector3f&amp; scale) : void</text><ellipse cx="10542" cy="3447.2507" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="392" x="10551" y="3455.2167">setScale(const float&amp; x, const float&amp; y, const float&amp; z) : void</text></g><!--MD5=[d94b4d6d8ed1386c8bb337f58c92da1c]
class raylib.model.RlModelAnimation--><g id="elem_raylib.model.RlModelAnimation"><rect codeLine="443" fill="#F1F1F1" height="276.815" id="raylib.model.RlModelAnimation" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="501" x="10493.5" y="1991.602"/><ellipse cx="10677.75" cy="2007.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M10677.5469,2014.3364 Q10675.0625,2014.3364 10673.7344,2012.6957 Q10672.4219,2011.0239 10672.4219,2007.9145 Q10672.4219,2004.7895 10673.7344,2003.1332 Q10675.0625,2001.477 10677.5469,2001.477 Q10678.2656,2001.477 10678.9219,2001.6332 Q10679.5625,2001.7895 10680.125,2002.0864 L10680.125,2004.8051 Q10679.7656,2004.4614 10679.4688,2004.2739 Q10679.1719,2004.0707 10678.9063,2003.9457 Q10678.5938,2003.8051 10678.2813,2003.7426 Q10677.9844,2003.6801 10677.6719,2003.6801 Q10676.3438,2003.6801 10675.6563,2004.7426 Q10674.9688,2005.8364 10674.9688,2007.9145 Q10674.9688,2010.0082 10675.6563,2011.0707 Q10676.3438,2012.1489 10677.6719,2012.1489 Q10678.3125,2012.1489 10678.9063,2011.8676 Q10679.2031,2011.7426 10679.4844,2011.5551 Q10679.7813,2011.352 10680.125,2011.0239 L10680.125,2013.7426 Q10679.5469,2014.0395 10678.9063,2014.1957 Q10678.2813,2014.3364 10677.5469,2014.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="10698.25" y="2013.034">RlModelAnimation</text><line style="stroke:#181818;stroke-width:0.5;" x1="10494.5" x2="10993.5" y1="2023.602" y2="2023.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10501.5" y="2031.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="178" x="10513.5" y="2042.5679">_anims : ModelAnimation*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10501.5" y="2050.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="115" x="10513.5" y="2061.6358">_model : RlModel</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10501.5" y="2069.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="10513.5" y="2080.7038">_frameCount : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10501.5" y="2088.8057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="290" x="10513.5" y="2099.7717">_animations : std::vector&lt;ModelAnimation&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10501.5" y="2107.8736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="142" x="10513.5" y="2118.8396">_count : unsigned int</text><line style="stroke:#181818;stroke-width:0.5;" x1="10494.5" x2="10993.5" y1="2126.9416" y2="2126.9416"/><ellipse cx="10504.5" cy="2137.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="475" x="10513.5" y="2145.9075">RlModelAnimation(const RlModel&amp; model, const std::string&amp; fileName)</text><ellipse cx="10504.5" cy="2157.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="140" x="10513.5" y="2164.9754">~RlModelAnimation()</text><ellipse cx="10504.5" cy="2176.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="412" x="10513.5" y="2184.0433">animationIndexIsValid(const unsigned int&amp; animIndex) : bool</text><ellipse cx="10504.5" cy="2195.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="10513.5" y="2203.1113">getCount() : unsigned int {query}</text><ellipse cx="10504.5" cy="2214.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="307" x="10513.5" y="2222.1792">incrementFrameCount(const int&amp; value) : void</text><ellipse cx="10504.5" cy="2233.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="307" x="10513.5" y="2241.2471">unload(const unsigned int&amp; animIndex) : void</text><ellipse cx="10504.5" cy="2252.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="308" x="10513.5" y="2260.315">update(const unsigned int&amp; animIndex) : void</text></g><!--MD5=[f5666ac8e2832b2e801c802f596759bc]
class raylib.image.ImageDrawHelper--><g id="elem_raylib.image.ImageDrawHelper"><rect codeLine="460" fill="#F1F1F1" height="314.9508" id="raylib.image.ImageDrawHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1181" x="8375.5" y="3905.102"/><ellipse cx="8900.25" cy="3921.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M8900.0469,3927.8364 Q8897.5625,3927.8364 8896.2344,3926.1957 Q8894.9219,3924.5239 8894.9219,3921.4145 Q8894.9219,3918.2895 8896.2344,3916.6332 Q8897.5625,3914.977 8900.0469,3914.977 Q8900.7656,3914.977 8901.4219,3915.1332 Q8902.0625,3915.2895 8902.625,3915.5864 L8902.625,3918.3051 Q8902.2656,3917.9614 8901.9688,3917.7739 Q8901.6719,3917.5707 8901.4063,3917.4457 Q8901.0938,3917.3051 8900.7813,3917.2426 Q8900.4844,3917.1801 8900.1719,3917.1801 Q8898.8438,3917.1801 8898.1563,3918.2426 Q8897.4688,3919.3364 8897.4688,3921.4145 Q8897.4688,3923.5082 8898.1563,3924.5707 Q8898.8438,3925.6489 8900.1719,3925.6489 Q8900.8125,3925.6489 8901.4063,3925.3676 Q8901.7031,3925.2426 8901.9844,3925.0551 Q8902.2813,3924.852 8902.625,3924.5239 L8902.625,3927.2426 Q8902.0469,3927.5395 8901.4063,3927.6957 Q8900.7813,3927.8364 8900.0469,3927.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="123" x="8920.75" y="3926.534">ImageDrawHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="8376.5" x2="9555.5" y1="3937.102" y2="3937.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="8376.5" x2="9555.5" y1="3945.102" y2="3945.102"/><ellipse cx="8386.5" cy="3956.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="446" x="8395.5" y="3964.0679">clearBackground(image::RlImage&amp; dst, const RlColor&amp; color) : void</text><ellipse cx="8386.5" cy="3975.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="639" x="8395.5" y="3983.1358">drawCircle(image::RlImage&amp; dst, int centerX, int centerY, int radius, const RlColor&amp; color) : void</text><ellipse cx="8386.5" cy="3994.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="637" x="8395.5" y="4002.2038">drawCircle(image::RlImage&amp; dst, const Vector2f&amp; center, int radius, const RlColor&amp; color) : void</text><ellipse cx="8386.5" cy="4013.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="934" x="8395.5" y="4021.2717">drawImage(image::RlImage&amp; dst, const image::RlImage&amp; src, const Rectangle&amp; srcRec, const Rectangle&amp; dstRec, const RlColor&amp; tint) : void</text><ellipse cx="8386.5" cy="4032.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="801" x="8395.5" y="4040.3396">drawImageText(image::RlImage&amp; dst, const std::string&amp; text, int posX, int posY, int fontSize, const RlColor&amp; color) : void</text><ellipse cx="8386.5" cy="4051.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1155" x="8395.5" y="4059.4075">drawImageText(image::RlImage&amp; dst, const raylib::text::RlFont&amp; font, const std::string&amp; text, const Vector2f&amp; position, float fontSize, float spacing, const RlColor&amp; tint) : void</text><ellipse cx="8386.5" cy="4070.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="752" x="8395.5" y="4078.4754">drawLine(image::RlImage&amp; dst, int startPosX, int startPosY, int endPosX, int endPosY, const RlColor&amp; color) : void</text><ellipse cx="8386.5" cy="4089.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="685" x="8395.5" y="4097.5433">drawLine(image::RlImage&amp; dst, const Vector2f&amp; start, const Vector2f&amp; end, const RlColor&amp; color) : void</text><ellipse cx="8386.5" cy="4108.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="521" x="8395.5" y="4116.6113">drawPixel(image::RlImage&amp; dst, int posX, int posY, const RlColor&amp; color) : void</text><ellipse cx="8386.5" cy="4127.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="568" x="8395.5" y="4135.6792">drawPixel(image::RlImage&amp; dst, const Vector2f&amp; position, const RlColor&amp; color) : void</text><ellipse cx="8386.5" cy="4146.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="699" x="8395.5" y="4154.7471">drawRectangle(image::RlImage&amp; dst, int posX, int posY, int width, int height, const RlColor&amp; color) : void</text><ellipse cx="8386.5" cy="4165.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="747" x="8395.5" y="4173.815">drawRectangle(image::RlImage&amp; dst, const Vector2f&amp; position, const Vector2f&amp; size, const RlColor&amp; color) : void</text><ellipse cx="8386.5" cy="4184.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="680" x="8395.5" y="4192.8829">drawRectangleLines(image::RlImage&amp; dst, const Rectangle&amp; rec, int thick, const RlColor&amp; color) : void</text><ellipse cx="8386.5" cy="4203.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="607" x="8395.5" y="4211.9508">drawRectangleRec(image::RlImage&amp; dst, const Rectangle&amp; rec, const RlColor&amp; color) : void</text></g><!--MD5=[7d4cfb9bd6499976d6afcdf8cdcf205c]
class raylib.image.ImageGenerator--><g id="elem_raylib.image.ImageGenerator"><rect codeLine="477" fill="#F1F1F1" height="181.4754" id="raylib.image.ImageGenerator" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1002" x="7338" y="3972.102"/><ellipse cx="7779.25" cy="3988.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M7779.0469,3994.8364 Q7776.5625,3994.8364 7775.2344,3993.1957 Q7773.9219,3991.5239 7773.9219,3988.4145 Q7773.9219,3985.2895 7775.2344,3983.6332 Q7776.5625,3981.977 7779.0469,3981.977 Q7779.7656,3981.977 7780.4219,3982.1332 Q7781.0625,3982.2895 7781.625,3982.5864 L7781.625,3985.3051 Q7781.2656,3984.9614 7780.9688,3984.7739 Q7780.6719,3984.5707 7780.4063,3984.4457 Q7780.0938,3984.3051 7779.7813,3984.2426 Q7779.4844,3984.1801 7779.1719,3984.1801 Q7777.8438,3984.1801 7777.1563,3985.2426 Q7776.4688,3986.3364 7776.4688,3988.4145 Q7776.4688,3990.5082 7777.1563,3991.5707 Q7777.8438,3992.6489 7779.1719,3992.6489 Q7779.8125,3992.6489 7780.4063,3992.3676 Q7780.7031,3992.2426 7780.9844,3992.0551 Q7781.2813,3991.852 7781.625,3991.5239 L7781.625,3994.2426 Q7781.0469,3994.5395 7780.4063,3994.6957 Q7779.7813,3994.8364 7779.0469,3994.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="7799.75" y="3993.534">ImageGenerator</text><line style="stroke:#181818;stroke-width:0.5;" x1="7339" x2="8339" y1="4004.102" y2="4004.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="7339" x2="8339" y1="4012.102" y2="4012.102"/><ellipse cx="7349" cy="4023.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="559" x="7358" y="4031.0679">genImageCellular(const int&amp; width, const int&amp; height, const int&amp; tileSize) : RlImage</text><ellipse cx="7349" cy="4042.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="976" x="7358" y="4050.1358">genImageChecked(const int&amp; width, const int&amp; height, const int&amp; checksX, const int&amp; checksY, const RlColor&amp; col1, const RlColor&amp; col2) : RlImage</text><ellipse cx="7349" cy="4061.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="557" x="7358" y="4069.2038">genImageColor(const int&amp; width, const int&amp; height, const RlColor&amp; color) : RlImage</text><ellipse cx="7349" cy="4080.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="723" x="7358" y="4088.2717">genImageGradientH(const int&amp; width, const int&amp; height, const RlColor&amp; left, const RlColor&amp; right) : RlImage</text><ellipse cx="7349" cy="4099.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="863" x="7358" y="4107.3396">genImageGradientRadial(const int&amp; width, const int&amp; height, float density, const RlColor&amp; inner, const RlColor&amp; outer) : RlImage</text><ellipse cx="7349" cy="4118.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="736" x="7358" y="4126.4075">genImageGradientV(const int&amp; width, const int&amp; height, const RlColor&amp; top, const RlColor&amp; bottom) : RlImage</text><ellipse cx="7349" cy="4137.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="537" x="7358" y="4145.4754">genImageWhiteNoise(const int&amp; width, const int&amp; height, float factor) : RlImage</text></g><!--MD5=[ec2be861a767ef9e64d0fbd9dd84831a]
class raylib.image.RlImage--><g id="elem_raylib.image.RlImage"><rect codeLine="487" fill="#F1F1F1" height="772.5808" id="raylib.image.RlImage" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="634" x="6669" y="3676.102"/><ellipse cx="6953.75" cy="3692.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M6953.5469,3698.8364 Q6951.0625,3698.8364 6949.7344,3697.1957 Q6948.4219,3695.5239 6948.4219,3692.4145 Q6948.4219,3689.2895 6949.7344,3687.6332 Q6951.0625,3685.977 6953.5469,3685.977 Q6954.2656,3685.977 6954.9219,3686.1332 Q6955.5625,3686.2895 6956.125,3686.5864 L6956.125,3689.3051 Q6955.7656,3688.9614 6955.4688,3688.7739 Q6955.1719,3688.5707 6954.9063,3688.4457 Q6954.5938,3688.3051 6954.2813,3688.2426 Q6953.9844,3688.1801 6953.6719,3688.1801 Q6952.3438,3688.1801 6951.6563,3689.2426 Q6950.9688,3690.3364 6950.9688,3692.4145 Q6950.9688,3694.5082 6951.6563,3695.5707 Q6952.3438,3696.6489 6953.6719,3696.6489 Q6954.3125,3696.6489 6954.9063,3696.3676 Q6955.2031,3696.2426 6955.4844,3696.0551 Q6955.7813,3695.852 6956.125,3695.5239 L6956.125,3698.2426 Q6955.5469,3698.5395 6954.9063,3698.6957 Q6954.2813,3698.8364 6953.5469,3698.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="6974.25" y="3697.534">RlImage</text><line style="stroke:#181818;stroke-width:0.5;" x1="6670" x2="7302" y1="3708.102" y2="3708.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6677" y="3716.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="6689" y="3727.0679">_image : Image</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6677" y="3735.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="6689" y="3746.1358">_frameCount : int</text><line style="stroke:#181818;stroke-width:0.5;" x1="6670" x2="7302" y1="3754.2378" y2="3754.2378"/><ellipse cx="6680" cy="3765.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="6689" y="3773.2038">RlImage(const Image&amp; image)</text><ellipse cx="6680" cy="3784.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="6689" y="3792.2717">RlImage(const Image&amp; image, int frameCount)</text><ellipse cx="6680" cy="3803.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="6689" y="3811.3396">~RlImage()</text><ellipse cx="6680" cy="3822.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="191" x="6689" y="3830.4075">getImage() : Image&amp; {query}</text><ellipse cx="6680" cy="3841.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="6689" y="3849.4754">getImage() : Image&amp;</text><ellipse cx="6680" cy="3860.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="336" x="6689" y="3868.5433">getImageAlphaBorder(float threshold) : Rectangle</text><ellipse cx="6680" cy="3879.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="6689" y="3887.6113">getImageColor(int x, int y) : RlColor</text><ellipse cx="6680" cy="3898.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="6689" y="3906.6792">copy() : RlImage</text><ellipse cx="6680" cy="3917.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="286" x="6689" y="3925.7471">subImage(const Rectangle&amp; rec) : RlImage</text><ellipse cx="6680" cy="3936.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="263" x="6689" y="3944.815">save(const std::string&amp; fileName) : bool</text><ellipse cx="6680" cy="3955.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="6689" y="3963.8829">saveAsCode(const std::string&amp; fileName) : bool</text><ellipse cx="6680" cy="3974.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="6689" y="3982.9508">getFrameCount() : int&amp; {query}</text><ellipse cx="6680" cy="3994.0528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="268" x="6689" y="4002.0188">loadImageColors() : std::vector&lt;RlColor&gt;</text><ellipse cx="6680" cy="4013.1207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="395" x="6689" y="4021.0867">loadImagePalette(int maxPaletteSize) : std::vector&lt;RlColor&gt;</text><ellipse cx="6680" cy="4032.1887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="363" x="6689" y="4040.1546">alphaClear(const RlColor&amp; color, float threshold) : void</text><ellipse cx="6680" cy="4051.2566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="217" x="6689" y="4059.2225">alphaCrop(float threshold) : void</text><ellipse cx="6680" cy="4070.3245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="304" x="6689" y="4078.2904">alphaMask(const RlImage&amp; alphaMask) : void</text><ellipse cx="6680" cy="4089.3924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="163" x="6689" y="4097.3583">alphaPremultiply() : void</text><ellipse cx="6680" cy="4108.4603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="242" x="6689" y="4116.4263">changeFormat(int newFormat) : void</text><ellipse cx="6680" cy="4127.5282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="249" x="6689" y="4135.4942">colorBrightness(int brightness) : void</text><ellipse cx="6680" cy="4146.5962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="227" x="6689" y="4154.5621">colorContrast(float contrast) : void</text><ellipse cx="6680" cy="4165.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="146" x="6689" y="4173.63">colorGrayscale() : void</text><ellipse cx="6680" cy="4184.732" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="121" x="6689" y="4192.6979">colorInvert() : void</text><ellipse cx="6680" cy="4203.7999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="429" x="6689" y="4211.7658">colorReplace(const RlColor&amp; color, const RlColor&amp; replace) : void</text><ellipse cx="6680" cy="4222.8678" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="242" x="6689" y="4230.8338">colorTint(const RlColor&amp; color) : void</text><ellipse cx="6680" cy="4241.9357" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="229" x="6689" y="4249.9017">crop(const Rectangle&amp; crop) : void</text><ellipse cx="6680" cy="4261.0037" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="341" x="6689" y="4268.9696">dither(int rBpp, int gBpp, int bBpp, int aBpp) : void</text><ellipse cx="6680" cy="4280.0716" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="139" x="6689" y="4288.0375">flipHorizontal() : void</text><ellipse cx="6680" cy="4299.1395" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="6689" y="4307.1054">flipVertical() : void</text><ellipse cx="6680" cy="4318.2074" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="6689" y="4326.1733">mipmaps() : void</text><ellipse cx="6680" cy="4337.2753" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="281" x="6689" y="4345.2413">resize(int newWidth, int newHeight) : void</text><ellipse cx="6680" cy="4356.3432" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="608" x="6689" y="4364.3092">resizeCanvas(int newWidth, int newHeight, int offsetX, int offsetY, const RlColor&amp; fill) : void</text><ellipse cx="6680" cy="4375.4112" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="406" x="6689" y="4383.3771">resizeNearesetNeighbor(int newWidth, int newHeight) : void</text><ellipse cx="6680" cy="4394.4791" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="6689" y="4402.445">rotateClockwise() : void</text><ellipse cx="6680" cy="4413.547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="207" x="6689" y="4421.5129">rotateCounterClockwise() : void</text><ellipse cx="6680" cy="4432.6149" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="6689" y="4440.5808">toPot(const RlColor&amp; fill) : void</text></g><!--MD5=[d0b105104f664e8ac1338958bf80dba8]
class raylib.helper.AudioHelper--><g id="elem_raylib.helper.AudioHelper"><rect codeLine="530" fill="#F1F1F1" height="200.5433" id="raylib.helper.AudioHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="397" x="17055.5" y="2029.602"/><ellipse cx="17207.75" cy="2045.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M17207.5469,2052.3364 Q17205.0625,2052.3364 17203.7344,2050.6957 Q17202.4219,2049.0239 17202.4219,2045.9145 Q17202.4219,2042.7895 17203.7344,2041.1332 Q17205.0625,2039.477 17207.5469,2039.477 Q17208.2656,2039.477 17208.9219,2039.6332 Q17209.5625,2039.7895 17210.125,2040.0864 L17210.125,2042.8051 Q17209.7656,2042.4614 17209.4688,2042.2739 Q17209.1719,2042.0707 17208.9063,2041.9457 Q17208.5938,2041.8051 17208.2813,2041.7426 Q17207.9844,2041.6801 17207.6719,2041.6801 Q17206.3438,2041.6801 17205.6563,2042.7426 Q17204.9688,2043.8364 17204.9688,2045.9145 Q17204.9688,2048.0082 17205.6563,2049.0707 Q17206.3438,2050.1489 17207.6719,2050.1489 Q17208.3125,2050.1489 17208.9063,2049.8676 Q17209.2031,2049.7426 17209.4844,2049.5551 Q17209.7813,2049.352 17210.125,2049.0239 L17210.125,2051.7426 Q17209.5469,2052.0395 17208.9063,2052.1957 Q17208.2813,2052.3364 17207.5469,2052.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="84" x="17228.25" y="2051.034">AudioHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="17056.5" x2="17451.5" y1="2061.602" y2="2061.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17063.5" y="2069.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="192" x="17075.5" y="2080.5679">_audioDeviceInit : static bool</text><line style="stroke:#181818;stroke-width:0.5;" x1="17056.5" x2="17451.5" y1="2088.6699" y2="2088.6699"/><ellipse cx="17066.5" cy="2099.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="184" x="17075.5" y="2107.6358">isAudioDeviceReady() : bool</text><ellipse cx="17066.5" cy="2118.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="231" x="17075.5" y="2126.7038">getNumberOfSoundsPlaying() : int</text><ellipse cx="17066.5" cy="2137.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="165" x="17075.5" y="2145.7717">closeAudioDevice() : void</text><ellipse cx="17066.5" cy="2156.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="153" x="17075.5" y="2164.8396">initAudioDevice() : void</text><ellipse cx="17066.5" cy="2175.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="371" x="17075.5" y="2183.9075">setAudioStreamBufferSizeDefault(const int&amp; size) : void</text><ellipse cx="17066.5" cy="2195.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="248" x="17075.5" y="2202.9754">setMasterVolume(float volume) : void</text><ellipse cx="17066.5" cy="2214.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="155" x="17075.5" y="2222.0433">stopMultiSound() : void</text></g><!--MD5=[14b0dacecc39382ff07f69a7fe67296b]
class raylib.helper.CameraHelper--><g id="elem_raylib.helper.CameraHelper"><rect codeLine="541" fill="#F1F1F1" height="143.3396" id="raylib.helper.CameraHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="674" x="17488" y="2058.602"/><ellipse cx="17772.25" cy="2074.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M17772.0469,2081.3364 Q17769.5625,2081.3364 17768.2344,2079.6957 Q17766.9219,2078.0239 17766.9219,2074.9145 Q17766.9219,2071.7895 17768.2344,2070.1332 Q17769.5625,2068.477 17772.0469,2068.477 Q17772.7656,2068.477 17773.4219,2068.6332 Q17774.0625,2068.7895 17774.625,2069.0864 L17774.625,2071.8051 Q17774.2656,2071.4614 17773.9688,2071.2739 Q17773.6719,2071.0707 17773.4063,2070.9457 Q17773.0938,2070.8051 17772.7813,2070.7426 Q17772.4844,2070.6801 17772.1719,2070.6801 Q17770.8438,2070.6801 17770.1563,2071.7426 Q17769.4688,2072.8364 17769.4688,2074.9145 Q17769.4688,2077.0082 17770.1563,2078.0707 Q17770.8438,2079.1489 17772.1719,2079.1489 Q17772.8125,2079.1489 17773.4063,2078.8676 Q17773.7031,2078.7426 17773.9844,2078.5551 Q17774.2813,2078.352 17774.625,2078.0239 L17774.625,2080.7426 Q17774.0469,2081.0395 17773.4063,2081.1957 Q17772.7813,2081.3364 17772.0469,2081.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="17792.75" y="2080.034">CameraHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="17489" x2="18161" y1="2090.602" y2="2090.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="17489" x2="18161" y1="2098.602" y2="2098.602"/><ellipse cx="17499" cy="2109.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="197" x="17508" y="2117.5679">setAltControl(int keyAlt) : void</text><ellipse cx="17499" cy="2128.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="517" x="17508" y="2136.6358">setCameraMode(const RlCamera&amp; camera, const CameraMode&amp; mode) : void</text><ellipse cx="17499" cy="2147.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="648" x="17508" y="2155.7038">setMoveControls(int keyFront, int keyBack, int keyRight, int keyLeft, int keyUp, int keyDown) : void</text><ellipse cx="17499" cy="2166.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="211" x="17508" y="2174.7717">setPanControl(int keyPan) : void</text><ellipse cx="17499" cy="2185.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="337" x="17508" y="2193.8396">setSmoothZoomControl(int keySmoothZoom) : void</text></g><!--MD5=[62470add8b0f268603f45b2f16cfa911]
class raylib.helper.Collision2DHelper--><g id="elem_raylib.helper.Collision2DHelper"><rect codeLine="549" fill="#F1F1F1" height="219.6113" id="raylib.helper.Collision2DHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1069" x="18197.5" y="2020.102"/><ellipse cx="18667.75" cy="2036.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M18667.5469,2042.8364 Q18665.0625,2042.8364 18663.7344,2041.1957 Q18662.4219,2039.5239 18662.4219,2036.4145 Q18662.4219,2033.2895 18663.7344,2031.6332 Q18665.0625,2029.977 18667.5469,2029.977 Q18668.2656,2029.977 18668.9219,2030.1332 Q18669.5625,2030.2895 18670.125,2030.5864 L18670.125,2033.3051 Q18669.7656,2032.9614 18669.4688,2032.7739 Q18669.1719,2032.5707 18668.9063,2032.4457 Q18668.5938,2032.3051 18668.2813,2032.2426 Q18667.9844,2032.1801 18667.6719,2032.1801 Q18666.3438,2032.1801 18665.6563,2033.2426 Q18664.9688,2034.3364 18664.9688,2036.4145 Q18664.9688,2038.5082 18665.6563,2039.5707 Q18666.3438,2040.6489 18667.6719,2040.6489 Q18668.3125,2040.6489 18668.9063,2040.3676 Q18669.2031,2040.2426 18669.4844,2040.0551 Q18669.7813,2039.852 18670.125,2039.5239 L18670.125,2042.2426 Q18669.5469,2042.5395 18668.9063,2042.6957 Q18668.2813,2042.8364 18667.5469,2042.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="18688.25" y="2041.534">Collision2DHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="18198.5" x2="19265.5" y1="2052.102" y2="2052.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="18198.5" x2="19265.5" y1="2060.102" y2="2060.102"/><ellipse cx="18208.5" cy="2071.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="498" x="18217.5" y="2079.0679">getCollisionRec(const Rectangle&amp; rec1, const Rectangle&amp; rec2) : Rectangle</text><ellipse cx="18208.5" cy="2090.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="643" x="18217.5" y="2098.1358">checkCollisionCircleRec(const Vector2f&amp; center, const float&amp; radius, const Rectangle&amp; rec) : bool</text><ellipse cx="18208.5" cy="2109.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="803" x="18217.5" y="2117.2038">checkCollisionCircles(const Vector2f&amp; center1, const float&amp; radius1, const Vector2f&amp; center2, const float&amp; radius2) : bool</text><ellipse cx="18208.5" cy="2128.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1043" x="18217.5" y="2136.2717">checkCollisionLines(const Vector2f&amp; startPos1, const Vector2f&amp; endPos1, const Vector2f&amp; startPos2, const Vector2f&amp; endPos2, Vector2f&amp; collisionPoint) : bool</text><ellipse cx="18208.5" cy="2147.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="655" x="18217.5" y="2155.3396">checkCollisionPointCircle(const Vector2f&amp; point, const Vector2f&amp; center, const float&amp; radius) : bool</text><ellipse cx="18208.5" cy="2166.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="763" x="18217.5" y="2174.4075">checkCollisionPointLine(const Vector2f&amp; point, const Vector2f&amp; p1, const Vector2f&amp; p2, const int&amp; threshold) : bool</text><ellipse cx="18208.5" cy="2185.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="496" x="18217.5" y="2193.4754">checkCollisionPointRec(const Vector2f&amp; point, const Rectangle&amp; rec) : bool</text><ellipse cx="18208.5" cy="2204.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="780" x="18217.5" y="2212.5433">checkCollisionPointTriangle(const Vector2f&amp; point, const Vector2f&amp; p1, const Vector2f&amp; p2, const Vector2f&amp; p3) : bool</text><ellipse cx="18208.5" cy="2223.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="483" x="18217.5" y="2231.6113">checkCollisionRecs(const Rectangle&amp; rec1, const Rectangle&amp; rec2) : bool</text></g><!--MD5=[c4d317f45dc25df0dd1395498caf5d22]
class raylib.helper.Collision3dHelper--><g id="elem_raylib.helper.Collision3dHelper"><rect codeLine="561" fill="#F1F1F1" height="219.6113" id="raylib.helper.Collision3dHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="902" x="19302" y="2020.102"/><ellipse cx="19689.25" cy="2036.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M19689.0469,2042.8364 Q19686.5625,2042.8364 19685.2344,2041.1957 Q19683.9219,2039.5239 19683.9219,2036.4145 Q19683.9219,2033.2895 19685.2344,2031.6332 Q19686.5625,2029.977 19689.0469,2029.977 Q19689.7656,2029.977 19690.4219,2030.1332 Q19691.0625,2030.2895 19691.625,2030.5864 L19691.625,2033.3051 Q19691.2656,2032.9614 19690.9688,2032.7739 Q19690.6719,2032.5707 19690.4063,2032.4457 Q19690.0938,2032.3051 19689.7813,2032.2426 Q19689.4844,2032.1801 19689.1719,2032.1801 Q19687.8438,2032.1801 19687.1563,2033.2426 Q19686.4688,2034.3364 19686.4688,2036.4145 Q19686.4688,2038.5082 19687.1563,2039.5707 Q19687.8438,2040.6489 19689.1719,2040.6489 Q19689.8125,2040.6489 19690.4063,2040.3676 Q19690.7031,2040.2426 19690.9844,2040.0551 Q19691.2813,2039.852 19691.625,2039.5239 L19691.625,2042.2426 Q19691.0469,2042.5395 19690.4063,2042.6957 Q19689.7813,2042.8364 19689.0469,2042.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="119" x="19709.75" y="2041.534">Collision3dHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="19303" x2="20203" y1="2052.102" y2="2052.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="19303" x2="20203" y1="2060.102" y2="2060.102"/><ellipse cx="19313" cy="2071.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="503" x="19322" y="2079.0679">getRayCollisionBox(const Ray&amp; ray, const BoundingBox&amp; box) : RayCollision</text><ellipse cx="19313" cy="2090.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="711" x="19322" y="2098.1358">getRayCollisionMesh(const Ray&amp; ray, const model::RlMesh&amp; mesh, const Matrix&amp; transform) : RayCollision</text><ellipse cx="19313" cy="2109.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="554" x="19322" y="2117.2038">getRayCollisionModel(const Ray&amp; ray, const model::RlModel&amp; model) : RayCollision</text><ellipse cx="19313" cy="2128.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="876" x="19322" y="2136.2717">getRayCollisionQuad(const Ray&amp; ray, const Vector3f&amp; p1, const Vector3f&amp; p2, const Vector3f&amp; p3, const Vector3f&amp; p4) : RayCollision</text><ellipse cx="19313" cy="2147.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="646" x="19322" y="2155.3396">getRayCollisionSphere(const Ray&amp; ray, const Vector3f&amp; center, const float&amp; radius) : RayCollision</text><ellipse cx="19313" cy="2166.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="761" x="19322" y="2174.4075">getRayCollisionTriangle(const Ray&amp; ray, const Vector3f&amp; p1, const Vector3f&amp; p2, const Vector3f&amp; p3) : RayCollision</text><ellipse cx="19313" cy="2185.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="679" x="19322" y="2193.4754">checkCollisionBoxSphere(const BoundingBox&amp; box, const Vector3f&amp; center, const float&amp; radius) : bool</text><ellipse cx="19313" cy="2204.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="543" x="19322" y="2212.5433">checkCollisionBoxes(const BoundingBox&amp; box1, const BoundingBox&amp; box2) : bool</text><ellipse cx="19313" cy="2223.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="813" x="19322" y="2231.6113">checkCollisionSpheres(const Vector3f&amp; center1, const float&amp; radius1, const Vector3f&amp; center2, const float&amp; radius2) : bool</text></g><!--MD5=[dfc8580c76ca14c833565e9202216036]
class raylib.helper.ColorHelper--><g id="elem_raylib.helper.ColorHelper"><rect codeLine="573" fill="#F1F1F1" height="219.6113" id="raylib.helper.ColorHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="591" x="16958.5" y="2948.102"/><ellipse cx="17209.75" cy="2964.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M17209.5469,2970.8364 Q17207.0625,2970.8364 17205.7344,2969.1957 Q17204.4219,2967.5239 17204.4219,2964.4145 Q17204.4219,2961.2895 17205.7344,2959.6332 Q17207.0625,2957.977 17209.5469,2957.977 Q17210.2656,2957.977 17210.9219,2958.1332 Q17211.5625,2958.2895 17212.125,2958.5864 L17212.125,2961.3051 Q17211.7656,2960.9614 17211.4688,2960.7739 Q17211.1719,2960.5707 17210.9063,2960.4457 Q17210.5938,2960.3051 17210.2813,2960.2426 Q17209.9844,2960.1801 17209.6719,2960.1801 Q17208.3438,2960.1801 17207.6563,2961.2426 Q17206.9688,2962.3364 17206.9688,2964.4145 Q17206.9688,2966.5082 17207.6563,2967.5707 Q17208.3438,2968.6489 17209.6719,2968.6489 Q17210.3125,2968.6489 17210.9063,2968.3676 Q17211.2031,2968.2426 17211.4844,2968.0551 Q17211.7813,2967.852 17212.125,2967.5239 L17212.125,2970.2426 Q17211.5469,2970.5395 17210.9063,2970.6957 Q17210.2813,2970.8364 17209.5469,2970.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="17230.25" y="2969.534">ColorHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="16959.5" x2="17548.5" y1="2980.102" y2="2980.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="16959.5" x2="17548.5" y1="2988.102" y2="2988.102"/><ellipse cx="16969.5" cy="2999.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="355" x="16978.5" y="3007.0679">colorAlpha(const RlColor&amp; color, float alpha) : RlColor</text><ellipse cx="16969.5" cy="3018.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="565" x="16978.5" y="3026.1358">colorAlphaBlend(const RlColor&amp; dst, const RlColor&amp; src, const RlColor&amp; tint) : RlColor</text><ellipse cx="16969.5" cy="3037.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="410" x="16978.5" y="3045.2038">colorFromHSV(float hue, float saturation, float value) : RlColor</text><ellipse cx="16969.5" cy="3056.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="433" x="16978.5" y="3064.2717">colorFromNormalized(const Vector4f&amp; normalizedColor) : RlColor</text><ellipse cx="16969.5" cy="3075.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="276" x="16978.5" y="3083.3396">getColor(unsigned int hexValue) : RlColor</text><ellipse cx="16969.5" cy="3094.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="310" x="16978.5" y="3102.4075">getPixelColor(void* srcPtr, int format) : RlColor</text><ellipse cx="16969.5" cy="3113.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="285" x="16978.5" y="3121.4754">colorToHSV(const RlColor&amp; color) : Vector3f</text><ellipse cx="16969.5" cy="3132.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="358" x="16978.5" y="3140.5433">getPixelDataSize(int width, int height, int format) : int</text><ellipse cx="16969.5" cy="3151.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="432" x="16978.5" y="3159.6113">setPixelColor(void* dstPtr, const RlColor&amp; color, int format) : void</text></g><!--MD5=[054dc182820133524a250f1982d089ae]
class raylib.helper.CoreHelper--><g id="elem_raylib.helper.CoreHelper"><rect codeLine="585" fill="#F1F1F1" height="181.4754" id="raylib.helper.CoreHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="459" x="17584.5" y="2967.602"/><ellipse cx="17771.75" cy="2983.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M17771.5469,2990.3364 Q17769.0625,2990.3364 17767.7344,2988.6957 Q17766.4219,2987.0239 17766.4219,2983.9145 Q17766.4219,2980.7895 17767.7344,2979.1332 Q17769.0625,2977.477 17771.5469,2977.477 Q17772.2656,2977.477 17772.9219,2977.6332 Q17773.5625,2977.7895 17774.125,2978.0864 L17774.125,2980.8051 Q17773.7656,2980.4614 17773.4688,2980.2739 Q17773.1719,2980.0707 17772.9063,2979.9457 Q17772.5938,2979.8051 17772.2813,2979.7426 Q17771.9844,2979.6801 17771.6719,2979.6801 Q17770.3438,2979.6801 17769.6563,2980.7426 Q17768.9688,2981.8364 17768.9688,2983.9145 Q17768.9688,2986.0082 17769.6563,2987.0707 Q17770.3438,2988.1489 17771.6719,2988.1489 Q17772.3125,2988.1489 17772.9063,2987.8676 Q17773.2031,2987.7426 17773.4844,2987.5551 Q17773.7813,2987.352 17774.125,2987.0239 L17774.125,2989.7426 Q17773.5469,2990.0395 17772.9063,2990.1957 Q17772.2813,2990.3364 17771.5469,2990.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="17792.25" y="2989.034">CoreHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="17585.5" x2="18042.5" y1="2999.602" y2="2999.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="17585.5" x2="18042.5" y1="3007.602" y2="3007.602"/><ellipse cx="17595.5" cy="3018.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="433" x="17604.5" y="3026.5679">loadVrStereoConfig(const VrDeviceInfo&amp; device) : VrStereoConfig</text><ellipse cx="17595.5" cy="3037.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="122" x="17604.5" y="3045.6358">getTime() : double</text><ellipse cx="17595.5" cy="3056.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="147" x="17604.5" y="3064.7038">getFrameTime() : float</text><ellipse cx="17595.5" cy="3075.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="83" x="17604.5" y="3083.7717">getFPS() : int</text><ellipse cx="17595.5" cy="3094.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="250" x="17604.5" y="3102.8396">openURL(const std::string&amp; url) : void</text><ellipse cx="17595.5" cy="3113.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="213" x="17604.5" y="3121.9075">setFramerateLimit(int fps) : void</text><ellipse cx="17595.5" cy="3133.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="393" x="17604.5" y="3140.9754">unloadVrStereoConfig(const VrStereoConfig&amp; config) : void</text></g><!--MD5=[4cf40de1822577f09e71119bf2324adf]
class raylib.helper.FileHelper--><g id="elem_raylib.helper.FileHelper"><rect codeLine="595" fill="#F1F1F1" height="410.2904" id="raylib.helper.FileHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1125" x="18078.5" y="2853.102"/><ellipse cx="18602.75" cy="2869.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M18602.5469,2875.8364 Q18600.0625,2875.8364 18598.7344,2874.1957 Q18597.4219,2872.5239 18597.4219,2869.4145 Q18597.4219,2866.2895 18598.7344,2864.6332 Q18600.0625,2862.977 18602.5469,2862.977 Q18603.2656,2862.977 18603.9219,2863.1332 Q18604.5625,2863.2895 18605.125,2863.5864 L18605.125,2866.3051 Q18604.7656,2865.9614 18604.4688,2865.7739 Q18604.1719,2865.5707 18603.9063,2865.4457 Q18603.5938,2865.3051 18603.2813,2865.2426 Q18602.9844,2865.1801 18602.6719,2865.1801 Q18601.3438,2865.1801 18600.6563,2866.2426 Q18599.9688,2867.3364 18599.9688,2869.4145 Q18599.9688,2871.5082 18600.6563,2872.5707 Q18601.3438,2873.6489 18602.6719,2873.6489 Q18603.3125,2873.6489 18603.9063,2873.3676 Q18604.2031,2873.2426 18604.4844,2873.0551 Q18604.7813,2872.852 18605.125,2872.5239 L18605.125,2875.2426 Q18604.5469,2875.5395 18603.9063,2875.6957 Q18603.2813,2875.8364 18602.5469,2875.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="68" x="18623.25" y="2874.534">FileHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="18079.5" x2="19202.5" y1="2885.102" y2="2885.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="18079.5" x2="19202.5" y1="2893.102" y2="2893.102"/><ellipse cx="18089.5" cy="2904.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="319" x="18098.5" y="2912.0679">directoryExists(const std::string&amp; dirPath) : bool</text><ellipse cx="18089.5" cy="2923.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="292" x="18098.5" y="2931.1358">fileExists(const std::string&amp; fileName) : bool</text><ellipse cx="18089.5" cy="2942.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="142" x="18098.5" y="2950.2038">isFileDropped() : bool</text><ellipse cx="18089.5" cy="2961.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="483" x="18098.5" y="2969.2717">isFileExtension(const std::string&amp; fileName, const std::string&amp; ext) : bool</text><ellipse cx="18089.5" cy="2980.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="470" x="18098.5" y="2988.3396">saveFileText(const std::string&amp; fileName, const std::string&amp; text) : bool</text><ellipse cx="18089.5" cy="2999.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="376" x="18098.5" y="3007.4075">getFileModTime(const std::string&amp; fileName) : long long</text><ellipse cx="18089.5" cy="3018.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="376" x="18098.5" y="3026.4754">getDirectoryPath(const std::string&amp; filePath) : std::string</text><ellipse cx="18089.5" cy="3037.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="383" x="18098.5" y="3045.5433">getFileExtension(const std::string&amp; fileName) : std::string</text><ellipse cx="18089.5" cy="3056.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="348" x="18098.5" y="3064.6113">getFileName(const std::string&amp; filePath) : std::string</text><ellipse cx="18089.5" cy="3075.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="421" x="18098.5" y="3083.6792">getFileNameWithoutExt(const std::string&amp; filePath) : std::string</text><ellipse cx="18089.5" cy="3094.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="403" x="18098.5" y="3102.7471">getPrevDirectoryPath(const std::string&amp; dirPath) : std::string</text><ellipse cx="18089.5" cy="3113.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="228" x="18098.5" y="3121.815">getWorkingDirectory() : std::string</text><ellipse cx="18089.5" cy="3132.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="353" x="18098.5" y="3140.8829">loadFileText(const std::string&amp; fileName) : std::string</text><ellipse cx="18089.5" cy="3151.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="613" x="18098.5" y="3159.9508">getDirectoryFiles(const std::string&amp; dirPath, const bool&amp; recursive) : std::vector&lt;std::string&gt;</text><ellipse cx="18089.5" cy="3171.0528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="823" x="18098.5" y="3179.0188">getDirectoryFiles(const std::string&amp; dirPath, const std::function&lt;bool ( const std::string&amp; )&gt;&amp; filter) : std::vector&lt;std::string&gt;</text><ellipse cx="18089.5" cy="3190.1207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1099" x="18098.5" y="3198.0867">getDirectoryFiles(const std::string&amp; dirPath, const bool&amp; recursive, const std::function&lt;bool ( const std::string&amp; fileName )&gt;&amp; filterFunction) : std::vector&lt;std::string&gt;</text><ellipse cx="18089.5" cy="3209.1887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="286" x="18098.5" y="3217.1546">getDroppedFiles() : std::vector&lt;std::string&gt;</text><ellipse cx="18089.5" cy="3228.2566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="471" x="18098.5" y="3236.2225">loadFileData(const std::string&amp; fileName) : std::vector&lt;unsigned char&gt;</text><ellipse cx="18089.5" cy="3247.3245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="301" x="18098.5" y="3255.2904">changeDirectory(const std::string&amp; dir) : void</text></g><!--MD5=[54cc7663e54c6d090332d0a9a17cb499]
class raylib.helper.ImageHelper--><g id="elem_raylib.helper.ImageHelper"><rect codeLine="617" fill="#F1F1F1" height="219.6113" id="raylib.helper.ImageHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="999" x="19238.5" y="2948.102"/><ellipse cx="19689.75" cy="2964.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M19689.5469,2970.8364 Q19687.0625,2970.8364 19685.7344,2969.1957 Q19684.4219,2967.5239 19684.4219,2964.4145 Q19684.4219,2961.2895 19685.7344,2959.6332 Q19687.0625,2957.977 19689.5469,2957.977 Q19690.2656,2957.977 19690.9219,2958.1332 Q19691.5625,2958.2895 19692.125,2958.5864 L19692.125,2961.3051 Q19691.7656,2960.9614 19691.4688,2960.7739 Q19691.1719,2960.5707 19690.9063,2960.4457 Q19690.5938,2960.3051 19690.2813,2960.2426 Q19689.9844,2960.1801 19689.6719,2960.1801 Q19688.3438,2960.1801 19687.6563,2961.2426 Q19686.9688,2962.3364 19686.9688,2964.4145 Q19686.9688,2966.5082 19687.6563,2967.5707 Q19688.3438,2968.6489 19689.6719,2968.6489 Q19690.3125,2968.6489 19690.9063,2968.3676 Q19691.2031,2968.2426 19691.4844,2968.0551 Q19691.7813,2967.852 19692.125,2967.5239 L19692.125,2970.2426 Q19691.5469,2970.5395 19690.9063,2970.6957 Q19690.2813,2970.8364 19689.5469,2970.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="88" x="19710.25" y="2969.534">ImageHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="19239.5" x2="20236.5" y1="2980.102" y2="2980.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="19239.5" x2="20236.5" y1="2988.102" y2="2988.102"/><ellipse cx="19249.5" cy="2999.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="607" x="19258.5" y="3007.0679">fromText(const std::string&amp; text, int fontSize, const RlColor&amp; color) : raylib::image::RlImage</text><ellipse cx="19249.5" cy="3018.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="914" x="19258.5" y="3026.1358">fromText(const raylib::text::RlFont&amp; font, const std::string&amp; text, float fontSize, float spacing, const RlColor&amp; tint) : raylib::image::RlImage</text><ellipse cx="19249.5" cy="3037.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="973" x="19258.5" y="3045.2038">genImageFontAtlas(const GlyphInfo* chars, Rectangle** recs, int glyphCount, int fontSize, int padding, int packMethod) : raylib::image::RlImage</text><ellipse cx="19249.5" cy="3056.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="385" x="19258.5" y="3064.2717">load(const std::string&amp; fileName) : raylib::image::RlImage</text><ellipse cx="19249.5" cy="3075.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="420" x="19258.5" y="3083.3396">loadAnim(const std::string&amp; fileName) : raylib::image::RlImage</text><ellipse cx="19249.5" cy="3094.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="763" x="19258.5" y="3102.4075">loadFromMemory(const std::string&amp; fileType, const unsigned char* fileData, int dataSize) : raylib::image::RlImage</text><ellipse cx="19249.5" cy="3113.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="281" x="19258.5" y="3121.4754">loadFromScreen() : raylib::image::RlImage</text><ellipse cx="19249.5" cy="3132.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="457" x="19258.5" y="3140.5433">loadFromTexture(const Texture2D&amp; texture) : raylib::image::RlImage</text><ellipse cx="19249.5" cy="3151.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="735" x="19258.5" y="3159.6113">loadRaw(const std::string&amp; fileName, int width, int height, int format, int headerSize) : raylib::image::RlImage</text></g><!--MD5=[a046b8fec0eb06a5cc4cec55ec71fd8f]
class raylib.helper.TextHelper--><g id="elem_raylib.helper.TextHelper"><rect codeLine="629" fill="#F1F1F1" height="162.4075" id="raylib.helper.TextHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="737" x="16959.5" y="3981.602"/><ellipse cx="17287.25" cy="3997.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M17287.0469,4004.3364 Q17284.5625,4004.3364 17283.2344,4002.6957 Q17281.9219,4001.0239 17281.9219,3997.9145 Q17281.9219,3994.7895 17283.2344,3993.1332 Q17284.5625,3991.477 17287.0469,3991.477 Q17287.7656,3991.477 17288.4219,3991.6332 Q17289.0625,3991.7895 17289.625,3992.0864 L17289.625,3994.8051 Q17289.2656,3994.4614 17288.9688,3994.2739 Q17288.6719,3994.0707 17288.4063,3993.9457 Q17288.0938,3993.8051 17287.7813,3993.7426 Q17287.4844,3993.6801 17287.1719,3993.6801 Q17285.8438,3993.6801 17285.1563,3994.7426 Q17284.4688,3995.8364 17284.4688,3997.9145 Q17284.4688,4000.0082 17285.1563,4001.0707 Q17285.8438,4002.1489 17287.1719,4002.1489 Q17287.8125,4002.1489 17288.4063,4001.8676 Q17288.7031,4001.7426 17288.9844,4001.5551 Q17289.2813,4001.352 17289.625,4001.0239 L17289.625,4003.7426 Q17289.0469,4004.0395 17288.4063,4004.1957 Q17287.7813,4004.3364 17287.0469,4004.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="17307.75" y="4003.034">TextHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="16960.5" x2="17695.5" y1="4013.602" y2="4013.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="16960.5" x2="17695.5" y1="4021.602" y2="4021.602"/><ellipse cx="16970.5" cy="4032.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="473" x="16979.5" y="4040.5679">getGlyphInfo(const raylib::text::RlFont&amp; font, int codepoint) : GlyphInfo</text><ellipse cx="16970.5" cy="4051.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="504" x="16979.5" y="4059.6358">getGlyphAtlasRec(const raylib::text::RlFont&amp; font, int codepoint) : Rectangle</text><ellipse cx="16970.5" cy="4070.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="520" x="16979.5" y="4078.7038">measureText(const raylib::text::RlFont&amp; font, const std::string&amp; text) : Vector2f</text><ellipse cx="16970.5" cy="4089.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="711" x="16979.5" y="4097.7717">measureText(const raylib::text::RlFont&amp; font, const std::string&amp; text, float fontSize, float spacing) : Vector2f</text><ellipse cx="16970.5" cy="4108.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="436" x="16979.5" y="4116.8396">getGlyphIndex(const raylib::text::RlFont&amp; font, int codepoint) : int</text><ellipse cx="16970.5" cy="4127.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="357" x="16979.5" y="4135.9075">measureText(const std::string&amp; text, int fontSize) : int</text></g><!--MD5=[465da1b7a75d73e5a892fec67be6d952]
class raylib.helper.VectorHelper--><g id="elem_raylib.helper.VectorHelper"><rect codeLine="638" fill="#F1F1F1" height="162.4075" id="raylib.helper.VectorHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="386" x="17732" y="3981.602"/><ellipse cx="17877.25" cy="3997.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M17877.0469,4004.3364 Q17874.5625,4004.3364 17873.2344,4002.6957 Q17871.9219,4001.0239 17871.9219,3997.9145 Q17871.9219,3994.7895 17873.2344,3993.1332 Q17874.5625,3991.477 17877.0469,3991.477 Q17877.7656,3991.477 17878.4219,3991.6332 Q17879.0625,3991.7895 17879.625,3992.0864 L17879.625,3994.8051 Q17879.2656,3994.4614 17878.9688,3994.2739 Q17878.6719,3994.0707 17878.4063,3993.9457 Q17878.0938,3993.8051 17877.7813,3993.7426 Q17877.4844,3993.6801 17877.1719,3993.6801 Q17875.8438,3993.6801 17875.1563,3994.7426 Q17874.4688,3995.8364 17874.4688,3997.9145 Q17874.4688,4000.0082 17875.1563,4001.0707 Q17875.8438,4002.1489 17877.1719,4002.1489 Q17877.8125,4002.1489 17878.4063,4001.8676 Q17878.7031,4001.7426 17878.9844,4001.5551 Q17879.2813,4001.352 17879.625,4001.0239 L17879.625,4003.7426 Q17879.0469,4004.0395 17878.4063,4004.1957 Q17877.7813,4004.3364 17877.0469,4004.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="87" x="17897.75" y="4003.034">VectorHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="17733" x2="18117" y1="4013.602" y2="4013.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="17733" x2="18117" y1="4021.602" y2="4021.602"/><ellipse cx="17743" cy="4032.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="284" x="17752" y="4040.5679">toVectorf(const::Vector2&amp; vector) : Vector2f</text><ellipse cx="17743" cy="4051.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="284" x="17752" y="4059.6358">toVectorf(const::Vector3&amp; vector) : Vector3f</text><ellipse cx="17743" cy="4070.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="284" x="17752" y="4078.7038">toVectorf(const::Vector4&amp; vector) : Vector4f</text><ellipse cx="17743" cy="4089.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="360" x="17752" y="4097.7717">toRaylibVector(const Vector2f&amp; vector) : static::Vector2</text><ellipse cx="17743" cy="4108.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="360" x="17752" y="4116.8396">toRaylibVector(const Vector3f&amp; vector) : static::Vector3</text><ellipse cx="17743" cy="4127.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="360" x="17752" y="4135.9075">toRaylibVector(const Vector4f&amp; vector) : static::Vector4</text></g><!--MD5=[38359bdffa633f70dec5383cb35091f3]
class raylib.helper.WorldHelper--><g id="elem_raylib.helper.WorldHelper"><rect codeLine="647" fill="#F1F1F1" height="124.2717" id="raylib.helper.WorldHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="722" x="18153" y="4000.602"/><ellipse cx="18467.25" cy="4016.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M18467.0469,4023.3364 Q18464.5625,4023.3364 18463.2344,4021.6957 Q18461.9219,4020.0239 18461.9219,4016.9145 Q18461.9219,4013.7895 18463.2344,4012.1332 Q18464.5625,4010.477 18467.0469,4010.477 Q18467.7656,4010.477 18468.4219,4010.6332 Q18469.0625,4010.7895 18469.625,4011.0864 L18469.625,4013.8051 Q18469.2656,4013.4614 18468.9688,4013.2739 Q18468.6719,4013.0707 18468.4063,4012.9457 Q18468.0938,4012.8051 18467.7813,4012.7426 Q18467.4844,4012.6801 18467.1719,4012.6801 Q18465.8438,4012.6801 18465.1563,4013.7426 Q18464.4688,4014.8364 18464.4688,4016.9145 Q18464.4688,4019.0082 18465.1563,4020.0707 Q18465.8438,4021.1489 18467.1719,4021.1489 Q18467.8125,4021.1489 18468.4063,4020.8676 Q18468.7031,4020.7426 18468.9844,4020.5551 Q18469.2813,4020.352 18469.625,4020.0239 L18469.625,4022.7426 Q18469.0469,4023.0395 18468.4063,4023.1957 Q18467.7813,4023.3364 18467.0469,4023.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="85" x="18487.75" y="4022.034">WorldHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="18154" x2="18874" y1="4032.602" y2="4032.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="18154" x2="18874" y1="4040.602" y2="4040.602"/><ellipse cx="18164" cy="4051.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="562" x="18173" y="4059.5679">getScreenToWorld2D(const Vector2f&amp; position, const Camera2D&amp; camera) : Vector2f</text><ellipse cx="18164" cy="4070.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="539" x="18173" y="4078.6358">getWorldToScreen(const Vector3f&amp; position, const RlCamera&amp; camera) : Vector2f</text><ellipse cx="18164" cy="4089.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="562" x="18173" y="4097.7038">getWorldToScreen2D(const Vector2f&amp; position, const Camera2D&amp; camera) : Vector2f</text><ellipse cx="18164" cy="4108.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="696" x="18173" y="4116.7717">getWorldToScreenEx(const Vector3f&amp; position, const RlCamera&amp; camera, int width, int height) : Vector2f</text></g><!--MD5=[dd22ee461e77f179b57a3063ac52d38d]
class raylib.helper.input.CursorHelper--><g id="elem_raylib.helper.input.CursorHelper"><rect codeLine="655" fill="#F1F1F1" height="162.4075" id="raylib.helper.input.CursorHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="197" x="24268.5" y="2049.102"/><ellipse cx="24317.75" cy="2065.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M24317.5469,2071.8364 Q24315.0625,2071.8364 24313.7344,2070.1957 Q24312.4219,2068.5239 24312.4219,2065.4145 Q24312.4219,2062.2895 24313.7344,2060.6332 Q24315.0625,2058.977 24317.5469,2058.977 Q24318.2656,2058.977 24318.9219,2059.1332 Q24319.5625,2059.2895 24320.125,2059.5864 L24320.125,2062.3051 Q24319.7656,2061.9614 24319.4688,2061.7739 Q24319.1719,2061.5707 24318.9063,2061.4457 Q24318.5938,2061.3051 24318.2813,2061.2426 Q24317.9844,2061.1801 24317.6719,2061.1801 Q24316.3438,2061.1801 24315.6563,2062.2426 Q24314.9688,2063.3364 24314.9688,2065.4145 Q24314.9688,2067.5082 24315.6563,2068.5707 Q24316.3438,2069.6489 24317.6719,2069.6489 Q24318.3125,2069.6489 24318.9063,2069.3676 Q24319.2031,2069.2426 24319.4844,2069.0551 Q24319.7813,2068.852 24320.125,2068.5239 L24320.125,2071.2426 Q24319.5469,2071.5395 24318.9063,2071.6957 Q24318.2813,2071.8364 24317.5469,2071.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="24338.25" y="2070.534">CursorHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="24269.5" x2="24464.5" y1="2081.102" y2="2081.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="24269.5" x2="24464.5" y1="2089.102" y2="2089.102"/><ellipse cx="24279.5" cy="2100.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="154" x="24288.5" y="2108.0679">isCursorHidden() : bool</text><ellipse cx="24279.5" cy="2119.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="171" x="24288.5" y="2127.1358">isCursorOnScreen() : bool</text><ellipse cx="24279.5" cy="2138.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="142" x="24288.5" y="2146.2038">disableCursor() : void</text><ellipse cx="24279.5" cy="2157.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="139" x="24288.5" y="2165.2717">enableCursor() : void</text><ellipse cx="24279.5" cy="2176.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="123" x="24288.5" y="2184.3396">hideCursor() : void</text><ellipse cx="24279.5" cy="2195.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="128" x="24288.5" y="2203.4075">showCursor() : void</text></g><!--MD5=[79b81ab3485f6af6f9801b1139eb9023]
class raylib.helper.input.GamepadHelper--><g id="elem_raylib.helper.input.GamepadHelper"><rect codeLine="664" fill="#F1F1F1" height="238.6792" id="raylib.helper.input.GamepadHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="610" x="24501" y="2010.602"/><ellipse cx="24746.75" cy="2026.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M24746.5469,2033.3364 Q24744.0625,2033.3364 24742.7344,2031.6957 Q24741.4219,2030.0239 24741.4219,2026.9145 Q24741.4219,2023.7895 24742.7344,2022.1332 Q24744.0625,2020.477 24746.5469,2020.477 Q24747.2656,2020.477 24747.9219,2020.6332 Q24748.5625,2020.7895 24749.125,2021.0864 L24749.125,2023.8051 Q24748.7656,2023.4614 24748.4688,2023.2739 Q24748.1719,2023.0707 24747.9063,2022.9457 Q24747.5938,2022.8051 24747.2813,2022.7426 Q24746.9844,2022.6801 24746.6719,2022.6801 Q24745.3438,2022.6801 24744.6563,2023.7426 Q24743.9688,2024.8364 24743.9688,2026.9145 Q24743.9688,2029.0082 24744.6563,2030.0707 Q24745.3438,2031.1489 24746.6719,2031.1489 Q24747.3125,2031.1489 24747.9063,2030.8676 Q24748.2031,2030.7426 24748.4844,2030.5551 Q24748.7813,2030.352 24749.125,2030.0239 L24749.125,2032.7426 Q24748.5469,2033.0395 24747.9063,2033.1957 Q24747.2813,2033.3364 24746.5469,2033.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="24767.25" y="2032.034">GamepadHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="24502" x2="25110" y1="2042.602" y2="2042.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="24502" x2="25110" y1="2050.602" y2="2050.602"/><ellipse cx="24512" cy="2061.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="322" x="24521" y="2069.5679">isGamepadAvailable(const int&amp; gamepad) : bool</text><ellipse cx="24512" cy="2080.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="561" x="24521" y="2088.6358">isGamepadButtonDown(const int&amp; gamepad, const GamepadButton&amp; button) : bool</text><ellipse cx="24512" cy="2099.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="576" x="24521" y="2107.7038">isGamepadButtonPressed(const int&amp; gamepad, const GamepadButton&amp; button) : bool</text><ellipse cx="24512" cy="2118.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="584" x="24521" y="2126.7717">isGamepadButtonReleased(const int&amp; gamepad, const GamepadButton&amp; button) : bool</text><ellipse cx="24512" cy="2137.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="542" x="24521" y="2145.8396">isGamepadButtonUp(const int&amp; gamepad, const GamepadButton&amp; button) : bool</text><ellipse cx="24512" cy="2156.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="551" x="24521" y="2164.9075">getGamepadAxisMovement(const int&amp; gamepad, const GamepadAxis&amp; axis) : float</text><ellipse cx="24512" cy="2176.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="328" x="24521" y="2183.9754">getGamepadAxisCount(const int&amp; gamepad) : int</text><ellipse cx="24512" cy="2195.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="223" x="24521" y="2203.0433">getGamepadButtonPressed() : int</text><ellipse cx="24512" cy="2214.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="382" x="24521" y="2222.1113">setGamepadMappings(const std::string&amp; mappings) : int</text><ellipse cx="24512" cy="2233.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="352" x="24521" y="2241.1792">getGamepadName(const int&amp; gamepad) : std::string</text></g><!--MD5=[a103ccbc999a5c86e16d3876335d41b5]
class raylib.helper.input.KeyboardHelper--><g id="elem_raylib.helper.input.KeyboardHelper"><rect codeLine="677" fill="#F1F1F1" height="238.6792" id="raylib.helper.input.KeyboardHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="438" x="25146" y="2010.602"/><ellipse cx="25306.25" cy="2026.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M25306.0469,2033.3364 Q25303.5625,2033.3364 25302.2344,2031.6957 Q25300.9219,2030.0239 25300.9219,2026.9145 Q25300.9219,2023.7895 25302.2344,2022.1332 Q25303.5625,2020.477 25306.0469,2020.477 Q25306.7656,2020.477 25307.4219,2020.6332 Q25308.0625,2020.7895 25308.625,2021.0864 L25308.625,2023.8051 Q25308.2656,2023.4614 25307.9688,2023.2739 Q25307.6719,2023.0707 25307.4063,2022.9457 Q25307.0938,2022.8051 25306.7813,2022.7426 Q25306.4844,2022.6801 25306.1719,2022.6801 Q25304.8438,2022.6801 25304.1563,2023.7426 Q25303.4688,2024.8364 25303.4688,2026.9145 Q25303.4688,2029.0082 25304.1563,2030.0707 Q25304.8438,2031.1489 25306.1719,2031.1489 Q25306.8125,2031.1489 25307.4063,2030.8676 Q25307.7031,2030.7426 25307.9844,2030.5551 Q25308.2813,2030.352 25308.625,2030.0239 L25308.625,2032.7426 Q25308.0469,2033.0395 25307.4063,2033.1957 Q25306.7813,2033.3364 25306.0469,2033.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="25326.75" y="2032.034">KeyboardHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="25147" x2="25583" y1="2042.602" y2="2042.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="25147" x2="25583" y1="2050.602" y2="2050.602"/><ellipse cx="25157" cy="2061.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="286" x="25166" y="2069.5679">isKeyDown(const KeyboardKey&amp; key) : bool</text><ellipse cx="25157" cy="2080.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="301" x="25166" y="2088.6358">isKeyPressed(const KeyboardKey&amp; key) : bool</text><ellipse cx="25157" cy="2099.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="309" x="25166" y="2107.7038">isKeyReleased(const KeyboardKey&amp; key) : bool</text><ellipse cx="25157" cy="2118.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="267" x="25166" y="2126.7717">isKeyUp(const KeyboardKey&amp; key) : bool</text><ellipse cx="25157" cy="2137.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="145" x="25166" y="2145.8396">getCharPressed() : int</text><ellipse cx="25157" cy="2156.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="137" x="25166" y="2164.9075">getKeyPressed() : int</text><ellipse cx="25157" cy="2176.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="412" x="25166" y="2183.9754">getKeyName(const int&amp; key, const int&amp; scancode) : std::string</text><ellipse cx="25157" cy="2195.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="300" x="25166" y="2203.0433">getPressedKeys() : std::vector&lt;KeyboardKey&gt;</text><ellipse cx="25157" cy="2214.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="238" x="25166" y="2222.1113">getPressedChars() : std::vector&lt;int&gt;</text><ellipse cx="25157" cy="2233.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="280" x="25166" y="2241.1792">setExitKey(const KeyboardKey&amp; key) : void</text></g><!--MD5=[cb60c79014d4d03d67e504aef510cbef]
class raylib.helper.input.MouseHelper--><g id="elem_raylib.helper.input.MouseHelper"><rect codeLine="690" fill="#F1F1F1" height="314.9508" id="raylib.helper.input.MouseHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="545" x="24268.5" y="2900.602"/><ellipse cx="24491.75" cy="2916.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M24491.5469,2923.3364 Q24489.0625,2923.3364 24487.7344,2921.6957 Q24486.4219,2920.0239 24486.4219,2916.9145 Q24486.4219,2913.7895 24487.7344,2912.1332 Q24489.0625,2910.477 24491.5469,2910.477 Q24492.2656,2910.477 24492.9219,2910.6332 Q24493.5625,2910.7895 24494.125,2911.0864 L24494.125,2913.8051 Q24493.7656,2913.4614 24493.4688,2913.2739 Q24493.1719,2913.0707 24492.9063,2912.9457 Q24492.5938,2912.8051 24492.2813,2912.7426 Q24491.9844,2912.6801 24491.6719,2912.6801 Q24490.3438,2912.6801 24489.6563,2913.7426 Q24488.9688,2914.8364 24488.9688,2916.9145 Q24488.9688,2919.0082 24489.6563,2920.0707 Q24490.3438,2921.1489 24491.6719,2921.1489 Q24492.3125,2921.1489 24492.9063,2920.8676 Q24493.2031,2920.7426 24493.4844,2920.5551 Q24493.7813,2920.352 24494.125,2920.0239 L24494.125,2922.7426 Q24493.5469,2923.0395 24492.9063,2923.1957 Q24492.2813,2923.3364 24491.5469,2923.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="24512.25" y="2922.034">MouseHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="24269.5" x2="24812.5" y1="2932.602" y2="2932.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="24269.5" x2="24812.5" y1="2940.602" y2="2940.602"/><ellipse cx="24279.5" cy="2951.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="519" x="24288.5" y="2959.5679">getMouseRay(const Vector2f&amp; mousePosition, const RlCamera&amp; camera) : Ray</text><ellipse cx="24279.5" cy="2970.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="177" x="24288.5" y="2978.6358">getMouseDelta() : Vector2f</text><ellipse cx="24279.5" cy="2989.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="195" x="24288.5" y="2997.7038">getMousePosition() : Vector2f</text><ellipse cx="24279.5" cy="3008.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="377" x="24288.5" y="3016.7717">isMouseButtonDown(const MouseButton&amp; button) : bool</text><ellipse cx="24279.5" cy="3027.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="392" x="24288.5" y="3035.8396">isMouseButtonPressed(const MouseButton&amp; button) : bool</text><ellipse cx="24279.5" cy="3046.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="400" x="24288.5" y="3054.9075">isMouseButtonReleased(const MouseButton&amp; button) : bool</text><ellipse cx="24279.5" cy="3066.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="358" x="24288.5" y="3073.9754">isMouseButtonUp(const MouseButton&amp; button) : bool</text><ellipse cx="24279.5" cy="3085.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="195" x="24288.5" y="3093.0433">getMouseWheelMove() : float</text><ellipse cx="24279.5" cy="3104.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="113" x="24288.5" y="3112.1113">getMouseX() : int</text><ellipse cx="24279.5" cy="3123.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="113" x="24288.5" y="3131.1792">getMouseY() : int</text><ellipse cx="24279.5" cy="3142.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="345" x="24288.5" y="3150.2471">setMouseCursor(const MouseCursor&amp; cursor) : void</text><ellipse cx="24279.5" cy="3161.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="298" x="24288.5" y="3169.315">setMouseOffset(int offsetX, int offsetY) : void</text><ellipse cx="24279.5" cy="3180.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="232" x="24288.5" y="3188.3829">setMousePosition(int x, int y) : void</text><ellipse cx="24279.5" cy="3199.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="308" x="24288.5" y="3207.4508">setMouseScale(float scaleX, float scaleY) : void</text></g><!--MD5=[bacff03f7d85e8e70bf8356996a4a2f6]
class raylib.helper.input.TouchHelper--><g id="elem_raylib.helper.input.TouchHelper"><rect codeLine="707" fill="#F1F1F1" height="295.8829" id="raylib.helper.input.TouchHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="382" x="24849" y="2910.102"/><ellipse cx="24992.75" cy="2926.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M24992.5469,2932.8364 Q24990.0625,2932.8364 24988.7344,2931.1957 Q24987.4219,2929.5239 24987.4219,2926.4145 Q24987.4219,2923.2895 24988.7344,2921.6332 Q24990.0625,2919.977 24992.5469,2919.977 Q24993.2656,2919.977 24993.9219,2920.1332 Q24994.5625,2920.2895 24995.125,2920.5864 L24995.125,2923.3051 Q24994.7656,2922.9614 24994.4688,2922.7739 Q24994.1719,2922.5707 24993.9063,2922.4457 Q24993.5938,2922.3051 24993.2813,2922.2426 Q24992.9844,2922.1801 24992.6719,2922.1801 Q24991.3438,2922.1801 24990.6563,2923.2426 Q24989.9688,2924.3364 24989.9688,2926.4145 Q24989.9688,2928.5082 24990.6563,2929.5707 Q24991.3438,2930.6489 24992.6719,2930.6489 Q24993.3125,2930.6489 24993.9063,2930.3676 Q24994.2031,2930.2426 24994.4844,2930.0551 Q24994.7813,2929.852 24995.125,2929.5239 L24995.125,2932.2426 Q24994.5469,2932.5395 24993.9063,2932.6957 Q24993.2813,2932.8364 24992.5469,2932.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="25013.25" y="2931.534">TouchHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="24850" x2="25230" y1="2942.102" y2="2942.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="24850" x2="25230" y1="2950.102" y2="2950.102"/><ellipse cx="24860" cy="2961.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="225" x="24869" y="2969.0679">getGestureDragVector() : Vector2f</text><ellipse cx="24860" cy="2980.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="229" x="24869" y="2988.1358">getGesturePinchVector() : Vector2f</text><ellipse cx="24860" cy="2999.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="300" x="24869" y="3007.2038">getTouchPosition(const int&amp; index) : Vector2f</text><ellipse cx="24860" cy="3018.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="297" x="24869" y="3026.2717">isGestureDetected(const int&amp; gesture) : bool</text><ellipse cx="24860" cy="3037.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="197" x="24869" y="3045.3396">getGestureDragAngle() : float</text><ellipse cx="24860" cy="3056.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="215" x="24869" y="3064.4075">getGestureHoldDuration() : float</text><ellipse cx="24860" cy="3075.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="201" x="24869" y="3083.4754">getGesturePinchAngle() : float</text><ellipse cx="24860" cy="3094.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="173" x="24869" y="3102.5433">getGestureDetected() : int</text><ellipse cx="24860" cy="3113.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="175" x="24869" y="3121.6113">getTouchPointCount() : int</text><ellipse cx="24860" cy="3132.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="258" x="24869" y="3140.6792">getTouchPointId(const int&amp; index) : int</text><ellipse cx="24860" cy="3151.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="109" x="24869" y="3159.7471">getTouchX() : int</text><ellipse cx="24860" cy="3170.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="109" x="24869" y="3178.815">getTouchY() : int</text><ellipse cx="24860" cy="3189.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="356" x="24869" y="3197.8829">setGesturesEnabled(const unsigned int&amp; flags) : void</text></g><!--MD5=[4e14db6015d2944397354ce607b3a3ca]
class raylib.helper.draw.Draw2DHelper--><g id="elem_raylib.helper.draw.Draw2DHelper"><rect codeLine="725" fill="#F1F1F1" height="810.7167" id="raylib.helper.draw.Draw2DHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1197" x="20309.5" y="1724.602"/><ellipse cx="20854.75" cy="1740.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M20854.5469,1747.3364 Q20852.0625,1747.3364 20850.7344,1745.6957 Q20849.4219,1744.0239 20849.4219,1740.9145 Q20849.4219,1737.7895 20850.7344,1736.1332 Q20852.0625,1734.477 20854.5469,1734.477 Q20855.2656,1734.477 20855.9219,1734.6332 Q20856.5625,1734.7895 20857.125,1735.0864 L20857.125,1737.8051 Q20856.7656,1737.4614 20856.4688,1737.2739 Q20856.1719,1737.0707 20855.9063,1736.9457 Q20855.5938,1736.8051 20855.2813,1736.7426 Q20854.9844,1736.6801 20854.6719,1736.6801 Q20853.3438,1736.6801 20852.6563,1737.7426 Q20851.9688,1738.8364 20851.9688,1740.9145 Q20851.9688,1743.0082 20852.6563,1744.0707 Q20853.3438,1745.1489 20854.6719,1745.1489 Q20855.3125,1745.1489 20855.9063,1744.8676 Q20856.2031,1744.7426 20856.4844,1744.5551 Q20856.7813,1744.352 20857.125,1744.0239 L20857.125,1746.7426 Q20856.5469,1747.0395 20855.9063,1747.1957 Q20855.2813,1747.3364 20854.5469,1747.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="20875.25" y="1746.034">Draw2DHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="20310.5" x2="21505.5" y1="1756.602" y2="1756.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="20317.5" y="1764.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="218" x="20329.5" y="1775.5679">_texShapesRec : static Rectangle</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="20317.5" y="1783.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="196" x="20329.5" y="1794.6358">_texShapes : static Texture2D</text><line style="stroke:#181818;stroke-width:0.5;" x1="20310.5" x2="21505.5" y1="1802.7378" y2="1802.7378"/><ellipse cx="20320.5" cy="1813.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="502" x="20329.5" y="1821.7038">drawCircle(int centerX, int centerY, float radius, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="1832.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="500" x="20329.5" y="1840.7717">drawCircle(const Vector2f&amp; center, float radius, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="1851.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="720" x="20329.5" y="1859.8396">drawCircleGradient(int centerX, int centerY, float radius, const RlColor&amp; color1, const RlColor&amp; color2) : void</text><ellipse cx="20320.5" cy="1870.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="537" x="20329.5" y="1878.9075">drawCircleLines(int centerX, int centerY, float radius, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="1890.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="857" x="20329.5" y="1897.9754">drawCircleSector(const Vector2f&amp; center, float radius, float startAngle, float endAngle, int segments, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="1909.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="892" x="20329.5" y="1917.0433">drawCircleSectorLines(const Vector2f&amp; center, float radius, float startAngle, float endAngle, int segments, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="1928.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="611" x="20329.5" y="1936.1113">drawEllipse(int centerX, int centerY, float radiusH, float radiusV, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="1947.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="646" x="20329.5" y="1955.1792">drawEllipseLines(int centerX, int centerY, float radiusH, float radiusV, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="1966.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="603" x="20329.5" y="1974.2471">drawLine(int startPosX, int startPosY, int endPosX, int endPosY, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="1985.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="582" x="20329.5" y="1993.315">drawLine(const Vector2f&amp; startPos, const Vector2f&amp; endPos, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2004.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="656" x="20329.5" y="2012.3829">drawLine(const Vector2f&amp; startPos, const Vector2f&amp; endPos, float thick, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2023.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="698" x="20329.5" y="2031.4508">drawLineBezier(const Vector2f&amp; startPos, const Vector2f&amp; endPos, float thick, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2042.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1171" x="20329.5" y="2050.5188">drawLineBezierCubic(const Vector2f&amp; startPos, const Vector2f&amp; endPos, const Vector2f&amp; startControlPos, const Vector2f&amp; endControlPos, float thick, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2061.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="922" x="20329.5" y="2069.5867">drawLineBezierQuad(const Vector2f&amp; startPos, const Vector2f&amp; endPos, const Vector2f&amp; controlPos, float thick, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2080.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="522" x="20329.5" y="2088.6546">drawLineStrip(const std::vector&lt;Vector2f&gt;&amp; points, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2099.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="372" x="20329.5" y="2107.7225">drawPixel(int posX, int posY, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2118.8245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="419" x="20329.5" y="2126.7904">drawPixel(const Vector2f&amp; position, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2137.8924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="649" x="20329.5" y="2145.8583">drawPoly(const Vector2f&amp; center, int sides, float radius, float rotation, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2156.9603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="684" x="20329.5" y="2164.9263">drawPolyLines(const Vector2f&amp; center, int sides, float radius, float rotation, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2176.0282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="786" x="20329.5" y="2183.9942">drawPolyLines(const Vector2f&amp; center, int sides, float radius, float rotation, float lineThick, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2195.0962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="550" x="20329.5" y="2203.0621">drawRectangle(int posX, int posY, int width, int height, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2214.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="598" x="20329.5" y="2222.13">drawRectangle(const Vector2f&amp; position, const Vector2f&amp; size, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2233.232" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="434" x="20329.5" y="2241.1979">drawRectangle(const Rectangle&amp; rec, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2252.2999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="686" x="20329.5" y="2260.2658">drawRectangle(const Rectangle&amp; rec, const Vector2f&amp; origin, float rotation, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2271.3678" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="898" x="20329.5" y="2279.3338">drawRectangleGradient(const Rectangle&amp; rec, const RlColor&amp; col1, const RlColor&amp; col2, const RlColor&amp; col3, const RlColor&amp; col4) : void</text><ellipse cx="20320.5" cy="2290.4357" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="778" x="20329.5" y="2298.4017">drawRectangleGradientH(int posX, int posY, int width, int height, const RlColor&amp; color1, const RlColor&amp; color2) : void</text><ellipse cx="20320.5" cy="2309.5037" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="776" x="20329.5" y="2317.4696">drawRectangleGradientV(int posX, int posY, int width, int height, const RlColor&amp; color1, const RlColor&amp; color2) : void</text><ellipse cx="20320.5" cy="2328.5716" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="585" x="20329.5" y="2336.5375">drawRectangleLines(int posX, int posY, int width, int height, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2347.6395" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="586" x="20329.5" y="2355.6054">drawRectangleLinesEx(const Rectangle&amp; rec, float lineThick, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2366.7074" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="705" x="20329.5" y="2374.6733">drawRectangleRounded(const Rectangle&amp; rec, float roundness, int segments, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2385.7753" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="842" x="20329.5" y="2393.7413">drawRectangleRoundedLines(const Rectangle&amp; rec, float roundness, int segments, float lineThick, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2404.8432" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="971" x="20329.5" y="2412.8092">drawRing(const Vector2f&amp; center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2423.9112" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1006" x="20329.5" y="2431.8771">drawRingLines(const Vector2f&amp; center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2442.9791" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="669" x="20329.5" y="2450.945">drawTriangle(const Vector2f&amp; v1, const Vector2f&amp; v2, const Vector2f&amp; v3, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2462.047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="542" x="20329.5" y="2470.0129">drawTriangleFan(const std::vector&lt;Vector2f&gt;&amp; points, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2481.1149" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="704" x="20329.5" y="2489.0808">drawTriangleLines(const Vector2f&amp; v1, const Vector2f&amp; v2, const Vector2f&amp; v3, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2500.1828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="550" x="20329.5" y="2508.1488">drawTriangleStrip(const std::vector&lt;Vector2f&gt;&amp; points, const RlColor&amp; color) : void</text><ellipse cx="20320.5" cy="2519.2507" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="564" x="20329.5" y="2527.2167">setShapesTexture(const texture::RlTexture&amp; texture, const Rectangle&amp; source) : void</text></g><!--MD5=[6ddc1bda24d0803844728d0858223c9b]
class raylib.helper.draw.Draw3DHelper--><g id="elem_raylib.helper.draw.Draw3DHelper"><rect codeLine="768" fill="#F1F1F1" height="581.9017" id="raylib.helper.draw.Draw3DHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1598" x="21542" y="1839.102"/><ellipse cx="22287.75" cy="1855.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M22287.5469,1861.8364 Q22285.0625,1861.8364 22283.7344,1860.1957 Q22282.4219,1858.5239 22282.4219,1855.4145 Q22282.4219,1852.2895 22283.7344,1850.6332 Q22285.0625,1848.977 22287.5469,1848.977 Q22288.2656,1848.977 22288.9219,1849.1332 Q22289.5625,1849.2895 22290.125,1849.5864 L22290.125,1852.3051 Q22289.7656,1851.9614 22289.4688,1851.7739 Q22289.1719,1851.5707 22288.9063,1851.4457 Q22288.5938,1851.3051 22288.2813,1851.2426 Q22287.9844,1851.1801 22287.6719,1851.1801 Q22286.3438,1851.1801 22285.6563,1852.2426 Q22284.9688,1853.3364 22284.9688,1855.4145 Q22284.9688,1857.5082 22285.6563,1858.5707 Q22286.3438,1859.6489 22287.6719,1859.6489 Q22288.3125,1859.6489 22288.9063,1859.3676 Q22289.2031,1859.2426 22289.4844,1859.0551 Q22289.7813,1858.852 22290.125,1858.5239 L22290.125,1861.2426 Q22289.5469,1861.5395 22288.9063,1861.6957 Q22288.2813,1861.8364 22287.5469,1861.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="22308.25" y="1860.534">Draw3DHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="21543" x2="23139" y1="1871.102" y2="1871.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="21543" x2="23139" y1="1879.102" y2="1879.102"/><ellipse cx="21553" cy="1890.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="914" x="21562" y="1898.0679">drawBillboard(const RlCamera&amp; camera, const texture::RlTexture&amp; texture, const Vector3f&amp; position, float size, const RlColor&amp; tint) : void</text><ellipse cx="21553" cy="1909.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1572" x="21562" y="1917.1358">drawBillboardPro(const RlCamera&amp; camera, const texture::RlTexture&amp; texture, const Rectangle&amp; source, const Vector3f&amp; position, const Vector3f&amp; up, const Vector2f&amp; size, const Vector2f&amp; origin, float rotation, const RlColor&amp; tint) : void</text><ellipse cx="21553" cy="1928.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1187" x="21562" y="1936.2038">drawBillboardRec(const RlCamera&amp; camera, const texture::RlTexture&amp; texture, const Rectangle&amp; source, const Vector3f&amp; position, const Vector2f&amp; size, const RlColor&amp; tint) : void</text><ellipse cx="21553" cy="1947.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="483" x="21562" y="1955.2717">drawBoundingBox(const BoundingBox&amp; box, const RlColor&amp; color) : void</text><ellipse cx="21553" cy="1966.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="931" x="21562" y="1974.3396">drawCircle(const Vector3f&amp; center, const float&amp; radius, const Vector3f&amp; rotationAxis, const float&amp; rotationAngle, const RlColor&amp; color) : void</text><ellipse cx="21553" cy="1985.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="825" x="21562" y="1993.4075">drawCube(const Vector3f&amp; position, const float&amp; width, const float&amp; height, const float&amp; length, const RlColor&amp; color) : void</text><ellipse cx="21553" cy="2004.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="566" x="21562" y="2012.4754">drawCube(const Vector3f&amp; position, const Vector3f&amp; size, const RlColor&amp; color) : void</text><ellipse cx="21553" cy="2023.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1106" x="21562" y="2031.5433">drawCubeTexture(const texture::RlTexture&amp; texture, const Vector3f&amp; position, const float&amp; width, const float&amp; height, const float&amp; length, const RlColor&amp; color) : void</text><ellipse cx="21553" cy="2042.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1304" x="21562" y="2050.6113">drawCubeTextureRec(const texture::RlTexture&amp; texture, const Rectangle&amp; source, const Vector3f&amp; position, const float&amp; width, const float&amp; height, const float&amp; length, const RlColor&amp; color) : void</text><ellipse cx="21553" cy="2061.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="863" x="21562" y="2069.6792">drawCubeWires(const Vector3f&amp; position, const float&amp; width, const float&amp; height, const float&amp; length, const RlColor&amp; color) : void</text><ellipse cx="21553" cy="2080.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="604" x="21562" y="2088.7471">drawCubeWires(const Vector3f&amp; position, const Vector3f&amp; size, const RlColor&amp; color) : void</text><ellipse cx="21553" cy="2099.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1040" x="21562" y="2107.815">drawCylinder(const Vector3f&amp; position, const float&amp; radiusTop, const float&amp; radiusBottom, const float&amp; height, const int&amp; slices, const RlColor&amp; color) : void</text><ellipse cx="21553" cy="2118.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1058" x="21562" y="2126.8829">drawCylinder(const Vector3f&amp; startPos, const Vector3f&amp; endPos, const float&amp; startRadius, const float&amp; endRadius, const int&amp; sides, const RlColor&amp; color) : void</text><ellipse cx="21553" cy="2137.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1078" x="21562" y="2145.9508">drawCylinderWires(const Vector3f&amp; position, const float&amp; radiusTop, const float&amp; radiusBottom, const float&amp; height, const int&amp; slices, const RlColor&amp; color) : void</text><ellipse cx="21553" cy="2157.0528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1096" x="21562" y="2165.0188">drawCylinderWires(const Vector3f&amp; startPos, const Vector3f&amp; endPos, const float&amp; startRadius, const float&amp; endRadius, const int&amp; sides, const RlColor&amp; color) : void</text><ellipse cx="21553" cy="2176.1207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="365" x="21562" y="2184.0867">drawGrid(const int&amp; slices, const float&amp; spacing) : void</text><ellipse cx="21553" cy="2195.1887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="390" x="21562" y="2203.1546">drawGrid(const Vector2i&amp; size, const float&amp; spacing) : void</text><ellipse cx="21553" cy="2214.2566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="561" x="21562" y="2222.2225">drawGrid(const Vector2i&amp; size, const Vector3f&amp; position, const float&amp; spacing) : void</text><ellipse cx="21553" cy="2233.3245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="704" x="21562" y="2241.2904">drawGrid(const Vector2i&amp; size, const Vector3f&amp; position, const float&amp; spacing, const RlColor&amp; color) : void</text><ellipse cx="21553" cy="2252.3924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="582" x="21562" y="2260.3583">drawLine(const Vector3f&amp; startPos, const Vector3f&amp; endPos, const RlColor&amp; color) : void</text><ellipse cx="21553" cy="2271.4603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="580" x="21562" y="2279.4263">drawPlane(const Vector3f&amp; centerPos, const Vector2f&amp; size, const RlColor&amp; color) : void</text><ellipse cx="21553" cy="2290.5282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="422" x="21562" y="2298.4942">drawPoint(const Vector3f&amp; position, const RlColor&amp; color) : void</text><ellipse cx="21553" cy="2309.5962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="348" x="21562" y="2317.5621">drawRay(const Ray&amp; ray, const RlColor&amp; color) : void</text><ellipse cx="21553" cy="2328.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="583" x="21562" y="2336.63">drawSphere(const Vector3f&amp; centerPos, const float&amp; radius, const RlColor&amp; color) : void</text><ellipse cx="21553" cy="2347.732" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="815" x="21562" y="2355.6979">drawSphere(const Vector3f&amp; centerPos, const float&amp; radius, const int&amp; rings, const int&amp; slices, const RlColor&amp; color) : void</text><ellipse cx="21553" cy="2366.7999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="853" x="21562" y="2374.7658">drawSphereWires(const Vector3f&amp; centerPos, const float&amp; radius, const int&amp; rings, const int&amp; slices, const RlColor&amp; color) : void</text><ellipse cx="21553" cy="2385.8678" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="687" x="21562" y="2393.8338">drawTriangle3D(const Vector3f&amp; v1, const Vector3f&amp; v2, const Vector3f&amp; v3, const RlColor&amp; color) : void</text><ellipse cx="21553" cy="2404.9357" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="568" x="21562" y="2412.9017">drawTriangleStrip3D(const std::vector&lt;Vector3f&gt;&amp; points, const RlColor&amp; color) : void</text></g><!--MD5=[22dbd257a5b9b60e0fcce8e474411a4d]
class raylib.helper.draw.DrawHelper--><g id="elem_raylib.helper.draw.DrawHelper"><rect codeLine="799" fill="#F1F1F1" height="372.1546" id="raylib.helper.draw.DrawHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="416" x="23175" y="1944.102"/><ellipse cx="23338.75" cy="1960.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M23338.5469,1966.8364 Q23336.0625,1966.8364 23334.7344,1965.1957 Q23333.4219,1963.5239 23333.4219,1960.4145 Q23333.4219,1957.2895 23334.7344,1955.6332 Q23336.0625,1953.977 23338.5469,1953.977 Q23339.2656,1953.977 23339.9219,1954.1332 Q23340.5625,1954.2895 23341.125,1954.5864 L23341.125,1957.3051 Q23340.7656,1956.9614 23340.4688,1956.7739 Q23340.1719,1956.5707 23339.9063,1956.4457 Q23339.5938,1956.3051 23339.2813,1956.2426 Q23338.9844,1956.1801 23338.6719,1956.1801 Q23337.3438,1956.1801 23336.6563,1957.2426 Q23335.9688,1958.3364 23335.9688,1960.4145 Q23335.9688,1962.5082 23336.6563,1963.5707 Q23337.3438,1964.6489 23338.6719,1964.6489 Q23339.3125,1964.6489 23339.9063,1964.3676 Q23340.2031,1964.2426 23340.4844,1964.0551 Q23340.7813,1963.852 23341.125,1963.5239 L23341.125,1966.2426 Q23340.5469,1966.5395 23339.9063,1966.6957 Q23339.2813,1966.8364 23338.5469,1966.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="23359.25" y="1965.534">DrawHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="23176" x2="23590" y1="1976.102" y2="1976.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="23176" x2="23590" y1="1984.102" y2="1984.102"/><ellipse cx="23186" cy="1995.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="224" x="23195" y="2003.0679">beginBlendMode(int mode) : void</text><ellipse cx="23186" cy="2014.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="144" x="23195" y="2022.1358">beginDrawing() : void</text><ellipse cx="23186" cy="2033.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="317" x="23195" y="2041.2038">beginMode2D(const Camera2D&amp; camera) : void</text><ellipse cx="23186" cy="2052.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="312" x="23195" y="2060.2717">beginMode3D(const RlCamera&amp; camera) : void</text><ellipse cx="23186" cy="2071.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="380" x="23195" y="2079.3396">beginScissorMode(int x, int y, int width, int height) : void</text><ellipse cx="23186" cy="2090.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="390" x="23195" y="2098.4075">beginShaderMode(const shader::RlShader&amp; shader) : void</text><ellipse cx="23186" cy="2109.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="389" x="23195" y="2117.4754">beginTextureMode(const RenderTexture2D&amp; target) : void</text><ellipse cx="23186" cy="2128.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="379" x="23195" y="2136.5433">beginVrStereoMode(const VrStereoConfig&amp; config) : void</text><ellipse cx="23186" cy="2147.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="297" x="23195" y="2155.6113">clearBackground(const RlColor&amp; color) : void</text><ellipse cx="23186" cy="2166.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="151" x="23195" y="2174.6792">endBlendMode() : void</text><ellipse cx="23186" cy="2185.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="131" x="23195" y="2193.7471">endDrawing() : void</text><ellipse cx="23186" cy="2204.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="130" x="23195" y="2212.815">endMode2D() : void</text><ellipse cx="23186" cy="2223.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="130" x="23195" y="2231.8829">endMode3D() : void</text><ellipse cx="23186" cy="2242.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="159" x="23195" y="2250.9508">endScissorMode() : void</text><ellipse cx="23186" cy="2262.0528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="160" x="23195" y="2270.0188">endShaderMode() : void</text><ellipse cx="23186" cy="2281.1207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="163" x="23195" y="2289.0867">endTextureMode() : void</text><ellipse cx="23186" cy="2300.1887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="169" x="23195" y="2308.1546">endVrStereoMode() : void</text></g><!--MD5=[ba9627c1223659b0a946c0624168cd2f]
class raylib.helper.draw.DrawModelHelper--><g id="elem_raylib.helper.draw.DrawModelHelper"><rect codeLine="819" fill="#F1F1F1" height="200.5433" id="raylib.helper.draw.DrawModelHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1271" x="20272.5" y="2957.602"/><ellipse cx="20842.75" cy="2973.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M20842.5469,2980.3364 Q20840.0625,2980.3364 20838.7344,2978.6957 Q20837.4219,2977.0239 20837.4219,2973.9145 Q20837.4219,2970.7895 20838.7344,2969.1332 Q20840.0625,2967.477 20842.5469,2967.477 Q20843.2656,2967.477 20843.9219,2967.6332 Q20844.5625,2967.7895 20845.125,2968.0864 L20845.125,2970.8051 Q20844.7656,2970.4614 20844.4688,2970.2739 Q20844.1719,2970.0707 20843.9063,2969.9457 Q20843.5938,2969.8051 20843.2813,2969.7426 Q20842.9844,2969.6801 20842.6719,2969.6801 Q20841.3438,2969.6801 20840.6563,2970.7426 Q20839.9688,2971.8364 20839.9688,2973.9145 Q20839.9688,2976.0082 20840.6563,2977.0707 Q20841.3438,2978.1489 20842.6719,2978.1489 Q20843.3125,2978.1489 20843.9063,2977.8676 Q20844.2031,2977.7426 20844.4844,2977.5551 Q20844.7813,2977.352 20845.125,2977.0239 L20845.125,2979.7426 Q20844.5469,2980.0395 20843.9063,2980.1957 Q20843.2813,2980.3364 20842.5469,2980.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="122" x="20863.25" y="2979.034">DrawModelHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="20273.5" x2="21542.5" y1="2989.602" y2="2989.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="20273.5" x2="21542.5" y1="2997.602" y2="2997.602"/><ellipse cx="20283.5" cy="3008.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="811" x="20292.5" y="3016.5679">drawMesh(const raylib::model::RlMesh&amp; mesh, const raylib::model::RlMaterial&amp; material, const Matrix&amp; transform) : void</text><ellipse cx="20283.5" cy="3027.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="931" x="20292.5" y="3035.6358">drawMeshInstanced(const raylib::model::RlMesh&amp; mesh, const raylib::model::RlMaterial&amp; material, std::vector&lt;Matrix&gt;&amp; transforms) : void</text><ellipse cx="20283.5" cy="3046.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="371" x="20292.5" y="3054.7038">drawModel(const raylib::model::RlModel&amp; model) : void</text><ellipse cx="20283.5" cy="3065.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="801" x="20292.5" y="3073.7717">drawModel(const raylib::model::RlModel&amp; model, const Vector3f&amp; position, const float&amp; scale, const RlColor&amp; tint) : void</text><ellipse cx="20283.5" cy="3084.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1207" x="20292.5" y="3092.8396">drawModel(const raylib::model::RlModel&amp; model, const Vector3f&amp; position, const Vector3f&amp; rotationAxis, const float&amp; rotationAngle, const Vector3f&amp; scale, const RlColor&amp; tint) : void</text><ellipse cx="20283.5" cy="3103.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="409" x="20292.5" y="3111.9075">drawModelWires(const raylib::model::RlModel&amp; model) : void</text><ellipse cx="20283.5" cy="3123.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="839" x="20292.5" y="3130.9754">drawModelWires(const raylib::model::RlModel&amp; model, const Vector3f&amp; position, const float&amp; scale, const RlColor&amp; tint) : void</text><ellipse cx="20283.5" cy="3142.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1245" x="20292.5" y="3150.0433">drawModelWires(const raylib::model::RlModel&amp; model, const Vector3f&amp; position, const Vector3f&amp; rotationAxis, const float&amp; rotationAngle, const Vector3f&amp; scale, const RlColor&amp; tint) : void</text></g><!--MD5=[8c873c49ce49d4c3fae6911f380a097a]
class raylib.helper.draw.DrawTextHelper--><g id="elem_raylib.helper.draw.DrawTextHelper"><rect codeLine="830" fill="#F1F1F1" height="391.2225" id="raylib.helper.draw.DrawTextHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1391" x="21578.5" y="2862.602"/><ellipse cx="22215.75" cy="2878.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M22215.5469,2885.3364 Q22213.0625,2885.3364 22211.7344,2883.6957 Q22210.4219,2882.0239 22210.4219,2878.9145 Q22210.4219,2875.7895 22211.7344,2874.1332 Q22213.0625,2872.477 22215.5469,2872.477 Q22216.2656,2872.477 22216.9219,2872.6332 Q22217.5625,2872.7895 22218.125,2873.0864 L22218.125,2875.8051 Q22217.7656,2875.4614 22217.4688,2875.2739 Q22217.1719,2875.0707 22216.9063,2874.9457 Q22216.5938,2874.8051 22216.2813,2874.7426 Q22215.9844,2874.6801 22215.6719,2874.6801 Q22214.3438,2874.6801 22213.6563,2875.7426 Q22212.9688,2876.8364 22212.9688,2878.9145 Q22212.9688,2881.0082 22213.6563,2882.0707 Q22214.3438,2883.1489 22215.6719,2883.1489 Q22216.3125,2883.1489 22216.9063,2882.8676 Q22217.2031,2882.7426 22217.4844,2882.5551 Q22217.7813,2882.352 22218.125,2882.0239 L22218.125,2884.7426 Q22217.5469,2885.0395 22216.9063,2885.1957 Q22216.2813,2885.3364 22215.5469,2885.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="108" x="22236.25" y="2884.034">DrawTextHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="21579.5" x2="22968.5" y1="2894.602" y2="2894.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="21579.5" x2="22968.5" y1="2902.602" y2="2902.602"/><ellipse cx="21589.5" cy="2913.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="989" x="21598.5" y="2921.5679">drawCenteredText(const std::string&amp; text, const raylib::text::RlFont&amp; font, const Vector2f&amp; position, const RlColor&amp; color, const float&amp; spacing) : void</text><ellipse cx="21589.5" cy="2932.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1135" x="21598.5" y="2940.6358">drawCenteredText(const std::string&amp; text, const raylib::text::RlFont&amp; font, const Vector2f&amp; position, const float&amp; fontSize, const RlColor&amp; color, const float&amp; spacing) : void</text><ellipse cx="21589.5" cy="2951.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="371" x="21598.5" y="2959.7038">drawCenteredText(const raylib::text::RlText&amp; text) : void</text><ellipse cx="21589.5" cy="2970.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="372" x="21598.5" y="2978.7717">drawFps(const Vector2f&amp; pos, const int&amp; fontSize) : void</text><ellipse cx="21589.5" cy="2989.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="479" x="21598.5" y="2997.8396">drawFps(const float&amp; posX, const float&amp; posY, const int&amp; fontSize) : void</text><ellipse cx="21589.5" cy="3008.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="238" x="21598.5" y="3016.9075">drawFps(const Vector2f&amp; pos) : void</text><ellipse cx="21589.5" cy="3028.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="321" x="21598.5" y="3035.9754">drawFps(const int&amp; posX, const int&amp; posY) : void</text><ellipse cx="21589.5" cy="3047.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="676" x="21598.5" y="3055.0433">drawText(const std::string&amp; text, const Vector2f&amp; pos, const int&amp; fontSize, const RlColor&amp; color) : void</text><ellipse cx="21589.5" cy="3066.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="783" x="21598.5" y="3074.1113">drawText(const std::string&amp; text, const float&amp; posX, const float&amp; posY, const int&amp; fontSize, const RlColor&amp; color) : void</text><ellipse cx="21589.5" cy="3085.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="782" x="21598.5" y="3093.1792">drawText(const std::string&amp; text, const raylib::text::RlFont&amp; font, const Vector2f&amp; position, const RlColor&amp; color) : void</text><ellipse cx="21589.5" cy="3104.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1063" x="21598.5" y="3112.2471">drawText(const std::string&amp; text, const raylib::text::RlFont&amp; font, const Vector2f&amp; position, const float&amp; fontSize, const RlColor&amp; tint, const float&amp; spacing) : void</text><ellipse cx="21589.5" cy="3123.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1208" x="21598.5" y="3131.315">drawText(const std::string&amp; text, const raylib::text::RlFont&amp; font, const Vector2f&amp; position, const float&amp; rotation, const float&amp; fontSize, const RlColor&amp; tint, const float&amp; spacing) : void</text><ellipse cx="21589.5" cy="3142.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1220" x="21598.5" y="3150.3829">drawText(const std::string&amp; text, const raylib::text::RlFont&amp; font, const Vector2f&amp; position, const Vector2f&amp; origin, const float&amp; fontSize, const RlColor&amp; tint, const float&amp; spacing) : void</text><ellipse cx="21589.5" cy="3161.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1365" x="21598.5" y="3169.4508">drawText(const std::string&amp; text, const raylib::text::RlFont&amp; font, const Vector2f&amp; position, const Vector2f&amp; origin, const float&amp; rotation, const float&amp; fontSize, const RlColor&amp; tint, const float&amp; spacing) : void</text><ellipse cx="21589.5" cy="3180.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="623" x="21598.5" y="3188.5188">drawText(const raylib::text::RlText&amp; text, const Vector2f&amp; position, const RlColor&amp; color) : void</text><ellipse cx="21589.5" cy="3199.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="700" x="21598.5" y="3207.5867">drawText(const raylib::text::RlText&amp; text, const float&amp; posX, const float&amp; posY, const RlColor&amp; color) : void</text><ellipse cx="21589.5" cy="3218.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="309" x="21598.5" y="3226.6546">drawText(const raylib::text::RlText&amp; text) : void</text><ellipse cx="21589.5" cy="3237.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="967" x="21598.5" y="3245.7225">drawTextUsingCodepoint(const raylib::text::RlFont&amp; font, const int&amp; codepoint, const Vector2f&amp; position, float fontSize, const RlColor&amp; tint) : void</text></g><!--MD5=[e884ed1053af52c66226a9c3a06f0df3]
class raylib.helper.draw.DrawTextureHelper--><g id="elem_raylib.helper.draw.DrawTextureHelper"><rect codeLine="851" fill="#F1F1F1" height="219.6113" id="raylib.helper.draw.DrawTextureHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1207" x="23004.5" y="2948.102"/><ellipse cx="23538.25" cy="2964.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M23538.0469,2970.8364 Q23535.5625,2970.8364 23534.2344,2969.1957 Q23532.9219,2967.5239 23532.9219,2964.4145 Q23532.9219,2961.2895 23534.2344,2959.6332 Q23535.5625,2957.977 23538.0469,2957.977 Q23538.7656,2957.977 23539.4219,2958.1332 Q23540.0625,2958.2895 23540.625,2958.5864 L23540.625,2961.3051 Q23540.2656,2960.9614 23539.9688,2960.7739 Q23539.6719,2960.5707 23539.4063,2960.4457 Q23539.0938,2960.3051 23538.7813,2960.2426 Q23538.4844,2960.1801 23538.1719,2960.1801 Q23536.8438,2960.1801 23536.1563,2961.2426 Q23535.4688,2962.3364 23535.4688,2964.4145 Q23535.4688,2966.5082 23536.1563,2967.5707 Q23536.8438,2968.6489 23538.1719,2968.6489 Q23538.8125,2968.6489 23539.4063,2968.3676 Q23539.7031,2968.2426 23539.9844,2968.0551 Q23540.2813,2967.852 23540.625,2967.5239 L23540.625,2970.2426 Q23540.0469,2970.5395 23539.4063,2970.6957 Q23538.7813,2970.8364 23538.0469,2970.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="23558.75" y="2969.534">DrawTextureHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="23005.5" x2="24210.5" y1="2980.102" y2="2980.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="23005.5" x2="24210.5" y1="2988.102" y2="2988.102"/><ellipse cx="23015.5" cy="2999.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="612" x="23024.5" y="3007.0679">drawTexture(const texture::RlTexture&amp; texture, int posX, int posY, const RlColor&amp; tint) : void</text><ellipse cx="23015.5" cy="3018.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="659" x="23024.5" y="3026.1358">drawTexture(const texture::RlTexture&amp; texture, const Vector2f&amp; position, const RlColor&amp; tint) : void</text><ellipse cx="23015.5" cy="3037.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="830" x="23024.5" y="3045.2038">drawTexture(const texture::RlTexture&amp; texture, const Vector2f&amp; position, float rotation, float scale, const RlColor&amp; tint) : void</text><ellipse cx="23015.5" cy="3056.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1072" x="23024.5" y="3064.2717">drawTexture(const texture::RlTexture&amp; texture, const Rectangle&amp; source, const Rectangle&amp; dest, const Vector2f&amp; origin, float rotation, const RlColor&amp; tint) : void</text><ellipse cx="23015.5" cy="3075.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1156" x="23024.5" y="3083.3396">drawTextureNPatch(const texture::RlTexture&amp; texture, const NPatchInfo&amp; nPatchInfo, const Rectangle&amp; dest, const Vector2f&amp; origin, float rotation, const RlColor&amp; tint) : void</text><ellipse cx="23015.5" cy="3094.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1148" x="23024.5" y="3102.4075">drawTexturePoly(const texture::RlTexture&amp; texture, const Vector2f&amp; center, const std::vector&lt;Vector2f&gt;&amp; points, std::vector&lt;Vector2f&gt;&amp; texcoords, const RlColor&amp; tint) : void</text><ellipse cx="23015.5" cy="3113.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="996" x="23024.5" y="3121.4754">drawTextureQuad(const texture::RlTexture&amp; texture, const Vector2f&amp; tiling, const Vector2f&amp; offset, const Rectangle&amp; quad, const RlColor&amp; tint) : void</text><ellipse cx="23015.5" cy="3132.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="857" x="23024.5" y="3140.5433">drawTextureRec(const texture::RlTexture&amp; texture, const Rectangle&amp; source, const Vector2f&amp; position, const RlColor&amp; tint) : void</text><ellipse cx="23015.5" cy="3151.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1181" x="23024.5" y="3159.6113">drawTextureTiled(const texture::RlTexture&amp; texture, const Rectangle&amp; source, const Rectangle&amp; dest, const Vector2f&amp; origin, float rotation, float scale, const RlColor&amp; tint) : void</text></g><!--MD5=[09f67b4294edfd8b4f73926348b360ee]
class raylib.ex.BuilderException--><g id="elem_raylib.ex.BuilderException"><rect codeLine="866" fill="#F1F1F1" height="67.0679" id="raylib.ex.BuilderException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="300" x="14722" y="3024.602"/><ellipse cx="14810.75" cy="3040.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M14810.5469,3047.3364 Q14808.0625,3047.3364 14806.7344,3045.6957 Q14805.4219,3044.0239 14805.4219,3040.9145 Q14805.4219,3037.7895 14806.7344,3036.1332 Q14808.0625,3034.477 14810.5469,3034.477 Q14811.2656,3034.477 14811.9219,3034.6332 Q14812.5625,3034.7895 14813.125,3035.0864 L14813.125,3037.8051 Q14812.7656,3037.4614 14812.4688,3037.2739 Q14812.1719,3037.0707 14811.9063,3036.9457 Q14811.5938,3036.8051 14811.2813,3036.7426 Q14810.9844,3036.6801 14810.6719,3036.6801 Q14809.3438,3036.6801 14808.6563,3037.7426 Q14807.9688,3038.8364 14807.9688,3040.9145 Q14807.9688,3043.0082 14808.6563,3044.0707 Q14809.3438,3045.1489 14810.6719,3045.1489 Q14811.3125,3045.1489 14811.9063,3044.8676 Q14812.2031,3044.7426 14812.4844,3044.5551 Q14812.7813,3044.352 14813.125,3044.0239 L14813.125,3046.7426 Q14812.5469,3047.0395 14811.9063,3047.1957 Q14811.2813,3047.3364 14810.5469,3047.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="14831.25" y="3046.034">BuilderException</text><line style="stroke:#181818;stroke-width:0.5;" x1="14723" x2="15021" y1="3056.602" y2="3056.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="14723" x2="15021" y1="3064.602" y2="3064.602"/><ellipse cx="14733" cy="3075.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="274" x="14742" y="3083.5679">BuilderException(const std::string&amp; msg)</text></g><!--MD5=[4d93514fa9216e860f0c08082e90b7b8]
class raylib.ex.CameraException--><g id="elem_raylib.ex.CameraException"><rect codeLine="870" fill="#F1F1F1" height="67.0679" id="raylib.ex.CameraException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="334" x="15057" y="3024.602"/><ellipse cx="15161.25" cy="3040.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M15161.0469,3047.3364 Q15158.5625,3047.3364 15157.2344,3045.6957 Q15155.9219,3044.0239 15155.9219,3040.9145 Q15155.9219,3037.7895 15157.2344,3036.1332 Q15158.5625,3034.477 15161.0469,3034.477 Q15161.7656,3034.477 15162.4219,3034.6332 Q15163.0625,3034.7895 15163.625,3035.0864 L15163.625,3037.8051 Q15163.2656,3037.4614 15162.9688,3037.2739 Q15162.6719,3037.0707 15162.4063,3036.9457 Q15162.0938,3036.8051 15161.7813,3036.7426 Q15161.4844,3036.6801 15161.1719,3036.6801 Q15159.8438,3036.6801 15159.1563,3037.7426 Q15158.4688,3038.8364 15158.4688,3040.9145 Q15158.4688,3043.0082 15159.1563,3044.0707 Q15159.8438,3045.1489 15161.1719,3045.1489 Q15161.8125,3045.1489 15162.4063,3044.8676 Q15162.7031,3044.7426 15162.9844,3044.5551 Q15163.2813,3044.352 15163.625,3044.0239 L15163.625,3046.7426 Q15163.0469,3047.0395 15162.4063,3047.1957 Q15161.7813,3047.3364 15161.0469,3047.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="117" x="15181.75" y="3046.034">CameraException</text><line style="stroke:#181818;stroke-width:0.5;" x1="15058" x2="15390" y1="3056.602" y2="3056.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="15058" x2="15390" y1="3064.602" y2="3064.602"/><ellipse cx="15068" cy="3075.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="308" x="15077" y="3083.5679">CameraException(const std::string&amp; message)</text></g><!--MD5=[bd15cbd12d374606497c682a63ad01b2]
class raylib.ex.InvalidArgumentException--><g id="elem_raylib.ex.InvalidArgumentException"><rect codeLine="874" fill="#F1F1F1" height="67.0679" id="raylib.ex.InvalidArgumentException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="365" x="15425.5" y="3024.602"/><ellipse cx="15514.25" cy="3040.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M15514.0469,3047.3364 Q15511.5625,3047.3364 15510.2344,3045.6957 Q15508.9219,3044.0239 15508.9219,3040.9145 Q15508.9219,3037.7895 15510.2344,3036.1332 Q15511.5625,3034.477 15514.0469,3034.477 Q15514.7656,3034.477 15515.4219,3034.6332 Q15516.0625,3034.7895 15516.625,3035.0864 L15516.625,3037.8051 Q15516.2656,3037.4614 15515.9688,3037.2739 Q15515.6719,3037.0707 15515.4063,3036.9457 Q15515.0938,3036.8051 15514.7813,3036.7426 Q15514.4844,3036.6801 15514.1719,3036.6801 Q15512.8438,3036.6801 15512.1563,3037.7426 Q15511.4688,3038.8364 15511.4688,3040.9145 Q15511.4688,3043.0082 15512.1563,3044.0707 Q15512.8438,3045.1489 15514.1719,3045.1489 Q15514.8125,3045.1489 15515.4063,3044.8676 Q15515.7031,3044.7426 15515.9844,3044.5551 Q15516.2813,3044.352 15516.625,3044.0239 L15516.625,3046.7426 Q15516.0469,3047.0395 15515.4063,3047.1957 Q15514.7813,3047.3364 15514.0469,3047.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="179" x="15534.75" y="3046.034">InvalidArgumentException</text><line style="stroke:#181818;stroke-width:0.5;" x1="15426.5" x2="15789.5" y1="3056.602" y2="3056.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="15426.5" x2="15789.5" y1="3064.602" y2="3064.602"/><ellipse cx="15436.5" cy="3075.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="339" x="15445.5" y="3083.5679">InvalidArgumentException(const std::string&amp; msg)</text></g><!--MD5=[3b06a239824b813c3599b273f1e06ad1]
class raylib.ex.RaylibException--><g id="elem_raylib.ex.RaylibException"><rect codeLine="878" fill="#F1F1F1" height="105.2038" id="raylib.ex.RaylibException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="372" x="15622" y="2077.602"/><ellipse cx="15750.75" cy="2093.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M15750.5469,2100.3364 Q15748.0625,2100.3364 15746.7344,2098.6957 Q15745.4219,2097.0239 15745.4219,2093.9145 Q15745.4219,2090.7895 15746.7344,2089.1332 Q15748.0625,2087.477 15750.5469,2087.477 Q15751.2656,2087.477 15751.9219,2087.6332 Q15752.5625,2087.7895 15753.125,2088.0864 L15753.125,2090.8051 Q15752.7656,2090.4614 15752.4688,2090.2739 Q15752.1719,2090.0707 15751.9063,2089.9457 Q15751.5938,2089.8051 15751.2813,2089.7426 Q15750.9844,2089.6801 15750.6719,2089.6801 Q15749.3438,2089.6801 15748.6563,2090.7426 Q15747.9688,2091.8364 15747.9688,2093.9145 Q15747.9688,2096.0082 15748.6563,2097.0707 Q15749.3438,2098.1489 15750.6719,2098.1489 Q15751.3125,2098.1489 15751.9063,2097.8676 Q15752.2031,2097.7426 15752.4844,2097.5551 Q15752.7813,2097.352 15753.125,2097.0239 L15753.125,2099.7426 Q15752.5469,2100.0395 15751.9063,2100.1957 Q15751.2813,2100.3364 15750.5469,2100.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="106" x="15771.25" y="2099.034">RaylibException</text><line style="stroke:#181818;stroke-width:0.5;" x1="15623" x2="15993" y1="2109.602" y2="2109.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15630" y="2117.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="15642" y="2128.5679">_msg : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="15623" x2="15993" y1="2136.6699" y2="2136.6699"/><ellipse cx="15633" cy="2147.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="346" x="15642" y="2155.6358">RaylibException(const std::string&amp; msg, bool prefix)</text><ellipse cx="15633" cy="2166.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="15642" y="2174.7038">what() : char* {query}</text></g><!--MD5=[7cae69f713c5407cbaf7b8e5175e0178]
class raylib.ex.RlAnimationException--><g id="elem_raylib.ex.RlAnimationException"><rect codeLine="884" fill="#F1F1F1" height="67.0679" id="raylib.ex.RlAnimationException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="364" x="15826" y="3024.602"/><ellipse cx="15930.25" cy="3040.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M15930.0469,3047.3364 Q15927.5625,3047.3364 15926.2344,3045.6957 Q15924.9219,3044.0239 15924.9219,3040.9145 Q15924.9219,3037.7895 15926.2344,3036.1332 Q15927.5625,3034.477 15930.0469,3034.477 Q15930.7656,3034.477 15931.4219,3034.6332 Q15932.0625,3034.7895 15932.625,3035.0864 L15932.625,3037.8051 Q15932.2656,3037.4614 15931.9688,3037.2739 Q15931.6719,3037.0707 15931.4063,3036.9457 Q15931.0938,3036.8051 15930.7813,3036.7426 Q15930.4844,3036.6801 15930.1719,3036.6801 Q15928.8438,3036.6801 15928.1563,3037.7426 Q15927.4688,3038.8364 15927.4688,3040.9145 Q15927.4688,3043.0082 15928.1563,3044.0707 Q15928.8438,3045.1489 15930.1719,3045.1489 Q15930.8125,3045.1489 15931.4063,3044.8676 Q15931.7031,3044.7426 15931.9844,3044.5551 Q15932.2813,3044.352 15932.625,3044.0239 L15932.625,3046.7426 Q15932.0469,3047.0395 15931.4063,3047.1957 Q15930.7813,3047.3364 15930.0469,3047.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="147" x="15950.75" y="3046.034">RlAnimationException</text><line style="stroke:#181818;stroke-width:0.5;" x1="15827" x2="16189" y1="3056.602" y2="3056.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="15827" x2="16189" y1="3064.602" y2="3064.602"/><ellipse cx="15837" cy="3075.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="338" x="15846" y="3083.5679">RlAnimationException(const std::string&amp; message)</text></g><!--MD5=[6a9519d46412c1798291b18570074c52]
class raylib.ex.RlModelException--><g id="elem_raylib.ex.RlModelException"><rect codeLine="888" fill="#F1F1F1" height="67.0679" id="raylib.ex.RlModelException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="337" x="16225.5" y="3024.602"/><ellipse cx="16329.75" cy="3040.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M16329.5469,3047.3364 Q16327.0625,3047.3364 16325.7344,3045.6957 Q16324.4219,3044.0239 16324.4219,3040.9145 Q16324.4219,3037.7895 16325.7344,3036.1332 Q16327.0625,3034.477 16329.5469,3034.477 Q16330.2656,3034.477 16330.9219,3034.6332 Q16331.5625,3034.7895 16332.125,3035.0864 L16332.125,3037.8051 Q16331.7656,3037.4614 16331.4688,3037.2739 Q16331.1719,3037.0707 16330.9063,3036.9457 Q16330.5938,3036.8051 16330.2813,3036.7426 Q16329.9844,3036.6801 16329.6719,3036.6801 Q16328.3438,3036.6801 16327.6563,3037.7426 Q16326.9688,3038.8364 16326.9688,3040.9145 Q16326.9688,3043.0082 16327.6563,3044.0707 Q16328.3438,3045.1489 16329.6719,3045.1489 Q16330.3125,3045.1489 16330.9063,3044.8676 Q16331.2031,3044.7426 16331.4844,3044.5551 Q16331.7813,3044.352 16332.125,3044.0239 L16332.125,3046.7426 Q16331.5469,3047.0395 16330.9063,3047.1957 Q16330.2813,3047.3364 16329.5469,3047.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="16350.25" y="3046.034">RlModelException</text><line style="stroke:#181818;stroke-width:0.5;" x1="16226.5" x2="16561.5" y1="3056.602" y2="3056.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="16226.5" x2="16561.5" y1="3064.602" y2="3064.602"/><ellipse cx="16236.5" cy="3075.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="311" x="16245.5" y="3083.5679">RlModelException(const std::string&amp; message)</text></g><!--MD5=[374ef434073c24a094f825153c564bf2]
class raylib.ex.WindowException--><g id="elem_raylib.ex.WindowException"><rect codeLine="892" fill="#F1F1F1" height="67.0679" id="raylib.ex.WindowException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="305" x="16597.5" y="3024.602"/><ellipse cx="16686.25" cy="3040.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M16686.0469,3047.3364 Q16683.5625,3047.3364 16682.2344,3045.6957 Q16680.9219,3044.0239 16680.9219,3040.9145 Q16680.9219,3037.7895 16682.2344,3036.1332 Q16683.5625,3034.477 16686.0469,3034.477 Q16686.7656,3034.477 16687.4219,3034.6332 Q16688.0625,3034.7895 16688.625,3035.0864 L16688.625,3037.8051 Q16688.2656,3037.4614 16687.9688,3037.2739 Q16687.6719,3037.0707 16687.4063,3036.9457 Q16687.0938,3036.8051 16686.7813,3036.7426 Q16686.4844,3036.6801 16686.1719,3036.6801 Q16684.8438,3036.6801 16684.1563,3037.7426 Q16683.4688,3038.8364 16683.4688,3040.9145 Q16683.4688,3043.0082 16684.1563,3044.0707 Q16684.8438,3045.1489 16686.1719,3045.1489 Q16686.8125,3045.1489 16687.4063,3044.8676 Q16687.7031,3044.7426 16687.9844,3044.5551 Q16688.2813,3044.352 16688.625,3044.0239 L16688.625,3046.7426 Q16688.0469,3047.0395 16687.4063,3047.1957 Q16686.7813,3047.3364 16686.0469,3047.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="119" x="16706.75" y="3046.034">WindowException</text><line style="stroke:#181818;stroke-width:0.5;" x1="16598.5" x2="16901.5" y1="3056.602" y2="3056.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="16598.5" x2="16901.5" y1="3064.602" y2="3064.602"/><ellipse cx="16608.5" cy="3075.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="279" x="16617.5" y="3083.5679">WindowException(const std::string&amp; msg)</text></g><!--MD5=[745590256b95e9da45dcf0ef304f0520]
class raylib.builder.IBuilder--><g id="elem_raylib.builder.IBuilder"><rect codeLine="898" fill="#F1F1F1" height="67.0679" id="raylib.builder.IBuilder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="211" x="5107.5" y="2096.602"/><ellipse cx="5122.5" cy="2112.602" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5121.125,2105.9614 L5124.1094,2105.9614 L5127.4688,2118.352 L5125.0156,2118.352 L5124.25,2115.2895 L5120.9688,2115.2895 L5120.2188,2118.352 L5117.7813,2118.352 L5121.125,2105.9614 Z M5123.7813,2113.2739 L5122.6094,2108.1957 L5121.4531,2113.2739 L5123.7813,2113.2739 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="50" x="5136.5" y="2118.034">IBuilder</text><rect fill="#FFFFFF" height="18.3441" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="127" x="5194.5" y="2093.602"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="125" x="5195.5" y="2107.4301">template&lt;typename T&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="5108.5" x2="5317.5" y1="2128.602" y2="2128.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="5108.5" x2="5317.5" y1="2136.602" y2="2136.602"/><ellipse cx="5118.5" cy="2147.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="59" x="5127.5" y="2155.5679">build() : T</text></g><!--MD5=[806b130846df0b1593a3fee07e478ddf]
class raylib.builder.RlCameraBuilder--><g id="elem_raylib.builder.RlCameraBuilder"><rect codeLine="902" fill="#F1F1F1" height="314.9508" id="raylib.builder.RlCameraBuilder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="468" x="4054" y="2900.602"/><ellipse cx="4226.75" cy="2916.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4226.5469,2923.3364 Q4224.0625,2923.3364 4222.7344,2921.6957 Q4221.4219,2920.0239 4221.4219,2916.9145 Q4221.4219,2913.7895 4222.7344,2912.1332 Q4224.0625,2910.477 4226.5469,2910.477 Q4227.2656,2910.477 4227.9219,2910.6332 Q4228.5625,2910.7895 4229.125,2911.0864 L4229.125,2913.8051 Q4228.7656,2913.4614 4228.4688,2913.2739 Q4228.1719,2913.0707 4227.9063,2912.9457 Q4227.5938,2912.8051 4227.2813,2912.7426 Q4226.9844,2912.6801 4226.6719,2912.6801 Q4225.3438,2912.6801 4224.6563,2913.7426 Q4223.9688,2914.8364 4223.9688,2916.9145 Q4223.9688,2919.0082 4224.6563,2920.0707 Q4225.3438,2921.1489 4226.6719,2921.1489 Q4227.3125,2921.1489 4227.9063,2920.8676 Q4228.2031,2920.7426 4228.4844,2920.5551 Q4228.7813,2920.352 4229.125,2920.0239 L4229.125,2922.7426 Q4228.5469,2923.0395 4227.9063,2923.1957 Q4227.2813,2923.3364 4226.5469,2923.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="4247.25" y="2922.034">RlCameraBuilder</text><line style="stroke:#181818;stroke-width:0.5;" x1="4055" x2="4521" y1="2932.602" y2="2932.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4062" y="2940.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="4074" y="2951.5679">_cameraMode : CameraMode</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4062" y="2959.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="4074" y="2970.6358">_projection : CameraProjection</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4062" y="2978.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="4074" y="2989.7038">_lookingPoint : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4062" y="2997.8057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="4074" y="3008.7717">_position : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4062" y="3016.8736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="4074" y="3027.8396">_target : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4062" y="3035.9416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="4074" y="3046.9075">_fovy : float</text><line style="stroke:#181818;stroke-width:0.5;" x1="4055" x2="4521" y1="3055.0095" y2="3055.0095"/><ellipse cx="4065" cy="3066.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="122" x="4074" y="3073.9754">RlCameraBuilder()</text><ellipse cx="4065" cy="3085.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="4074" y="3093.0433">build() : RlCamera</text><ellipse cx="4065" cy="3104.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="436" x="4074" y="3112.1113">setCameraMode(CameraMode cameraMode) : RlCameraBuilder&amp;</text><ellipse cx="4065" cy="3123.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="254" x="4074" y="3131.1792">setFovy(float fovy) : RlCameraBuilder&amp;</text><ellipse cx="4065" cy="3142.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="442" x="4074" y="3150.2471">setLookingPoint(const Vector3f&amp; lookingPoint) : RlCameraBuilder&amp;</text><ellipse cx="4065" cy="3161.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="380" x="4074" y="3169.315">setPosition(const Vector3f&amp; position) : RlCameraBuilder&amp;</text><ellipse cx="4065" cy="3180.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="422" x="4074" y="3188.3829">setProjection(CameraProjection projection) : RlCameraBuilder&amp;</text><ellipse cx="4065" cy="3199.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="358" x="4074" y="3207.4508">setTarget(const Vector3f&amp; target) : RlCameraBuilder&amp;</text></g><!--MD5=[81e0877a4882158be22e698a9e5257e4]
class raylib.builder.RlImageBuilder--><g id="elem_raylib.builder.RlImageBuilder"><rect codeLine="919" fill="#F1F1F1" height="753.5129" id="raylib.builder.RlImageBuilder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="379" x="4557.5" y="2681.102"/><ellipse cx="4690.25" cy="2697.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4690.0469,2703.8364 Q4687.5625,2703.8364 4686.2344,2702.1957 Q4684.9219,2700.5239 4684.9219,2697.4145 Q4684.9219,2694.2895 4686.2344,2692.6332 Q4687.5625,2690.977 4690.0469,2690.977 Q4690.7656,2690.977 4691.4219,2691.1332 Q4692.0625,2691.2895 4692.625,2691.5864 L4692.625,2694.3051 Q4692.2656,2693.9614 4691.9688,2693.7739 Q4691.6719,2693.5707 4691.4063,2693.4457 Q4691.0938,2693.3051 4690.7813,2693.2426 Q4690.4844,2693.1801 4690.1719,2693.1801 Q4688.8438,2693.1801 4688.1563,2694.2426 Q4687.4688,2695.3364 4687.4688,2697.4145 Q4687.4688,2699.5082 4688.1563,2700.5707 Q4688.8438,2701.6489 4690.1719,2701.6489 Q4690.8125,2701.6489 4691.4063,2701.3676 Q4691.7031,2701.2426 4691.9844,2701.0551 Q4692.2813,2700.852 4692.625,2700.5239 L4692.625,2703.2426 Q4692.0469,2703.5395 4691.4063,2703.6957 Q4690.7813,2703.8364 4690.0469,2703.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="105" x="4710.75" y="2702.534">RlImageBuilder</text><line style="stroke:#181818;stroke-width:0.5;" x1="4558.5" x2="4935.5" y1="2713.102" y2="2713.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4565.5" y="2721.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="4577.5" y="2732.0679">_bottom : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4565.5" y="2740.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="93" x="4577.5" y="2751.1358">_col1 : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4565.5" y="2759.2378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="93" x="4577.5" y="2770.2038">_col2 : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4565.5" y="2778.3057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="4577.5" y="2789.2717">_color : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4565.5" y="2797.3736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="4577.5" y="2808.3396">_inner : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4565.5" y="2816.4416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="88" x="4577.5" y="2827.4075">_left : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4565.5" y="2835.5095"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="4577.5" y="2846.4754">_outer : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4565.5" y="2854.5774"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="4577.5" y="2865.5433">_right : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4565.5" y="2873.6453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="88" x="4577.5" y="2884.6113">_top : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4565.5" y="2892.7132"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="4577.5" y="2903.6792">_density : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4565.5" y="2911.7812"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="87" x="4577.5" y="2922.7471">_factor : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4565.5" y="2930.8491"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="4577.5" y="2941.815">_checksX : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4565.5" y="2949.917"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="4577.5" y="2960.8829">_checksY : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4565.5" y="2968.9849"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="4577.5" y="2979.9508">_height : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4565.5" y="2988.0528"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="4577.5" y="2999.0188">_titleSize : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4565.5" y="3007.1207"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="4577.5" y="3018.0867">_width : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4565.5" y="3026.1887"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="81" x="4577.5" y="3037.1546">_flags : long</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4565.5" y="3045.2566"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="4577.5" y="3056.2225">_type : long</text><line style="stroke:#181818;stroke-width:0.5;" x1="4558.5" x2="4935.5" y1="3064.3245" y2="3064.3245"/><ellipse cx="4568.5" cy="3075.3245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="4577.5" y="3083.2904">RlImageBuilder()</text><ellipse cx="4568.5" cy="3094.3924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="353" x="4577.5" y="3102.3583">setBottom(const RlColor&amp; bottom) : RlImageBuilder&amp;</text><ellipse cx="4568.5" cy="3113.4603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="335" x="4577.5" y="3121.4263">setChecksX(const int&amp; checksX) : RlImageBuilder&amp;</text><ellipse cx="4568.5" cy="3132.5282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="335" x="4577.5" y="3140.4942">setChecksY(const int&amp; checksY) : RlImageBuilder&amp;</text><ellipse cx="4568.5" cy="3151.5962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="4577.5" y="3159.5621">setCol1(const RlColor&amp; col1) : RlImageBuilder&amp;</text><ellipse cx="4568.5" cy="3170.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="4577.5" y="3178.63">setCol2(const RlColor&amp; col2) : RlImageBuilder&amp;</text><ellipse cx="4568.5" cy="3189.732" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="325" x="4577.5" y="3197.6979">setColor(const RlColor&amp; color) : RlImageBuilder&amp;</text><ellipse cx="4568.5" cy="3208.7999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="338" x="4577.5" y="3216.7658">setDensity(const float&amp; density) : RlImageBuilder&amp;</text><ellipse cx="4568.5" cy="3227.8678" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="319" x="4577.5" y="3235.8338">setFactor(const float&amp; factor) : RlImageBuilder&amp;</text><ellipse cx="4568.5" cy="3246.9357" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="316" x="4577.5" y="3254.9017">setHeight(const int&amp; height) : RlImageBuilder&amp;</text><ellipse cx="4568.5" cy="3266.0037" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="330" x="4577.5" y="3273.9696">setInner(const RlColor&amp; inner) : RlImageBuilder&amp;</text><ellipse cx="4568.5" cy="3285.0716" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="304" x="4577.5" y="3293.0375">setLeft(const RlColor&amp; left) : RlImageBuilder&amp;</text><ellipse cx="4568.5" cy="3304.1395" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="332" x="4577.5" y="3312.1054">setOuter(const RlColor&amp; outer) : RlImageBuilder&amp;</text><ellipse cx="4568.5" cy="3323.2074" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="326" x="4577.5" y="3331.1733">setRight(const RlColor&amp; right) : RlImageBuilder&amp;</text><ellipse cx="4568.5" cy="3342.2753" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="336" x="4577.5" y="3350.2413">setTitleSize(const int&amp; titleSize) : RlImageBuilder&amp;</text><ellipse cx="4568.5" cy="3361.3432" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="304" x="4577.5" y="3369.3092">setTop(const RlColor&amp; top) : RlImageBuilder&amp;</text><ellipse cx="4568.5" cy="3380.4112" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="295" x="4577.5" y="3388.3771">setType(ImageType type) : RlImageBuilder&amp;</text><ellipse cx="4568.5" cy="3399.4791" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="305" x="4577.5" y="3407.445">setWidth(const int&amp; width) : RlImageBuilder&amp;</text><ellipse cx="4568.5" cy="3418.547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="207" x="4577.5" y="3426.5129">build() : raylib::image::RlImage</text></g><!--MD5=[3b7ecc343caed62a40870f10057519fe]
class raylib.builder.RlMeshBuilder--><g id="elem_raylib.builder.RlMeshBuilder"><rect codeLine="959" fill="#F1F1F1" height="772.5808" id="raylib.builder.RlMeshBuilder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="484" x="4971" y="2671.602"/><ellipse cx="5159.25" cy="2687.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5159.0469,2694.3364 Q5156.5625,2694.3364 5155.2344,2692.6957 Q5153.9219,2691.0239 5153.9219,2687.9145 Q5153.9219,2684.7895 5155.2344,2683.1332 Q5156.5625,2681.477 5159.0469,2681.477 Q5159.7656,2681.477 5160.4219,2681.6332 Q5161.0625,2681.7895 5161.625,2682.0864 L5161.625,2684.8051 Q5161.2656,2684.4614 5160.9688,2684.2739 Q5160.6719,2684.0707 5160.4063,2683.9457 Q5160.0938,2683.8051 5159.7813,2683.7426 Q5159.4844,2683.6801 5159.1719,2683.6801 Q5157.8438,2683.6801 5157.1563,2684.7426 Q5156.4688,2685.8364 5156.4688,2687.9145 Q5156.4688,2690.0082 5157.1563,2691.0707 Q5157.8438,2692.1489 5159.1719,2692.1489 Q5159.8125,2692.1489 5160.4063,2691.8676 Q5160.7031,2691.7426 5160.9844,2691.5551 Q5161.2813,2691.352 5161.625,2691.0239 L5161.625,2693.7426 Q5161.0469,2694.0395 5160.4063,2694.1957 Q5159.7813,2694.3364 5159.0469,2694.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="5179.75" y="2693.034">RlMeshBuilder</text><line style="stroke:#181818;stroke-width:0.5;" x1="4972" x2="5454" y1="2703.602" y2="2703.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4979" y="2711.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="133" x="4991" y="2722.5679">_cubeSize : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4979" y="2730.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="135" x="4991" y="2741.6358">_vec3fSize : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4979" y="2749.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="92" x="4991" y="2760.7038">_height : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4979" y="2768.8057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="92" x="4991" y="2779.7717">_length : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4979" y="2787.8736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="91" x="4991" y="2798.8396">_radius : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4979" y="2806.9416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="4991" y="2817.9075">_size : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4979" y="2826.0095"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="4991" y="2836.9754">_width : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4979" y="2845.0774"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="190" x="4991" y="2856.0433">_cubicmap : image::RlImage</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4979" y="2864.1453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="198" x="4991" y="2875.1113">_heightmap : image::RlImage</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4979" y="2883.2132"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="84" x="4991" y="2894.1792">_radSeg : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4979" y="2902.2812"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="65" x="4991" y="2913.2471">_resX : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4979" y="2921.3491"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="65" x="4991" y="2932.315">_resZ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4979" y="2940.417"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="4991" y="2951.3829">_rings : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4979" y="2959.4849"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="4991" y="2970.4508">_sides : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4979" y="2978.5528"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="4991" y="2989.5188">_slices : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4979" y="2997.6207"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="81" x="4991" y="3008.5867">_flags : long</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4979" y="3016.6887"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="4991" y="3027.6546">_type : long</text><line style="stroke:#181818;stroke-width:0.5;" x1="4972" x2="5454" y1="3035.7566" y2="3035.7566"/><ellipse cx="4982" cy="3046.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="4991" y="3054.7225">RlMeshBuilder()</text><ellipse cx="4982" cy="3065.8245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="330" x="4991" y="3073.7904">setConeSlices(const int&amp; slices) : RlMeshBuilder&amp;</text><ellipse cx="4982" cy="3084.8924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="380" x="4991" y="3092.8583">setCubeSize(const Vector3f&amp; cubeSize) : RlMeshBuilder&amp;</text><ellipse cx="4982" cy="3103.9603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="443" x="4991" y="3111.9263">setCubicmap(const image::RlImage&amp; cubicmap) : RlMeshBuilder&amp;</text><ellipse cx="4982" cy="3123.0282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="322" x="4991" y="3130.9942">setHeight(const float&amp; height) : RlMeshBuilder&amp;</text><ellipse cx="4982" cy="3142.0962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="458" x="4991" y="3150.0621">setHeightmap(const image::RlImage&amp; heightmap) : RlMeshBuilder&amp;</text><ellipse cx="4982" cy="3161.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="376" x="4991" y="3169.13">setHemisphereRings(const int&amp; rings) : RlMeshBuilder&amp;</text><ellipse cx="4982" cy="3180.232" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="351" x="4991" y="3188.1979">setKnotRadSeg(const int&amp; radSeg) : RlMeshBuilder&amp;</text><ellipse cx="4982" cy="3199.2999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="324" x="4991" y="3207.2658">setLength(const float&amp; length) : RlMeshBuilder&amp;</text><ellipse cx="4982" cy="3218.3678" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="360" x="4991" y="3226.3338">setMeshType(MeshType meshType) : RlMeshBuilder&amp;</text><ellipse cx="4982" cy="3237.4357" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="320" x="4991" y="3245.4017">setRadSeg(const int&amp; radSeg) : RlMeshBuilder&amp;</text><ellipse cx="4982" cy="3256.5037" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="322" x="4991" y="3264.4696">setRadius(const float&amp; radius) : RlMeshBuilder&amp;</text><ellipse cx="4982" cy="3275.5716" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="282" x="4991" y="3283.5375">setResX(const int&amp; resX) : RlMeshBuilder&amp;</text><ellipse cx="4982" cy="3294.6395" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="282" x="4991" y="3302.6054">setResZ(const int&amp; resZ) : RlMeshBuilder&amp;</text><ellipse cx="4982" cy="3313.7074" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="294" x="4991" y="3321.6733">setRings(const int&amp; rings) : RlMeshBuilder&amp;</text><ellipse cx="4982" cy="3332.7753" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="292" x="4991" y="3340.7413">setSides(const int&amp; sides) : RlMeshBuilder&amp;</text><ellipse cx="4982" cy="3351.8432" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="286" x="4991" y="3359.8092">setSize(const float&amp; size) : RlMeshBuilder&amp;</text><ellipse cx="4982" cy="3370.9112" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="296" x="4991" y="3378.8771">setSlices(const int&amp; slices) : RlMeshBuilder&amp;</text><ellipse cx="4982" cy="3389.9791" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="347" x="4991" y="3397.945">setVec3fSize(const Vector3f&amp; size) : RlMeshBuilder&amp;</text><ellipse cx="4982" cy="3409.047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="311" x="4991" y="3417.0129">setWidth(const float&amp; width) : RlMeshBuilder&amp;</text><ellipse cx="4982" cy="3428.1149" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="155" x="4991" y="3436.0808">build() : model::RlMesh</text></g><!--MD5=[00e79b1a3b0446364c705889fb3ec78f]
class raylib.builder.RlModelBuilder--><g id="elem_raylib.builder.RlModelBuilder"><rect codeLine="1000" fill="#F1F1F1" height="543.7658" id="raylib.builder.RlModelBuilder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="572" x="5490" y="2786.102"/><ellipse cx="5719.75" cy="2802.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5719.5469,2808.8364 Q5717.0625,2808.8364 5715.7344,2807.1957 Q5714.4219,2805.5239 5714.4219,2802.4145 Q5714.4219,2799.2895 5715.7344,2797.6332 Q5717.0625,2795.977 5719.5469,2795.977 Q5720.2656,2795.977 5720.9219,2796.1332 Q5721.5625,2796.2895 5722.125,2796.5864 L5722.125,2799.3051 Q5721.7656,2798.9614 5721.4688,2798.7739 Q5721.1719,2798.5707 5720.9063,2798.4457 Q5720.5938,2798.3051 5720.2813,2798.2426 Q5719.9844,2798.1801 5719.6719,2798.1801 Q5718.3438,2798.1801 5717.6563,2799.2426 Q5716.9688,2800.3364 5716.9688,2802.4145 Q5716.9688,2804.5082 5717.6563,2805.5707 Q5718.3438,2806.6489 5719.6719,2806.6489 Q5720.3125,2806.6489 5720.9063,2806.3676 Q5721.2031,2806.2426 5721.4844,2806.0551 Q5721.7813,2805.852 5722.125,2805.5239 L5722.125,2808.2426 Q5721.5469,2808.5395 5720.9063,2808.6957 Q5720.2813,2808.8364 5719.5469,2808.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="104" x="5740.25" y="2807.534">RlModelBuilder</text><line style="stroke:#181818;stroke-width:0.5;" x1="5491" x2="6061" y1="2818.102" y2="2818.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5498" y="2826.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="198" x="5510" y="2837.0679">_boundingBox : BoundingBox</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5498" y="2845.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="5510" y="2856.1358">_color : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5498" y="2864.2378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="5510" y="2875.2038">_position : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5498" y="2883.3057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="5510" y="2894.2717">_rotationAxis : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5498" y="2902.3736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="5510" y="2913.3396">_scale : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5498" y="2921.4416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="158" x="5510" y="2932.4075">_boundingBoxSet : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5498" y="2940.5095"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="140" x="5510" y="2951.4754">_rotationAngle : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5498" y="2959.5774"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="81" x="5510" y="2970.5433">_flags : long</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5498" y="2978.6453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="280" x="5510" y="2989.6113">_validTypes : static std::vector&lt;ValidType&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5498" y="2997.7132"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="319" x="5510" y="3008.6792">_mesh : std::shared_ptr&lt;raylib::model::RlMesh&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5498" y="3016.7812"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="304" x="5510" y="3027.7471">_texture : std::shared_ptr&lt;texture::RlTexture&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5498" y="3035.8491"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="159" x="5510" y="3046.815">_modelPath : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5498" y="3054.917"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="165" x="5510" y="3065.8829">_texturePath : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="5491" x2="6061" y1="3073.9849" y2="3073.9849"/><ellipse cx="5501" cy="3084.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="5510" y="3092.9508">RlModelBuilder()</text><ellipse cx="5501" cy="3104.0528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="416" x="5510" y="3112.0188">setRotationAxis(const Vector3f&amp; rotationAxis) : RlModelBuilder</text><ellipse cx="5501" cy="3123.1207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="478" x="5510" y="3131.0867">setBoundingBox(const BoundingBox&amp; boundingBox) : RlModelBuilder&amp;</text><ellipse cx="5501" cy="3142.1887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="324" x="5510" y="3150.1546">setColor(const RlColor&amp; color) : RlModelBuilder&amp;</text><ellipse cx="5501" cy="3161.2566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="546" x="5510" y="3169.2225">setMesh(const std::shared_ptr&lt;raylib::model::RlMesh&gt;&amp; mesh) : RlModelBuilder&amp;</text><ellipse cx="5501" cy="3180.3245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="428" x="5510" y="3188.2904">setMesh(const raylib::model::RlMesh&amp; mesh) : RlModelBuilder&amp;</text><ellipse cx="5501" cy="3199.3924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="421" x="5510" y="3207.3583">setModelPath(const std::string&amp; modelPath) : RlModelBuilder&amp;</text><ellipse cx="5501" cy="3218.4603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="370" x="5510" y="3226.4263">setPosition(const Vector3f&amp; position) : RlModelBuilder&amp;</text><ellipse cx="5501" cy="3237.5282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="425" x="5510" y="3245.4942">setRotationAngle(const float&amp; rotationAngle) : RlModelBuilder&amp;</text><ellipse cx="5501" cy="3256.5962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="332" x="5510" y="3264.5621">setScale(const Vector3f&amp; scale) : RlModelBuilder&amp;</text><ellipse cx="5501" cy="3275.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="545" x="5510" y="3283.63">setTexture(const std::shared_ptr&lt;texture::RlTexture&gt;&amp; texture) : RlModelBuilder&amp;</text><ellipse cx="5501" cy="3294.732" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="436" x="5510" y="3302.6979">setTexturePath(const std::string&amp; texturePath) : RlModelBuilder&amp;</text><ellipse cx="5501" cy="3313.7999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="206" x="5510" y="3321.7658">build() : raylib::model::RlModel</text></g><!--MD5=[29538f7755bd2325990f0c2ee99bf13e]
class raylib.builder.RlTextBuilder--><g id="elem_raylib.builder.RlTextBuilder"><rect codeLine="1029" fill="#F1F1F1" height="505.63" id="raylib.builder.RlTextBuilder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="515" x="6097.5" y="2805.102"/><ellipse cx="6305.75" cy="2821.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M6305.5469,2827.8364 Q6303.0625,2827.8364 6301.7344,2826.1957 Q6300.4219,2824.5239 6300.4219,2821.4145 Q6300.4219,2818.2895 6301.7344,2816.6332 Q6303.0625,2814.977 6305.5469,2814.977 Q6306.2656,2814.977 6306.9219,2815.1332 Q6307.5625,2815.2895 6308.125,2815.5864 L6308.125,2818.3051 Q6307.7656,2817.9614 6307.4688,2817.7739 Q6307.1719,2817.5707 6306.9063,2817.4457 Q6306.5938,2817.3051 6306.2813,2817.2426 Q6305.9844,2817.1801 6305.6719,2817.1801 Q6304.3438,2817.1801 6303.6563,2818.2426 Q6302.9688,2819.3364 6302.9688,2821.4145 Q6302.9688,2823.5082 6303.6563,2824.5707 Q6304.3438,2825.6489 6305.6719,2825.6489 Q6306.3125,2825.6489 6306.9063,2825.3676 Q6307.2031,2825.2426 6307.4844,2825.0551 Q6307.7813,2824.852 6308.125,2824.5239 L6308.125,2827.2426 Q6307.5469,2827.5395 6306.9063,2827.6957 Q6306.2813,2827.8364 6305.5469,2827.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="6326.25" y="2826.534">RlTextBuilder</text><line style="stroke:#181818;stroke-width:0.5;" x1="6098.5" x2="6611.5" y1="2837.102" y2="2837.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6105.5" y="2845.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="6117.5" y="2856.0679">_color : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6105.5" y="2864.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="6117.5" y="2875.1358">_origin : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6105.5" y="2883.2378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="6117.5" y="2894.2038">_position : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6105.5" y="2902.3057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="6117.5" y="2913.2717">_isFontPathSet : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6105.5" y="2921.3736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="108" x="6117.5" y="2932.3396">_isFontSet : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6105.5" y="2940.4416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="135" x="6117.5" y="2951.4075">_isFontSizeSet : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6105.5" y="2959.5095"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="6117.5" y="2970.4754">_isTextSet : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6105.5" y="2978.5774"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="6117.5" y="2989.5433">_fontSize : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6105.5" y="2997.6453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="6117.5" y="3008.6113">_rotation : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6105.5" y="3016.7132"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="6117.5" y="3027.6792">_textSpacing : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6105.5" y="3035.7812"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="284" x="6117.5" y="3046.7471">_font : std::shared_ptr&lt;raylib::text::RlFont&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6105.5" y="3054.8491"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="6117.5" y="3065.815">_fontPath : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6105.5" y="3073.917"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="6117.5" y="3084.8829">_text : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="6098.5" x2="6611.5" y1="3092.9849" y2="3092.9849"/><ellipse cx="6108.5" cy="3103.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="6117.5" y="3111.9508">RlTextBuilder()</text><ellipse cx="6108.5" cy="3123.0528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="310" x="6117.5" y="3131.0188">setColor(const RlColor&amp; color) : RlTextBuilder&amp;</text><ellipse cx="6108.5" cy="3142.1207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="489" x="6117.5" y="3150.0867">setFont(const std::shared_ptr&lt;raylib::text::RlFont&gt;&amp; font) : RlTextBuilder&amp;</text><ellipse cx="6108.5" cy="3161.1887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="379" x="6117.5" y="3169.1546">setFontPath(const std::string&amp; fontPath) : RlTextBuilder&amp;</text><ellipse cx="6108.5" cy="3180.2566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="334" x="6117.5" y="3188.2225">setFontSize(const float&amp; fontSize) : RlTextBuilder&amp;</text><ellipse cx="6108.5" cy="3199.3245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="332" x="6117.5" y="3207.2904">setOrigin(const Vector2f&amp; origin) : RlTextBuilder&amp;</text><ellipse cx="6108.5" cy="3218.3924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="356" x="6117.5" y="3226.3583">setPosition(const Vector2f&amp; position) : RlTextBuilder&amp;</text><ellipse cx="6108.5" cy="3237.4603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="333" x="6117.5" y="3245.4263">setRotation(const float&amp; rotation) : RlTextBuilder&amp;</text><ellipse cx="6108.5" cy="3256.5282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="331" x="6117.5" y="3264.4942">setSpacing(const float&amp; spacing) : RlTextBuilder&amp;</text><ellipse cx="6108.5" cy="3275.5962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="316" x="6117.5" y="3283.5621">setText(const std::string&amp; text) : RlTextBuilder&amp;</text><ellipse cx="6108.5" cy="3294.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="6117.5" y="3302.63">build() : raylib::text::RlText</text></g><!--MD5=[2f92eb9eddbb53a77ac8fa899ba3ae23]
class raylib.builder.RlImageBuilder::ImageType--><g id="elem_raylib.builder.RlImageBuilder::ImageType"><rect codeLine="1056" fill="#F1F1F1" height="181.4754" id="raylib.builder.RlImageBuilder::ImageType" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="220" x="4389" y="3972.102"/><ellipse cx="4404" cy="3988.102" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4400.3906,3982.2114 L4408.1094,3982.2114 L4408.1094,3984.3676 L4402.8438,3984.3676 L4402.8438,3987.0395 L4407.6094,3987.0395 L4407.6094,3989.1957 L4402.8438,3989.1957 L4402.8438,3992.4457 L4408.1094,3992.4457 L4408.1094,3994.602 L4400.3906,3994.602 L4400.3906,3982.2114 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="4418" y="3993.534">RlImageBuilder::ImageType</text><line style="stroke:#181818;stroke-width:0.5;" x1="4390" x2="4608" y1="4004.102" y2="4004.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="4395" y="4023.0679">ImageCellular</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="4395" y="4042.1358">ImageChecked</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="78" x="4395" y="4061.2038">ImageColor</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="4395" y="4080.2717">ImageGradientH</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="4395" y="4099.3396">ImageGradientRadial</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="4395" y="4118.4075">ImageGradientV</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="4395" y="4137.4754">ImageWhiteNoise</text><line style="stroke:#181818;stroke-width:0.5;" x1="4390" x2="4608" y1="4145.5774" y2="4145.5774"/></g><!--MD5=[3936ca64184c47e72f549fd88b81ba13]
class raylib.builder.RlImageBuilder::ParameterName--><g id="elem_raylib.builder.RlImageBuilder::ParameterName"><rect codeLine="1066" fill="#F1F1F1" height="353.0867" id="raylib.builder.RlImageBuilder::ParameterName" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="255" x="4644.5" y="3886.102"/><ellipse cx="4659.5" cy="3902.102" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4655.8906,3896.2114 L4663.6094,3896.2114 L4663.6094,3898.3676 L4658.3438,3898.3676 L4658.3438,3901.0395 L4663.1094,3901.0395 L4663.1094,3903.1957 L4658.3438,3903.1957 L4658.3438,3906.4457 L4663.6094,3906.4457 L4663.6094,3908.602 L4655.8906,3908.602 L4655.8906,3896.2114 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="223" x="4673.5" y="3907.534">RlImageBuilder::ParameterName</text><line style="stroke:#181818;stroke-width:0.5;" x1="4645.5" x2="4898.5" y1="3918.102" y2="3918.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="48" x="4650.5" y="3937.0679">Bottom</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="55" x="4650.5" y="3956.1358">ChecksX</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="55" x="4650.5" y="3975.2038">ChecksY</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="29" x="4650.5" y="3994.2717">Col1</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="29" x="4650.5" y="4013.3396">Col2</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="35" x="4650.5" y="4032.4075">Color</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="50" x="4650.5" y="4051.4754">Density</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="41" x="4650.5" y="4070.5433">Factor</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="45" x="4650.5" y="4089.6113">Height</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="37" x="4650.5" y="4108.6792">Inner</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="25" x="4650.5" y="4127.7471">Left</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="39" x="4650.5" y="4146.815">Outer</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="36" x="4650.5" y="4165.8829">Right</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="4650.5" y="4184.9508">TitleSize</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="25" x="4650.5" y="4204.0188">Top</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="40" x="4650.5" y="4223.0867">Width</text><line style="stroke:#181818;stroke-width:0.5;" x1="4645.5" x2="4898.5" y1="4231.1887" y2="4231.1887"/></g><!--MD5=[5b2c63a1681952f0b429955e11ff60f8]
class raylib.builder.RlMeshBuilder::MeshType--><g id="elem_raylib.builder.RlMeshBuilder::MeshType"><rect codeLine="1085" fill="#F1F1F1" height="257.7471" id="raylib.builder.RlMeshBuilder::MeshType" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="208" x="5034" y="3933.602"/><ellipse cx="5049" cy="3949.602" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5045.3906,3943.7114 L5053.1094,3943.7114 L5053.1094,3945.8676 L5047.8438,3945.8676 L5047.8438,3948.5395 L5052.6094,3948.5395 L5052.6094,3950.6957 L5047.8438,3950.6957 L5047.8438,3953.9457 L5053.1094,3953.9457 L5053.1094,3956.102 L5045.3906,3956.102 L5045.3906,3943.7114 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="5063" y="3955.034">RlMeshBuilder::MeshType</text><line style="stroke:#181818;stroke-width:0.5;" x1="5035" x2="5241" y1="3965.602" y2="3965.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="5040" y="3984.5679">MeshCone</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="5040" y="4003.6358">MeshCube</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="105" x="5040" y="4022.7038">MeshCubicmap</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="93" x="5040" y="4041.7717">MeshCylinder</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="5040" y="4060.8396">MeshHeightmap</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="5040" y="4079.9075">MeshHemiSphere</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="68" x="5040" y="4098.9754">MeshKnot</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="5040" y="4118.0433">MeshPlane</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="64" x="5040" y="4137.1113">MeshPoly</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="85" x="5040" y="4156.1792">MeshSphere</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="5040" y="4175.2471">MeshTorus</text><line style="stroke:#181818;stroke-width:0.5;" x1="5035" x2="5241" y1="4183.3491" y2="4183.3491"/></g><!--MD5=[7a20b23c03bc5d510bbd0cd034319bce]
class raylib.builder.RlMeshBuilder::ParameterName--><g id="elem_raylib.builder.RlMeshBuilder::ParameterName"><rect codeLine="1099" fill="#F1F1F1" height="391.2225" id="raylib.builder.RlMeshBuilder::ParameterName" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="249" x="5277.5" y="3867.102"/><ellipse cx="5292.5" cy="3883.102" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5288.8906,3877.2114 L5296.6094,3877.2114 L5296.6094,3879.3676 L5291.3438,3879.3676 L5291.3438,3882.0395 L5296.1094,3882.0395 L5296.1094,3884.1957 L5291.3438,3884.1957 L5291.3438,3887.4457 L5296.6094,3887.4457 L5296.6094,3889.602 L5288.8906,3889.602 L5288.8906,3877.2114 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="217" x="5306.5" y="3888.534">RlMeshBuilder::ParameterName</text><line style="stroke:#181818;stroke-width:0.5;" x1="5278.5" x2="5525.5" y1="3899.102" y2="3899.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="5283.5" y="3918.0679">ConeSlices</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="62" x="5283.5" y="3937.1358">CubeSize</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="68" x="5283.5" y="3956.2038">Cubicmap</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="45" x="5283.5" y="3975.2717">Height</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="5283.5" y="3994.3396">Heightmap</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="5283.5" y="4013.4075">HemisphereRings</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="5283.5" y="4032.4754">KnotRadSeg</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="47" x="5283.5" y="4051.5433">Length</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="51" x="5283.5" y="4070.6113">RadSeg</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="46" x="5283.5" y="4089.6792">Radius</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="32" x="5283.5" y="4108.7471">ResX</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="32" x="5283.5" y="4127.815">ResZ</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="38" x="5283.5" y="4146.8829">Rings</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="36" x="5283.5" y="4165.9508">Sides</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="5283.5" y="4185.0188">Size</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="38" x="5283.5" y="4204.0867">Slices</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="63" x="5283.5" y="4223.1546">Vec3fSize</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="40" x="5283.5" y="4242.2225">Width</text><line style="stroke:#181818;stroke-width:0.5;" x1="5278.5" x2="5525.5" y1="4250.3245" y2="4250.3245"/></g><!--MD5=[dedff44a6773ff2e0ba5f39ff109dc76]
class raylib.builder.RlModelBuilder::RequiredParameter--><g id="elem_raylib.builder.RlModelBuilder::RequiredParameter"><rect codeLine="1120" fill="#F1F1F1" height="124.2717" id="raylib.builder.RlModelBuilder::RequiredParameter" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="276" x="5612" y="4000.602"/><ellipse cx="5627" cy="4016.602" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5623.3906,4010.7114 L5631.1094,4010.7114 L5631.1094,4012.8676 L5625.8438,4012.8676 L5625.8438,4015.5395 L5630.6094,4015.5395 L5630.6094,4017.6957 L5625.8438,4017.6957 L5625.8438,4020.9457 L5631.1094,4020.9457 L5631.1094,4023.102 L5623.3906,4023.102 L5623.3906,4010.7114 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="244" x="5641" y="4022.034">RlModelBuilder::RequiredParameter</text><line style="stroke:#181818;stroke-width:0.5;" x1="5613" x2="5887" y1="4032.602" y2="4032.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="39" x="5618" y="4051.5679">MESH</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="5618" y="4070.6358">MODEL_PATH</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="119" x="5618" y="4089.7038">SHARED_TEXTURE</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="5618" y="4108.7717">TEXTURE_PATH</text><line style="stroke:#181818;stroke-width:0.5;" x1="5613" x2="5887" y1="4116.8736" y2="4116.8736"/></g><!--MD5=[db52b25ad10c0d6652c0505d612d07a4]
class raylib.builder.RlModelBuilder::ValidType--><g id="elem_raylib.builder.RlModelBuilder::ValidType"><rect codeLine="1127" fill="#F1F1F1" height="143.3396" id="raylib.builder.RlModelBuilder::ValidType" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="283" x="5923.5" y="3991.102"/><ellipse cx="5972.25" cy="4007.102" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5968.6406,4001.2114 L5976.3594,4001.2114 L5976.3594,4003.3676 L5971.0938,4003.3676 L5971.0938,4006.0395 L5975.8594,4006.0395 L5975.8594,4008.1957 L5971.0938,4008.1957 L5971.0938,4011.4457 L5976.3594,4011.4457 L5976.3594,4013.602 L5968.6406,4013.602 L5968.6406,4001.2114 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="177" x="5992.75" y="4012.534">RlModelBuilder::ValidType</text><line style="stroke:#181818;stroke-width:0.5;" x1="5924.5" x2="6205.5" y1="4023.102" y2="4023.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="5929.5" y="4042.0679">RLMODEL_MESH</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="271" x="5929.5" y="4061.1358">RLMODEL_MESH_AND_SHARED_TEXTURE</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="106" x="5929.5" y="4080.2038">RLMODEL_PATH</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="267" x="5929.5" y="4099.2717">RLMODEL_PATH_AND_SHARED_TEXTURE</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="207" x="5929.5" y="4118.3396">RLMODEL_PATH_AND_TEXTURE</text><line style="stroke:#181818;stroke-width:0.5;" x1="5924.5" x2="6205.5" y1="4126.4416" y2="4126.4416"/></g><!--MD5=[e3431bddd82fc428f9c4777c31b6d1bb]
class raylib.audio.RlAudioStream--><g id="elem_raylib.audio.RlAudioStream"><rect codeLine="1137" fill="#F1F1F1" height="314.9508" id="raylib.audio.RlAudioStream" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="786" x="3212" y="1972.602"/><ellipse cx="3550.75" cy="1988.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M3550.5469,1995.3364 Q3548.0625,1995.3364 3546.7344,1993.6957 Q3545.4219,1992.0239 3545.4219,1988.9145 Q3545.4219,1985.7895 3546.7344,1984.1332 Q3548.0625,1982.477 3550.5469,1982.477 Q3551.2656,1982.477 3551.9219,1982.6332 Q3552.5625,1982.7895 3553.125,1983.0864 L3553.125,1985.8051 Q3552.7656,1985.4614 3552.4688,1985.2739 Q3552.1719,1985.0707 3551.9063,1984.9457 Q3551.5938,1984.8051 3551.2813,1984.7426 Q3550.9844,1984.6801 3550.6719,1984.6801 Q3549.3438,1984.6801 3548.6563,1985.7426 Q3547.9688,1986.8364 3547.9688,1988.9145 Q3547.9688,1991.0082 3548.6563,1992.0707 Q3549.3438,1993.1489 3550.6719,1993.1489 Q3551.3125,1993.1489 3551.9063,1992.8676 Q3552.2031,1992.7426 3552.4844,1992.5551 Q3552.7813,1992.352 3553.125,1992.0239 L3553.125,1994.7426 Q3552.5469,1995.0395 3551.9063,1995.1957 Q3551.2813,1995.3364 3550.5469,1995.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="3571.25" y="1994.034">RlAudioStream</text><line style="stroke:#181818;stroke-width:0.5;" x1="3213" x2="3997" y1="2004.602" y2="2004.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3220" y="2012.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="152" x="3232" y="2023.5679">_stream : AudioStream</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3220" y="2031.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="3232" y="2042.6358">_volume : float</text><line style="stroke:#181818;stroke-width:0.5;" x1="3213" x2="3997" y1="2050.7378" y2="2050.7378"/><ellipse cx="3223" cy="2061.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="760" x="3232" y="2069.7038">RlAudioStream(const unsigned int&amp; sampleRate, const unsigned int&amp; sampleSize, const unsigned int&amp; channels)</text><ellipse cx="3223" cy="2080.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="3232" y="2088.7717">~RlAudioStream()</text><ellipse cx="3223" cy="2099.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="3232" y="2107.8396">isPlaying() : bool</text><ellipse cx="3223" cy="2118.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="3232" y="2126.9075">isProcessed() : bool</text><ellipse cx="3223" cy="2138.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="185" x="3232" y="2145.9754">getVolume() : float&amp; {query}</text><ellipse cx="3223" cy="2157.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="3232" y="2165.0433">pause() : void</text><ellipse cx="3223" cy="2176.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="3232" y="2184.1113">play() : void</text><ellipse cx="3223" cy="2195.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="3232" y="2203.1792">resume() : void</text><ellipse cx="3223" cy="2214.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="3232" y="2222.2471">setPitch(const float&amp; pitch) : void</text><ellipse cx="3223" cy="2233.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="3232" y="2241.315">setVolume(float volume) : void</text><ellipse cx="3223" cy="2252.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="3232" y="2260.3829">stop() : void</text><ellipse cx="3223" cy="2271.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="382" x="3232" y="2279.4508">update(const void* data, const int&amp; samplesCount) : void</text></g><!--MD5=[6916dbfd61d8c525ca678e71067b9efa]
class raylib.audio.RlMusic--><g id="elem_raylib.audio.RlMusic"><rect codeLine="1154" fill="#F1F1F1" height="410.2904" id="raylib.audio.RlMusic" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="548" x="2629" y="1925.102"/><ellipse cx="2872.25" cy="1941.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2872.0469,1947.8364 Q2869.5625,1947.8364 2868.2344,1946.1957 Q2866.9219,1944.5239 2866.9219,1941.4145 Q2866.9219,1938.2895 2868.2344,1936.6332 Q2869.5625,1934.977 2872.0469,1934.977 Q2872.7656,1934.977 2873.4219,1935.1332 Q2874.0625,1935.2895 2874.625,1935.5864 L2874.625,1938.3051 Q2874.2656,1937.9614 2873.9688,1937.7739 Q2873.6719,1937.5707 2873.4063,1937.4457 Q2873.0938,1937.3051 2872.7813,1937.2426 Q2872.4844,1937.1801 2872.1719,1937.1801 Q2870.8438,1937.1801 2870.1563,1938.2426 Q2869.4688,1939.3364 2869.4688,1941.4145 Q2869.4688,1943.5082 2870.1563,1944.5707 Q2870.8438,1945.6489 2872.1719,1945.6489 Q2872.8125,1945.6489 2873.4063,1945.3676 Q2873.7031,1945.2426 2873.9844,1945.0551 Q2874.2813,1944.852 2874.625,1944.5239 L2874.625,1947.2426 Q2874.0469,1947.5395 2873.4063,1947.6957 Q2872.7813,1947.8364 2872.0469,1947.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="53" x="2892.75" y="1946.534">RlMusic</text><line style="stroke:#181818;stroke-width:0.5;" x1="2630" x2="3176" y1="1957.102" y2="1957.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2637" y="1965.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="2649" y="1976.0679">_music : Music</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2637" y="1984.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="2649" y="1995.1358">_volume : float</text><line style="stroke:#181818;stroke-width:0.5;" x1="2630" x2="3176" y1="2003.2378" y2="2003.2378"/><ellipse cx="2640" cy="2014.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="245" x="2649" y="2022.2038">RlMusic(const std::string&amp; fileName)</text><ellipse cx="2640" cy="2033.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="522" x="2649" y="2041.2717">RlMusic(const std::string&amp; fileType, unsigned char* data, const int&amp; dataSize)</text><ellipse cx="2640" cy="2052.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="2649" y="2060.3396">~RlMusic()</text><ellipse cx="2640" cy="2071.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="2649" y="2079.4075">isPlaying() : bool</text><ellipse cx="2640" cy="2090.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="177" x="2649" y="2098.4754">isLooping() : bool&amp; {query}</text><ellipse cx="2640" cy="2109.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="152" x="2649" y="2117.5433">getTimeLength() : float</text><ellipse cx="2640" cy="2128.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="149" x="2649" y="2136.6113">getTimePlayed() : float</text><ellipse cx="2640" cy="2147.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="185" x="2649" y="2155.6792">getVolume() : float&amp; {query}</text><ellipse cx="2640" cy="2166.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="2649" y="2174.7471">pause() : void</text><ellipse cx="2640" cy="2185.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="2649" y="2193.815">play() : void</text><ellipse cx="2640" cy="2204.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="2649" y="2212.8829">resume() : void</text><ellipse cx="2640" cy="2223.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="216" x="2649" y="2231.9508">seek(const float&amp; position) : void</text><ellipse cx="2640" cy="2243.0528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="2649" y="2251.0188">setLooping(const bool&amp; loop) : void</text><ellipse cx="2640" cy="2262.1207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="2649" y="2270.0867">setPitch(const float&amp; pitch) : void</text><ellipse cx="2640" cy="2281.1887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="251" x="2649" y="2289.1546">setVolume(const float&amp; volume) : void</text><ellipse cx="2640" cy="2300.2566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="2649" y="2308.2225">stop() : void</text><ellipse cx="2640" cy="2319.3245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="2649" y="2327.2904">update() : void</text></g><!--MD5=[48889dbb51d175831d6f99c2c77ffabc]
class raylib.audio.RlSound--><g id="elem_raylib.audio.RlSound"><rect codeLine="1176" fill="#F1F1F1" height="353.0867" id="raylib.audio.RlSound" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="408" x="2186" y="1953.602"/><ellipse cx="2357.75" cy="1969.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2357.5469,1976.3364 Q2355.0625,1976.3364 2353.7344,1974.6957 Q2352.4219,1973.0239 2352.4219,1969.9145 Q2352.4219,1966.7895 2353.7344,1965.1332 Q2355.0625,1963.477 2357.5469,1963.477 Q2358.2656,1963.477 2358.9219,1963.6332 Q2359.5625,1963.7895 2360.125,1964.0864 L2360.125,1966.8051 Q2359.7656,1966.4614 2359.4688,1966.2739 Q2359.1719,1966.0707 2358.9063,1965.9457 Q2358.5938,1965.8051 2358.2813,1965.7426 Q2357.9844,1965.6801 2357.6719,1965.6801 Q2356.3438,1965.6801 2355.6563,1966.7426 Q2354.9688,1967.8364 2354.9688,1969.9145 Q2354.9688,1972.0082 2355.6563,1973.0707 Q2356.3438,1974.1489 2357.6719,1974.1489 Q2358.3125,1974.1489 2358.9063,1973.8676 Q2359.2031,1973.7426 2359.4844,1973.5551 Q2359.7813,1973.352 2360.125,1973.0239 L2360.125,1975.7426 Q2359.5469,1976.0395 2358.9063,1976.1957 Q2358.2813,1976.3364 2357.5469,1976.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="2378.25" y="1975.034">RlSound</text><line style="stroke:#181818;stroke-width:0.5;" x1="2187" x2="2593" y1="1985.602" y2="1985.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2194" y="1993.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="2206" y="2004.5679">_sound : Sound</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2194" y="2012.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="2206" y="2023.6358">_volume : float</text><line style="stroke:#181818;stroke-width:0.5;" x1="2187" x2="2593" y1="2031.7378" y2="2031.7378"/><ellipse cx="2197" cy="2042.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="2206" y="2050.7038">RlSound(const Sound&amp; sound)</text><ellipse cx="2197" cy="2061.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="248" x="2206" y="2069.7717">RlSound(const std::string&amp; fileName)</text><ellipse cx="2197" cy="2080.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="2206" y="2088.8396">RlSound(const RlWave&amp; wave)</text><ellipse cx="2197" cy="2099.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="2206" y="2107.9075">~RlSound()</text><ellipse cx="2197" cy="2119.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="2206" y="2126.9754">isPlaying() : bool</text><ellipse cx="2197" cy="2138.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="185" x="2206" y="2146.0433">getVolume() : float&amp; {query}</text><ellipse cx="2197" cy="2157.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="2206" y="2165.1113">pause() : void</text><ellipse cx="2197" cy="2176.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="2206" y="2184.1792">play() : void</text><ellipse cx="2197" cy="2195.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="2206" y="2203.2471">playMulti() : void</text><ellipse cx="2197" cy="2214.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="2206" y="2222.315">resume() : void</text><ellipse cx="2197" cy="2233.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="2206" y="2241.3829">setPitch(const float&amp; pitch) : void</text><ellipse cx="2197" cy="2252.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="251" x="2206" y="2260.4508">setVolume(const float&amp; volume) : void</text><ellipse cx="2197" cy="2271.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="2206" y="2279.5188">stop() : void</text><ellipse cx="2197" cy="2290.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="382" x="2206" y="2298.5867">update(const void* data, const int&amp; samplesCount) : void</text></g><!--MD5=[6b250e1f0e9affbbb5eef47b032bc760]
class raylib.audio.RlWave--><g id="elem_raylib.audio.RlWave"><rect codeLine="1195" fill="#F1F1F1" height="372.1546" id="raylib.audio.RlWave" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="567" x="1583.5" y="1944.102"/><ellipse cx="1838.25" cy="1960.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1838.0469,1966.8364 Q1835.5625,1966.8364 1834.2344,1965.1957 Q1832.9219,1963.5239 1832.9219,1960.4145 Q1832.9219,1957.2895 1834.2344,1955.6332 Q1835.5625,1953.977 1838.0469,1953.977 Q1838.7656,1953.977 1839.4219,1954.1332 Q1840.0625,1954.2895 1840.625,1954.5864 L1840.625,1957.3051 Q1840.2656,1956.9614 1839.9688,1956.7739 Q1839.6719,1956.5707 1839.4063,1956.4457 Q1839.0938,1956.3051 1838.7813,1956.2426 Q1838.4844,1956.1801 1838.1719,1956.1801 Q1836.8438,1956.1801 1836.1563,1957.2426 Q1835.4688,1958.3364 1835.4688,1960.4145 Q1835.4688,1962.5082 1836.1563,1963.5707 Q1836.8438,1964.6489 1838.1719,1964.6489 Q1838.8125,1964.6489 1839.4063,1964.3676 Q1839.7031,1964.2426 1839.9844,1964.0551 Q1840.2813,1963.852 1840.625,1963.5239 L1840.625,1966.2426 Q1840.0469,1966.5395 1839.4063,1966.6957 Q1838.7813,1966.8364 1838.0469,1966.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="49" x="1858.75" y="1965.534">RlWave</text><line style="stroke:#181818;stroke-width:0.5;" x1="1584.5" x2="2149.5" y1="1976.102" y2="1976.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1591.5" y="1984.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="88" x="1603.5" y="1995.0679">_wave : Wave</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1591.5" y="2003.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="1603.5" y="2014.1358">_samplesPtr : float*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1591.5" y="2022.2378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="190" x="1603.5" y="2033.2038">_samples : std::vector&lt;float&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="1584.5" x2="2149.5" y1="2041.3057" y2="2041.3057"/><ellipse cx="1594.5" cy="2052.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="57" x="1603.5" y="2060.2717">RlWave()</text><ellipse cx="1594.5" cy="2071.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="181" x="1603.5" y="2079.3396">RlWave(const Wave&amp; wave)</text><ellipse cx="1594.5" cy="2090.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="211" x="1603.5" y="2098.4075">RlWave(const std::string&amp; path)</text><ellipse cx="1594.5" cy="2109.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="530" x="1603.5" y="2117.4754">RlWave(const std::string&amp; fileType, const unsigned char* fileData, int dataSize)</text><ellipse cx="1594.5" cy="2128.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="65" x="1603.5" y="2136.5433">~RlWave()</text><ellipse cx="1594.5" cy="2147.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="1603.5" y="2155.6113">copy() : RlWave</text><ellipse cx="1594.5" cy="2166.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="1603.5" y="2174.6792">getWave() : Wave&amp;</text><ellipse cx="1594.5" cy="2185.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="177" x="1603.5" y="2193.7471">getWave() : Wave&amp; {query}</text><ellipse cx="1594.5" cy="2204.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="312" x="1603.5" y="2212.815">exportWave(const std::string&amp; fileName) : bool</text><ellipse cx="1594.5" cy="2223.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="362" x="1603.5" y="2231.8829">exportWaveAsCode(const std::string&amp; fileName) : bool</text><ellipse cx="1594.5" cy="2242.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="277" x="1603.5" y="2250.9508">toSound() : raylib::audio::RlSound {query}</text><ellipse cx="1594.5" cy="2262.0528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="215" x="1603.5" y="2270.0188">getSamples() : std::vector&lt;float&gt;</text><ellipse cx="1594.5" cy="2281.1207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="382" x="1603.5" y="2289.0867">crop(const int&amp; initSample, const int&amp; finalSample) : void</text><ellipse cx="1594.5" cy="2300.1887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="541" x="1603.5" y="2308.1546">format(const int&amp; sampleRate, const int&amp; sampleSize, const int&amp; channels) : void</text></g><!--MD5=[f004040cc7e90966692cf450ad897861]
class indie.Bomb--><g id="elem_indie.Bomb"><rect codeLine="1219" fill="#F1F1F1" height="295.8829" id="indie.Bomb" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="827" x="29504.5" y="3914.602"/><ellipse cx="29894.25" cy="3930.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M29894.0469,3937.3364 Q29891.5625,3937.3364 29890.2344,3935.6957 Q29888.9219,3934.0239 29888.9219,3930.9145 Q29888.9219,3927.7895 29890.2344,3926.1332 Q29891.5625,3924.477 29894.0469,3924.477 Q29894.7656,3924.477 29895.4219,3924.6332 Q29896.0625,3924.7895 29896.625,3925.0864 L29896.625,3927.8051 Q29896.2656,3927.4614 29895.9688,3927.2739 Q29895.6719,3927.0707 29895.4063,3926.9457 Q29895.0938,3926.8051 29894.7813,3926.7426 Q29894.4844,3926.6801 29894.1719,3926.6801 Q29892.8438,3926.6801 29892.1563,3927.7426 Q29891.4688,3928.8364 29891.4688,3930.9145 Q29891.4688,3933.0082 29892.1563,3934.0707 Q29892.8438,3935.1489 29894.1719,3935.1489 Q29894.8125,3935.1489 29895.4063,3934.8676 Q29895.7031,3934.7426 29895.9844,3934.5551 Q29896.2813,3934.352 29896.625,3934.0239 L29896.625,3936.7426 Q29896.0469,3937.0395 29895.4063,3937.1957 Q29894.7813,3937.3364 29894.0469,3937.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="39" x="29914.75" y="3936.034">Bomb</text><line style="stroke:#181818;stroke-width:0.5;" x1="29505.5" x2="30330.5" y1="3946.602" y2="3946.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="29512.5" y="3954.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="84" x="29524.5" y="3965.5679">_timer : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="29512.5" y="3973.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="29524.5" y="3984.6358">_range : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="29512.5" y="3992.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="438" x="29524.5" y="4003.7038">_audioManager : std::shared_ptr&lt;gameengine::AudioManager&gt;&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="29512.5" y="4011.8057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="174" x="29524.5" y="4022.7717">_playerOwner : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="29505.5" x2="30330.5" y1="4030.8736" y2="4030.8736"/><ellipse cx="29515.5" cy="4041.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="801" x="29524.5" y="4049.8396">Bomb(const std::string&amp; name, const raylib::model::RlModel&amp; model, const int&amp; range, const std::string&amp; playerOwner)</text><ellipse cx="29515.5" cy="4060.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="55" x="29524.5" y="4068.9075">~Bomb()</text><ellipse cx="29515.5" cy="4080.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="436" x="29524.5" y="4087.9754">addMagma(const Vector3f&amp; position, const Vector3f&amp; addI) : void</text><ellipse cx="29515.5" cy="4099.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="151" x="29524.5" y="4107.0433">enableCollision() : void</text><ellipse cx="29515.5" cy="4118.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="29524.5" y="4126.1113">init() : void</text><ellipse cx="29515.5" cy="4137.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="289" x="29524.5" y="4145.1792">instanceMagma(const Vector3f&amp; pos) : void</text><ellipse cx="29515.5" cy="4156.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="364" x="29524.5" y="4164.2471">setPlayerOwner(const std::string&amp; playerOwner) : void</text><ellipse cx="29515.5" cy="4175.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="143" x="29524.5" y="4183.315">spawnMagma() : void</text><ellipse cx="29515.5" cy="4194.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="29524.5" y="4202.3829">update(const float&amp; delta) : void</text></g><!--MD5=[c62165aec532eda2f09005022581866f]
class indie.Bonus--><g id="elem_indie.Bonus"><rect codeLine="1235" fill="#F1F1F1" height="181.4754" id="indie.Bonus" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="886" x="35932" y="3972.102"/><ellipse cx="36349.75" cy="3988.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M36349.5469,3994.8364 Q36347.0625,3994.8364 36345.7344,3993.1957 Q36344.4219,3991.5239 36344.4219,3988.4145 Q36344.4219,3985.2895 36345.7344,3983.6332 Q36347.0625,3981.977 36349.5469,3981.977 Q36350.2656,3981.977 36350.9219,3982.1332 Q36351.5625,3982.2895 36352.125,3982.5864 L36352.125,3985.3051 Q36351.7656,3984.9614 36351.4688,3984.7739 Q36351.1719,3984.5707 36350.9063,3984.4457 Q36350.5938,3984.3051 36350.2813,3984.2426 Q36349.9844,3984.1801 36349.6719,3984.1801 Q36348.3438,3984.1801 36347.6563,3985.2426 Q36346.9688,3986.3364 36346.9688,3988.4145 Q36346.9688,3990.5082 36347.6563,3991.5707 Q36348.3438,3992.6489 36349.6719,3992.6489 Q36350.3125,3992.6489 36350.9063,3992.3676 Q36351.2031,3992.2426 36351.4844,3992.0551 Q36351.7813,3991.852 36352.125,3991.5239 L36352.125,3994.2426 Q36351.5469,3994.5395 36350.9063,3994.6957 Q36350.2813,3994.8364 36349.5469,3994.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="42" x="36370.25" y="3993.534">Bonus</text><line style="stroke:#181818;stroke-width:0.5;" x1="35933" x2="36817" y1="4004.102" y2="4004.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="35940" y="4012.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="121" x="35952" y="4023.0679">_type : BonusType</text><line style="stroke:#181818;stroke-width:0.5;" x1="35933" x2="36817" y1="4031.1699" y2="4031.1699"/><ellipse cx="35943" cy="4042.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="860" x="35952" y="4050.1358">Bonus(const std::string&amp; name, const raylib::model::RlModel&amp; model, const std::shared_ptr&lt;raylib::texture::RlTexture&gt;&amp; texture)</text><ellipse cx="35943" cy="4061.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="58" x="35952" y="4069.2038">~Bonus()</text><ellipse cx="35943" cy="4080.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="197" x="35952" y="4088.2717">getBonusType() : int&amp; {query}</text><ellipse cx="35943" cy="4099.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="35952" y="4107.3396">init() : void</text><ellipse cx="35943" cy="4118.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="249" x="35952" y="4126.4075">setBonusType(BonusType type) : void</text><ellipse cx="35943" cy="4137.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="35952" y="4145.4754">update(const float&amp; delta) : void</text></g><!--MD5=[359d2653a34a04f3ccc504071ef18d58]
class indie.ChooseNumberPlayerScene--><g id="elem_indie.ChooseNumberPlayerScene"><rect codeLine="1245" fill="#F1F1F1" height="200.5433" id="indie.ChooseNumberPlayerScene" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="597" x="27275.5" y="3962.102"/><ellipse cx="27476.75" cy="3978.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M27476.5469,3984.8364 Q27474.0625,3984.8364 27472.7344,3983.1957 Q27471.4219,3981.5239 27471.4219,3978.4145 Q27471.4219,3975.2895 27472.7344,3973.6332 Q27474.0625,3971.977 27476.5469,3971.977 Q27477.2656,3971.977 27477.9219,3972.1332 Q27478.5625,3972.2895 27479.125,3972.5864 L27479.125,3975.3051 Q27478.7656,3974.9614 27478.4688,3974.7739 Q27478.1719,3974.5707 27477.9063,3974.4457 Q27477.5938,3974.3051 27477.2813,3974.2426 Q27476.9844,3974.1801 27476.6719,3974.1801 Q27475.3438,3974.1801 27474.6563,3975.2426 Q27473.9688,3976.3364 27473.9688,3978.4145 Q27473.9688,3980.5082 27474.6563,3981.5707 Q27475.3438,3982.6489 27476.6719,3982.6489 Q27477.3125,3982.6489 27477.9063,3982.3676 Q27478.2031,3982.2426 27478.4844,3982.0551 Q27478.7813,3981.852 27479.125,3981.5239 L27479.125,3984.2426 Q27478.5469,3984.5395 27477.9063,3984.6957 Q27477.2813,3984.8364 27476.5469,3984.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="186" x="27497.25" y="3983.534">ChooseNumberPlayerScene</text><line style="stroke:#181818;stroke-width:0.5;" x1="27276.5" x2="27871.5" y1="3994.102" y2="3994.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27283.5" y="4002.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="27295.5" y="4013.0679">_indexMenu : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27283.5" y="4021.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="143" x="27295.5" y="4032.1358">_savedIndexMap : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27283.5" y="4040.2378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="414" x="27295.5" y="4051.2038">_map3DLoader : std::shared_ptr&lt;indie::map::Map3DLoader&gt;&amp;</text><line style="stroke:#181818;stroke-width:0.5;" x1="27276.5" x2="27871.5" y1="4059.3057" y2="4059.3057"/><ellipse cx="27286.5" cy="4070.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="571" x="27295.5" y="4078.2717">ChooseNumberPlayerScene(const std::string&amp; name, const std::string&amp; sceneSource)</text><ellipse cx="27286.5" cy="4089.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="202" x="27295.5" y="4097.3396">~ChooseNumberPlayerScene()</text><ellipse cx="27286.5" cy="4108.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="27295.5" y="4116.4075">initScene() : void</text><ellipse cx="27286.5" cy="4127.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="27295.5" y="4135.4754">sceneLauncher() : void</text><ellipse cx="27286.5" cy="4146.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="254" x="27295.5" y="4154.5433">updateScene(const float&amp; delta) : void</text></g><!--MD5=[333c66fda8b999002e2145a8ab39f893]
class indie.GameScene--><g id="elem_indie.GameScene"><rect codeLine="1256" fill="#F1F1F1" height="276.815" id="indie.GameScene" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="490" x="28979" y="3924.102"/><ellipse cx="29180.25" cy="3940.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M29180.0469,3946.8364 Q29177.5625,3946.8364 29176.2344,3945.1957 Q29174.9219,3943.5239 29174.9219,3940.4145 Q29174.9219,3937.2895 29176.2344,3935.6332 Q29177.5625,3933.977 29180.0469,3933.977 Q29180.7656,3933.977 29181.4219,3934.1332 Q29182.0625,3934.2895 29182.625,3934.5864 L29182.625,3937.3051 Q29182.2656,3936.9614 29181.9688,3936.7739 Q29181.6719,3936.5707 29181.4063,3936.4457 Q29181.0938,3936.3051 29180.7813,3936.2426 Q29180.4844,3936.1801 29180.1719,3936.1801 Q29178.8438,3936.1801 29178.1563,3937.2426 Q29177.4688,3938.3364 29177.4688,3940.4145 Q29177.4688,3942.5082 29178.1563,3943.5707 Q29178.8438,3944.6489 29180.1719,3944.6489 Q29180.8125,3944.6489 29181.4063,3944.3676 Q29181.7031,3944.2426 29181.9844,3944.0551 Q29182.2813,3943.852 29182.625,3943.5239 L29182.625,3946.2426 Q29182.0469,3946.5395 29181.4063,3946.6957 Q29180.7813,3946.8364 29180.0469,3946.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="79" x="29200.75" y="3945.534">GameScene</text><line style="stroke:#181818;stroke-width:0.5;" x1="28980" x2="29468" y1="3956.102" y2="3956.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="28987" y="3964.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="28999" y="3975.0679">_winTimer : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="28987" y="3983.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="28999" y="3994.1358">_indexMenu : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="28987" y="4002.2378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="372" x="28999" y="4013.2038">_map3DLoader : std::shared_ptr&lt;map::Map3DLoader&gt;&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="28987" y="4021.3057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="28999" y="4032.2717">_map : std::shared_ptr&lt;map::Map&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="28987" y="4040.3736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="461" x="28999" y="4051.3396">_textureManager : std::unique_ptr&lt;gameengine::TextureManager&gt;&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="28987" y="4059.4416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="228" x="28999" y="4070.4075">buttonsPos : std::vector&lt;Vector2f&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="28980" x2="29468" y1="4078.5095" y2="4078.5095"/><ellipse cx="28990" cy="4089.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="464" x="28999" y="4097.4754">GameScene(const std::string&amp; name, const std::string&amp; sceneSource)</text><ellipse cx="28990" cy="4108.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="28999" y="4116.5433">~GameScene()</text><ellipse cx="28990" cy="4127.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="306" x="28999" y="4135.6113">displayWinner(const std::string&amp; name) : void</text><ellipse cx="28990" cy="4146.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="28999" y="4154.6792">initScene() : void</text><ellipse cx="28990" cy="4165.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="28999" y="4173.7471">sceneLauncher() : void</text><ellipse cx="28990" cy="4184.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="254" x="28999" y="4192.815">updateScene(const float&amp; delta) : void</text></g><!--MD5=[9643aa2858cec7247b20201da2f79aa2]
class indie.GlobalInstance--><g id="elem_indie.GlobalInstance"><rect codeLine="1271" fill="#F1F1F1" height="200.5433" id="indie.GlobalInstance" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="397" x="32976.5" y="3962.102"/><ellipse cx="33120.25" cy="3978.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M33120.0469,3984.8364 Q33117.5625,3984.8364 33116.2344,3983.1957 Q33114.9219,3981.5239 33114.9219,3978.4145 Q33114.9219,3975.2895 33116.2344,3973.6332 Q33117.5625,3971.977 33120.0469,3971.977 Q33120.7656,3971.977 33121.4219,3972.1332 Q33122.0625,3972.2895 33122.625,3972.5864 L33122.625,3975.3051 Q33122.2656,3974.9614 33121.9688,3974.7739 Q33121.6719,3974.5707 33121.4063,3974.4457 Q33121.0938,3974.3051 33120.7813,3974.2426 Q33120.4844,3974.1801 33120.1719,3974.1801 Q33118.8438,3974.1801 33118.1563,3975.2426 Q33117.4688,3976.3364 33117.4688,3978.4145 Q33117.4688,3980.5082 33118.1563,3981.5707 Q33118.8438,3982.6489 33120.1719,3982.6489 Q33120.8125,3982.6489 33121.4063,3982.3676 Q33121.7031,3982.2426 33121.9844,3982.0551 Q33122.2813,3981.852 33122.625,3981.5239 L33122.625,3984.2426 Q33122.0469,3984.5395 33121.4063,3984.6957 Q33120.7813,3984.8364 33120.0469,3984.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="33140.75" y="3983.534">GlobalInstance</text><line style="stroke:#181818;stroke-width:0.5;" x1="32977.5" x2="33372.5" y1="3994.102" y2="3994.102"/><ellipse cx="32987.5" cy="4005.102" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="32996.5" y="4013.0679">_indexMap : int</text><ellipse cx="32987.5" cy="4024.1699" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="32996.5" y="4032.1358">_numberPlayers : int</text><ellipse cx="32987.5" cy="4043.2378" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="117" x="32996.5" y="4051.2038">_playersAlive : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="32984.5" y="4059.3057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="334" x="32996.5" y="4070.2717">_instance : static std::shared_ptr&lt;GlobalInstance&gt;</text><ellipse cx="32987.5" cy="4081.3736" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="178" x="32996.5" y="4089.3396">_playerWinner : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="32977.5" x2="33372.5" y1="4097.4416" y2="4097.4416"/><ellipse cx="32987.5" cy="4108.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="32996.5" y="4116.4075">GlobalInstance()</text><ellipse cx="32987.5" cy="4127.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="117" x="32996.5" y="4135.4754">~GlobalInstance()</text><ellipse cx="32987.5" cy="4146.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="371" x="32996.5" y="4154.5433">getInstance() : std::shared_ptr&lt;indie::GlobalInstance&gt;&amp;</text></g><!--MD5=[c6eeb2a2e677d5b94f7c8115bb6ba992]
class indie.Image--><g id="elem_indie.Image"><rect codeLine="1282" fill="#F1F1F1" height="124.2717" id="indie.Image" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="632" x="33426" y="4000.602"/><ellipse cx="33716.25" cy="4016.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M33716.0469,4023.3364 Q33713.5625,4023.3364 33712.2344,4021.6957 Q33710.9219,4020.0239 33710.9219,4016.9145 Q33710.9219,4013.7895 33712.2344,4012.1332 Q33713.5625,4010.477 33716.0469,4010.477 Q33716.7656,4010.477 33717.4219,4010.6332 Q33718.0625,4010.7895 33718.625,4011.0864 L33718.625,4013.8051 Q33718.2656,4013.4614 33717.9688,4013.2739 Q33717.6719,4013.0707 33717.4063,4012.9457 Q33717.0938,4012.8051 33716.7813,4012.7426 Q33716.4844,4012.6801 33716.1719,4012.6801 Q33714.8438,4012.6801 33714.1563,4013.7426 Q33713.4688,4014.8364 33713.4688,4016.9145 Q33713.4688,4019.0082 33714.1563,4020.0707 Q33714.8438,4021.1489 33716.1719,4021.1489 Q33716.8125,4021.1489 33717.4063,4020.8676 Q33717.7031,4020.7426 33717.9844,4020.5551 Q33718.2813,4020.352 33718.625,4020.0239 L33718.625,4022.7426 Q33718.0469,4023.0395 33717.4063,4023.1957 Q33716.7813,4023.3364 33716.0469,4023.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="43" x="33736.75" y="4022.034">Image</text><line style="stroke:#181818;stroke-width:0.5;" x1="33427" x2="34057" y1="4032.602" y2="4032.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="33427" x2="34057" y1="4040.602" y2="4040.602"/><ellipse cx="33437" cy="4051.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="606" x="33446" y="4059.5679">Image(const std::string&amp; name, const std::shared_ptr&lt;raylib::texture::RlTexture&gt;&amp; texture)</text><ellipse cx="33437" cy="4070.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="59" x="33446" y="4078.6358">~Image()</text><ellipse cx="33437" cy="4089.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="33446" y="4097.7038">init() : void</text><ellipse cx="33437" cy="4108.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="33446" y="4116.7717">update(const float&amp; delta) : void</text></g><!--MD5=[2a6bb81be04b24172db412a333b83426]
class indie.Magma--><g id="elem_indie.Magma"><rect codeLine="1289" fill="#F1F1F1" height="200.5433" id="indie.Magma" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="895" x="35001.5" y="3962.102"/><ellipse cx="35419.25" cy="3978.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M35419.0469,3984.8364 Q35416.5625,3984.8364 35415.2344,3983.1957 Q35413.9219,3981.5239 35413.9219,3978.4145 Q35413.9219,3975.2895 35415.2344,3973.6332 Q35416.5625,3971.977 35419.0469,3971.977 Q35419.7656,3971.977 35420.4219,3972.1332 Q35421.0625,3972.2895 35421.625,3972.5864 L35421.625,3975.3051 Q35421.2656,3974.9614 35420.9688,3974.7739 Q35420.6719,3974.5707 35420.4063,3974.4457 Q35420.0938,3974.3051 35419.7813,3974.2426 Q35419.4844,3974.1801 35419.1719,3974.1801 Q35417.8438,3974.1801 35417.1563,3975.2426 Q35416.4688,3976.3364 35416.4688,3978.4145 Q35416.4688,3980.5082 35417.1563,3981.5707 Q35417.8438,3982.6489 35419.1719,3982.6489 Q35419.8125,3982.6489 35420.4063,3982.3676 Q35420.7031,3982.2426 35420.9844,3982.0551 Q35421.2813,3981.852 35421.625,3981.5239 L35421.625,3984.2426 Q35421.0469,3984.5395 35420.4063,3984.6957 Q35419.7813,3984.8364 35419.0469,3984.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="51" x="35439.75" y="3983.534">Magma</text><line style="stroke:#181818;stroke-width:0.5;" x1="35002.5" x2="35895.5" y1="3994.102" y2="3994.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="35009.5" y="4002.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="84" x="35021.5" y="4013.0679">_timer : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="35009.5" y="4021.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="174" x="35021.5" y="4032.1358">_playerOwner : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="35002.5" x2="35895.5" y1="4040.2378" y2="4040.2378"/><ellipse cx="35012.5" cy="4051.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="869" x="35021.5" y="4059.2038">Magma(const std::string&amp; name, const raylib::model::RlModel&amp; model, const std::shared_ptr&lt;raylib::texture::RlTexture&gt;&amp; texture)</text><ellipse cx="35012.5" cy="4070.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="67" x="35021.5" y="4078.2717">~Magma()</text><ellipse cx="35012.5" cy="4089.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="172" x="35021.5" y="4097.3396">checkWallCollision() : void</text><ellipse cx="35012.5" cy="4108.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="193" x="35021.5" y="4116.4075">handlePlayerCollision() : void</text><ellipse cx="35012.5" cy="4127.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="35021.5" y="4135.4754">init() : void</text><ellipse cx="35012.5" cy="4146.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="35021.5" y="4154.5433">update(const float&amp; delta) : void</text></g><!--MD5=[8cdcc6d2246f32e0136fad16d0feb32f]
class indie.MainMenuScene--><g id="elem_indie.MainMenuScene"><rect codeLine="1300" fill="#F1F1F1" height="162.4075" id="indie.MainMenuScene" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="524" x="30367" y="3981.602"/><ellipse cx="30568.25" cy="3997.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M30568.0469,4004.3364 Q30565.5625,4004.3364 30564.2344,4002.6957 Q30562.9219,4001.0239 30562.9219,3997.9145 Q30562.9219,3994.7895 30564.2344,3993.1332 Q30565.5625,3991.477 30568.0469,3991.477 Q30568.7656,3991.477 30569.4219,3991.6332 Q30570.0625,3991.7895 30570.625,3992.0864 L30570.625,3994.8051 Q30570.2656,3994.4614 30569.9688,3994.2739 Q30569.6719,3994.0707 30569.4063,3993.9457 Q30569.0938,3993.8051 30568.7813,3993.7426 Q30568.4844,3993.6801 30568.1719,3993.6801 Q30566.8438,3993.6801 30566.1563,3994.7426 Q30565.4688,3995.8364 30565.4688,3997.9145 Q30565.4688,4000.0082 30566.1563,4001.0707 Q30566.8438,4002.1489 30568.1719,4002.1489 Q30568.8125,4002.1489 30569.4063,4001.8676 Q30569.7031,4001.7426 30569.9844,4001.5551 Q30570.2813,4001.352 30570.625,4001.0239 L30570.625,4003.7426 Q30570.0469,4004.0395 30569.4063,4004.1957 Q30568.7813,4004.3364 30568.0469,4004.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="30588.75" y="4003.034">MainMenuScene</text><line style="stroke:#181818;stroke-width:0.5;" x1="30368" x2="30890" y1="4013.602" y2="4013.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="30375" y="4021.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="30387" y="4032.5679">_indexMenu : int</text><line style="stroke:#181818;stroke-width:0.5;" x1="30368" x2="30890" y1="4040.6699" y2="4040.6699"/><ellipse cx="30378" cy="4051.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="498" x="30387" y="4059.6358">MainMenuScene(const std::string&amp; name, const std::string&amp; sceneSource)</text><ellipse cx="30378" cy="4070.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="30387" y="4078.7038">~MainMenuScene()</text><ellipse cx="30378" cy="4089.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="30387" y="4097.7717">initScene() : void</text><ellipse cx="30378" cy="4108.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="30387" y="4116.8396">sceneLauncher() : void</text><ellipse cx="30378" cy="4127.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="254" x="30387" y="4135.9075">updateScene(const float&amp; delta) : void</text></g><!--MD5=[e52dd5d9683cde42f23cac0d3c91eff2]
class indie.Player--><g id="elem_indie.Player"><rect codeLine="1309" fill="#F1F1F1" height="543.7658" id="indie.Player" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1036" x="27908" y="3790.602"/><ellipse cx="28401.25" cy="3806.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M28401.0469,3813.3364 Q28398.5625,3813.3364 28397.2344,3811.6957 Q28395.9219,3810.0239 28395.9219,3806.9145 Q28395.9219,3803.7895 28397.2344,3802.1332 Q28398.5625,3800.477 28401.0469,3800.477 Q28401.7656,3800.477 28402.4219,3800.6332 Q28403.0625,3800.7895 28403.625,3801.0864 L28403.625,3803.8051 Q28403.2656,3803.4614 28402.9688,3803.2739 Q28402.6719,3803.0707 28402.4063,3802.9457 Q28402.0938,3802.8051 28401.7813,3802.7426 Q28401.4844,3802.6801 28401.1719,3802.6801 Q28399.8438,3802.6801 28399.1563,3803.7426 Q28398.4688,3804.8364 28398.4688,3806.9145 Q28398.4688,3809.0082 28399.1563,3810.0707 Q28399.8438,3811.1489 28401.1719,3811.1489 Q28401.8125,3811.1489 28402.4063,3810.8676 Q28402.7031,3810.7426 28402.9844,3810.5551 Q28403.2813,3810.352 28403.625,3810.0239 L28403.625,3812.7426 Q28403.0469,3813.0395 28402.4063,3813.1957 Q28401.7813,3813.3364 28401.0469,3813.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="41" x="28421.75" y="3812.034">Player</text><line style="stroke:#181818;stroke-width:0.5;" x1="27909" x2="28943" y1="3822.602" y2="3822.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27916" y="3830.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="85" x="27928" y="3841.5679">_state : State</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27916" y="3849.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="27928" y="3860.6358">_speed : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27916" y="3868.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="27928" y="3879.7038">_tempSpeed : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27916" y="3887.8057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="119" x="27928" y="3898.7717">_timerAnim : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27916" y="3906.8736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="123" x="27928" y="3917.8396">_timerGhost : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27916" y="3925.9416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="27928" y="3936.9075">_bombStock : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27916" y="3945.0095"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="27928" y="3955.9754">_numpadId : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27916" y="3964.0774"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="27928" y="3975.0433">_range : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27916" y="3983.1453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="272" x="27928" y="3994.1113">_anim : raylib::model::RlModelAnimation</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27916" y="4002.2132"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="438" x="27928" y="4013.1792">_audioManager : std::shared_ptr&lt;gameengine::AudioManager&gt;&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27916" y="4021.2812"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="147" x="27928" y="4032.2471">botTarget : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27916" y="4040.3491"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="461" x="27928" y="4051.315">_textureManager : std::unique_ptr&lt;gameengine::TextureManager&gt;&amp;</text><line style="stroke:#181818;stroke-width:0.5;" x1="27909" x2="28943" y1="4059.417" y2="4059.417"/><ellipse cx="27919" cy="4070.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1010" x="27928" y="4078.3829">Player(const std::string&amp; name, const raylib::model::RlModel&amp; model, const std::shared_ptr&lt;raylib::texture::RlTexture&gt;&amp; texture, const int&amp; numpadId)</text><ellipse cx="27919" cy="4089.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="57" x="27928" y="4097.4508">~Player()</text><ellipse cx="27919" cy="4108.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="94" x="27928" y="4116.5188">getState() : int</text><ellipse cx="27919" cy="4127.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="119" x="27928" y="4135.5867">botControl() : void</text><ellipse cx="27919" cy="4146.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="154" x="27928" y="4154.6546">botSpawnBomb() : void</text><ellipse cx="27919" cy="4165.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="27928" y="4173.7225">checkCollisions() : void</text><ellipse cx="27919" cy="4184.8245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="27928" y="4192.7904">handleInput() : void</text><ellipse cx="27919" cy="4203.8924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="287" x="27928" y="4211.8583">incrementBombStock(int bombStock) : void</text><ellipse cx="27919" cy="4222.9603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="27928" y="4230.9263">init() : void</text><ellipse cx="27919" cy="4242.0282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="285" x="27928" y="4249.9942">moveAndGhosting(Vector3f position) : void</text><ellipse cx="27919" cy="4261.0962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="27928" y="4269.0621">playerDead() : void</text><ellipse cx="27919" cy="4280.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="173" x="27928" y="4288.13">setState(State state) : void</text><ellipse cx="27919" cy="4299.232" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="27928" y="4307.1979">spawnBomb() : void</text><ellipse cx="27919" cy="4318.2999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="27928" y="4326.2658">update(const float&amp; delta) : void</text></g><!--MD5=[f43612fd95bffbd03924cc72925d76d2]
class indie.StartScene--><g id="elem_indie.StartScene"><rect codeLine="1338" fill="#F1F1F1" height="162.4075" id="indie.StartScene" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="483" x="30926.5" y="3981.602"/><ellipse cx="31127.75" cy="3997.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M31127.5469,4004.3364 Q31125.0625,4004.3364 31123.7344,4002.6957 Q31122.4219,4001.0239 31122.4219,3997.9145 Q31122.4219,3994.7895 31123.7344,3993.1332 Q31125.0625,3991.477 31127.5469,3991.477 Q31128.2656,3991.477 31128.9219,3991.6332 Q31129.5625,3991.7895 31130.125,3992.0864 L31130.125,3994.8051 Q31129.7656,3994.4614 31129.4688,3994.2739 Q31129.1719,3994.0707 31128.9063,3993.9457 Q31128.5938,3993.8051 31128.2813,3993.7426 Q31127.9844,3993.6801 31127.6719,3993.6801 Q31126.3438,3993.6801 31125.6563,3994.7426 Q31124.9688,3995.8364 31124.9688,3997.9145 Q31124.9688,4000.0082 31125.6563,4001.0707 Q31126.3438,4002.1489 31127.6719,4002.1489 Q31128.3125,4002.1489 31128.9063,4001.8676 Q31129.2031,4001.7426 31129.4844,4001.5551 Q31129.7813,4001.352 31130.125,4001.0239 L31130.125,4003.7426 Q31129.5469,4004.0395 31128.9063,4004.1957 Q31128.2813,4004.3364 31127.5469,4004.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="31148.25" y="4003.034">StartScene</text><line style="stroke:#181818;stroke-width:0.5;" x1="30927.5" x2="31408.5" y1="4013.602" y2="4013.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="30934.5" y="4021.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="154" x="30946.5" y="4032.5679">_startTimestamp : long</text><line style="stroke:#181818;stroke-width:0.5;" x1="30927.5" x2="31408.5" y1="4040.6699" y2="4040.6699"/><ellipse cx="30937.5" cy="4051.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="457" x="30946.5" y="4059.6358">StartScene(const std::string&amp; name, const std::string&amp; sceneSource)</text><ellipse cx="30937.5" cy="4070.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="88" x="30946.5" y="4078.7038">~StartScene()</text><ellipse cx="30937.5" cy="4089.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="30946.5" y="4097.7717">initScene() : void</text><ellipse cx="30937.5" cy="4108.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="30946.5" y="4116.8396">sceneLauncher() : void</text><ellipse cx="30937.5" cy="4127.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="254" x="30946.5" y="4135.9075">updateScene(const float&amp; delta) : void</text></g><!--MD5=[67b6da4e977319da297d4ecb0678d3c1]
class indie.Wall--><g id="elem_indie.Wall"><rect codeLine="1347" fill="#F1F1F1" height="86.1358" id="indie.Wall" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="873" x="34093.5" y="4019.602"/><ellipse cx="34511.25" cy="4035.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M34511.0469,4042.3364 Q34508.5625,4042.3364 34507.2344,4040.6957 Q34505.9219,4039.0239 34505.9219,4035.9145 Q34505.9219,4032.7895 34507.2344,4031.1332 Q34508.5625,4029.477 34511.0469,4029.477 Q34511.7656,4029.477 34512.4219,4029.6332 Q34513.0625,4029.7895 34513.625,4030.0864 L34513.625,4032.8051 Q34513.2656,4032.4614 34512.9688,4032.2739 Q34512.6719,4032.0707 34512.4063,4031.9457 Q34512.0938,4031.8051 34511.7813,4031.7426 Q34511.4844,4031.6801 34511.1719,4031.6801 Q34509.8438,4031.6801 34509.1563,4032.7426 Q34508.4688,4033.8364 34508.4688,4035.9145 Q34508.4688,4038.0082 34509.1563,4039.0707 Q34509.8438,4040.1489 34511.1719,4040.1489 Q34511.8125,4040.1489 34512.4063,4039.8676 Q34512.7031,4039.7426 34512.9844,4039.5551 Q34513.2813,4039.352 34513.625,4039.0239 L34513.625,4041.7426 Q34513.0469,4042.0395 34512.4063,4042.1957 Q34511.7813,4042.3364 34511.0469,4042.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="29" x="34531.75" y="4041.034">Wall</text><line style="stroke:#181818;stroke-width:0.5;" x1="34094.5" x2="34965.5" y1="4051.602" y2="4051.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="34094.5" x2="34965.5" y1="4059.602" y2="4059.602"/><ellipse cx="34104.5" cy="4070.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="847" x="34113.5" y="4078.5679">Wall(const std::string&amp; name, const raylib::model::RlModel&amp; model, const std::shared_ptr&lt;raylib::texture::RlTexture&gt;&amp; texture)</text><ellipse cx="34104.5" cy="4089.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="45" x="34113.5" y="4097.6358">~Wall()</text></g><!--MD5=[89ef6958938904e1bc4f0833295318a1]
class indie.WallDestroyable--><g id="elem_indie.WallDestroyable"><rect codeLine="1352" fill="#F1F1F1" height="105.2038" id="indie.WallDestroyable" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="953" x="31988.5" y="4010.102"/><ellipse cx="32406.25" cy="4026.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M32406.0469,4032.8364 Q32403.5625,4032.8364 32402.2344,4031.1957 Q32400.9219,4029.5239 32400.9219,4026.4145 Q32400.9219,4023.2895 32402.2344,4021.6332 Q32403.5625,4019.977 32406.0469,4019.977 Q32406.7656,4019.977 32407.4219,4020.1332 Q32408.0625,4020.2895 32408.625,4020.5864 L32408.625,4023.3051 Q32408.2656,4022.9614 32407.9688,4022.7739 Q32407.6719,4022.5707 32407.4063,4022.4457 Q32407.0938,4022.3051 32406.7813,4022.2426 Q32406.4844,4022.1801 32406.1719,4022.1801 Q32404.8438,4022.1801 32404.1563,4023.2426 Q32403.4688,4024.3364 32403.4688,4026.4145 Q32403.4688,4028.5082 32404.1563,4029.5707 Q32404.8438,4030.6489 32406.1719,4030.6489 Q32406.8125,4030.6489 32407.4063,4030.3676 Q32407.7031,4030.2426 32407.9844,4030.0551 Q32408.2813,4029.852 32408.625,4029.5239 L32408.625,4032.2426 Q32408.0469,4032.5395 32407.4063,4032.6957 Q32406.7813,4032.8364 32406.0469,4032.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="32426.75" y="4031.534">WallDestroyable</text><line style="stroke:#181818;stroke-width:0.5;" x1="31989.5" x2="32940.5" y1="4042.102" y2="4042.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="31989.5" x2="32940.5" y1="4050.102" y2="4050.102"/><ellipse cx="31999.5" cy="4061.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="927" x="32008.5" y="4069.0679">WallDestroyable(const std::string&amp; name, const raylib::model::RlModel&amp; model, const std::shared_ptr&lt;raylib::texture::RlTexture&gt;&amp; texture)</text><ellipse cx="31999.5" cy="4080.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="32008.5" y="4088.1358">~WallDestroyable()</text><ellipse cx="31999.5" cy="4099.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="134" x="32008.5" y="4107.2038">spawnBonus() : void</text></g><!--MD5=[ea7903a03357993e9b78c0a0d28725ae]
class indie.WinningScene--><g id="elem_indie.WinningScene"><rect codeLine="1358" fill="#F1F1F1" height="162.4075" id="indie.WinningScene" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="508" x="31445" y="3981.602"/><ellipse cx="31646.25" cy="3997.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M31646.0469,4004.3364 Q31643.5625,4004.3364 31642.2344,4002.6957 Q31640.9219,4001.0239 31640.9219,3997.9145 Q31640.9219,3994.7895 31642.2344,3993.1332 Q31643.5625,3991.477 31646.0469,3991.477 Q31646.7656,3991.477 31647.4219,3991.6332 Q31648.0625,3991.7895 31648.625,3992.0864 L31648.625,3994.8051 Q31648.2656,3994.4614 31647.9688,3994.2739 Q31647.6719,3994.0707 31647.4063,3993.9457 Q31647.0938,3993.8051 31646.7813,3993.7426 Q31646.4844,3993.6801 31646.1719,3993.6801 Q31644.8438,3993.6801 31644.1563,3994.7426 Q31643.4688,3995.8364 31643.4688,3997.9145 Q31643.4688,4000.0082 31644.1563,4001.0707 Q31644.8438,4002.1489 31646.1719,4002.1489 Q31646.8125,4002.1489 31647.4063,4001.8676 Q31647.7031,4001.7426 31647.9844,4001.5551 Q31648.2813,4001.352 31648.625,4001.0239 L31648.625,4003.7426 Q31648.0469,4004.0395 31647.4063,4004.1957 Q31646.7813,4004.3364 31646.0469,4004.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="31666.75" y="4003.034">WinningScene</text><line style="stroke:#181818;stroke-width:0.5;" x1="31446" x2="31952" y1="4013.602" y2="4013.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="31453" y="4021.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="31465" y="4032.5679">_indexMenu : int</text><line style="stroke:#181818;stroke-width:0.5;" x1="31446" x2="31952" y1="4040.6699" y2="4040.6699"/><ellipse cx="31456" cy="4051.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="482" x="31465" y="4059.6358">WinningScene(const std::string&amp; name, const std::string&amp; sceneSource)</text><ellipse cx="31456" cy="4070.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="31465" y="4078.7038">~WinningScene()</text><ellipse cx="31456" cy="4089.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="31465" y="4097.7717">initScene() : void</text><ellipse cx="31456" cy="4108.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="31465" y="4116.8396">sceneLauncher() : void</text><ellipse cx="31456" cy="4127.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="254" x="31465" y="4135.9075">updateScene(const float&amp; delta) : void</text></g><!--MD5=[f006699b3f5ab7b996f63b1fb434ed6a]
class indie.Bonus::BonusType--><g id="elem_indie.Bonus::BonusType"><rect codeLine="1367" fill="#F1F1F1" height="124.2717" id="indie.Bonus::BonusType" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="156" x="36297" y="4813.102"/><ellipse cx="36312" cy="4829.102" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M36308.3906,4823.2114 L36316.1094,4823.2114 L36316.1094,4825.3676 L36310.8438,4825.3676 L36310.8438,4828.0395 L36315.6094,4828.0395 L36315.6094,4830.1957 L36310.8438,4830.1957 L36310.8438,4833.4457 L36316.1094,4833.4457 L36316.1094,4835.602 L36308.3906,4835.602 L36308.3906,4823.2114 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="36326" y="4834.534">Bonus::BonusType</text><line style="stroke:#181818;stroke-width:0.5;" x1="36298" x2="36452" y1="4845.102" y2="4845.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="42" x="36303" y="4864.0679">BOMB</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="29" x="36303" y="4883.1358">FIRE</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="47" x="36303" y="4902.2038">GHOST</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="42" x="36303" y="4921.2717">SPEED</text><line style="stroke:#181818;stroke-width:0.5;" x1="36298" x2="36452" y1="4929.3736" y2="4929.3736"/></g><!--MD5=[ef118f45d3ec8a6aa73a6cd8d3e295cc]
class indie.Player::State--><g id="elem_indie.Player::State"><rect codeLine="1374" fill="#F1F1F1" height="143.3396" id="indie.Player::State" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="115" x="29072.5" y="4803.602"/><ellipse cx="29087.5" cy="4819.602" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M29083.8906,4813.7114 L29091.6094,4813.7114 L29091.6094,4815.8676 L29086.3438,4815.8676 L29086.3438,4818.5395 L29091.1094,4818.5395 L29091.1094,4820.6957 L29086.3438,4820.6957 L29086.3438,4823.9457 L29091.6094,4823.9457 L29091.6094,4826.102 L29083.8906,4826.102 L29083.8906,4813.7114 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="29101.5" y="4825.034">Player::State</text><line style="stroke:#181818;stroke-width:0.5;" x1="29073.5" x2="29186.5" y1="4835.602" y2="4835.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="37" x="29078.5" y="4854.5679">ALIVE</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="37" x="29078.5" y="4873.6358">DEAD</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="47" x="29078.5" y="4892.7038">GHOST</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="54" x="29078.5" y="4911.7717">LOOSER</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="57" x="29078.5" y="4930.8396">WINNER</text><line style="stroke:#181818;stroke-width:0.5;" x1="29073.5" x2="29186.5" y1="4938.9416" y2="4938.9416"/></g><!--MD5=[3e2c7cfb2fc381e22fd777b3a8d0f11b]
class indie.map.Map--><g id="elem_indie.map.Map"><rect codeLine="1383" fill="#F1F1F1" height="448.4263" id="indie.map.Map" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1216" x="27822" y="5130.602"/><ellipse cx="28410.75" cy="5146.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M28410.5469,5153.3364 Q28408.0625,5153.3364 28406.7344,5151.6957 Q28405.4219,5150.0239 28405.4219,5146.9145 Q28405.4219,5143.7895 28406.7344,5142.1332 Q28408.0625,5140.477 28410.5469,5140.477 Q28411.2656,5140.477 28411.9219,5140.6332 Q28412.5625,5140.7895 28413.125,5141.0864 L28413.125,5143.8051 Q28412.7656,5143.4614 28412.4688,5143.2739 Q28412.1719,5143.0707 28411.9063,5142.9457 Q28411.5938,5142.8051 28411.2813,5142.7426 Q28410.9844,5142.6801 28410.6719,5142.6801 Q28409.3438,5142.6801 28408.6563,5143.7426 Q28407.9688,5144.8364 28407.9688,5146.9145 Q28407.9688,5149.0082 28408.6563,5150.0707 Q28409.3438,5151.1489 28410.6719,5151.1489 Q28411.3125,5151.1489 28411.9063,5150.8676 Q28412.2031,5150.7426 28412.4844,5150.5551 Q28412.7813,5150.352 28413.125,5150.0239 L28413.125,5152.7426 Q28412.5469,5153.0395 28411.9063,5153.1957 Q28411.2813,5153.3364 28410.5469,5153.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="30" x="28431.25" y="5152.034">Map</text><line style="stroke:#181818;stroke-width:0.5;" x1="27823" x2="29037" y1="5162.602" y2="5162.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27830" y="5170.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="134" x="27842" y="5181.5679">_mapSize : Vector2u</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27830" y="5189.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="27842" y="5200.6358">_mapSizeMax : Vector2u</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27830" y="5208.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="373" x="27842" y="5219.7038">_mapParser : gameengine::map::MapParser&lt;MapType&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27830" y="5227.8057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="147" x="27842" y="5238.7717">_mapPath : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27830" y="5246.8736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="253" x="27842" y="5257.8396">_playerSpawns : std::vector&lt;Vector2f&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27830" y="5265.9416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="538" x="27842" y="5276.9075">_mapModels : std::vector&lt;std::shared_ptr&lt;gameengine::node::_3D::StaticBody&gt;&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27830" y="5285.0095"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="282" x="27842" y="5295.9754">_map : std::vector&lt;std::vector&lt;MapType&gt;&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="27823" x2="29037" y1="5304.0774" y2="5304.0774"/><ellipse cx="27833" cy="5315.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1190" x="27842" y="5323.0433">Map(const std::string&amp; mapPath, gameengine::map::MapParser&lt;MapType&gt;&amp;&amp; mapParser, const std::vector&lt;std::shared_ptr&lt;gameengine::node::_3D::StaticBody&gt;&gt;&amp; mapModels)</text><ellipse cx="27833" cy="5334.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="27842" y="5342.1113">getMapSize() : Vector2u&amp; {query}</text><ellipse cx="27833" cy="5353.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="249" x="27842" y="5361.1792">getMapSizeMax() : Vector2u&amp; {query}</text><ellipse cx="27833" cy="5372.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="460" x="27842" y="5380.2471">getMapParser() : gameengine::map::MapParser&lt;MapType&gt;&amp; {query}</text><ellipse cx="27833" cy="5391.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="27842" y="5399.315">getMapPath() : std::string&amp; {query}</text><ellipse cx="27833" cy="5410.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="339" x="27842" y="5418.3829">getPlayerSpawns() : std::vector&lt;Vector2f&gt;&amp; {query}</text><ellipse cx="27833" cy="5429.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="625" x="27842" y="5437.4508">getMapModels() : std::vector&lt;std::shared_ptr&lt;gameengine::node::_3D::StaticBody&gt;&gt;&amp; {query}</text><ellipse cx="27833" cy="5448.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="369" x="27842" y="5456.5188">getMap() : std::vector&lt;std::vector&lt;MapType&gt;&gt;&amp; {query}</text><ellipse cx="27833" cy="5467.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="416" x="27842" y="5475.5867">setMap(const std::vector&lt;std::vector&lt;MapType&gt;&gt;&amp; map) : void</text><ellipse cx="27833" cy="5486.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="721" x="27842" y="5494.6546">setMapModels(const std::vector&lt;std::shared_ptr&lt;gameengine::node::_3D::StaticBody&gt;&gt;&amp; mapModels) : void</text><ellipse cx="27833" cy="5505.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="311" x="27842" y="5513.7225">setMapPath(const std::string&amp; mapPath) : void</text><ellipse cx="27833" cy="5524.8245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="295" x="27842" y="5532.7904">setMapSize(const Vector2u&amp; mapSize) : void</text><ellipse cx="27833" cy="5543.8924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="351" x="27842" y="5551.8583">setMapSizeMax(const Vector2u&amp; mapSizeMax) : void</text><ellipse cx="27833" cy="5562.9603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="450" x="27842" y="5570.9263">setPlayerSpawns(const std::vector&lt;Vector2f&gt;&amp; playerSpawns) : void</text></g><!--MD5=[a7da3d112ca881600ac8cbf28a8cec67]
class indie.map.Map3DLoader--><g id="elem_indie.map.Map3DLoader"><rect codeLine="1407" fill="#F1F1F1" height="391.2225" id="indie.map.Map3DLoader" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1234" x="27785" y="4679.602"/><ellipse cx="28350.75" cy="4695.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M28350.5469,4702.3364 Q28348.0625,4702.3364 28346.7344,4700.6957 Q28345.4219,4699.0239 28345.4219,4695.9145 Q28345.4219,4692.7895 28346.7344,4691.1332 Q28348.0625,4689.477 28350.5469,4689.477 Q28351.2656,4689.477 28351.9219,4689.6332 Q28352.5625,4689.7895 28353.125,4690.0864 L28353.125,4692.8051 Q28352.7656,4692.4614 28352.4688,4692.2739 Q28352.1719,4692.0707 28351.9063,4691.9457 Q28351.5938,4691.8051 28351.2813,4691.7426 Q28350.9844,4691.6801 28350.6719,4691.6801 Q28349.3438,4691.6801 28348.6563,4692.7426 Q28347.9688,4693.8364 28347.9688,4695.9145 Q28347.9688,4698.0082 28348.6563,4699.0707 Q28349.3438,4700.1489 28350.6719,4700.1489 Q28351.3125,4700.1489 28351.9063,4699.8676 Q28352.2031,4699.7426 28352.4844,4699.5551 Q28352.7813,4699.352 28353.125,4699.0239 L28353.125,4701.7426 Q28352.5469,4702.0395 28351.9063,4702.1957 Q28351.2813,4702.3364 28350.5469,4702.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="94" x="28371.25" y="4701.034">Map3DLoader</text><line style="stroke:#181818;stroke-width:0.5;" x1="27786" x2="29018" y1="4711.602" y2="4711.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27793" y="4719.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="27805" y="4730.5679">_mapSizeMax : Vector2u</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27793" y="4738.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="327" x="27805" y="4749.6358">_instance : static std::shared_ptr&lt;Map3DLoader&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27793" y="4757.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="174" x="27805" y="4768.7038">_tmpMapPath : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27793" y="4776.8057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="461" x="27805" y="4787.7717">_textureManager : std::unique_ptr&lt;gameengine::TextureManager&gt;&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27793" y="4795.8736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="388" x="27805" y="4806.8396">_mapSymbol : std::unordered_map&lt;char, Map::MapType&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27793" y="4814.9416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="289" x="27805" y="4825.9075">_maps : std::vector&lt;std::shared_ptr&lt;Map&gt;&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="27786" x2="29018" y1="4834.0095" y2="4834.0095"/><ellipse cx="27796" cy="4845.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="27805" y="4852.9754">Map3DLoader()</text><ellipse cx="27796" cy="4864.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="249" x="27805" y="4872.0433">getMapSizeMax() : Vector2u&amp; {query}</text><ellipse cx="27796" cy="4883.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="322" x="27805" y="4891.1113">getInstance() : std::shared_ptr&lt;Map3DLoader&gt;&amp;</text><ellipse cx="27796" cy="4902.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="479" x="27805" y="4910.1792">getMapSymbol() : std::unordered_map&lt;char , Map::MapType&gt;&amp; {query}</text><ellipse cx="27796" cy="4921.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="376" x="27805" y="4929.2471">getMaps() : std::vector&lt;std::shared_ptr&lt;Map&gt;&gt;&amp; {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27793" y="4937.3491"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1208" x="27805" y="4948.315">addBreakableWall(std::vector&lt;std::shared_ptr&lt;gameengine::node::_3D::StaticBody&gt;&gt;&amp; models, const Vector3f&amp; position, const std::shared_ptr&lt;raylib::model::RlMesh&gt;&amp; mesh) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27793" y="4956.417"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1145" x="27805" y="4967.3829">addFloor(std::vector&lt;std::shared_ptr&lt;gameengine::node::_3D::StaticBody&gt;&gt;&amp; models, const Vector3f&amp; position, const std::shared_ptr&lt;raylib::model::RlMesh&gt;&amp; mesh) : void</text><ellipse cx="27796" cy="4978.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="287" x="27805" y="4986.4508">addMap(const std::string&amp; mapPath) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27793" y="4994.5528"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1141" x="27805" y="5005.5188">addWall(std::vector&lt;std::shared_ptr&lt;gameengine::node::_3D::StaticBody&gt;&gt;&amp; models, const Vector3f&amp; position, const std::shared_ptr&lt;raylib::model::RlMesh&gt;&amp; mesh) : void</text><ellipse cx="27796" cy="5016.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="297" x="27805" y="5024.5867">loadMaps(const std::string&amp; directory) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="27793" y="5032.6887"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="299" x="27805" y="5043.6546">parseMap(const std::string&amp; mapPath) : void</text><ellipse cx="27796" cy="5054.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="351" x="27805" y="5062.7225">setMapSizeMax(const Vector2u&amp; mapSizeMax) : void</text></g><!--MD5=[d382fae506790549165973573f229a11]
class indie.map.Map::MapType--><g id="elem_indie.map.Map::MapType"><rect codeLine="1428" fill="#F1F1F1" height="200.5433" id="indie.map.Map::MapType" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="132" x="28074" y="5638.602"/><ellipse cx="28089" cy="5654.602" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M28085.3906,5648.7114 L28093.1094,5648.7114 L28093.1094,5650.8676 L28087.8438,5650.8676 L28087.8438,5653.5395 L28092.6094,5653.5395 L28092.6094,5655.6957 L28087.8438,5655.6957 L28087.8438,5658.9457 L28093.1094,5658.9457 L28093.1094,5661.102 L28085.3906,5661.102 L28085.3906,5648.7114 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="28103" y="5660.034">Map::MapType</text><line style="stroke:#181818;stroke-width:0.5;" x1="28075" x2="28205" y1="5670.602" y2="5670.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="42" x="28080" y="5689.5679">BOMB</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="49" x="28080" y="5708.6358">BONUS</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="119" x="28080" y="5727.7038">BREAKABLE_WALL</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="41" x="28080" y="5746.7717">NONE</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="49" x="28080" y="5765.8396">PLAYER</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="104" x="28080" y="5784.9075">PLAYER_SPAWN</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="28080" y="5803.9754">UNKNOWN</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="36" x="28080" y="5823.0433">WALL</text><line style="stroke:#181818;stroke-width:0.5;" x1="28075" x2="28205" y1="5831.1453" y2="5831.1453"/></g><!--MD5=[6e9bebd6c38b4a1469fb5a48a77e00ae]
class indie.button.ButtonMainMenu--><g id="elem_indie.button.ButtonMainMenu"><rect codeLine="1441" fill="#F1F1F1" height="67.0679" id="indie.button.ButtonMainMenu" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="707" x="36850.5" y="4841.602"/><ellipse cx="37140.75" cy="4857.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M37140.5469,4864.3364 Q37138.0625,4864.3364 37136.7344,4862.6957 Q37135.4219,4861.0239 37135.4219,4857.9145 Q37135.4219,4854.7895 37136.7344,4853.1332 Q37138.0625,4851.477 37140.5469,4851.477 Q37141.2656,4851.477 37141.9219,4851.6332 Q37142.5625,4851.7895 37143.125,4852.0864 L37143.125,4854.8051 Q37142.7656,4854.4614 37142.4688,4854.2739 Q37142.1719,4854.0707 37141.9063,4853.9457 Q37141.5938,4853.8051 37141.2813,4853.7426 Q37140.9844,4853.6801 37140.6719,4853.6801 Q37139.3438,4853.6801 37138.6563,4854.7426 Q37137.9688,4855.8364 37137.9688,4857.9145 Q37137.9688,4860.0082 37138.6563,4861.0707 Q37139.3438,4862.1489 37140.6719,4862.1489 Q37141.3125,4862.1489 37141.9063,4861.8676 Q37142.2031,4861.7426 37142.4844,4861.5551 Q37142.7813,4861.352 37143.125,4861.0239 L37143.125,4863.7426 Q37142.5469,4864.0395 37141.9063,4864.1957 Q37141.2813,4864.3364 37140.5469,4864.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="118" x="37161.25" y="4863.034">ButtonMainMenu</text><line style="stroke:#181818;stroke-width:0.5;" x1="36851.5" x2="37556.5" y1="4873.602" y2="4873.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="36851.5" x2="37556.5" y1="4881.602" y2="4881.602"/><ellipse cx="36861.5" cy="4892.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="681" x="36870.5" y="4900.5679">ButtonMainMenu(const std::string&amp; name, const std::shared_ptr&lt;raylib::texture::RlTexture&gt;&amp; texture)</text></g><!--MD5=[12e9b581bf0bba1ffcd7bd287857efb9]
class indie.button.ButtonQuit--><g id="elem_indie.button.ButtonQuit"><rect codeLine="1445" fill="#F1F1F1" height="67.0679" id="indie.button.ButtonQuit" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="663" x="37592.5" y="4841.602"/><ellipse cx="37882.75" cy="4857.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M37882.5469,4864.3364 Q37880.0625,4864.3364 37878.7344,4862.6957 Q37877.4219,4861.0239 37877.4219,4857.9145 Q37877.4219,4854.7895 37878.7344,4853.1332 Q37880.0625,4851.477 37882.5469,4851.477 Q37883.2656,4851.477 37883.9219,4851.6332 Q37884.5625,4851.7895 37885.125,4852.0864 L37885.125,4854.8051 Q37884.7656,4854.4614 37884.4688,4854.2739 Q37884.1719,4854.0707 37883.9063,4853.9457 Q37883.5938,4853.8051 37883.2813,4853.7426 Q37882.9844,4853.6801 37882.6719,4853.6801 Q37881.3438,4853.6801 37880.6563,4854.7426 Q37879.9688,4855.8364 37879.9688,4857.9145 Q37879.9688,4860.0082 37880.6563,4861.0707 Q37881.3438,4862.1489 37882.6719,4862.1489 Q37883.3125,4862.1489 37883.9063,4861.8676 Q37884.2031,4861.7426 37884.4844,4861.5551 Q37884.7813,4861.352 37885.125,4861.0239 L37885.125,4863.7426 Q37884.5469,4864.0395 37883.9063,4864.1957 Q37883.2813,4864.3364 37882.5469,4864.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="37903.25" y="4863.034">ButtonQuit</text><line style="stroke:#181818;stroke-width:0.5;" x1="37593.5" x2="38254.5" y1="4873.602" y2="4873.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="37593.5" x2="38254.5" y1="4881.602" y2="4881.602"/><ellipse cx="37603.5" cy="4892.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="637" x="37612.5" y="4900.5679">ButtonQuit(const std::string&amp; name, const std::shared_ptr&lt;raylib::texture::RlTexture&gt;&amp; texture)</text></g><!--MD5=[e5a139ec8d391546a16a83e3f6d13d16]
class indie.button.ButtonRestart--><g id="elem_indie.button.ButtonRestart"><rect codeLine="1449" fill="#F1F1F1" height="67.0679" id="indie.button.ButtonRestart" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="682" x="38291" y="4841.602"/><ellipse cx="38581.25" cy="4857.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M38581.0469,4864.3364 Q38578.5625,4864.3364 38577.2344,4862.6957 Q38575.9219,4861.0239 38575.9219,4857.9145 Q38575.9219,4854.7895 38577.2344,4853.1332 Q38578.5625,4851.477 38581.0469,4851.477 Q38581.7656,4851.477 38582.4219,4851.6332 Q38583.0625,4851.7895 38583.625,4852.0864 L38583.625,4854.8051 Q38583.2656,4854.4614 38582.9688,4854.2739 Q38582.6719,4854.0707 38582.4063,4853.9457 Q38582.0938,4853.8051 38581.7813,4853.7426 Q38581.4844,4853.6801 38581.1719,4853.6801 Q38579.8438,4853.6801 38579.1563,4854.7426 Q38578.4688,4855.8364 38578.4688,4857.9145 Q38578.4688,4860.0082 38579.1563,4861.0707 Q38579.8438,4862.1489 38581.1719,4862.1489 Q38581.8125,4862.1489 38582.4063,4861.8676 Q38582.7031,4861.7426 38582.9844,4861.5551 Q38583.2813,4861.352 38583.625,4861.0239 L38583.625,4863.7426 Q38583.0469,4864.0395 38582.4063,4864.1957 Q38581.7813,4864.3364 38581.0469,4864.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="93" x="38601.75" y="4863.034">ButtonRestart</text><line style="stroke:#181818;stroke-width:0.5;" x1="38292" x2="38972" y1="4873.602" y2="4873.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="38292" x2="38972" y1="4881.602" y2="4881.602"/><ellipse cx="38302" cy="4892.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="656" x="38311" y="4900.5679">ButtonRestart(const std::string&amp; name, const std::shared_ptr&lt;raylib::texture::RlTexture&gt;&amp; texture)</text></g><!--MD5=[ac78ecde307ae458b0b22e6e2379bf09]
class indie.button.ButtonResume--><g id="elem_indie.button.ButtonResume"><rect codeLine="1453" fill="#F1F1F1" height="67.0679" id="indie.button.ButtonResume" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="688" x="39008" y="4841.602"/><ellipse cx="39298.25" cy="4857.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M39298.0469,4864.3364 Q39295.5625,4864.3364 39294.2344,4862.6957 Q39292.9219,4861.0239 39292.9219,4857.9145 Q39292.9219,4854.7895 39294.2344,4853.1332 Q39295.5625,4851.477 39298.0469,4851.477 Q39298.7656,4851.477 39299.4219,4851.6332 Q39300.0625,4851.7895 39300.625,4852.0864 L39300.625,4854.8051 Q39300.2656,4854.4614 39299.9688,4854.2739 Q39299.6719,4854.0707 39299.4063,4853.9457 Q39299.0938,4853.8051 39298.7813,4853.7426 Q39298.4844,4853.6801 39298.1719,4853.6801 Q39296.8438,4853.6801 39296.1563,4854.7426 Q39295.4688,4855.8364 39295.4688,4857.9145 Q39295.4688,4860.0082 39296.1563,4861.0707 Q39296.8438,4862.1489 39298.1719,4862.1489 Q39298.8125,4862.1489 39299.4063,4861.8676 Q39299.7031,4861.7426 39299.9844,4861.5551 Q39300.2813,4861.352 39300.625,4861.0239 L39300.625,4863.7426 Q39300.0469,4864.0395 39299.4063,4864.1957 Q39298.7813,4864.3364 39298.0469,4864.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="39318.75" y="4863.034">ButtonResume</text><line style="stroke:#181818;stroke-width:0.5;" x1="39009" x2="39695" y1="4873.602" y2="4873.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="39009" x2="39695" y1="4881.602" y2="4881.602"/><ellipse cx="39019" cy="4892.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="662" x="39028" y="4900.5679">ButtonResume(const std::string&amp; name, const std::shared_ptr&lt;raylib::texture::RlTexture&gt;&amp; texture)</text></g><!--MD5=[2e9b0e50ea7a2920521a84bb66a132f2]
class indie.button.IndieButton--><g id="elem_indie.button.IndieButton"><rect codeLine="1457" fill="#F1F1F1" height="105.2038" id="indie.button.IndieButton" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1142" x="38061" y="4010.102"/><ellipse cx="38587.75" cy="4026.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M38587.5469,4032.8364 Q38585.0625,4032.8364 38583.7344,4031.1957 Q38582.4219,4029.5239 38582.4219,4026.4145 Q38582.4219,4023.2895 38583.7344,4021.6332 Q38585.0625,4019.977 38587.5469,4019.977 Q38588.2656,4019.977 38588.9219,4020.1332 Q38589.5625,4020.2895 38590.125,4020.5864 L38590.125,4023.3051 Q38589.7656,4022.9614 38589.4688,4022.7739 Q38589.1719,4022.5707 38588.9063,4022.4457 Q38588.5938,4022.3051 38588.2813,4022.2426 Q38587.9844,4022.1801 38587.6719,4022.1801 Q38586.3438,4022.1801 38585.6563,4023.2426 Q38584.9688,4024.3364 38584.9688,4026.4145 Q38584.9688,4028.5082 38585.6563,4029.5707 Q38586.3438,4030.6489 38587.6719,4030.6489 Q38588.3125,4030.6489 38588.9063,4030.3676 Q38589.2031,4030.2426 38589.4844,4030.0551 Q38589.7813,4029.852 38590.125,4029.5239 L38590.125,4032.2426 Q38589.5469,4032.5395 38588.9063,4032.6957 Q38588.2813,4032.8364 38587.5469,4032.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="38608.25" y="4031.534">IndieButton</text><line style="stroke:#181818;stroke-width:0.5;" x1="38062" x2="39202" y1="4042.102" y2="4042.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="38062" x2="39202" y1="4050.102" y2="4050.102"/><ellipse cx="38072" cy="4061.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1116" x="38081" y="4069.0679">IndieButton(const std::string&amp; name, const std::shared_ptr&lt;raylib::texture::RlTexture&gt;&amp; texture, const std::function&lt;void ( const std::string&amp; buttonName )&gt;&amp; callback)</text><polygon fill="#FFFF44" points="38072,4075.1699,38076,4079.1699,38072,4083.1699,38068,4079.1699" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="308" x="38081" y="4088.1358">function&lt;void(const std::string&amp; buttonName)</text><ellipse cx="38072" cy="4099.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="38081" y="4107.2038">pressed() : void</text></g><!--MD5=[ca913dcafbef00bb2178a2ee5547751e]
class gameengine.AbstractSound--><g id="elem_gameengine.AbstractSound"><rect codeLine="1467" fill="#F1F1F1" height="219.6113" id="gameengine.AbstractSound" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="480" x="40666" y="791.602"/><ellipse cx="40856.25" cy="807.602" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M40854.875,800.9614 L40857.8594,800.9614 L40861.2188,813.352 L40858.7656,813.352 L40858,810.2895 L40854.7188,810.2895 L40853.9688,813.352 L40851.5313,813.352 L40854.875,800.9614 Z M40857.5313,808.2739 L40856.3594,803.1957 L40855.2031,808.2739 L40857.5313,808.2739 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="91" x="40876.75" y="813.034">AbstractSound</text><line style="stroke:#181818;stroke-width:0.5;" x1="40667" x2="41145" y1="823.602" y2="823.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="40674" y="831.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="179" x="40686" y="842.5679">_category : SoundCategory</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="40674" y="850.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="40686" y="861.6358">_filePath : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="40674" y="869.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="40686" y="880.7038">_name : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="40667" x2="41145" y1="888.8057" y2="888.8057"/><ellipse cx="40677" cy="899.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="454" x="40686" y="907.7717">AbstractSound(const std::string&amp; filePath, SoundCategory category)</text><ellipse cx="40677" cy="918.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="115" x="40686" y="926.8396">~AbstractSound()</text><ellipse cx="40677" cy="937.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="173" x="40686" y="945.9075">getCategory() : int {query}</text><ellipse cx="40677" cy="957.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="227" x="40686" y="964.9754">getFilePath() : std::string&amp; {query}</text><ellipse cx="40677" cy="976.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="40686" y="984.0433">getName() : std::string&amp; {query}</text><ellipse cx="40677" cy="995.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="237" x="40686" y="1003.1113">setVolume(const float&amp; volume) : void</text></g><!--MD5=[73ba47e2addc18d86b710781c56ce235]
class gameengine.AudioManager--><g id="elem_gameengine.AudioManager"><rect codeLine="1479" fill="#F1F1F1" height="276.815" id="gameengine.AudioManager" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="597" x="40856.5" y="168.602"/><ellipse cx="41100.75" cy="184.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M41100.5469,191.3364 Q41098.0625,191.3364 41096.7344,189.6957 Q41095.4219,188.0239 41095.4219,184.9145 Q41095.4219,181.7895 41096.7344,180.1332 Q41098.0625,178.477 41100.5469,178.477 Q41101.2656,178.477 41101.9219,178.6332 Q41102.5625,178.7895 41103.125,179.0864 L41103.125,181.8051 Q41102.7656,181.4614 41102.4688,181.2739 Q41102.1719,181.0707 41101.9063,180.9457 Q41101.5938,180.8051 41101.2813,180.7426 Q41100.9844,180.6801 41100.6719,180.6801 Q41099.3438,180.6801 41098.6563,181.7426 Q41097.9688,182.8364 41097.9688,184.9145 Q41097.9688,187.0082 41098.6563,188.0707 Q41099.3438,189.1489 41100.6719,189.1489 Q41101.3125,189.1489 41101.9063,188.8676 Q41102.2031,188.7426 41102.4844,188.5551 Q41102.7813,188.352 41103.125,188.0239 L41103.125,190.7426 Q41102.5469,191.0395 41101.9063,191.1957 Q41101.2813,191.3364 41100.5469,191.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="41121.25" y="190.034">AudioManager</text><line style="stroke:#181818;stroke-width:0.5;" x1="40857.5" x2="41452.5" y1="200.602" y2="200.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="40864.5" y="208.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="333" x="40876.5" y="219.5679">_instance : static std::shared_ptr&lt;AudioManager&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="40864.5" y="227.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="464" x="40876.5" y="238.6358">_sounds : std::vector&lt;std::unique_ptr&lt;gameengine::AbstractSound&gt;&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="40857.5" x2="41452.5" y1="246.7378" y2="246.7378"/><ellipse cx="40867.5" cy="257.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="108" x="40876.5" y="265.7038">AudioManager()</text><ellipse cx="40867.5" cy="276.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="40876.5" y="284.7717">~AudioManager()</text><ellipse cx="40867.5" cy="295.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="328" x="40876.5" y="303.8396">getInstance() : std::shared_ptr&lt;AudioManager&gt;&amp;</text><ellipse cx="40867.5" cy="314.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="474" x="40876.5" y="322.9075">getSound(const std::string&amp; name) : std::unique_ptr&lt;AbstractSound&gt;&amp;</text><ellipse cx="40867.5" cy="334.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="571" x="40876.5" y="341.9754">addSound(const std::string&amp; filePath, AbstractSound::SoundCategory category) : void</text><ellipse cx="40867.5" cy="353.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="294" x="40876.5" y="361.0433">deleteSound(const std::string&amp; name) : void</text><ellipse cx="40867.5" cy="372.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="322" x="40876.5" y="380.1113">loadSounds(const std::string&amp; assetsPath) : void</text><ellipse cx="40867.5" cy="391.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="503" x="40876.5" y="399.1792">loadSounds(const std::string&amp; soundDir, const std::string&amp; musicDir) : void</text><ellipse cx="40867.5" cy="410.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="280" x="40876.5" y="418.2471">playSound(const std::string&amp; name) : void</text><ellipse cx="40867.5" cy="429.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="531" x="40876.5" y="437.315">setVolume(const float&amp; volume, AbstractSound::SoundCategory category) : void</text></g><!--MD5=[45baea9acfbc71376df38649e7928e62]
class gameengine.Scene--><g id="elem_gameengine.Scene"><rect codeLine="1494" fill="#F1F1F1" height="543.7658" id="gameengine.Scene" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="606" x="39776" y="629.602"/><ellipse cx="40057.25" cy="645.602" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M40055.875,638.9614 L40058.8594,638.9614 L40062.2188,651.352 L40059.7656,651.352 L40059,648.2895 L40055.7188,648.2895 L40054.9688,651.352 L40052.5313,651.352 L40055.875,638.9614 Z M40058.5313,646.2739 L40057.3594,641.1957 L40056.2031,646.2739 L40058.5313,646.2739 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="35" x="40077.75" y="651.034">Scene</text><line style="stroke:#181818;stroke-width:0.5;" x1="39777" x2="40381" y1="661.602" y2="661.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="39784" y="669.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="39796" y="680.5679">_isLaunched : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="39784" y="688.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="39796" y="699.6358">_isPaused : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="39784" y="707.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="39796" y="718.7038">_name : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="39784" y="726.8057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="172" x="39796" y="737.7717">_sceneSource : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="39784" y="745.8736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="39796" y="756.8396">_nodes : std::vector&lt;std::shared_ptr&lt;gameengine::node::AbstractBase&gt;&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="39777" x2="40381" y1="764.9416" y2="764.9416"/><ellipse cx="39787" cy="775.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="425" x="39796" y="783.9075">Scene(const std::string&amp; name, const std::string&amp; sceneSource)</text><ellipse cx="39787" cy="795.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="39796" y="802.9754">~Scene()</text><ellipse cx="39787" cy="814.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="288" x="39796" y="822.0433">deleteNode(const std::string&amp; name) : bool</text><ellipse cx="39787" cy="833.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="189" x="39796" y="841.1113">isLaunched() : bool&amp; {query}</text><ellipse cx="39787" cy="852.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="172" x="39796" y="860.1792">isPaused() : bool&amp; {query}</text><ellipse cx="39787" cy="871.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="580" x="39796" y="879.2471">getNode(const std::string&amp; name) : std::shared_ptr&lt;gameengine::node::AbstractBase&gt;</text><ellipse cx="39787" cy="890.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="39796" y="898.315">getName() : std::string&amp; {query}</text><ellipse cx="39787" cy="909.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="260" x="39796" y="917.3829">getSceneSource() : std::string&amp; {query}</text><ellipse cx="39787" cy="928.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="575" x="39796" y="936.4508">getNodes() : std::vector&lt;std::shared_ptr&lt;gameengine::node::AbstractBase&gt;&gt;&amp; {query}</text><ellipse cx="39787" cy="947.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="539" x="39796" y="955.5188">addNode(const std::shared_ptr&lt;gameengine::node::AbstractBase&gt;&amp; node) : void</text><ellipse cx="39787" cy="966.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="397" x="39796" y="974.5867">deleteNodeIncludes(const std::string&amp; includeName) : void</text><ellipse cx="39787" cy="985.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="39796" y="993.6546">destroy() : void</text><ellipse cx="39787" cy="1004.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="39796" y="1012.7225">draw() : void</text><ellipse cx="39787" cy="1023.8245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="39796" y="1031.7904">draw2D() : void</text><ellipse cx="39787" cy="1042.8924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="39796" y="1050.8583">init() : void</text><ellipse cx="39787" cy="1061.9603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="103" x="39796" y="1069.9263">initScene() : void</text><ellipse cx="39787" cy="1081.0282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="139" x="39796" y="1088.9942">sceneLauncher() : void</text><ellipse cx="39787" cy="1100.0962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="134" x="39796" y="1108.0621">setLaunched() : void</text><ellipse cx="39787" cy="1119.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="236" x="39796" y="1127.13">setPaused(const bool&amp; value) : void</text><ellipse cx="39787" cy="1138.232" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="39796" y="1146.1979">update(const float&amp; delta) : void</text><ellipse cx="39787" cy="1157.2999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="237" x="39796" y="1165.2658">updateScene(const float&amp; delta) : void</text></g><!--MD5=[c64c2c1fb0f8a18ba61acdfa109b25fb]
class gameengine.SceneManager--><g id="elem_gameengine.SceneManager"><rect codeLine="1523" fill="#F1F1F1" height="524.6979" id="gameengine.SceneManager" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="606" x="41507" y="44.602"/><ellipse cx="41755.25" cy="60.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M41755.0469,67.3364 Q41752.5625,67.3364 41751.2344,65.6957 Q41749.9219,64.0239 41749.9219,60.9145 Q41749.9219,57.7895 41751.2344,56.1332 Q41752.5625,54.477 41755.0469,54.477 Q41755.7656,54.477 41756.4219,54.6332 Q41757.0625,54.7895 41757.625,55.0864 L41757.625,57.8051 Q41757.2656,57.4614 41756.9688,57.2739 Q41756.6719,57.0707 41756.4063,56.9457 Q41756.0938,56.8051 41755.7813,56.7426 Q41755.4844,56.6801 41755.1719,56.6801 Q41753.8438,56.6801 41753.1563,57.7426 Q41752.4688,58.8364 41752.4688,60.9145 Q41752.4688,63.0082 41753.1563,64.0707 Q41753.8438,65.1489 41755.1719,65.1489 Q41755.8125,65.1489 41756.4063,64.8676 Q41756.7031,64.7426 41756.9844,64.5551 Q41757.2813,64.352 41757.625,64.0239 L41757.625,66.7426 Q41757.0469,67.0395 41756.4063,67.1957 Q41755.7813,67.3364 41755.0469,67.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="41775.75" y="66.034">SceneManager</text><line style="stroke:#181818;stroke-width:0.5;" x1="41508" x2="42112" y1="76.602" y2="76.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="41515" y="84.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="334" x="41527" y="95.5679">_instance : static std::shared_ptr&lt;SceneManager&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="41515" y="103.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="168" x="41527" y="114.6358">_actualScene : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="41515" y="122.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="177" x="41527" y="133.7038">_waitingScene : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="41515" y="141.8057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="401" x="41527" y="152.7717">_scenes : std::vector&lt;std::shared_ptr&lt;gameengine::Scene&gt;&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="41515" y="160.8736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="273" x="41527" y="171.8396">_nodesToDelete : std::vector&lt;std::string&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="41515" y="179.9416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="331" x="41527" y="190.9075">_nodesToDeleteIncludes : std::vector&lt;std::string&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="41508" x2="42112" y1="199.0095" y2="199.0095"/><ellipse cx="41518" cy="210.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="41527" y="217.9754">isPaused() : bool</text><ellipse cx="41518" cy="229.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="395" x="41527" y="237.0433">getCurrentScene() : std::shared_ptr&lt;gameengine::Scene&gt;&amp;</text><ellipse cx="41518" cy="248.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="422" x="41527" y="256.1113">getInstance() : std::shared_ptr&lt;gameengine::SceneManager&gt;&amp;</text><ellipse cx="41518" cy="267.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="580" x="41527" y="275.1792">getNode(const std::string&amp; name) : std::shared_ptr&lt;gameengine::node::AbstractBase&gt;</text><ellipse cx="41518" cy="286.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="529" x="41527" y="294.2471">getAllNodes() : std::vector&lt;std::shared_ptr&lt;gameengine::node::AbstractBase&gt;&gt;</text><ellipse cx="41518" cy="305.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="539" x="41527" y="313.315">addNode(const std::shared_ptr&lt;gameengine::node::AbstractBase&gt;&amp; node) : void</text><ellipse cx="41518" cy="324.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="458" x="41527" y="332.3829">addScene(const std::shared_ptr&lt;gameengine::Scene&gt;&amp; scene) : void</text><ellipse cx="41518" cy="343.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="300" x="41527" y="351.4508">changeScene(const std::string&amp; scene) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="41515" y="359.5528"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="204" x="41527" y="370.5188">changeSceneInWaiting() : void</text><ellipse cx="41518" cy="381.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="287" x="41527" y="389.5867">deleteNode(const std::string&amp; name) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="41515" y="397.6887"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="159" x="41527" y="408.6546">deleteNodeInLst() : void</text><ellipse cx="41518" cy="419.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="407" x="41527" y="427.7225">deleteNodeInclude(const std::string&amp; containedName) : void</text><ellipse cx="41518" cy="438.8245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="292" x="41527" y="446.7904">deleteScene(const std::string&amp; scene) : void</text><ellipse cx="41518" cy="457.8924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="41527" y="465.8583">draw() : void</text><ellipse cx="41518" cy="476.9603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="41527" y="484.9263">draw2D() : void</text><ellipse cx="41518" cy="496.0282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="274" x="41527" y="503.9942">drawAll(raylib::RlCamera&amp; camera) : void</text><ellipse cx="41518" cy="515.0962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="291" x="41527" y="523.0621">makeLoop(raylib::RlCamera&amp; camera) : void</text><ellipse cx="41518" cy="534.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="186" x="41527" y="542.13">setPaused(bool value) : void</text><ellipse cx="41518" cy="553.232" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="41527" y="561.1979">update() : void</text></g><!--MD5=[63f83beb00359108c7ae4b2c14724fc3]
class gameengine.TextureManager--><g id="elem_gameengine.TextureManager"><rect codeLine="1551" fill="#F1F1F1" height="200.5433" id="gameengine.TextureManager" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="614" x="40189" y="206.602"/><ellipse cx="40435.75" cy="222.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M40435.5469,229.3364 Q40433.0625,229.3364 40431.7344,227.6957 Q40430.4219,226.0239 40430.4219,222.9145 Q40430.4219,219.7895 40431.7344,218.1332 Q40433.0625,216.477 40435.5469,216.477 Q40436.2656,216.477 40436.9219,216.6332 Q40437.5625,216.7895 40438.125,217.0864 L40438.125,219.8051 Q40437.7656,219.4614 40437.4688,219.2739 Q40437.1719,219.0707 40436.9063,218.9457 Q40436.5938,218.8051 40436.2813,218.7426 Q40435.9844,218.6801 40435.6719,218.6801 Q40434.3438,218.6801 40433.6563,219.7426 Q40432.9688,220.8364 40432.9688,222.9145 Q40432.9688,225.0082 40433.6563,226.0707 Q40434.3438,227.1489 40435.6719,227.1489 Q40436.3125,227.1489 40436.9063,226.8676 Q40437.2031,226.7426 40437.4844,226.5551 Q40437.7813,226.352 40438.125,226.0239 L40438.125,228.7426 Q40437.5469,229.0395 40436.9063,229.1957 Q40436.2813,229.3364 40435.5469,229.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="40456.25" y="228.034">TextureManager</text><line style="stroke:#181818;stroke-width:0.5;" x1="40190" x2="40802" y1="238.602" y2="238.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="40197" y="246.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="441" x="40209" y="257.5679">_defaultTexture : static std::shared_ptr&lt;raylib::texture::RlTexture&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="40197" y="265.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="346" x="40209" y="276.6358">_instance : static std::unique_ptr&lt;TextureManager&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="40197" y="284.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="443" x="40209" y="295.7038">_textures : std::vector&lt;std::shared_ptr&lt;raylib::texture::RlTexture&gt;&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="40190" x2="40802" y1="303.8057" y2="303.8057"/><ellipse cx="40200" cy="314.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="588" x="40209" y="322.7717">getTexture(const std::string&amp; textureName) : std::shared_ptr&lt;raylib::texture::RlTexture&gt;</text><ellipse cx="40200" cy="333.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="436" x="40209" y="341.8396">getDefaultTexture() : std::shared_ptr&lt;raylib::texture::RlTexture&gt;&amp;</text><ellipse cx="40200" cy="352.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="341" x="40209" y="360.9075">getInstance() : std::unique_ptr&lt;TextureManager&gt;&amp;</text><ellipse cx="40200" cy="372.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="533" x="40209" y="379.9754">getTextures() : std::vector&lt;std::shared_ptr&lt;raylib::texture::RlTexture&gt;&gt;&amp; {query}</text><ellipse cx="40200" cy="391.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="333" x="40209" y="399.0433">loadTextures(const std::string&amp; texturesDir) : void</text></g><!--MD5=[40bc7110d5956849c69340a3649935d2]
class gameengine.Time--><g id="elem_gameengine.Time"><rect codeLine="1562" fill="#F1F1F1" height="219.6113" id="gameengine.Time" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="378" x="39776" y="197.102"/><ellipse cx="39944.25" cy="213.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M39944.0469,219.8364 Q39941.5625,219.8364 39940.2344,218.1957 Q39938.9219,216.5239 39938.9219,213.4145 Q39938.9219,210.2895 39940.2344,208.6332 Q39941.5625,206.977 39944.0469,206.977 Q39944.7656,206.977 39945.4219,207.1332 Q39946.0625,207.2895 39946.625,207.5864 L39946.625,210.3051 Q39946.2656,209.9614 39945.9688,209.7739 Q39945.6719,209.5707 39945.4063,209.4457 Q39945.0938,209.3051 39944.7813,209.2426 Q39944.4844,209.1801 39944.1719,209.1801 Q39942.8438,209.1801 39942.1563,210.2426 Q39941.4688,211.3364 39941.4688,213.4145 Q39941.4688,215.5082 39942.1563,216.5707 Q39942.8438,217.6489 39944.1719,217.6489 Q39944.8125,217.6489 39945.4063,217.3676 Q39945.7031,217.2426 39945.9844,217.0551 Q39946.2813,216.852 39946.625,216.5239 L39946.625,219.2426 Q39946.0469,219.5395 39945.4063,219.6957 Q39944.7813,219.8364 39944.0469,219.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="33" x="39964.75" y="218.534">Time</text><line style="stroke:#181818;stroke-width:0.5;" x1="39777" x2="40153" y1="229.102" y2="229.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="39777" x2="40153" y1="237.102" y2="237.102"/><ellipse cx="39787" cy="248.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="41" x="39796" y="256.0679">Time()</text><ellipse cx="39787" cy="267.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="49" x="39796" y="275.1358">~Time()</text><ellipse cx="39787" cy="286.2378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="198" x="39796" y="294.2038">getMicrosecondsTime() : long</text><ellipse cx="39787" cy="305.3057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="189" x="39796" y="313.2717">getMillisecondsTime() : long</text><ellipse cx="39787" cy="324.3736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="314" x="39796" y="332.3396">getNanoTime(std::chrono::seconds time) : long</text><ellipse cx="39787" cy="343.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="343" x="39796" y="351.4075">getNanoTime(std::chrono::milliseconds time) : long</text><ellipse cx="39787" cy="362.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="352" x="39796" y="370.4754">getNanoTime(std::chrono::microseconds time) : long</text><ellipse cx="39787" cy="381.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="196" x="39796" y="389.5433">getNanosecondsTime() : long</text><ellipse cx="39787" cy="400.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="161" x="39796" y="408.6113">getSecondsTime() : long</text></g><!--MD5=[4eccf2137b869170cd4461fa999763d7]
class gameengine.AbstractSound::SoundCategory--><g id="elem_gameengine.AbstractSound::SoundCategory"><rect codeLine="1574" fill="#F1F1F1" height="86.1358" id="gameengine.AbstractSound::SoundCategory" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="242" x="45702" y="1357.602"/><ellipse cx="45717" cy="1373.602" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M45713.3906,1367.7114 L45721.1094,1367.7114 L45721.1094,1369.8676 L45715.8438,1369.8676 L45715.8438,1372.5395 L45720.6094,1372.5395 L45720.6094,1374.6957 L45715.8438,1374.6957 L45715.8438,1377.9457 L45721.1094,1377.9457 L45721.1094,1380.102 L45713.3906,1380.102 L45713.3906,1367.7114 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="210" x="45731" y="1379.034">AbstractSound::SoundCategory</text><line style="stroke:#181818;stroke-width:0.5;" x1="45703" x2="45943" y1="1389.602" y2="1389.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="15" x="45708" y="1408.5679">FX</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="45" x="45708" y="1427.6358">MUSIC</text><line style="stroke:#181818;stroke-width:0.5;" x1="45703" x2="45943" y1="1435.7378" y2="1435.7378"/></g><!--MD5=[37232a0a6477ab18d5e8bba16aef28cf]
class gameengine.node.AbstractBase--><g id="elem_gameengine.node.AbstractBase"><rect codeLine="1580" fill="#F1F1F1" height="334.0188" id="gameengine.node.AbstractBase" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="300" x="42325" y="1233.602"/><ellipse cx="42430.25" cy="1249.602" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M42428.875,1242.9614 L42431.8594,1242.9614 L42435.2188,1255.352 L42432.7656,1255.352 L42432,1252.2895 L42428.7188,1252.2895 L42427.9688,1255.352 L42425.5313,1255.352 L42428.875,1242.9614 Z M42431.5313,1250.2739 L42430.3594,1245.1957 L42429.2031,1250.2739 L42431.5313,1250.2739 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="81" x="42450.75" y="1255.034">AbstractBase</text><line style="stroke:#181818;stroke-width:0.5;" x1="42326" x2="42624" y1="1265.602" y2="1265.602"/><polygon fill="none" points="42336,1271.602,42340,1275.602,42336,1279.602,42332,1275.602" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="91" x="42345" y="1284.5679">_hiding : bool</text><polygon fill="none" points="42336,1290.6699,42340,1294.6699,42336,1298.6699,42332,1294.6699" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="42345" y="1303.6358">_group : std::string</text><polygon fill="none" points="42336,1309.7378,42340,1313.7378,42336,1317.7378,42332,1313.7378" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="42345" y="1322.7038">_name : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="42326" x2="42624" y1="1330.8057" y2="1330.8057"/><ellipse cx="42336" cy="1341.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="257" x="42345" y="1349.7717">AbstractBase(const std::string&amp; name)</text><ellipse cx="42336" cy="1360.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="238" x="42345" y="1368.8396">AbstractBase(const AbstractBase &amp;)</text><ellipse cx="42336" cy="1379.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="104" x="42345" y="1387.9075">~AbstractBase()</text><ellipse cx="42336" cy="1399.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="168" x="42345" y="1406.9754">isHiding() : bool&amp; {query}</text><ellipse cx="42336" cy="1418.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="223" x="42345" y="1426.0433">getRotationDegrees() : float {query}</text><ellipse cx="42336" cy="1437.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="216" x="42345" y="1445.1113">getGroup() : std::string&amp; {query}</text><ellipse cx="42336" cy="1456.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="42345" y="1464.1792">getName() : std::string&amp; {query}</text><ellipse cx="42336" cy="1475.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="79" x="42345" y="1483.2471">draw() : void</text><ellipse cx="42336" cy="1494.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="68" x="42345" y="1502.315">init() : void</text><ellipse cx="42336" cy="1513.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="274" x="42345" y="1521.3829">setGroup(const std::string&amp; group) : void</text><ellipse cx="42336" cy="1532.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="182" x="42345" y="1540.4508">setHiding(bool value) : void</text><ellipse cx="42336" cy="1551.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="202" x="42345" y="1559.5188">update(const float&amp; delta) : void</text></g><!--MD5=[913bf6c6a4374c5e0145c251d3b54395]
class gameengine.node._3D.Grid3D--><g id="elem_gameengine.node._3D.Grid3D"><rect codeLine="1599" fill="#F1F1F1" height="410.2904" id="gameengine.node._3D.Grid3D" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="833" x="43863.5" y="2853.102"/><ellipse cx="44252.25" cy="2869.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M44252.0469,2875.8364 Q44249.5625,2875.8364 44248.2344,2874.1957 Q44246.9219,2872.5239 44246.9219,2869.4145 Q44246.9219,2866.2895 44248.2344,2864.6332 Q44249.5625,2862.977 44252.0469,2862.977 Q44252.7656,2862.977 44253.4219,2863.1332 Q44254.0625,2863.2895 44254.625,2863.5864 L44254.625,2866.3051 Q44254.2656,2865.9614 44253.9688,2865.7739 Q44253.6719,2865.5707 44253.4063,2865.4457 Q44253.0938,2865.3051 44252.7813,2865.2426 Q44252.4844,2865.1801 44252.1719,2865.1801 Q44250.8438,2865.1801 44250.1563,2866.2426 Q44249.4688,2867.3364 44249.4688,2869.4145 Q44249.4688,2871.5082 44250.1563,2872.5707 Q44250.8438,2873.6489 44252.1719,2873.6489 Q44252.8125,2873.6489 44253.4063,2873.3676 Q44253.7031,2873.2426 44253.9844,2873.0551 Q44254.2813,2872.852 44254.625,2872.5239 L44254.625,2875.2426 Q44254.0469,2875.5395 44253.4063,2875.6957 Q44252.7813,2875.8364 44252.0469,2875.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="47" x="44272.75" y="2874.534">Grid3D</text><line style="stroke:#181818;stroke-width:0.5;" x1="43864.5" x2="44695.5" y1="2885.102" y2="2885.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="43871.5" y="2893.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="43883.5" y="2904.0679">_tint : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="43871.5" y="2912.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="43883.5" y="2923.1358">_size : Vector2i</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="43871.5" y="2931.2378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="43883.5" y="2942.2038">_position : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="43871.5" y="2950.3057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="43883.5" y="2961.2717">_scale : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="43871.5" y="2969.3736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="43883.5" y="2980.3396">_spacing : float</text><line style="stroke:#181818;stroke-width:0.5;" x1="43864.5" x2="44695.5" y1="2988.4416" y2="2988.4416"/><ellipse cx="43874.5" cy="2999.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="807" x="43883.5" y="3007.4075">Grid3D(const Vector2i&amp; size, const Vector3f&amp; position, const float&amp; spacing, const RlColor&amp; tint, const std::string&amp; name)</text><ellipse cx="43874.5" cy="3018.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="43883.5" y="3026.4754">Grid3D(const Grid3D &amp;)</text><ellipse cx="43874.5" cy="3037.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="43883.5" y="3045.5433">getPosition() : Vector3f&amp; {query}</text><ellipse cx="43874.5" cy="3056.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="43883.5" y="3064.6113">getScale() : Vector3f&amp; {query}</text><ellipse cx="43874.5" cy="3075.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="237" x="43883.5" y="3083.6792">getRotationDegrees() : float {query}</text><ellipse cx="43874.5" cy="3094.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="43883.5" y="3102.7471">draw() : void</text><ellipse cx="43874.5" cy="3113.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="43883.5" y="3121.815">init() : void</text><ellipse cx="43874.5" cy="3132.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="254" x="43883.5" y="3140.8829">setPosition(const Vector3f&amp; pos) : void</text><ellipse cx="43874.5" cy="3151.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="516" x="43883.5" y="3159.9508">setRotationDegrees(const float&amp; degrees, const Vector3f&amp; rotationAxis) : void</text><ellipse cx="43874.5" cy="3171.0528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="275" x="43883.5" y="3179.0188">setScale(const Vector3f&amp; newScale) : void</text><ellipse cx="43874.5" cy="3190.1207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="229" x="43883.5" y="3198.0867">setSize(const Vector2i&amp; size) : void</text><ellipse cx="43874.5" cy="3209.1887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="259" x="43883.5" y="3217.1546">setSpacing(const float&amp; spacing) : void</text><ellipse cx="43874.5" cy="3228.2566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="43883.5" y="3236.2225">setTint(const RlColor&amp; tint) : void</text><ellipse cx="43874.5" cy="3247.3245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="43883.5" y="3255.2904">update(const float&amp; delta) : void</text></g><!--MD5=[fb4e65c598c272102cd1dfba58e22c58]
class gameengine.node._3D.KinematicBody--><g id="elem_gameengine.node._3D.KinematicBody"><rect codeLine="1621" fill="#F1F1F1" height="124.2717" id="gameengine.node._3D.KinematicBody" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="944" x="44282" y="4000.602"/><ellipse cx="44699.75" cy="4016.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M44699.5469,4023.3364 Q44697.0625,4023.3364 44695.7344,4021.6957 Q44694.4219,4020.0239 44694.4219,4016.9145 Q44694.4219,4013.7895 44695.7344,4012.1332 Q44697.0625,4010.477 44699.5469,4010.477 Q44700.2656,4010.477 44700.9219,4010.6332 Q44701.5625,4010.7895 44702.125,4011.0864 L44702.125,4013.8051 Q44701.7656,4013.4614 44701.4688,4013.2739 Q44701.1719,4013.0707 44700.9063,4012.9457 Q44700.5938,4012.8051 44700.2813,4012.7426 Q44699.9844,4012.6801 44699.6719,4012.6801 Q44698.3438,4012.6801 44697.6563,4013.7426 Q44696.9688,4014.8364 44696.9688,4016.9145 Q44696.9688,4019.0082 44697.6563,4020.0707 Q44698.3438,4021.1489 44699.6719,4021.1489 Q44700.3125,4021.1489 44700.9063,4020.8676 Q44701.2031,4020.7426 44701.4844,4020.5551 Q44701.7813,4020.352 44702.125,4020.0239 L44702.125,4022.7426 Q44701.5469,4023.0395 44700.9063,4023.1957 Q44700.2813,4023.3364 44699.5469,4023.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="44720.25" y="4022.034">KinematicBody</text><line style="stroke:#181818;stroke-width:0.5;" x1="44283" x2="45225" y1="4032.602" y2="4032.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="44283" x2="45225" y1="4040.602" y2="4040.602"/><ellipse cx="44293" cy="4051.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="524" x="44302" y="4059.5679">KinematicBody(const std::string&amp; name, const raylib::model::RlModel&amp; model)</text><ellipse cx="44293" cy="4070.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="918" x="44302" y="4078.6358">KinematicBody(const std::string&amp; name, const raylib::model::RlModel&amp; model, const std::shared_ptr&lt;raylib::texture::RlTexture&gt;&amp; texture)</text><ellipse cx="44293" cy="4089.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="44302" y="4097.7038">~KinematicBody()</text><ellipse cx="44293" cy="4108.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="321" x="44302" y="4116.7717">moveAndCollide(const Vector3f&amp; position) : bool</text></g><!--MD5=[be65e1648764f9611b702ebd868a9037]
class gameengine.node._3D.Node3D--><g id="elem_gameengine.node._3D.Node3D"><rect codeLine="1628" fill="#F1F1F1" height="200.5433" id="gameengine.node._3D.Node3D" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="510" x="44025" y="2029.602"/><ellipse cx="44250.75" cy="2045.602" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M44249.375,2038.9614 L44252.3594,2038.9614 L44255.7188,2051.352 L44253.2656,2051.352 L44252.5,2048.2895 L44249.2188,2048.2895 L44248.4688,2051.352 L44246.0313,2051.352 L44249.375,2038.9614 Z M44252.0313,2046.2739 L44250.8594,2041.1957 L44249.7031,2046.2739 L44252.0313,2046.2739 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="50" x="44271.25" y="2051.034">Node3D</text><line style="stroke:#181818;stroke-width:0.5;" x1="44026" x2="44534" y1="2061.602" y2="2061.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="44026" x2="44534" y1="2069.602" y2="2069.602"/><ellipse cx="44036" cy="2080.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="223" x="44045" y="2088.5679">Node3D(const std::string&amp; name)</text><ellipse cx="44036" cy="2099.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="44045" y="2107.6358">Node3D(const Node3D &amp;)</text><ellipse cx="44036" cy="2118.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="44045" y="2126.7038">~Node3D()</text><ellipse cx="44036" cy="2137.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="202" x="44045" y="2145.7717">getPosition() : Vector3f&amp; {query}</text><ellipse cx="44036" cy="2156.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="183" x="44045" y="2164.8396">getScale() : Vector3f&amp; {query}</text><ellipse cx="44036" cy="2175.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="240" x="44045" y="2183.9075">setPosition(const Vector3f&amp; pos) : void</text><ellipse cx="44036" cy="2195.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="484" x="44045" y="2202.9754">setRotationDegrees(const float&amp; degrees, const Vector3f&amp; rotationAxis) : void</text><ellipse cx="44036" cy="2214.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="256" x="44045" y="2222.0433">setScale(const Vector3f&amp; newScale) : void</text></g><!--MD5=[4794cd8fce7c1e1129489e6043945c4f]
class gameengine.node._3D.StaticBody--><g id="elem_gameengine.node._3D.StaticBody"><rect codeLine="1639" fill="#F1F1F1" height="486.5621" id="gameengine.node._3D.StaticBody" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="914" x="44732" y="2814.602"/><ellipse cx="45149.75" cy="2830.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M45149.5469,2837.3364 Q45147.0625,2837.3364 45145.7344,2835.6957 Q45144.4219,2834.0239 45144.4219,2830.9145 Q45144.4219,2827.7895 45145.7344,2826.1332 Q45147.0625,2824.477 45149.5469,2824.477 Q45150.2656,2824.477 45150.9219,2824.6332 Q45151.5625,2824.7895 45152.125,2825.0864 L45152.125,2827.8051 Q45151.7656,2827.4614 45151.4688,2827.2739 Q45151.1719,2827.0707 45150.9063,2826.9457 Q45150.5938,2826.8051 45150.2813,2826.7426 Q45149.9844,2826.6801 45149.6719,2826.6801 Q45148.3438,2826.6801 45147.6563,2827.7426 Q45146.9688,2828.8364 45146.9688,2830.9145 Q45146.9688,2833.0082 45147.6563,2834.0707 Q45148.3438,2835.1489 45149.6719,2835.1489 Q45150.3125,2835.1489 45150.9063,2834.8676 Q45151.2031,2834.7426 45151.4844,2834.5551 Q45151.7813,2834.352 45152.125,2834.0239 L45152.125,2836.7426 Q45151.5469,2837.0395 45150.9063,2837.1957 Q45150.2813,2837.3364 45149.5469,2837.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="45170.25" y="2836.034">StaticBody</text><line style="stroke:#181818;stroke-width:0.5;" x1="44733" x2="45645" y1="2846.602" y2="2846.602"/><polygon fill="none" points="44743,2852.602,44747,2856.602,44743,2860.602,44739,2856.602" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="44752" y="2865.5679">_collisionEnable : bool</text><polygon fill="none" points="44743,2871.6699,44747,2875.6699,44743,2879.6699,44739,2875.6699" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="211" x="44752" y="2884.6358">_model : raylib::model::RlModel</text><line style="stroke:#181818;stroke-width:0.5;" x1="44733" x2="45645" y1="2892.7378" y2="2892.7378"/><ellipse cx="44743" cy="2903.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="494" x="44752" y="2911.7038">StaticBody(const std::string&amp; name, const raylib::model::RlModel&amp; model)</text><ellipse cx="44743" cy="2922.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="888" x="44752" y="2930.7717">StaticBody(const std::string&amp; name, const raylib::model::RlModel&amp; model, const std::shared_ptr&lt;raylib::texture::RlTexture&gt;&amp; texture)</text><ellipse cx="44743" cy="2941.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="44752" y="2949.8396">~StaticBody()</text><ellipse cx="44743" cy="2960.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="285" x="44752" y="2968.9075">getBoundingBox() : BoundingBox&amp; {query}</text><ellipse cx="44743" cy="2980.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="44752" y="2987.9754">getColor() : RlColor&amp; {query}</text><ellipse cx="44743" cy="2999.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="44752" y="3007.0433">getPosition() : Vector3f&amp; {query}</text><ellipse cx="44743" cy="3018.1453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="44752" y="3026.1113">getScale() : Vector3f&amp; {query}</text><ellipse cx="44743" cy="3037.2132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="248" x="44752" y="3045.1792">hasCollisionEnabled() : bool&amp; {query}</text><ellipse cx="44743" cy="3056.2812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="237" x="44752" y="3064.2471">getRotationDegrees() : float {query}</text><ellipse cx="44743" cy="3075.3491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="266" x="44752" y="3083.315">operator-&gt;() : raylib :: model :: RlModel*</text><ellipse cx="44743" cy="3094.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="245" x="44752" y="3102.3829">getModel() : raylib::model::RlModel&amp;</text><ellipse cx="44743" cy="3113.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="298" x="44752" y="3121.4508">getModel() : raylib::model::RlModel&amp; {query}</text><ellipse cx="44743" cy="3132.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="44752" y="3140.5188">draw() : void</text><ellipse cx="44743" cy="3151.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="44752" y="3159.5867">init() : void</text><ellipse cx="44743" cy="3170.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="392" x="44752" y="3178.6546">setBoundingBox(const BoundingBox&amp; boundingBox) : void</text><ellipse cx="44743" cy="3189.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="240" x="44752" y="3197.7225">setCollisionEnable(bool value) : void</text><ellipse cx="44743" cy="3208.8245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="284" x="44752" y="3216.7904">setColor(const raylib::RlColor&amp; color) : void</text><ellipse cx="44743" cy="3227.8924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="254" x="44752" y="3235.8583">setPosition(const Vector3f&amp; pos) : void</text><ellipse cx="44743" cy="3246.9603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="516" x="44752" y="3254.9263">setRotationDegrees(const float&amp; degrees, const Vector3f&amp; rotationAxis) : void</text><ellipse cx="44743" cy="3266.0282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="275" x="44752" y="3273.9942">setScale(const Vector3f&amp; newScale) : void</text><ellipse cx="44743" cy="3285.0962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="44752" y="3293.0621">update(const float&amp; delta) : void</text></g><!--MD5=[3beb618146e952a5a4467b055cc69748]
class gameengine.node._2D.Button--><g id="elem_gameengine.node._2D.Button"><rect codeLine="1667" fill="#F1F1F1" height="639.1054" id="gameengine.node._2D.Button" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="634" x="43173" y="2738.602"/><ellipse cx="43464.75" cy="2754.602" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M43463.375,2747.9614 L43466.3594,2747.9614 L43469.7188,2760.352 L43467.2656,2760.352 L43466.5,2757.2895 L43463.2188,2757.2895 L43462.4688,2760.352 L43460.0313,2760.352 L43463.375,2747.9614 Z M43466.0313,2755.2739 L43464.8594,2750.1957 L43463.7031,2755.2739 L43466.0313,2755.2739 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="42" x="43485.25" y="2760.034">Button</text><line style="stroke:#181818;stroke-width:0.5;" x1="43174" x2="43806" y1="2770.602" y2="2770.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="43181" y="2778.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="136" x="43193" y="2789.5679">_bounds : Rectangle</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="43181" y="2797.6699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="149" x="43193" y="2808.6358">_rectangle : Rectangle</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="43181" y="2816.7378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="43193" y="2827.7038">_origin : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="43181" y="2835.8057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="43193" y="2846.7717">_position : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="43181" y="2854.8736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="43193" y="2865.8396">_scale : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="43181" y="2873.9416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="88" x="43193" y="2884.9075">_action : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="43181" y="2893.0095"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="43193" y="2903.9754">_isEnabled : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="43181" y="2912.0774"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="133" x="43193" y="2923.0433">_frameHeight : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="43181" y="2931.1453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="43193" y="2942.1113">_rotationDegrees : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="43181" y="2950.2132"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="43193" y="2961.1792">_frameNum : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="43181" y="2969.2812"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="43193" y="2980.2471">_state : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="43181" y="2988.3491"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="350" x="43193" y="2999.315">_texture : std::shared_ptr&lt;raylib::texture::RlTexture&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="43174" x2="43806" y1="3007.417" y2="3007.417"/><ellipse cx="43184" cy="3018.417" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="608" x="43193" y="3026.3829">Button(const std::string&amp; name, const std::shared_ptr&lt;raylib::texture::RlTexture&gt;&amp; texture)</text><ellipse cx="43184" cy="3037.4849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="223" x="43193" y="3045.4508">getBounds() : Rectangle&amp; {query}</text><ellipse cx="43184" cy="3056.5528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="239" x="43193" y="3064.5188">getRectangle() : Rectangle&amp; {query}</text><ellipse cx="43184" cy="3075.6207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="43193" y="3083.5867">getOrigin() : Vector2f&amp; {query}</text><ellipse cx="43184" cy="3094.6887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="43193" y="3102.6546">getPosition() : Vector2f&amp; {query}</text><ellipse cx="43184" cy="3113.7566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="43193" y="3121.7225">getScale() : Vector2f&amp; {query}</text><ellipse cx="43184" cy="3132.8245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="178" x="43193" y="3140.7904">isEnabled() : bool&amp; {query}</text><ellipse cx="43184" cy="3151.8924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="237" x="43193" y="3159.8583">getRotationDegrees() : float {query}</text><ellipse cx="43184" cy="3170.9603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="440" x="43193" y="3178.9263">getTexture() : std::shared_ptr&lt;raylib::texture::RlTexture&gt;&amp; {query}</text><ellipse cx="43184" cy="3190.0282" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="269" x="43193" y="3197.9942">centerButton(const Vector2f&amp; pos) : void</text><ellipse cx="43184" cy="3209.0962" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="43193" y="3217.0621">draw() : void</text><ellipse cx="43184" cy="3228.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="43193" y="3236.13">init() : void</text><ellipse cx="43184" cy="3247.232" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="95" x="43193" y="3255.1979">pressed() : void</text><ellipse cx="43184" cy="3266.2999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="242" x="43193" y="3274.2658">setEnabled(const bool&amp; value) : void</text><ellipse cx="43184" cy="3285.3678" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="260" x="43193" y="3293.3338">setOrigin(const Vector2f&amp; origin) : void</text><ellipse cx="43184" cy="3304.4357" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="284" x="43193" y="3312.4017">setPosition(const Vector2f&amp; position) : void</text><ellipse cx="43184" cy="3323.5037" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="373" x="43193" y="3331.4696">setRotationDegrees(const float&amp; rotationDegrees) : void</text><ellipse cx="43184" cy="3342.5716" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="246" x="43193" y="3350.5375">setScale(const Vector2f&amp; scale) : void</text><ellipse cx="43184" cy="3361.6395" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="43193" y="3369.6054">update(const float&amp; delta) : void</text></g><!--MD5=[15d1a0032e266012fab171eeaa9ae5d3]
class gameengine.node._2D.Label--><g id="elem_gameengine.node._2D.Label"><rect codeLine="1701" fill="#F1F1F1" height="448.4263" id="gameengine.node._2D.Label" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="889" x="40887.5" y="2834.102"/><ellipse cx="41309.75" cy="2850.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M41309.5469,2856.8364 Q41307.0625,2856.8364 41305.7344,2855.1957 Q41304.4219,2853.5239 41304.4219,2850.4145 Q41304.4219,2847.2895 41305.7344,2845.6332 Q41307.0625,2843.977 41309.5469,2843.977 Q41310.2656,2843.977 41310.9219,2844.1332 Q41311.5625,2844.2895 41312.125,2844.5864 L41312.125,2847.3051 Q41311.7656,2846.9614 41311.4688,2846.7739 Q41311.1719,2846.5707 41310.9063,2846.4457 Q41310.5938,2846.3051 41310.2813,2846.2426 Q41309.9844,2846.1801 41309.6719,2846.1801 Q41308.3438,2846.1801 41307.6563,2847.2426 Q41306.9688,2848.3364 41306.9688,2850.4145 Q41306.9688,2852.5082 41307.6563,2853.5707 Q41308.3438,2854.6489 41309.6719,2854.6489 Q41310.3125,2854.6489 41310.9063,2854.3676 Q41311.2031,2854.2426 41311.4844,2854.0551 Q41311.7813,2853.852 41312.125,2853.5239 L41312.125,2856.2426 Q41311.5469,2856.5395 41310.9063,2856.6957 Q41310.2813,2856.8364 41309.5469,2856.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="36" x="41330.25" y="2855.534">Label</text><line style="stroke:#181818;stroke-width:0.5;" x1="40888.5" x2="41775.5" y1="2866.102" y2="2866.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="40895.5" y="2874.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="40907.5" y="2885.0679">_position : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="40895.5" y="2893.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="40907.5" y="2904.1358">_scale : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="40895.5" y="2912.2378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="40907.5" y="2923.2038">_rotationDegrees : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="40895.5" y="2931.3057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="40907.5" y="2942.2717">_color : raylib::RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="40895.5" y="2950.3736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="241" x="40907.5" y="2961.3396">_textComponent : raylib::text::RlText</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="40895.5" y="2969.4416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="40907.5" y="2980.4075">_text : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="40888.5" x2="41775.5" y1="2988.5095" y2="2988.5095"/><ellipse cx="40898.5" cy="2999.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="863" x="40907.5" y="3007.4754">Label(const std::string&amp; name, const Vector2f&amp; position, const Vector2f&amp; scale, const float&amp; degrees, const raylib::RlColor&amp; color)</text><ellipse cx="40898.5" cy="3018.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="52" x="40907.5" y="3026.5433">~Label()</text><ellipse cx="40898.5" cy="3037.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="40907.5" y="3045.6113">getPosition() : Vector2f&amp; {query}</text><ellipse cx="40898.5" cy="3056.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="40907.5" y="3064.6792">getScale() : Vector2f&amp; {query}</text><ellipse cx="40898.5" cy="3075.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="237" x="40907.5" y="3083.7471">getRotationDegrees() : float {query}</text><ellipse cx="40898.5" cy="3094.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="181" x="40907.5" y="3102.815">getColor() : raylib::RlColor&amp;</text><ellipse cx="40898.5" cy="3113.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="40907.5" y="3121.8829">getColor() : raylib::RlColor&amp; {query}</text><ellipse cx="40898.5" cy="3132.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="40907.5" y="3140.9508">draw() : void</text><ellipse cx="40898.5" cy="3152.0528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="40907.5" y="3160.0188">init() : void</text><ellipse cx="40898.5" cy="3171.1207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="40907.5" y="3179.0867">setColor(raylib::RlColor color) : void</text><ellipse cx="40898.5" cy="3190.1887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="284" x="40907.5" y="3198.1546">setPosition(const Vector2f&amp; position) : void</text><ellipse cx="40898.5" cy="3209.2566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="373" x="40907.5" y="3217.2225">setRotationDegrees(const float&amp; rotationDegrees) : void</text><ellipse cx="40898.5" cy="3228.3245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="246" x="40907.5" y="3236.2904">setScale(const Vector2f&amp; scale) : void</text><ellipse cx="40898.5" cy="3247.3924" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="244" x="40907.5" y="3255.3583">setText(const std::string&amp; text) : void</text><ellipse cx="40898.5" cy="3266.4603" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="40907.5" y="3274.4263">update(const float&amp; delta) : void</text></g><!--MD5=[94b8afe68eb7a0026adf99dc497b25bb]
class gameengine.node._2D.Node2D--><g id="elem_gameengine.node._2D.Node2D"><rect codeLine="1725" fill="#F1F1F1" height="200.5433" id="gameengine.node._2D.Node2D" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="323" x="42313.5" y="2029.602"/><ellipse cx="42445.75" cy="2045.602" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M42444.375,2038.9614 L42447.3594,2038.9614 L42450.7188,2051.352 L42448.2656,2051.352 L42447.5,2048.2895 L42444.2188,2048.2895 L42443.4688,2051.352 L42441.0313,2051.352 L42444.375,2038.9614 Z M42447.0313,2046.2739 L42445.8594,2041.1957 L42444.7031,2046.2739 L42447.0313,2046.2739 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="50" x="42466.25" y="2051.034">Node2D</text><line style="stroke:#181818;stroke-width:0.5;" x1="42314.5" x2="42635.5" y1="2061.602" y2="2061.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="42314.5" x2="42635.5" y1="2069.602" y2="2069.602"/><ellipse cx="42324.5" cy="2080.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="223" x="42333.5" y="2088.5679">Node2D(const std::string&amp; name)</text><ellipse cx="42324.5" cy="2099.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="42333.5" y="2107.6358">Node2D(const Node2D &amp;)</text><ellipse cx="42324.5" cy="2118.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="42333.5" y="2126.7038">~Node2D()</text><ellipse cx="42324.5" cy="2137.8057" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="202" x="42333.5" y="2145.7717">getPosition() : Vector2f&amp; {query}</text><ellipse cx="42324.5" cy="2156.8736" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="183" x="42333.5" y="2164.8396">getScale() : Vector2f&amp; {query}</text><ellipse cx="42324.5" cy="2175.9416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="240" x="42333.5" y="2183.9075">setPosition(const Vector2f&amp; pos) : void</text><ellipse cx="42324.5" cy="2195.0095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="297" x="42333.5" y="2202.9754">setRotationDegrees(const float&amp; degrees) : void</text><ellipse cx="42324.5" cy="2214.0774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="256" x="42333.5" y="2222.0433">setScale(const Vector2f&amp; newScale) : void</text></g><!--MD5=[a52a82c299fe5085dbce871667e0e304]
class gameengine.node._2D.TextureRect--><g id="elem_gameengine.node._2D.TextureRect"><rect codeLine="1736" fill="#F1F1F1" height="410.2904" id="gameengine.node._2D.TextureRect" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1327" x="41811.5" y="2853.102"/><ellipse cx="42430.75" cy="2869.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M42430.5469,2875.8364 Q42428.0625,2875.8364 42426.7344,2874.1957 Q42425.4219,2872.5239 42425.4219,2869.4145 Q42425.4219,2866.2895 42426.7344,2864.6332 Q42428.0625,2862.977 42430.5469,2862.977 Q42431.2656,2862.977 42431.9219,2863.1332 Q42432.5625,2863.2895 42433.125,2863.5864 L42433.125,2866.3051 Q42432.7656,2865.9614 42432.4688,2865.7739 Q42432.1719,2865.5707 42431.9063,2865.4457 Q42431.5938,2865.3051 42431.2813,2865.2426 Q42430.9844,2865.1801 42430.6719,2865.1801 Q42429.3438,2865.1801 42428.6563,2866.2426 Q42427.9688,2867.3364 42427.9688,2869.4145 Q42427.9688,2871.5082 42428.6563,2872.5707 Q42429.3438,2873.6489 42430.6719,2873.6489 Q42431.3125,2873.6489 42431.9063,2873.3676 Q42432.2031,2873.2426 42432.4844,2873.0551 Q42432.7813,2872.852 42433.125,2872.5239 L42433.125,2875.2426 Q42432.5469,2875.5395 42431.9063,2875.6957 Q42431.2813,2875.8364 42430.5469,2875.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="42451.25" y="2874.534">TextureRect</text><line style="stroke:#181818;stroke-width:0.5;" x1="41812.5" x2="43137.5" y1="2885.102" y2="2885.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="41819.5" y="2893.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="41831.5" y="2904.0679">_position : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="41819.5" y="2912.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="41831.5" y="2923.1358">_scale : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="41819.5" y="2931.2378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="41831.5" y="2942.2038">_rotationDegrees : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="41819.5" y="2950.3057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="41831.5" y="2961.2717">_color : raylib::RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="41819.5" y="2969.3736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="350" x="41831.5" y="2980.3396">_texture : std::shared_ptr&lt;raylib::texture::RlTexture&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="41812.5" x2="43137.5" y1="2988.4416" y2="2988.4416"/><ellipse cx="41822.5" cy="2999.4416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1301" x="41831.5" y="3007.4075">TextureRect(const std::string&amp; name, const std::shared_ptr&lt;raylib::texture::RlTexture&gt;&amp; texture, const Vector2f&amp; position, const Vector2f&amp; scale, const float&amp; degrees, const raylib::RlColor&amp; color)</text><ellipse cx="41822.5" cy="3018.5095" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="41831.5" y="3026.4754">~TextureRect()</text><ellipse cx="41822.5" cy="3037.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="41831.5" y="3045.5433">getPosition() : Vector2f&amp; {query}</text><ellipse cx="41822.5" cy="3056.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="41831.5" y="3064.6113">getScale() : Vector2f&amp; {query}</text><ellipse cx="41822.5" cy="3075.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="237" x="41831.5" y="3083.6792">getRotationDegrees() : float {query}</text><ellipse cx="41822.5" cy="3094.7812" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="181" x="41831.5" y="3102.7471">getColor() : raylib::RlColor&amp;</text><ellipse cx="41822.5" cy="3113.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="41831.5" y="3121.815">getColor() : raylib::RlColor&amp; {query}</text><ellipse cx="41822.5" cy="3132.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="41831.5" y="3140.8829">draw() : void</text><ellipse cx="41822.5" cy="3151.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="41831.5" y="3159.9508">init() : void</text><ellipse cx="41822.5" cy="3171.0528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="238" x="41831.5" y="3179.0188">setColor(const RlColor&amp; color) : void</text><ellipse cx="41822.5" cy="3190.1207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="284" x="41831.5" y="3198.0867">setPosition(const Vector2f&amp; position) : void</text><ellipse cx="41822.5" cy="3209.1887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="373" x="41831.5" y="3217.1546">setRotationDegrees(const float&amp; rotationDegrees) : void</text><ellipse cx="41822.5" cy="3228.2566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="246" x="41831.5" y="3236.2225">setScale(const Vector2f&amp; scale) : void</text><ellipse cx="41822.5" cy="3247.3245" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="41831.5" y="3255.2904">update(const float&amp; delta) : void</text></g><!--MD5=[3904d397bcb7460d9533c6f380b70fa1]
class gameengine.map.MapParser--><g id="elem_gameengine.map.MapParser"><rect codeLine="1761" fill="#F1F1F1" height="372.1546" id="gameengine.map.MapParser" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="783" x="45136.5" y="121.102"/><ellipse cx="45422.75" cy="137.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M45422.5469,143.8364 Q45420.0625,143.8364 45418.7344,142.1957 Q45417.4219,140.5239 45417.4219,137.4145 Q45417.4219,134.2895 45418.7344,132.6332 Q45420.0625,130.977 45422.5469,130.977 Q45423.2656,130.977 45423.9219,131.1332 Q45424.5625,131.2895 45425.125,131.5864 L45425.125,134.3051 Q45424.7656,133.9614 45424.4688,133.7739 Q45424.1719,133.5707 45423.9063,133.4457 Q45423.5938,133.3051 45423.2813,133.2426 Q45422.9844,133.1801 45422.6719,133.1801 Q45421.3438,133.1801 45420.6563,134.2426 Q45419.9688,135.3364 45419.9688,137.4145 Q45419.9688,139.5082 45420.6563,140.5707 Q45421.3438,141.6489 45422.6719,141.6489 Q45423.3125,141.6489 45423.9063,141.3676 Q45424.2031,141.2426 45424.4844,141.0551 Q45424.7813,140.852 45425.125,140.5239 L45425.125,143.2426 Q45424.5469,143.5395 45423.9063,143.6957 Q45423.2813,143.8364 45422.5469,143.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="45443.25" y="142.534">MapParser</text><rect fill="#FFFFFF" height="18.3441" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="127" x="45795.5" y="118.102"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="125" x="45796.5" y="131.9301">template&lt;typename T&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="45137.5" x2="45918.5" y1="153.102" y2="153.102"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="45144.5" y="161.102"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="45156.5" y="172.0679">_maxSize : Vector2u</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="45144.5" y="180.1699"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="45156.5" y="191.1358">_size : Vector2u</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="45144.5" y="199.2378"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="45156.5" y="210.2038">_file : std::ifstream</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="45144.5" y="218.3057"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="45156.5" y="229.2717">_buffer : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="45144.5" y="237.3736"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="45156.5" y="248.3396">_fileName : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="45144.5" y="256.4416"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="272" x="45156.5" y="267.4075">_symbols : std::unordered_map&lt;char, T&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="45144.5" y="275.5095"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="228" x="45156.5" y="286.4754">_map : std::vector&lt;std::vector&lt;T&gt;&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="45137.5" x2="45918.5" y1="294.5774" y2="294.5774"/><ellipse cx="45147.5" cy="305.5774" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="757" x="45156.5" y="313.5433">MapParser(const std::string&amp; fileName, const std::unordered_map&lt;char, T&gt;&amp; symbols, const Vector2u&amp; maxSize)</text><ellipse cx="45147.5" cy="324.6453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="45156.5" y="332.6113">getMaxSize() : Vector2u&amp; {query}</text><ellipse cx="45147.5" cy="343.7132" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="191" x="45156.5" y="351.6792">getSize() : Vector2u&amp; {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="45144.5" y="359.7812"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="352" x="45156.5" y="370.7471">removeComment(const std::string&amp; line) : std::string</text><ellipse cx="45147.5" cy="381.8491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="216" x="45156.5" y="389.815">getBuffer() : std::string&amp; {query}</text><ellipse cx="45147.5" cy="400.917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="237" x="45156.5" y="408.8829">getFileName() : std::string&amp; {query}</text><ellipse cx="45147.5" cy="419.9849" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="364" x="45156.5" y="427.9508">getSymbols() : std::unordered_map&lt;char , T&gt;&amp; {query}</text><ellipse cx="45147.5" cy="439.0528" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="315" x="45156.5" y="447.0188">getMap() : std::vector&lt;std::vector&lt;T&gt;&gt;&amp; {query}</text><ellipse cx="45147.5" cy="458.1207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="45156.5" y="466.0867">parse() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="45144.5" y="474.1887"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="45156.5" y="485.1546">parseMap() : void</text></g><!--MD5=[15b65ae4bc5685ca3b6e1ff48e50a091]
class gameengine.ex.GameEngineException--><g id="elem_gameengine.ex.GameEngineException"><rect codeLine="1783" fill="#F1F1F1" height="105.2038" id="gameengine.ex.GameEngineException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="498" x="43374" y="254.602"/><ellipse cx="43543.25" cy="270.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M43543.0469,277.3364 Q43540.5625,277.3364 43539.2344,275.6957 Q43537.9219,274.0239 43537.9219,270.9145 Q43537.9219,267.7895 43539.2344,266.1332 Q43540.5625,264.477 43543.0469,264.477 Q43543.7656,264.477 43544.4219,264.6332 Q43545.0625,264.7895 43545.625,265.0864 L43545.625,267.8051 Q43545.2656,267.4614 43544.9688,267.2739 Q43544.6719,267.0707 43544.4063,266.9457 Q43544.0938,266.8051 43543.7813,266.7426 Q43543.4844,266.6801 43543.1719,266.6801 Q43541.8438,266.6801 43541.1563,267.7426 Q43540.4688,268.8364 43540.4688,270.9145 Q43540.4688,273.0082 43541.1563,274.0707 Q43541.8438,275.1489 43543.1719,275.1489 Q43543.8125,275.1489 43544.4063,274.8676 Q43544.7031,274.7426 43544.9844,274.5551 Q43545.2813,274.352 43545.625,274.0239 L43545.625,276.7426 Q43545.0469,277.0395 43544.4063,277.1957 Q43543.7813,277.3364 43543.0469,277.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="151" x="43563.75" y="276.034">GameEngineException</text><line style="stroke:#181818;stroke-width:0.5;" x1="43375" x2="43871" y1="286.602" y2="286.602"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="43382" y="294.602"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="43394" y="305.5679">_msg : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="43375" x2="43871" y1="313.6699" y2="313.6699"/><ellipse cx="43385" cy="324.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="472" x="43394" y="332.6358">GameEngineException(const std::string&amp; message, const bool&amp; prefix)</text><ellipse cx="43385" cy="343.7378" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="43394" y="351.7038">what() : char* {query}</text></g><!--MD5=[162b77df7aa9b543c57f5af1eb80f9dc]
class gameengine.ex.MapParserException--><g id="elem_gameengine.ex.MapParserException"><rect codeLine="1789" fill="#F1F1F1" height="67.0679" id="gameengine.ex.MapParserException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="355" x="43445.5" y="868.102"/><ellipse cx="43549.75" cy="884.102" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M43549.5469,890.8364 Q43547.0625,890.8364 43545.7344,889.1957 Q43544.4219,887.5239 43544.4219,884.4145 Q43544.4219,881.2895 43545.7344,879.6332 Q43547.0625,877.977 43549.5469,877.977 Q43550.2656,877.977 43550.9219,878.1332 Q43551.5625,878.2895 43552.125,878.5864 L43552.125,881.3051 Q43551.7656,880.9614 43551.4688,880.7739 Q43551.1719,880.5707 43550.9063,880.4457 Q43550.5938,880.3051 43550.2813,880.2426 Q43549.9844,880.1801 43549.6719,880.1801 Q43548.3438,880.1801 43547.6563,881.2426 Q43546.9688,882.3364 43546.9688,884.4145 Q43546.9688,886.5082 43547.6563,887.5707 Q43548.3438,888.6489 43549.6719,888.6489 Q43550.3125,888.6489 43550.9063,888.3676 Q43551.2031,888.2426 43551.4844,888.0551 Q43551.7813,887.852 43552.125,887.5239 L43552.125,890.2426 Q43551.5469,890.5395 43550.9063,890.6957 Q43550.2813,890.8364 43549.5469,890.8364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="43570.25" y="889.534">MapParserException</text><line style="stroke:#181818;stroke-width:0.5;" x1="43446.5" x2="43799.5" y1="900.102" y2="900.102"/><line style="stroke:#181818;stroke-width:0.5;" x1="43446.5" x2="43799.5" y1="908.102" y2="908.102"/><ellipse cx="43456.5" cy="919.102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="329" x="43465.5" y="927.0679">MapParserException(const std::string&amp; message)</text></g><!--MD5=[feae6325ffe0bc21c6160f3da30bebc6]
class gameengine.audio.Music--><g id="elem_gameengine.audio.Music"><rect codeLine="1795" fill="#F1F1F1" height="86.1358" id="gameengine.audio.Music" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="538" x="40269" y="1357.602"/><ellipse cx="40513.75" cy="1373.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M40513.5469,1380.3364 Q40511.0625,1380.3364 40509.7344,1378.6957 Q40508.4219,1377.0239 40508.4219,1373.9145 Q40508.4219,1370.7895 40509.7344,1369.1332 Q40511.0625,1367.477 40513.5469,1367.477 Q40514.2656,1367.477 40514.9219,1367.6332 Q40515.5625,1367.7895 40516.125,1368.0864 L40516.125,1370.8051 Q40515.7656,1370.4614 40515.4688,1370.2739 Q40515.1719,1370.0707 40514.9063,1369.9457 Q40514.5938,1369.8051 40514.2813,1369.7426 Q40513.9844,1369.6801 40513.6719,1369.6801 Q40512.3438,1369.6801 40511.6563,1370.7426 Q40510.9688,1371.8364 40510.9688,1373.9145 Q40510.9688,1376.0082 40511.6563,1377.0707 Q40512.3438,1378.1489 40513.6719,1378.1489 Q40514.3125,1378.1489 40514.9063,1377.8676 Q40515.2031,1377.7426 40515.4844,1377.5551 Q40515.7813,1377.352 40516.125,1377.0239 L40516.125,1379.7426 Q40515.5469,1380.0395 40514.9063,1380.1957 Q40514.2813,1380.3364 40513.5469,1380.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="40" x="40534.25" y="1379.034">Music</text><line style="stroke:#181818;stroke-width:0.5;" x1="40270" x2="40806" y1="1389.602" y2="1389.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="40270" x2="40806" y1="1397.602" y2="1397.602"/><ellipse cx="40280" cy="1408.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="512" x="40289" y="1416.5679">Music(const std::string&amp; fileName, AbstractSound::SoundCategory category)</text><ellipse cx="40280" cy="1427.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="251" x="40289" y="1435.6358">setVolume(const float&amp; volume) : void</text></g><!--MD5=[5d91f37d09d1a3bbd0838eb14b437939]
class gameengine.audio.Sound--><g id="elem_gameengine.audio.Sound"><rect codeLine="1800" fill="#F1F1F1" height="86.1358" id="gameengine.audio.Sound" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="434" x="39800" y="1357.602"/><ellipse cx="39991.25" cy="1373.602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M39991.0469,1380.3364 Q39988.5625,1380.3364 39987.2344,1378.6957 Q39985.9219,1377.0239 39985.9219,1373.9145 Q39985.9219,1370.7895 39987.2344,1369.1332 Q39988.5625,1367.477 39991.0469,1367.477 Q39991.7656,1367.477 39992.4219,1367.6332 Q39993.0625,1367.7895 39993.625,1368.0864 L39993.625,1370.8051 Q39993.2656,1370.4614 39992.9688,1370.2739 Q39992.6719,1370.0707 39992.4063,1369.9457 Q39992.0938,1369.8051 39991.7813,1369.7426 Q39991.4844,1369.6801 39991.1719,1369.6801 Q39989.8438,1369.6801 39989.1563,1370.7426 Q39988.4688,1371.8364 39988.4688,1373.9145 Q39988.4688,1376.0082 39989.1563,1377.0707 Q39989.8438,1378.1489 39991.1719,1378.1489 Q39991.8125,1378.1489 39992.4063,1377.8676 Q39992.7031,1377.7426 39992.9844,1377.5551 Q39993.2813,1377.352 39993.625,1377.0239 L39993.625,1379.7426 Q39993.0469,1380.0395 39992.4063,1380.1957 Q39991.7813,1380.3364 39991.0469,1380.3364 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="43" x="40011.75" y="1379.034">Sound</text><line style="stroke:#181818;stroke-width:0.5;" x1="39801" x2="40233" y1="1389.602" y2="1389.602"/><line style="stroke:#181818;stroke-width:0.5;" x1="39801" x2="40233" y1="1397.602" y2="1397.602"/><ellipse cx="39811" cy="1408.602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="408" x="39820" y="1416.5679">Sound(const std::string&amp; fileName, SoundCategory category)</text><ellipse cx="39811" cy="1427.6699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="251" x="39820" y="1435.6358">setVolume(const float&amp; volume) : void</text></g><!--MD5=[71dd11987a1ad289828519f054fe18bf]
reverse link gameengine.node.AbstractBase to gameengine.node._2D.Node2D--><g id="link_gameengine.node.AbstractBase_gameengine.node._2D.Node2D"><path codeLine="1813" d="M42475,1588.442 C42475,1729.042 42475,1916.252 42475,2029.452 " fill="none" id="gameengine.node.AbstractBase-backto-gameengine.node._2D.Node2D" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="42468,1588.052,42475,1568.052,42482,1588.052,42468,1588.052" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[7d01b9bac2e3a88085bf52cb8659fc1c]
reverse link gameengine.node.AbstractBase to gameengine.node._3D.Node3D--><g id="link_gameengine.node.AbstractBase_gameengine.node._3D.Node3D"><path codeLine="1816" d="M42645.44,1568.422 C42802.98,1578.552 43795,1562.292 43823,1575.602 C44021.65,1670.012 44163.61,1897.342 44232.63,2029.432 " fill="none" id="gameengine.node.AbstractBase-backto-gameengine.node._3D.Node3D" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="42644.21,1575.322,42625.24,1565.892,42645.95,1561.432,42644.21,1575.322" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[ca978f69105f04ab8b660d47524e26e3]
reverse link gameengine.AbstractSound to gameengine.audio.Music--><g id="link_gameengine.AbstractSound_gameengine.audio.Music"><path codeLine="1819" d="M40813.18,1027.962 C40733.22,1135.952 40622.51,1285.472 40569.18,1357.492 " fill="none" id="gameengine.AbstractSound-backto-gameengine.audio.Music" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="40807.71,1023.582,40825.24,1011.672,40818.97,1031.912,40807.71,1023.582" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[515deef46a43460363b8627a286e4b3f]
reverse link gameengine.AbstractSound to gameengine.audio.Sound--><g id="link_gameengine.AbstractSound_gameengine.audio.Sound"><path codeLine="1822" d="M40725.2,1022.172 C40631.94,1077.822 40514.06,1139.192 40400,1173.602 C40336.74,1192.682 40312.49,1161.012 40252,1187.602 C40165.98,1225.412 40090.03,1307.302 40049.07,1357.512 " fill="none" id="gameengine.AbstractSound-backto-gameengine.audio.Sound" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="40721.87,1016.002,40742.62,1011.672,40729.1,1027.992,40721.87,1016.002" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[f397ce9a49b6209d6266f4fdc9748ad2]
reverse link gameengine.node._2D.Button to indie.button.IndieButton--><g id="link_gameengine.node._2D.Button_indie.button.IndieButton"><path codeLine="1825" d="M43259.11,3391.412 C43227.5,3419.752 43193.05,3444.742 43156,3463.602 C42960.96,3562.862 42390.63,3500.472 42173,3523.602 C40953.34,3653.212 39510.97,3902.492 38913.18,4010.082 " fill="none" id="gameengine.node._2D.Button-backto-indie.button.IndieButton" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="43254.48,3386.162,43273.92,3377.712,43264,3396.432,43254.48,3386.162" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[6aaf7fd83be418e6cb78484b370462d0]
reverse link gameengine.ex.GameEngineException to gameengine.ex.MapParserException--><g id="link_gameengine.ex.GameEngineException_gameengine.ex.MapParserException"><path codeLine="1828" d="M43623,379.872 C43623,508.952 43623,775.442 43623,868.042 " fill="none" id="gameengine.ex.GameEngineException-backto-gameengine.ex.MapParserException" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="43616,379.642,43623,359.642,43630,379.642,43616,379.642" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[30381d7319adf431596087d67ef97e98]
reverse link raylib.builder.IBuilder to raylib.builder.RlCameraBuilder--><g id="link_raylib.builder.IBuilder_raylib.builder.RlCameraBuilder"><path codeLine="1831" d="M5141.4,2174.392 C5010.62,2255.942 4729.16,2443.072 4540,2652.602 C4472.91,2726.912 4412.95,2821.342 4368.36,2900.272 " fill="none" id="raylib.builder.IBuilder-backto-raylib.builder.RlCameraBuilder" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="5137.77,2168.412,5158.46,2163.832,5145.14,2180.312,5137.77,2168.412" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[4ed3a3e3ebc4c0d7f4405072494191a6]
reverse link raylib.builder.IBuilder to raylib.builder.RlImageBuilder--><g id="link_raylib.builder.IBuilder_raylib.builder.RlImageBuilder"><path codeLine="1834" d="M5187.55,2181.682 C5139.79,2276.592 5032.83,2489.122 4936.27,2681.002 " fill="none" id="raylib.builder.IBuilder-backto-raylib.builder.RlImageBuilder" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="5181.31,2178.502,5196.55,2163.782,5193.81,2184.802,5181.31,2178.502" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[2a052aa86a01b1a0b25738c1f3ec000a]
reverse link raylib.builder.IBuilder to raylib.builder.RlMeshBuilder--><g id="link_raylib.builder.IBuilder_raylib.builder.RlMeshBuilder"><path codeLine="1837" d="M5213,2184.032 C5213,2278.472 5213,2483.732 5213,2671.512 " fill="none" id="raylib.builder.IBuilder-backto-raylib.builder.RlMeshBuilder" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="5206,2183.782,5213,2163.782,5220,2183.782,5206,2183.782" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[442966406335fb24ff7f5d0d49af5a36]
reverse link raylib.builder.IBuilder to raylib.builder.RlModelBuilder--><g id="link_raylib.builder.IBuilder_raylib.builder.RlModelBuilder"><path codeLine="1840" d="M5243.3,2180.932 C5311.54,2293.172 5481.43,2572.602 5611.16,2785.982 " fill="none" id="raylib.builder.IBuilder-backto-raylib.builder.RlModelBuilder" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="5237.28,2184.512,5232.87,2163.782,5249.24,2177.242,5237.28,2184.512" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[de88adb95550fd32056d05e01112f96a]
reverse link raylib.builder.IBuilder to raylib.builder.RlTextBuilder--><g id="link_raylib.builder.IBuilder_raylib.builder.RlTextBuilder"><path codeLine="1843" d="M5308.72,2171.882 C5478.67,2247.702 5837.97,2423.662 6080,2652.602 C6127.12,2697.172 6170.6,2751.152 6208.42,2804.952 " fill="none" id="raylib.builder.IBuilder-backto-raylib.builder.RlTextBuilder" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="5305.63,2178.172,5290.18,2163.672,5311.3,2165.372,5305.63,2178.172" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[b63fb31d74ce9ab69a60b0797d3ce2eb]
reverse link indie.button.IndieButton to indie.button.ButtonMainMenu--><g id="link_indie.button.IndieButton_indie.button.ButtonMainMenu"><path codeLine="1846" d="M38588.49,4132.122 C38504.05,4257.952 38304.31,4522.412 38057,4625.602 C38007.57,4646.232 37626.24,4617.982 37575,4633.602 C37436.6,4675.792 37300.87,4786.242 37238.91,4841.562 " fill="none" id="indie.button.IndieButton-backto-indie.button.ButtonMainMenu" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="38582.75,4128.112,38599.64,4115.322,38594.42,4135.852,38582.75,4128.112" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[201b9b2ff7646a908b1f18b4a33b6f80]
reverse link indie.button.IndieButton to indie.button.ButtonQuit--><g id="link_indie.button.IndieButton_indie.button.ButtonQuit"><path codeLine="1849" d="M38573.63,4130.422 C38428.98,4296.012 38058.02,4720.682 37952.43,4841.552 " fill="none" id="indie.button.IndieButton-backto-indie.button.ButtonQuit" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="38568.48,4125.682,38586.9,4115.222,38579.02,4134.892,38568.48,4125.682" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[8438ee1d80ced3040910df5a52fb7973]
reverse link indie.button.IndieButton to indie.button.ButtonRestart--><g id="link_indie.button.IndieButton_indie.button.ButtonRestart"><path codeLine="1852" d="M38632,4135.252 C38632,4304.122 38632,4721.832 38632,4841.552 " fill="none" id="indie.button.IndieButton-backto-indie.button.ButtonRestart" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="38625,4135.222,38632,4115.222,38639,4135.222,38625,4135.222" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[0651fe0b640dde88e676132592319072]
reverse link indie.button.IndieButton to indie.button.ButtonResume--><g id="link_indie.button.IndieButton_indie.button.ButtonResume"><path codeLine="1855" d="M38691.36,4130.422 C38838.46,4296.012 39215.71,4720.682 39323.09,4841.552 " fill="none" id="indie.button.IndieButton-backto-indie.button.ButtonResume" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="38685.91,4134.832,38677.86,4115.222,38696.38,4125.532,38685.91,4134.832" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[7728897a975278b9e3e016cc5d52cd8e]
reverse link gameengine.node._3D.KinematicBody to indie.Player--><g id="link_gameengine.node._3D.KinematicBody_indie.Player"><path codeLine="1858" d="M44529.39,3994.852 C44089.07,3865.982 43079.32,3589.812 42207.5,3493.602 C42116.19,3483.522 29064.12,3457.862 28979.5,3493.602 C28833.82,3555.122 28707.53,3675.822 28612.52,3790.272 " fill="none" id="gameengine.node._3D.KinematicBody-backto-indie.Player" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="44531.43,3988.152,44548.65,4000.502,44527.48,4001.592,44531.43,3988.152" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[5c8c9210af0f5641d58fcbb4a3bc47ae]
reverse link gameengine.node._2D.Node2D to gameengine.node._2D.Button--><g id="link_gameengine.node._2D.Node2D_gameengine.node._2D.Button"><path codeLine="1861" d="M42641.24,2242.342 C42784.56,2341.882 42993.44,2495.902 43156,2652.602 C43183.87,2679.462 43211.69,2708.552 43238.71,2738.392 " fill="none" id="gameengine.node._2D.Node2D-backto-gameengine.node._2D.Button" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="42637,2247.912,42624.53,2230.782,42644.96,2236.402,42637,2247.912" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[8b62722591bc4a6aa83084824ecfdf44]
reverse link gameengine.node._2D.Node2D to gameengine.node._2D.Label--><g id="link_gameengine.node._2D.Node2D_gameengine.node._2D.Label"><path codeLine="1864" d="M42323.34,2242.772 C42183.85,2346.532 41972.26,2506.572 41794,2652.602 C41723.8,2710.112 41649.2,2774.102 41580.89,2833.902 " fill="none" id="gameengine.node._2D.Node2D-backto-gameengine.node._2D.Label" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="42319.33,2237.032,42339.56,2230.722,42327.68,2248.272,42319.33,2237.032" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[6981705eeab117253633872b9cb0f070]
reverse link gameengine.node._2D.Node2D to gameengine.node._2D.TextureRect--><g id="link_gameengine.node._2D.Node2D_gameengine.node._2D.TextureRect"><path codeLine="1867" d="M42475,2250.902 C42475,2403.142 42475,2668.282 42475,2852.752 " fill="none" id="gameengine.node._2D.Node2D-backto-gameengine.node._2D.TextureRect" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="42468,2250.642,42475,2230.642,42482,2250.642,42468,2250.642" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[fc9d0270c23b09707f595a743a08f34b]
reverse link gameengine.node._3D.Node3D to gameengine.node._3D.Grid3D--><g id="link_gameengine.node._3D.Node3D_gameengine.node._3D.Grid3D"><path codeLine="1870" d="M44280,2250.902 C44280,2403.142 44280,2668.282 44280,2852.752 " fill="none" id="gameengine.node._3D.Node3D-backto-gameengine.node._3D.Grid3D" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="44273,2250.642,44280,2230.642,44287,2250.642,44273,2250.642" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[9c789c839ea6122554738da61075f05b]
reverse link gameengine.node._3D.Node3D to gameengine.node._3D.StaticBody--><g id="link_gameengine.node._3D.Node3D_gameengine.node._3D.StaticBody"><path codeLine="1873" d="M44392.03,2245.232 C44530.59,2386.372 44770.19,2630.462 44950.6,2814.242 " fill="none" id="gameengine.node._3D.Node3D-backto-gameengine.node._3D.StaticBody" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="44386.73,2249.812,44377.71,2230.642,44396.72,2240.012,44386.73,2249.812" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[594fd83bbf35132381e03cc5570fee7f]
reverse link raylib.ex.RaylibException to raylib.ex.BuilderException--><g id="link_raylib.ex.RaylibException_raylib.ex.BuilderException"><path codeLine="1876" d="M15674.37,2191.542 C15505.71,2273.892 15216.4,2436.222 15040,2652.602 C14943.9,2770.482 14895.42,2951.062 14878.8,3024.422 " fill="none" id="raylib.ex.RaylibException-backto-raylib.ex.BuilderException" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="15671.51,2185.152,15692.56,2182.742,15677.61,2197.752,15671.51,2185.152" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[115b9455005e0d79b8b691f0cd2aab7b]
reverse link raylib.ex.RaylibException to raylib.ex.CameraException--><g id="link_raylib.ex.RaylibException_raylib.ex.CameraException"><path codeLine="1879" d="M15748.79,2197.822 C15665.63,2293.692 15512.72,2478.142 15408,2652.602 C15329.38,2783.572 15262.31,2953.922 15235.95,3024.392 " fill="none" id="raylib.ex.RaylibException-backto-raylib.ex.CameraException" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="15743.59,2193.132,15762.01,2182.652,15754.15,2202.322,15743.59,2193.132" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[a327c222be3f0fe40d077b3b42830860]
reverse link raylib.ex.RaylibException to raylib.ex.InvalidArgumentException--><g id="link_raylib.ex.RaylibException_raylib.ex.InvalidArgumentException"><path codeLine="1882" d="M15792.55,2202.622 C15752.03,2390.262 15643.79,2891.412 15615.07,3024.352 " fill="none" id="raylib.ex.RaylibException-backto-raylib.ex.InvalidArgumentException" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="15785.75,2200.942,15796.82,2182.872,15799.44,2203.902,15785.75,2200.942" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[14c21ddaeb1aacf60197128b294e0624]
reverse link raylib.ex.RaylibException to raylib.ex.RlAnimationException--><g id="link_raylib.ex.RaylibException_raylib.ex.RlAnimationException"><path codeLine="1885" d="M15823.45,2202.622 C15863.97,2390.262 15972.21,2891.412 16000.93,3024.352 " fill="none" id="raylib.ex.RaylibException-backto-raylib.ex.RlAnimationException" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="15816.56,2203.902,15819.18,2182.872,15830.25,2200.942,15816.56,2203.902" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[3823cd70abb37fd5477bd45146d1dc38]
reverse link raylib.ex.RaylibException to raylib.ex.RlModelException--><g id="link_raylib.ex.RaylibException_raylib.ex.RlModelException"><path codeLine="1888" d="M15867.11,2197.882 C15950.15,2293.822 16102.93,2478.362 16208,2652.602 C16287.03,2783.662 16355.08,2953.962 16381.85,3024.402 " fill="none" id="raylib.ex.RaylibException-backto-raylib.ex.RlModelException" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="15861.75,2202.382,15853.91,2182.692,15872.32,2193.192,15861.75,2202.382" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[a01b12088367bcf6f418a7df98aae60a]
reverse link raylib.ex.RaylibException to raylib.ex.WindowException--><g id="link_raylib.ex.RaylibException_raylib.ex.WindowException"><path codeLine="1891" d="M15942.2,2191.482 C16111.58,2273.772 16402.25,2436.032 16580,2652.602 C16676.66,2770.362 16726.05,2951.012 16743.03,3024.412 " fill="none" id="raylib.ex.RaylibException-backto-raylib.ex.WindowException" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="15938.91,2197.672,15923.92,2182.692,15944.98,2185.062,15938.91,2197.672" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[e6c569c248e57848de6a29a5700135eb]
reverse link raylib.audio.RlMusic to gameengine.audio.Music--><g id="link_raylib.audio.RlMusic_gameengine.audio.Music"><path codeLine="1894" d="M2945.02,1905.632 C2986.16,1785.352 3059.12,1647.312 3178,1575.602 C3205.54,1558.982 40203.94,1575.962 40235,1567.602 C40323.97,1543.642 40413.8,1484.472 40472.63,1443.662 " fill="none" id="raylib.audio.RlMusic-backto-gameengine.audio.Music" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="2951.62,1907.982,2938.69,1924.762,2938.32,1903.582,2951.62,1907.982" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[e6c569c248e57848de6a29a5700135eb]
reverse link raylib.audio.RlMusic to gameengine.audio.Music--><g id="link_raylib.audio.RlMusic_gameengine.audio.Music"><path codeLine="2040" d="M2973.17,1912.292 C3018.48,1790.482 3091.92,1648.642 3213,1575.602 C3240.54,1558.982 40238.94,1575.962 40270,1567.602 C40358.97,1543.642 40448.8,1484.472 40499,1443.662 " fill="none" id="raylib.audio.RlMusic-backto-gameengine.audio.Music-1" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="2968.6,1924.762,2974.4204,1920.5049,2972.7295,1913.4949,2966.9091,1917.7519,2968.6,1924.762" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[ac6b524096ed2551f8d852fb1ae4ec18]
reverse link raylib.audio.RlSound to gameengine.audio.Sound--><g id="link_raylib.audio.RlSound_gameengine.audio.Sound"><path codeLine="1897" d="M2398.79,1933.622 C2422.23,1808.612 2477.55,1655.432 2595,1575.602 C2800.26,1436.082 36759.34,1404.332 39799.9,1401.772 " fill="none" id="raylib.audio.RlSound-backto-gameengine.audio.Sound" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="2405.67,1934.952,2395.3,1953.432,2391.88,1932.522,2405.67,1934.952" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[ac6b524096ed2551f8d852fb1ae4ec18]
reverse link raylib.audio.RlSound to gameengine.audio.Sound--><g id="link_raylib.audio.RlSound_gameengine.audio.Sound"><path codeLine="2043" d="M2426.83,1940.542 C2455.2,1814.312 2510.38,1656.912 2630,1575.602 C2835.15,1436.152 36759.64,1404.362 39799.73,1401.782 " fill="none" id="raylib.audio.RlSound-backto-gameengine.audio.Sound-1" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="2424,1953.432,2429.1926,1948.4283,2426.571,1941.7106,2421.3784,1946.7143,2424,1953.432" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[0f429e97ed5dcff4967a66854bce5751]
reverse link gameengine.Scene to indie.ChooseNumberPlayerScene--><g id="link_gameengine.Scene_indie.ChooseNumberPlayerScene"><path codeLine="1900" d="M39755.6,901.892 C38253.6,900.072 31996.71,909.392 31172,1187.602 C29475.85,1759.782 29101.01,2204.432 27891,3523.602 C27767.98,3657.722 27669.99,3847.292 27617.1,3961.912 " fill="none" id="gameengine.Scene-backto-indie.ChooseNumberPlayerScene" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="39755.76,894.892,39775.75,901.912,39755.74,908.892,39755.76,894.892" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[a11e927e460526d9782fb8dda7b271db]
reverse link gameengine.Scene to indie.GameScene--><g id="link_gameengine.Scene_indie.GameScene"><path codeLine="1903" d="M39755.55,906.362 C38344.24,923.822 32761.87,1003.982 32000,1187.602 C31604.52,1282.922 31445.96,1275.792 31171,1575.602 C31019.99,1740.262 30658.22,3330.182 30479,3463.602 C30301.85,3595.482 29670.72,3401.052 29487,3523.602 C29350.89,3614.392 29282.73,3796.872 29250.42,3924.002 " fill="none" id="gameengine.Scene-backto-indie.GameScene" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="39755.69,899.362,39775.77,906.112,39755.86,913.362,39755.69,899.362" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[9c46b5a0144aaab1e6749b9cbd93421f]
reverse link gameengine.Scene to indie.MainMenuScene--><g id="link_gameengine.Scene_indie.MainMenuScene"><path codeLine="1906" d="M39755.5,906.442 C38592.28,921.802 34624.78,987.922 33373,1187.602 C32743.42,1288.032 32492.26,1180.372 31992,1575.602 C31131.46,2255.472 30736.37,3635.092 30648.39,3981.372 " fill="none" id="gameengine.Scene-backto-indie.MainMenuScene" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="39755.69,899.442,39775.78,906.172,39755.87,913.442,39755.69,899.442" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[f6807f6d38066e7b2c05799e01d75558]
reverse link gameengine.Scene to indie.StartScene--><g id="link_gameengine.Scene_indie.StartScene"><path codeLine="1909" d="M39755.47,907.862 C38574.48,931.212 34504,1048.982 33334,1575.602 C32229.46,2072.762 32049.26,2483.792 31428,3523.602 C31334.75,3679.672 31247.33,3874.182 31201.45,3981.372 " fill="none" id="gameengine.Scene-backto-indie.StartScene" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="39755.49,900.862,39775.62,907.472,39755.77,914.862,39755.49,900.862" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[9daa42c5728315ae1d4fb27cf7dfd02e]
reverse link gameengine.Scene to indie.WinningScene--><g id="link_gameengine.Scene_indie.WinningScene"><path codeLine="1912" d="M39755.42,920.312 C38571.88,1001.212 34419.76,1428.692 31971,3523.602 C31827.25,3646.582 31750.9,3864.102 31718.43,3981.352 " fill="none" id="gameengine.Scene-backto-indie.WinningScene" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="39755.18,913.312,39775.61,918.942,39756.13,927.282,39755.18,913.312" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[f0feca2c9bc42b2837d65d498c33e581]
reverse link gameengine.node._3D.StaticBody to indie.Bomb--><g id="link_gameengine.node._3D.StaticBody_indie.Bomb"><path codeLine="1915" d="M44953.64,3315.122 C44883.06,3375.352 44801.06,3431.352 44714,3463.602 C44526.92,3532.912 30529.71,3436.972 30350,3523.602 C30182.61,3604.292 30059.46,3784.742 29988.4,3914.422 " fill="none" id="gameengine.node._3D.StaticBody-backto-indie.Bomb" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="44949.3,3309.622,44968.99,3301.802,44958.48,3320.202,44949.3,3309.622" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[d2c5bf95a3ed93bc69b56b68dddbed8a]
reverse link gameengine.node._3D.StaticBody to indie.Bonus--><g id="link_gameengine.node._3D.StaticBody_indie.Bonus"><path codeLine="1918" d="M44953.57,3314.922 C44882.99,3375.152 44801,3431.202 44714,3463.602 C44508.87,3540.002 37032.41,3431.152 36834,3523.602 C36633.82,3616.882 36488.34,3844.682 36419.52,3971.922 " fill="none" id="gameengine.node._3D.StaticBody-backto-indie.Bonus" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="44949.23,3309.422,44968.92,3301.612,44958.4,3320.002,44949.23,3309.422" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[22c48f9a1ea617bbff10accfe3f21ef0]
reverse link gameengine.node._3D.StaticBody to gameengine.node._3D.KinematicBody--><g id="link_gameengine.node._3D.StaticBody_gameengine.node._3D.KinematicBody"><path codeLine="1921" d="M45075.68,3320.262 C44975.9,3550.222 44837.82,3868.442 44780.54,4000.442 " fill="none" id="gameengine.node._3D.StaticBody-backto-gameengine.node._3D.KinematicBody" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="45069.32,3317.342,45083.7,3301.782,45082.16,3322.912,45069.32,3317.342" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[a7ff0a7f7e9f55fa7c0336a4cea60a40]
reverse link gameengine.node._3D.StaticBody to indie.Magma--><g id="link_gameengine.node._3D.StaticBody_indie.Magma"><path codeLine="1924" d="M44953.59,3314.972 C44883.01,3375.202 44801.01,3431.232 44714,3463.602 C44484.91,3548.812 36136.98,3421.282 35915,3523.602 C35718.33,3614.252 35572.55,3832.912 35500.14,3961.842 " fill="none" id="gameengine.node._3D.StaticBody-backto-indie.Magma" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="44949.24,3309.472,44968.94,3301.652,44958.42,3320.042,44949.24,3309.472" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[3f54335a40f663dfe940195d51736ab8]
reverse link gameengine.node._3D.StaticBody to indie.Wall--><g id="link_gameengine.node._3D.StaticBody_indie.Wall"><path codeLine="1927" d="M44953.6,3315.012 C44883.02,3375.232 44801.02,3431.262 44714,3463.602 C44460.64,3557.752 35228.77,3408.962 34984,3523.602 C34756.56,3630.132 34601.72,3912.312 34549.48,4019.492 " fill="none" id="gameengine.node._3D.StaticBody-backto-indie.Wall" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="44949.26,3309.512,44968.95,3301.692,44958.43,3320.082,44949.26,3309.512" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[33dd1c75c2b3a28f362135606fe2d62e]
reverse link gameengine.node._3D.StaticBody to indie.WallDestroyable--><g id="link_gameengine.node._3D.StaticBody_indie.WallDestroyable"><path codeLine="1930" d="M44953.62,3315.072 C44883.04,3375.302 44801.04,3431.312 44714,3463.602 C44407.86,3577.182 33257.61,3391.482 32959,3523.602 C32727.37,3626.092 32556.45,3896.192 32492.52,4009.942 " fill="none" id="gameengine.node._3D.StaticBody-backto-indie.WallDestroyable" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="44949.28,3309.572,44968.97,3301.752,44958.46,3320.142,44949.28,3309.572" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[4d845a0e937b84b178f12328156c2d89]
reverse link gameengine.node._2D.TextureRect to indie.Image--><g id="link_gameengine.node._2D.TextureRect_indie.Image"><path codeLine="1933" d="M42189.55,3274.372 C42073.17,3349.522 41933.35,3424.752 41794,3463.602 C41587.48,3521.172 34262.96,3418.662 34076,3523.602 C33890.02,3628.002 33794.1,3883.132 33758.56,4000.592 " fill="none" id="gameengine.node._2D.TextureRect-backto-indie.Image" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="42185.97,3268.352,42206.55,3263.292,42193.62,3280.082,42185.97,3268.352" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[ffef4e9b0149ca898caf4002caedef00]
reverse link gameengine.AudioManager to gameengine.AbstractSound--><g id="link_gameengine.AudioManager_gameengine.AbstractSound"><path codeLine="1941" d="M41091.98,458.072 C41048.36,561.852 40991.31,697.602 40951.96,791.242 " fill="none" id="gameengine.AudioManager-backto-gameengine.AbstractSound" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="41097.09,445.892,41091.0802,449.8773,41092.4475,456.9576,41098.4573,452.9723,41097.09,445.892" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[4f8ff6c56a00a2ebaf4f30ad0f2dca72]
reverse link gameengine.AudioManager to gameengine.AudioManager--><g id="link_gameengine.AudioManager_gameengine.AudioManager"><path codeLine="1944" d="M41463.11,234.232 C41479.07,252.222 41488.5,276.512 41488.5,307.102 C41488.5,343.352 41475.25,370.762 41453.6,389.312 " fill="none" id="gameengine.AudioManager-backto-gameengine.AudioManager" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="41453.6,224.892,41455.0746,231.9507,41462.1575,233.3044,41460.6829,226.2457,41453.6,224.892" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[33acfe003de511b3e4aa804c780f2127]
reverse link indie.Bomb to gameengine.AudioManager--><g id="link_indie.Bomb_gameengine.AudioManager"><path codeLine="1947" d="M29919.53,3901.462 C29922.55,3570.702 29929,2788.042 29929,2131.102 C29929,1399.602 29929,1399.602 29929,1399.602 C29929,1017.382 29987.65,831.812 30312,629.602 C30436.07,552.252 40701.58,619.532 40839,569.602 C40909.94,543.822 40976.32,494.562 41029.74,445.682 " fill="none" id="indie.Bomb-backto-gameengine.AudioManager" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="29919.41,3914.472,29923.4691,3908.5118,29919.5287,3902.4726,29915.4695,3908.4327,29919.41,3914.472" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[4034b545120c1fc7df3ce9005c17745a]
reverse link gameengine.node._2D.Button to raylib.texture.RlTexture--><g id="link_gameengine.node._2D.Button_raylib.texture.RlTexture"><path codeLine="1950" d="M43267.71,3386.942 C43233.89,3417.672 43196.57,3444.442 43156,3463.602 C42962.25,3555.112 12482.58,3411.452 12300,3523.602 C12187.91,3592.452 12119.87,3723.092 12079.63,3838.402 " fill="none" id="gameengine.node._2D.Button-backto-raylib.texture.RlTexture" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="43277.63,3377.732,43270.512,3378.8868,43268.8402,3385.9014,43275.9583,3384.7466,43277.63,3377.732" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[9cd0cacf96a987184ff27b7ff90f86c2]
reverse link indie.ChooseNumberPlayerScene to indie.map.Map3DLoader--><g id="link_indie.ChooseNumberPlayerScene_indie.map.Map3DLoader"><path codeLine="1953" d="M27613.73,4175.792 C27662.43,4299.592 27755.53,4498.142 27891,4625.602 C27911.39,4644.782 27933.53,4662.762 27956.8,4679.582 " fill="none" id="indie.ChooseNumberPlayerScene-backto-indie.map.Map3DLoader" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="27608.87,4163.312,27607.3183,4170.3541,27613.2219,4174.495,27614.7736,4167.4529,27608.87,4163.312" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[d3063647c5379db3f56ddb79c42bf0c3]
reverse link indie.GameScene to indie.map.Map--><g id="link_indie.GameScene_indie.map.Map"><path codeLine="1956" d="M29269.47,4213.942 C29323.85,4426.212 29386.52,4816.212 29205,5070.602 C29161.42,5131.672 29103.24,5179.592 29038.25,5217.202 " fill="none" id="indie.GameScene-backto-indie.map.Map" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="29266.15,4201.152,29263.79,4207.966,29269.1721,4212.7652,29271.5321,4205.9512,29266.15,4201.152" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[d76b5169788524fba0b7b170a070bd89]
reverse link indie.GameScene to indie.map.Map3DLoader--><g id="link_indie.GameScene_indie.map.Map3DLoader"><path codeLine="1959" d="M29185.97,4213.852 C29147.7,4338.202 29077.5,4512.232 28962,4625.602 C28942.36,4644.882 28920.97,4662.802 28898.38,4679.442 " fill="none" id="indie.GameScene-backto-indie.map.Map3DLoader" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="29189.8,4201.222,29184.2316,4205.8037,29186.3192,4212.7061,29191.8876,4208.1243,29189.8,4201.222" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[ab9d4faebfa86e33edaeeba136f0116b]
reverse link indie.GameScene to gameengine.TextureManager--><g id="link_indie.GameScene_gameengine.TextureManager"><path codeLine="1962" d="M29296.9,3911.862 C29349.56,3803.862 29422.47,3654.622 29487,3523.602 C29792.27,2903.802 30178,2822.002 30178,2131.102 C30178,1399.602 30178,1399.602 30178,1399.602 C30178,1052.232 30046.83,853.992 30312,629.602 C30416.54,541.142 40043.01,615.602 40172,569.602 C40263.06,537.122 40347.41,467.202 40407.21,407.832 " fill="none" id="indie.GameScene-backto-gameengine.TextureManager" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="29291.07,3923.832,29297.2955,3920.1929,29296.3308,3913.0466,29290.1053,3916.6857,29291.07,3923.832" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[56b087b918e3a0113020308a48ac35e4]
reverse link indie.GlobalInstance to indie.GlobalInstance--><g id="link_indie.GlobalInstance_indie.GlobalInstance"><path codeLine="1965" d="M33240.75,3952.052 C33318.19,3871.132 33408.5,3907.982 33408.5,4062.602 C33408.5,4223.182 33311.1,4256.732 33231.86,4163.272 " fill="none" id="indie.GlobalInstance-backto-indie.GlobalInstance" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="33231.86,3961.932,33238.8478,3960.1515,33239.8919,3953.0164,33232.9041,3954.7969,33231.86,3961.932" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[b513b579c61d278e7d28da0b62466136]
reverse link gameengine.node._3D.Grid3D to raylib.RlColor--><g id="link_gameengine.node._3D.Grid3D_raylib.RlColor"><path codeLine="1968" d="M44100.65,3272.512 C44023.84,3347.912 43927.69,3423.812 43823,3463.602 C43625.05,3538.842 13513.75,3420.112 13329,3523.602 C13317.16,3530.232 13305.69,3537.482 13294.59,3545.272 " fill="none" id="gameengine.node._3D.Grid3D-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="44109.92,3263.322,44102.8413,3264.6977,44101.3887,3271.761,44108.4673,3270.3853,44109.92,3263.322" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[bcb094d5872e2326896a5cc253462183]
reverse link gameengine.node._2D.Label to raylib.RlColor--><g id="link_gameengine.node._2D.Label_raylib.RlColor"><path codeLine="1971" d="M40874.13,3076.302 C39112.27,3141.612 32600.79,3375.052 27235,3463.602 C27138.44,3465.192 13413.2,3476.312 13329,3523.602 C13317.17,3530.252 13305.71,3537.512 13294.61,3545.312 " fill="none" id="gameengine.node._2D.Label-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="40887.3,3075.812,40881.1548,3072.0388,40875.3084,3076.26,40881.4535,3080.0332,40887.3,3075.812" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[ac4767bedf396fdc2e258298691feedd]
reverse link gameengine.node._2D.Label to raylib.text.RlText--><g id="link_gameengine.node._2D.Label_raylib.text.RlText"><path codeLine="1974" d="M40873.81,3011.672 C39918.83,2917.502 37645.18,2706.852 35731.5,2634.602 C35658.61,2631.852 14791.56,2608.362 14723.5,2634.602 C14655.81,2660.702 14591.84,2701.662 14534.2,2748.032 " fill="none" id="gameengine.node._2D.Label-backto-raylib.text.RlText" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="40887.08,3012.982,40881.5048,3008.4085,40875.1388,3011.7958,40880.714,3016.3693,40887.08,3012.982" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[8bccffad38da322776e80baa5467d8a6]
reverse link indie.map.Map to gameengine.map.MapParser--><g id="link_indie.map.Map_gameengine.map.MapParser"><path codeLine="1977" d="M29051.26,5352.882 C30836.62,5347.822 36135.14,5311.942 40526,5070.602 C43338.74,4916.002 45997,5363.452 45997,4063.602 C45997,1399.602 45997,1399.602 45997,1399.602 C45997,1058.522 45801.28,702.612 45662.71,493.382 " fill="none" id="indie.map.Map-backto-gameengine.map.MapParser" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="29038.22,5352.912,29044.2288,5356.8988,29050.22,5352.8856,29044.2112,5348.8988,29038.22,5352.912" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[77eec51168f0067f922a7ae290bd3d77]
reverse link indie.map.Map to gameengine.node._3D.StaticBody--><g id="link_indie.map.Map_gameengine.node._3D.StaticBody"><path codeLine="1980" d="M29051.43,5348.972 C31261.37,5331.002 38663.76,5257.352 39712,5070.602 C41816.04,4695.752 42184.2,4011.222 44265,3523.602 C44461.02,3477.662 44530.1,3545.532 44714,3463.602 C44801.69,3424.532 44885.59,3364.042 44957.82,3301.632 " fill="none" id="indie.map.Map-backto-gameengine.node._3D.StaticBody" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="29038.12,5349.082,29044.1506,5353.0357,29050.1196,5348.9897,29044.0891,5345.0359,29038.12,5349.082" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[abdb68f330aa9da1e6256dc5f7f47d18]
reverse link indie.map.Map3DLoader to indie.map.Map--><g id="link_indie.map.Map3DLoader_indie.map.Map"><path codeLine="1983" d="M28414.17,5083.672 C28415.08,5099.212 28416.01,5114.942 28416.92,5130.572 " fill="none" id="indie.map.Map3DLoader-backto-indie.map.Map" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="28413.41,5070.662,28409.7733,5076.8889,28414.1224,5082.6408,28417.7591,5076.4139,28413.41,5070.662" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="7" x="28406.719" y="5092.5395">2</text></g><!--MD5=[396df10f3b94914fdb1e67e3361cc014]
reverse link indie.map.Map3DLoader to indie.map.Map3DLoader--><g id="link_indie.map.Map3DLoader_indie.map.Map3DLoader"><path codeLine="1986" d="M29030.17,4831.892 C29045.46,4843.942 29054,4858.352 29054,4875.102 C29054,4895.522 29041.31,4912.452 29019.17,4925.902 " fill="none" id="indie.map.Map3DLoader-backto-indie.map.Map3DLoader" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="29019.17,4824.302,29021.8417,4830.9999,29029.052,4831.1098,29026.3803,4824.4119,29019.17,4824.302" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[c7f4c135eedc03e29dbbb514deedde2c]
reverse link indie.map.Map3DLoader to indie.map.Map::MapType--><g id="link_indie.map.Map3DLoader_indie.map.Map::MapType"><path codeLine="1989" d="M27845.07,5080.312 C27830.35,5095.872 27816.9,5112.602 27805,5130.602 C27695.23,5296.722 27698.69,5410.242 27805,5578.602 C27863.98,5672.012 27994.28,5711.852 28073.88,5727.972 " fill="none" id="indie.map.Map3DLoader-backto-indie.map.Map::MapType" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="27854.39,5070.782,27847.3336,5072.2675,27845.9909,5079.3525,27853.0473,5077.867,27854.39,5070.782" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[882cfb82ee2958fc857e04bea259f5d7]
reverse link indie.map.Map3DLoader to gameengine.TextureManager--><g id="link_indie.map.Map3DLoader_gameengine.TextureManager"><path codeLine="1992" d="M27771.71,4872.532 C24066.88,4862.672 5244.87,4803.962 4038,4625.602 C2136.16,4344.532 6,4981.602 6,3059.102 C6,1399.602 6,1399.602 6,1399.602 C6,759.162 599.82,772.982 1224,629.602 C1487.61,569.052 39917.04,659.872 40172,569.602 C40263.31,537.272 40347.8,467.142 40407.59,407.642 " fill="none" id="indie.map.Map3DLoader-backto-gameengine.TextureManager" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="27784.89,4872.562,27778.8988,4868.5488,27772.89,4872.5356,27778.8812,4876.5488,27784.89,4872.562" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[db9ce9bbe86303cf5e611eb04d7b3146]
reverse link indie.Player to gameengine.AudioManager--><g id="link_indie.Player_gameengine.AudioManager"><path codeLine="1995" d="M28704.96,3781.192 C29235.61,3247.612 30338,2138.262 30338,2131.102 C30338,1399.602 30338,1399.602 30338,1399.602 C30338,349.332 38710.63,692.782 39759,629.602 C39998.93,615.142 40615.19,657.282 40839,569.602 C40908.29,542.452 40973.66,493.902 41026.77,445.932 " fill="none" id="indie.Player-backto-gameengine.AudioManager" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="28695.63,3790.562,28702.6966,3789.1258,28704.0888,3782.0503,28697.0222,3783.4865,28695.63,3790.562" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[dda91b73523c5d5d5c9116e958632b97]
reverse link indie.Player to raylib.model.RlModelAnimation--><g id="link_indie.Player_raylib.model.RlModelAnimation"><path codeLine="1998" d="M28285.53,3778.842 C28098.76,3438.712 27733.34,2884.562 27235,2652.602 C27132.86,2605.062 11108.96,2673.972 11012,2616.602 C10885.75,2541.892 10814.84,2384.112 10778.13,2268.622 " fill="none" id="indie.Player-backto-raylib.model.RlModelAnimation" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="28291.82,3790.352,28292.4465,3783.1681,28286.0562,3779.8268,28285.4297,3787.0107,28291.82,3790.352" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[e25de8fbc6aed9e780432216345e9143]
reverse link indie.Player to gameengine.TextureManager--><g id="link_indie.Player_gameengine.TextureManager"><path codeLine="2001" d="M28631.99,3780.522 C28721.33,3680.892 28834.73,3579.682 28962,3523.602 C29104.68,3460.732 30252.44,3572.532 30364,3463.602 C30470.17,3359.942 30453,2279.492 30453,2131.102 C30453,1399.602 30453,1399.602 30453,1399.602 C30453,1066.442 30844.09,1246.472 31172,1187.602 C31418.65,1143.322 39938.72,661.112 40172,569.602 C40261,534.692 40344.51,466.062 40404.45,407.872 " fill="none" id="indie.Player-backto-gameengine.TextureManager" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="28623.14,3790.462,28630.1152,3788.6324,28631.1091,3781.4902,28624.1339,3783.3197,28623.14,3790.462" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[0e68716fec8e55287775e0a66cb42a9e]
reverse link raylib.model.RlAnimation to raylib.model.RlModel--><g id="link_raylib.model.RlAnimation_raylib.model.RlModel"><path codeLine="2004" d="M9925.63,2261.772 C9972.06,2367.972 10049.48,2516.142 10154,2616.602 C10261.79,2720.212 10398.78,2805.662 10530.79,2872.832 " fill="none" id="raylib.model.RlAnimation-backto-raylib.model.RlModel" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="9920.4,2249.682,9919.1135,2256.7774,9925.1683,2260.6939,9926.4548,2253.5985,9920.4,2249.682" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[94e509f36c49741c8429a003012c323d]
reverse link raylib.RlColor to raylib.RlColor--><g id="link_raylib.RlColor_raylib.RlColor"><path codeLine="2007" d="M13302.5,3960.332 C13319.42,3985.172 13329.5,4019.262 13329.5,4062.602 C13329.5,4112.362 13316.22,4149.922 13294.55,4175.292 " fill="none" id="raylib.RlColor-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="13294.55,3949.912,13295.0117,3957.1083,13301.8321,3959.4499,13301.3703,3952.2536,13294.55,3949.912" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="14" x="13302.613" y="3943.6037">26</text></g><!--MD5=[ed5b00a8e656b0e0b01cc81ce345bf09]
reverse link raylib.image.RlImage to indie.Image--><g id="link_raylib.image.RlImage_indie.Image"><path codeLine="2010" d="M7158.4,3664.742 C7206.49,3596.132 7265.98,3533.982 7338.5,3493.602 C7378.02,3471.602 33352.01,3471.542 33391.5,3493.602 C33589.28,3604.062 33689.25,3877.022 33725.57,4000.342 " fill="none" id="raylib.image.RlImage-backto-indie.Image" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="7150.78,3675.812,7157.4762,3673.1361,7157.5817,3665.9258,7150.8855,3668.6017,7150.78,3675.812" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[2aea7884344b5a8b69e7a6974e4a1ba5]
reverse link raylib.builder.RlImageBuilder to raylib.RlColor--><g id="link_raylib.builder.RlImageBuilder_raylib.RlColor"><path codeLine="2013" d="M4926.32,3444.002 C4935.13,3451.082 4944.35,3457.652 4954,3463.602 C5136.73,3576.332 12497.15,3416.092 12683,3523.602 C12689.21,3527.192 12695.3,3530.962 12701.29,3534.882 " fill="none" id="raylib.builder.RlImageBuilder-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="4916.17,3435.462,4918.1835,3442.3863,4925.3496,3443.1908,4923.3361,3436.2665,4916.17,3435.462" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="7" x="4912.0175" y="3456.0012">9</text></g><!--MD5=[18d5b75976bea932094b369bd40bf7e6]
reverse link raylib.builder.RlMeshBuilder to raylib.image.RlImage--><g id="link_raylib.builder.RlMeshBuilder_raylib.image.RlImage"><path codeLine="2016" d="M5455.2,3452.482 C5461.02,3456.382 5466.95,3460.092 5473,3463.602 C5695.5,3592.682 6405.56,3396.142 6629,3523.602 C6694.36,3560.882 6749.99,3615.602 6796.49,3676.052 " fill="none" id="raylib.builder.RlMeshBuilder-backto-raylib.image.RlImage" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="5444.16,3444.752,5446.7828,3451.4692,5453.992,3451.6318,5451.3693,3444.9145,5444.16,3444.752" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="7" x="5441.7843" y="3466.6869">2</text></g><!--MD5=[0a5713b2123f1aef42fd75e7d56f2741]
reverse link raylib.model.RlModel to raylib.RlColor--><g id="link_raylib.model.RlModel_raylib.RlColor"><path codeLine="2019" d="M11474.52,3093.922 C11838.02,3141.742 12333.36,3255.092 12683,3523.602 C12689.22,3528.382 12695.35,3533.322 12701.37,3538.412 " fill="none" id="raylib.model.RlModel-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="11461.38,3092.212,11466.8156,3096.9506,11473.2803,3093.7556,11467.8447,3089.017,11461.38,3092.212" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[6e61694ada5f7b377b2a04e6d0050a95]
reverse link raylib.model.RlModel to raylib.model.RlMesh--><g id="link_raylib.model.RlModel_raylib.model.RlMesh"><path codeLine="2022" d="M10719.82,3474.822 C10616.1,3630.952 10504.81,3798.472 10427.8,3914.392 " fill="none" id="raylib.model.RlModel-backto-raylib.model.RlMesh" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="10727.27,3463.602,10720.617,3466.3836,10720.6258,3473.5947,10727.2788,3470.8131,10727.27,3463.602" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[6d3a69bf269c6dd2a9b07014e99cd672]
reverse link raylib.model.RlModel to raylib.texture.RlTexture--><g id="link_raylib.model.RlModel_raylib.texture.RlTexture"><path codeLine="2025" d="M11472.18,3310.792 C11564.34,3372.642 11655.34,3444.222 11730,3523.602 C11815.46,3614.462 11884.63,3734.642 11934.55,3838.372 " fill="none" id="raylib.model.RlModel-backto-raylib.texture.RlTexture" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="11461.23,3303.492,11464.0015,3310.1492,11471.2126,3310.1514,11468.4411,3303.4942,11461.23,3303.492" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[ec28c162e5742837632851302674e5bf]
reverse link raylib.model.RlModelAnimation to raylib.model.RlModel--><g id="link_raylib.model.RlModelAnimation_raylib.model.RlModel"><path codeLine="2028" d="M10784.92,2281.482 C10812.41,2382.462 10850.02,2520.682 10885.89,2652.482 " fill="none" id="raylib.model.RlModelAnimation-backto-raylib.model.RlModel" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="10781.45,2268.732,10779.1664,2275.5719,10784.6018,2280.3107,10786.8855,2273.4707,10781.45,2268.732" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[e0cd7eacbaccde8075ff1cf86a625f6d]
reverse link raylib.builder.RlModelBuilder to raylib.RlColor--><g id="link_raylib.builder.RlModelBuilder_raylib.RlColor"><path codeLine="2031" d="M5933.23,3340.622 C5974.27,3390.132 6023.24,3434.932 6080,3463.602 C6243.73,3546.292 12524.29,3431.652 12683,3523.602 C12689.2,3527.192 12695.3,3530.962 12701.28,3534.902 " fill="none" id="raylib.builder.RlModelBuilder-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="5924.86,3330.322,5925.5414,3337.5008,5932.4301,3339.6329,5931.7487,3332.4541,5924.86,3330.322" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[648009d80fb89ff006a8059256b92732]
reverse link raylib.builder.RlModelBuilder to raylib.model.RlMesh--><g id="link_raylib.builder.RlModelBuilder_raylib.model.RlMesh"><path codeLine="2034" d="M5933.61,3340.512 C5974.6,3389.952 6023.45,3434.752 6080,3463.602 C6252.89,3551.802 9388.62,3463.002 9573,3523.602 C9811.38,3601.942 10039.68,3783.852 10182.07,3914.462 " fill="none" id="raylib.builder.RlModelBuilder-backto-raylib.model.RlMesh" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="5925.25,3330.222,5925.9314,3337.4008,5932.8201,3339.5329,5932.1387,3332.3541,5925.25,3330.222" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[af77de4b726126c5135dfd8c8b98988e]
reverse link raylib.builder.RlModelBuilder to raylib.texture.RlTexture--><g id="link_raylib.builder.RlModelBuilder_raylib.texture.RlTexture"><path codeLine="2037" d="M5933.26,3340.552 C5974.3,3390.072 6023.26,3434.892 6080,3463.602 C6360.09,3605.332 11460.63,3362.422 11730,3523.602 C11844.81,3592.302 11918.19,3722.942 11963.17,3838.272 " fill="none" id="raylib.builder.RlModelBuilder-backto-raylib.texture.RlTexture" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="5924.89,3330.262,5925.5714,3337.4408,5932.4601,3339.5729,5931.7787,3332.3941,5924.89,3330.262" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[a34d1202787e2d26bdf3dc801bdfd7a0]
reverse link raylib.text.RlText to raylib.RlColor--><g id="link_raylib.text.RlText_raylib.RlColor"><path codeLine="2046" d="M13966.56,3376.502 C13923.13,3410.452 13876.53,3440.852 13828,3463.602 C13625.75,3558.432 13517.13,3403.162 13329,3523.602 C13317.22,3531.142 13305.8,3539.262 13294.72,3547.892 " fill="none" id="raylib.text.RlText-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="13976.94,3368.262,13969.7537,3368.8596,13967.5413,3375.7229,13974.7276,3375.1253,13976.94,3368.262" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[f3c9dbf6e404129b748a032c0ab73af3]
reverse link raylib.text.RlText to raylib.text.RlFont--><g id="link_raylib.text.RlText_raylib.text.RlFont"><path codeLine="2049" d="M14175.67,3381.232 C14131.98,3556.432 14079.9,3765.262 14045.07,3904.932 " fill="none" id="raylib.text.RlText-backto-raylib.text.RlFont" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="14178.87,3368.412,14173.5381,3373.267,14175.9689,3380.056,14181.3008,3375.201,14178.87,3368.412" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[d0584c6d35f7901126ceaca0c87e3266]
reverse link raylib.builder.RlTextBuilder to raylib.RlColor--><g id="link_raylib.builder.RlTextBuilder_raylib.RlColor"><path codeLine="2052" d="M6625.52,3102.592 C7180.71,3189.692 8489.78,3383.982 9597,3463.602 C9768.04,3475.902 12535.07,3436.872 12683,3523.602 C12689.19,3527.232 12695.26,3531.032 12701.23,3534.992 " fill="none" id="raylib.builder.RlTextBuilder-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="6612.55,3100.552,6617.8524,3105.4391,6624.403,3102.4242,6619.1006,3097.5371,6612.55,3100.552" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[f6e2a15b6aaa1e142560f2787a529a30]
reverse link raylib.builder.RlTextBuilder to raylib.text.RlFont--><g id="link_raylib.builder.RlTextBuilder_raylib.text.RlFont"><path codeLine="2055" d="M6625.49,3102.982 C7180.63,3190.782 8489.61,3386.302 9597,3463.602 C9814.99,3478.822 13331.45,3432.332 13530,3523.602 C13701.53,3602.452 13836.64,3776.162 13918.42,3904.982 " fill="none" id="raylib.builder.RlTextBuilder-backto-raylib.text.RlFont" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="6612.52,3100.922,6617.8224,3105.8091,6624.373,3102.7942,6619.0706,3097.9071,6612.52,3100.922" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[2d1902020d1429030924ed8291c86121]
reverse link raylib.window.RlWindow to raylib.RlCamera--><g id="link_raylib.window.RlWindow_raylib.RlCamera"><path codeLine="2058" d="M26759.23,2605.142 C26738.08,2667.142 26717.01,2728.872 26697.55,2785.882 " fill="none" id="raylib.window.RlWindow-backto-raylib.RlCamera" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="26763.46,2592.742,26757.7357,2597.1275,26759.5823,2604.0982,26765.3065,2599.7127,26763.46,2592.742" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[de5fa45ff9b5ccdec6fe053e1f6eb009]
reverse link raylib.window.RlWindow to raylib.window.RlWindow--><g id="link_raylib.window.RlWindow_raylib.window.RlWindow"><path codeLine="2061" d="M27185.46,2034.362 C27202.02,2056.912 27212,2088.832 27212,2130.102 C27212,2177.912 27198.61,2213.162 27177.11,2235.852 " fill="none" id="raylib.window.RlWindow-backto-raylib.window.RlWindow" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="27177.11,2024.352,27177.8752,2031.5224,27184.7883,2033.5739,27184.0231,2026.4035,27177.11,2024.352" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[192215c8eeef0781d64af3337cbb700e]
reverse link gameengine.Scene to gameengine.node.AbstractBase--><g id="link_gameengine.Scene_gameengine.node.AbstractBase"><path codeLine="2064" d="M40394.05,1077.292 C40474.96,1115.132 40563.39,1150.642 40649,1173.602 C40723.93,1193.702 40745.84,1179.552 40823,1187.602 C41378.06,1245.512 42035.15,1336.602 42324.94,1377.922 " fill="none" id="gameengine.Scene-backto-gameengine.node.AbstractBase" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="40382.17,1071.692,40385.8914,1077.8687,40393.0242,1076.8092,40389.3028,1070.6325,40382.17,1071.692" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[519e6d30487e81531be5af59eba60ce9]
reverse link gameengine.SceneManager to gameengine.Scene--><g id="link_gameengine.SceneManager_gameengine.Scene"><path codeLine="2067" d="M41494.91,567.202 C41492.94,568.022 41490.97,568.822 41489,569.602 C41141.06,707.552 41010.94,534.262 40649,629.602 C40559.07,653.292 40466.11,691.062 40382.03,730.972 " fill="none" id="gameengine.SceneManager-backto-gameengine.Scene" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="41506.96,561.992,41499.8653,560.7014,41495.9453,566.754,41503.04,568.0446,41506.96,561.992" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[4eac60ab9997476953a47de8a7a24ed2]
reverse link gameengine.SceneManager to gameengine.SceneManager--><g id="link_gameengine.SceneManager_gameengine.SceneManager"><path codeLine="2070" d="M42122.66,234.672 C42138.59,252.612 42148,276.752 42148,307.102 C42148,343.062 42134.78,370.322 42113.15,388.862 " fill="none" id="gameengine.SceneManager-backto-gameengine.SceneManager" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="42113.15,225.342,42114.6246,232.4007,42121.7075,233.7544,42120.2329,226.6957,42113.15,225.342" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[77f7a23a51bfdb6a6818a6ac98a2b8ab]
reverse link gameengine.node._3D.StaticBody to raylib.model.RlModel--><g id="link_gameengine.node._3D.StaticBody_raylib.model.RlModel"><path codeLine="2073" d="M44963.32,2805.532 C44886.28,2736.622 44794.6,2670.982 44696.5,2634.602 C44645.47,2615.682 13400.71,2629.762 13346.5,2634.602 C12685.83,2693.642 11933.03,2844.262 11461.22,2948.952 " fill="none" id="gameengine.node._3D.StaticBody-backto-raylib.model.RlModel" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="44973.12,2814.382,44971.3504,2807.3914,44964.2169,2806.3362,44965.9865,2813.3268,44973.12,2814.382" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[e75aac9b76738854d9bc9c7ee99916f4]
reverse link gameengine.TextureManager to raylib.texture.RlTexture--><g id="link_gameengine.TextureManager_raylib.texture.RlTexture"><path codeLine="2076" d="M40397.91,416.962 C40338.83,474.222 40258.44,538.782 40172,569.602 C40038.05,617.352 30075.19,627.352 29933,629.602 C29103.49,642.732 77,569.992 77,1399.602 C77,1399.602 77,1399.602 77,2131.102 C77,2279.212 8.09,3360.062 114,3463.602 C229.36,3576.392 11591.33,3441.142 11730,3523.602 C11845.11,3592.052 11918.52,3722.882 11963.45,3838.382 " fill="none" id="gameengine.TextureManager-backto-raylib.texture.RlTexture" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="40407.21,407.832,40400.1261,409.1803,40398.646,416.2378,40405.73,414.8896,40407.21,407.832" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="7" x="40394.0093" y="429.1069">2</text></g><!--MD5=[aea91b6ae4533d03eb4e1343dc191be8]
reverse link gameengine.TextureManager to gameengine.TextureManager--><g id="link_gameengine.TextureManager_gameengine.TextureManager"><path codeLine="2079" d="M40653.35,202.922 C40748.33,179.252 40838,213.972 40838,307.102 C40838,404.412 40740.1,437.952 40640.53,407.732 " fill="none" id="gameengine.TextureManager-backto-gameengine.TextureManager" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="40640.53,206.472,40647.3778,208.7319,40652.0977,203.28,40645.2498,201.0201,40640.53,206.472" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[2ed21616f6b9d18082431be3ab2a2540]
reverse link gameengine.node._2D.TextureRect to raylib.RlColor--><g id="link_gameengine.node._2D.TextureRect_raylib.RlColor"><path codeLine="2082" d="M42196.52,3270.342 C42078.82,3347.012 41936.21,3424.392 41794,3463.602 C41603.44,3516.142 13501.45,3426.982 13329,3523.602 C13317.16,3530.232 13305.69,3537.482 13294.59,3545.272 " fill="none" id="gameengine.node._2D.TextureRect-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="42207.47,3263.162,42200.2591,3263.107,42197.435,3269.7421,42204.6459,3269.7971,42207.47,3263.162" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[5e84c891982318c5ae472fd3c54b88f6]
reverse link gameengine.node._2D.TextureRect to raylib.texture.RlTexture--><g id="link_gameengine.node._2D.TextureRect_raylib.texture.RlTexture"><path codeLine="2085" d="M42196.52,3270.342 C42078.82,3347.022 41936.21,3424.392 41794,3463.602 C41596.55,3518.042 12474.52,3416.392 12300,3523.602 C12187.91,3592.462 12119.87,3723.102 12079.63,3838.402 " fill="none" id="gameengine.node._2D.TextureRect-backto-raylib.texture.RlTexture" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="42207.47,3263.162,42200.2592,3263.1004,42197.4289,3269.7329,42204.6398,3269.7945,42207.47,3263.162" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[77e424d20c4197807b4eea48b66a231c]
reverse link gameengine.AbstractSound to gameengine.AbstractSound::SoundCategory--><g id="link_gameengine.AbstractSound_gameengine.AbstractSound::SoundCategory"><path codeLine="2094" d="M41161.28,939.682 C41606.21,1002.322 42553.16,1126.832 43358,1173.602 C43390.28,1175.482 45657.65,1172.052 45686,1187.602 C45751.9,1223.732 45790.99,1306.602 45809.61,1357.372 " fill="none" id="gameengine.AbstractSound-backto-gameengine.AbstractSound::SoundCategory" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="41154.2311" cy="938.6927" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="41162.1522" x2="41146.31" y1="939.8134" y2="937.572"/><line style="stroke:#181818;stroke-width:1.0;" x1="41153.1104" x2="41155.3518" y1="946.6138" y2="930.7716"/></g><!--MD5=[f3aa5185b3482cbe19cc927245cbaf32]
reverse link indie.Bonus to indie.Bonus::BonusType--><g id="link_indie.Bonus_indie.Bonus::BonusType"><path codeLine="2097" d="M36375,4168.512 C36375,4340.052 36375,4675.232 36375,4812.872 " fill="none" id="indie.Bonus-backto-indie.Bonus::BonusType" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="36375" cy="4161.432" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="36375" x2="36375" y1="4169.432" y2="4153.432"/><line style="stroke:#181818;stroke-width:1.0;" x1="36367" x2="36383" y1="4161.432" y2="4161.432"/></g><!--MD5=[40d352deeea1f0b3e72545b448d17210]
reverse link indie.map.Map to indie.map.Map::MapType--><g id="link_indie.map.Map_indie.map.Map::MapType"><path codeLine="2100" d="M28251.68,5590.802 C28235.69,5611.892 28220.27,5632.222 28206.26,5650.702 " fill="none" id="indie.map.Map-backto-indie.map.Map::MapType" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="28256.0596" cy="5585.0391" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="28251.2292" x2="28260.89" y1="5591.4161" y2="5578.662"/><line style="stroke:#181818;stroke-width:1.0;" x1="28249.6825" x2="28262.4366" y1="5580.2086" y2="5589.8695"/></g><!--MD5=[476f2cc1ea555deea5b64f5f3802f86f]
reverse link indie.Player to indie.Player::State--><g id="link_indie.Player_indie.Player::State"><path codeLine="2103" d="M28624.54,4346.512 C28714.71,4452.532 28830.67,4562.502 28962,4625.602 C28980.5,4634.492 29037.99,4620.762 29054,4633.602 C29104.57,4674.132 29122.07,4748.182 29127.83,4803.452 " fill="none" id="indie.Player-backto-indie.Player::State" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="28619.9466" cy="4341.0583" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="28625.1032" x2="28614.79" y1="4347.1746" y2="4334.942"/><line style="stroke:#181818;stroke-width:1.0;" x1="28613.8303" x2="28626.0629" y1="4346.2149" y2="4335.9017"/></g><!--MD5=[87e56c4211670b48ac015ac7c0732ee1]
reverse link raylib.builder.RlImageBuilder to raylib.builder.RlImageBuilder::ImageType--><g id="link_raylib.builder.RlImageBuilder_raylib.builder.RlImageBuilder::ImageType"><path codeLine="2106" d="M4645.42,3450.072 C4639.14,3474.942 4632.95,3499.612 4627,3523.602 C4587.93,3681.082 4544.66,3865.102 4519.76,3971.992 " fill="none" id="raylib.builder.RlImageBuilder-backto-raylib.builder.RlImageBuilder::ImageType" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="4647.1646" cy="3443.1668" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="4645.1993" x2="4649.13" y1="3450.9216" y2="3435.412"/><line style="stroke:#181818;stroke-width:1.0;" x1="4639.4098" x2="4654.9195" y1="3441.2014" y2="3445.1322"/></g><!--MD5=[619ea495583f73875fb05cbb74c96711]
reverse link raylib.builder.RlImageBuilder to raylib.builder.RlImageBuilder::ParameterName--><g id="link_raylib.builder.RlImageBuilder_raylib.builder.RlImageBuilder::ParameterName"><path codeLine="2109" d="M4756.75,3450.242 C4760.51,3600.852 4764.61,3765.402 4767.62,3885.822 " fill="none" id="raylib.builder.RlImageBuilder-backto-raylib.builder.RlImageBuilder::ParameterName" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="4756.5782" cy="3443.2495" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="4756.7764" x2="4756.38" y1="3451.2471" y2="3435.252"/><line style="stroke:#181818;stroke-width:1.0;" x1="4748.5807" x2="4764.5758" y1="3443.4477" y2="3443.0513"/></g><!--MD5=[2d6ee4870631d8e6302b49837df72893]
reverse link raylib.builder.RlMeshBuilder to raylib.builder.RlMeshBuilder::MeshType--><g id="link_raylib.builder.RlMeshBuilder_raylib.builder.RlMeshBuilder::MeshType"><path codeLine="2112" d="M5183.02,3459.902 C5170.37,3628.892 5156.54,3813.782 5147.59,3933.392 " fill="none" id="raylib.builder.RlMeshBuilder-backto-raylib.builder.RlMeshBuilder::MeshType" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="5183.5457" cy="3452.8799" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="5182.9513" x2="5184.14" y1="3460.8578" y2="3444.902"/><line style="stroke:#181818;stroke-width:1.0;" x1="5175.5678" x2="5191.5236" y1="3452.2855" y2="3453.4742"/></g><!--MD5=[fc072d3e7813001ec5d73af69cd4ed1b]
reverse link raylib.builder.RlMeshBuilder to raylib.builder.RlMeshBuilder::ParameterName--><g id="link_raylib.builder.RlMeshBuilder_raylib.builder.RlMeshBuilder::ParameterName"><path codeLine="2115" d="M5288.53,3459.742 C5314.96,3599.922 5343.45,3751.042 5365.27,3866.792 " fill="none" id="raylib.builder.RlMeshBuilder-backto-raylib.builder.RlMeshBuilder::ParameterName" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="5287.208" cy="3452.7643" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="5288.686" x2="5285.73" y1="3460.6266" y2="3444.902"/><line style="stroke:#181818;stroke-width:1.0;" x1="5279.3457" x2="5295.0703" y1="3454.2423" y2="3451.2863"/></g><!--MD5=[1ca77fbb3719da3e605fb93ea6942ba9]
reverse link raylib.builder.RlModelBuilder to raylib.builder.RlModelBuilder::RequiredParameter--><g id="link_raylib.builder.RlModelBuilder_raylib.builder.RlModelBuilder::RequiredParameter"><path codeLine="2118" d="M5768.57,3345.612 C5762.67,3573.012 5754.89,3873.142 5751.59,4000.382 " fill="none" id="raylib.builder.RlModelBuilder-backto-raylib.builder.RlModelBuilder::RequiredParameter" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="5768.7542" cy="3338.3893" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="5768.5483" x2="5768.96" y1="3346.3867" y2="3330.392"/><line style="stroke:#181818;stroke-width:1.0;" x1="5760.7568" x2="5776.7515" y1="3338.1835" y2="3338.5952"/></g><!--MD5=[6a7faf0fe1c2f09ecdd30617afb7de77]
reverse link raylib.builder.RlModelBuilder to raylib.builder.RlModelBuilder::ValidType--><g id="link_raylib.builder.RlModelBuilder_raylib.builder.RlModelBuilder::ValidType"><path codeLine="2121" d="M5858.39,3344.912 C5922.41,3566.962 6006.5,3858.672 6044.63,3990.952 " fill="none" id="raylib.builder.RlModelBuilder-backto-raylib.builder.RlModelBuilder::ValidType" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="5856.4269" cy="3338.0787" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="5858.6438" x2="5854.21" y1="3345.7654" y2="3330.392"/><line style="stroke:#181818;stroke-width:1.0;" x1="5848.7402" x2="5864.1136" y1="3340.2956" y2="3335.8618"/></g><!--MD5=[0fb06f62353dc0b1ceec54bc5153f08d]
@startuml





/' Objects '/

namespace raylib {
	class GlStateManager {
		+{static} color(const RlColor& color) : void
		+{static} color(unsigned char r, unsigned char g, unsigned char b, unsigned char a) : void
		+{static} color(float r, float g, float b, float a) : void
		+{static} color(unsigned char r, unsigned char g, unsigned char b) : void
		+{static} disableBackfaceCulling() : void
		+{static} disableColorBlend() : void
		+{static} disableDepthMask() : void
		+{static} disableDepthTest() : void
		+{static} disableScissorTest() : void
		+{static} disableSmoothLines() : void
		+{static} disableWireMode() : void
		+{static} enableBackfaceCulling() : void
		+{static} enableColorBlend() : void
		+{static} enableDepthMask() : void
		+{static} enableDepthTest() : void
		+{static} enableScissorTest() : void
		+{static} enableSmoothLines() : void
		+{static} enableWireMode() : void
		+{static} popMatrix() : void
		+{static} pushMatrix() : void
		+{static} rotate(const Vector3f& rotation) : void
		+{static} scale(const Vector3f& scale) : void
		+{static} scissor(int x, int y, int width, int height) : void
		+{static} scissor(const Rectangle& rect) : void
		+{static} translate(const Vector3f& translation) : void
	}

	class Random {
		+Random()
		+generate(double min, double max) : double
		+generate(float min, float max) : float
		+generate(int min, int max) : int
		+generate(long min, long max) : long
		+generate(short min, short max) : short
		-_random_device : std::random_device
		+generateSizeT(std::size_t min, std::size_t max) : std::size_t
	}

	class RlCamera {
		+RlCamera()
		+RlCamera(const Vector3f& position, const Vector3f& target, const Vector3f& lookingPoint, const float& fovy, const CameraProjection& projection, const CameraMode& cameraMode)
		-_camera : Camera3D
		+get() : Camera3D& {query}
		-_cameraMode : CameraMode
		-_mode : CameraMode
		+getConstructedCameraMode() : CameraMode& {query}
		+getMode() : CameraMode& {query}
		-_projection : CameraProjection
		+getConstructedProjection() : CameraProjection& {query}
		+geMatrix() : Matrix
		-_lookingPoint : Vector3f
		-_position : Vector3f
		-_target : Vector3f
		+getConstructedLookingPoint() : Vector3f& {query}
		+getConstructedPosition() : Vector3f& {query}
		+getConstructedTarget() : Vector3f& {query}
		-_fovy : float
		+getConstructedFovy() : float& {query}
		+reset() : void
		+setCameraMode(const CameraMode& mode) : void
		+setFov(const float& fovy) : void
		+setPosition(const Vector3f& position) : void
		+setProjection(const CameraProjection& projection) : void
		+setTarget(const Vector3f& target) : void
		+update() : void
	}

	class RlColor {
		+RlColor(Color color)
		+RlColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
		+RlColor(std::uint32_t color)
		+RlColor(const Vector4f& normalizedColor)
		+RlColor(float hue, float saturation, float value)
		-_color : Color
		+getColor() : Color& {query}
		+operator+(unsigned char value) : RlColor&
		+operator+=(unsigned char value) : RlColor&
		+operator-(unsigned char value) : RlColor&
		+operator-=(unsigned char value) : RlColor&
		+setAlpha(unsigned char a) : RlColor&
		+setBlue(unsigned char b) : RlColor&
		+setGreen(unsigned char g) : RlColor&
		+setRed(unsigned char r) : RlColor&
		+toHSV() : Vector3f
		+normalize() : Vector4f {query}
		+operator!=(const RlColor& rhs) : bool {query}
		+operator==(const RlColor& rhs) : bool {query}
		+{static} Beige : static const RlColor
		+{static} Black : static const RlColor
		+{static} Blue : static const RlColor
		+{static} Brown : static const RlColor
		+{static} DarkBlue : static const RlColor
		+{static} DarkBrown : static const RlColor
		+{static} DarkGray : static const RlColor
		+{static} DarkGreen : static const RlColor
		+{static} DarkPurple : static const RlColor
		+{static} Gold : static const RlColor
		+{static} Gray : static const RlColor
		+{static} Green : static const RlColor
		+{static} LightGray : static const RlColor
		+{static} Lime : static const RlColor
		+{static} Magenta : static const RlColor
		+{static} Maroon : static const RlColor
		+{static} Orange : static const RlColor
		+{static} Pink : static const RlColor
		+{static} Purple : static const RlColor
		+{static} RayWhite : static const RlColor
		+{static} Red : static const RlColor
		+{static} SkyBlue : static const RlColor
		+{static} Transparent : static const RlColor
		+{static} Violet : static const RlColor
		+{static} White : static const RlColor
		+{static} Yellow : static const RlColor
		+toInteger() : std::uint32_t {query}
		+getAlpha() : unsigned char& {query}
		+getBlue() : unsigned char& {query}
		+getGreen() : unsigned char& {query}
		+getRed() : unsigned char& {query}
		+alpha(float alpha) : void
		+alphaBlend(const RlColor& src, const RlColor& tint) : void
		+setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a) : void
		+setColor(const Color& color) : void
	}

	class Vector2 <template<typename T>> {
		+Vector2()
		+Vector2(T x, T y)
		+x : T
		+y : T
		+operator!=(const Vector2<T>& other) : bool {query}
		+operator==(const Vector2<T>& other) : bool {query}
	}

	class Vector3 <template<typename T>> {
		+Vector3()
		+Vector3(T x, T y, T z)
		+x : T
		+y : T
		+z : T
		+operator!=(const Vector3<T>& other) : bool {query}
		+operator==(const Vector3<T>& other) : bool {query}
	}

	class Vector4 <template<typename T>> {
		+Vector4()
		+Vector4(T x, T y, T z, T w)
		+w : T
		+x : T
		+y : T
		+z : T
		+operator!=(const Vector4& other) : bool {query}
		+operator==(const Vector4& other) : bool {query}
	}

	namespace window {
		class RlWindow {
			+RlWindow()
			+~RlWindow()
			-_isCreated : bool
			-_isOpen : bool
			+hasState(const ConfigFlags& flag) : bool
			+isFocused() : bool
			+isFullScreen() : bool
			+isHidden() : bool
			+isMaximized() : bool
			+isMinimized() : bool
			+isOpen() : bool
			+isReady() : bool
			+isResized() : bool
			+isIsCreated() : bool& {query}
			-_height : int
			-_minHeight : int
			-_minWidth : int
			-_width : int
			+getHeight() : int& {query}
			+getMinHeight() : int& {query}
			+getMinWidth() : int& {query}
			+getWidth() : int& {query}
			-_camera : raylib::RlCamera
			+getCamera() : raylib::RlCamera&
			+getCamera() : raylib::RlCamera& {query}
			-{static} _instance : static std::shared_ptr<RlWindow>
			+{static} getInstance() : std::shared_ptr<RlWindow>&
			-_title : std::string
			+getTitle() : std::string& {query}
			+clearState(unsigned int flags) : void
			+createWindow(const std::string& title, int width, int height, int fps) : void
			+maximize() : void
			+minimize() : void
			+restore() : void
			+setCamera(const RlCamera& camera) : void
			+setConfigFlags(unsigned int flags) : void
			+setIcon(const image::RlImage& image) : void
			+setIsOpen(const bool& isOpen) : void
			+setMinSize(int width, int height) : void
			+setMonitor(int monitor) : void
			+setPosition(int x, int y) : void
			+setSize(int width, int height) : void
			+setState(unsigned int flags) : void
			+setTitle(const std::string& title) : void
			+takeScreenshot(const std::string& fileName) : void
			+toggleFullscreen() : void
		}

		class System {
			+{static} getMonitorPosition(int monitorIndex) : Vector2f
			+{static} getWindowPosition() : Vector2f
			+{static} getWindowScaleDPI() : Vector2f
			+{static} getMonitorPhysicalSize(int monitorIndex) : Vector2i
			+{static} getMonitorSize(int monitorIndex) : Vector2i
			+{static} getScreenSize() : Vector2i
			+{static} getCurrentMonitor() : int
			+{static} getMonitorCount() : int
			+{static} getMonitorHeight(int monitorIndex) : int
			+{static} getMonitorPhysicalHeight(int monitorIndex) : int
			+{static} getMonitorPhysicalWidth(int monitorIndex) : int
			+{static} getMonitorRefreshRate(int monitorIndex) : int
			+{static} getMonitorWidth(int monitorIndex) : int
			+{static} getScreenHeight() : int
			+{static} getScreenWidth() : int
			+{static} getClipboardText() : std::string
			+{static} getMonitorName(int monitorIndex) : std::string
			+{static} setClipboardText(const std::string& text) : void
		}
	}

	namespace texture {
		class RlRenderTexture {
			+RlRenderTexture(int width, int height)
			+~RlRenderTexture()
			-_renderTexture : RenderTexture2D
			+getRenderTexture() : RenderTexture2D& {query}
		}

		class RlTexture {
			+RlTexture(const std::string& fileName)
			+RlTexture(const image::RlImage& image)
			+RlTexture(const image::RlImage& image, const CubemapLayout& layout)
			+~RlTexture()
			-_textureRec : Rectangle
			+getTextureRec() : Rectangle& {query}
			-_texture : Texture2D
			+get() : Texture2D& {query}
			+getTexture() : Texture2D&
			+getFormat() : int& {query}
			+getHeight() : int& {query}
			+getMipmaps() : int& {query}
			+getWidth() : int& {query}
			-_texturePath : std::string
			+getPath() : std::string& {query}
			+getID() : unsigned int& {query}
			+genTextureMipmaps() : void
			+setFilter(const TextureFilter& filter) : void
			+setWrap(const TextureWrap& wrap) : void
			+update(const void* pixels) : void
			+updateRect(const Rectangle& rec, const void* pixels) : void
		}
	}

	namespace text {
		class RlFont {
			+RlFont()
			+RlFont(const std::string& fontPath)
			+RlFont(const int& fontSize)
			+RlFont(const std::string& fontPath, const int& fontSize, int* fontChars, const int& glyphCount)
			+RlFont(const image::RlImage& image, const RlColor& key, const int& firstChar)
			+RlFont(const std::string& fileType, const unsigned char* fileData, int dataSize, const int& fontSize, int* fontChars, const int& glyphCount)
			+~RlFont()
			-_font : Font
			+getFont() : Font& {query}
			-_fontSize : int
			+getFontSize() : int {query}
			+{static} getDefaultFont() : std::shared_ptr<RlFont>
			-_fontPath : std::string
			+getFontPath() : std::string& {query}
		}

		class RlText {
			+RlText(const std::string& text, const Vector2f& position, const RlColor& color)
			+RlText(const std::string& text, std::shared_ptr<RlFont>& font, const Vector2f& position, const RlColor& color)
			+RlText(const std::string& text, const std::string& fontPath, float fontSize, const Vector2f& position, const RlColor& color)
			-_color : RlColor
			+getColor() : RlColor& {query}
			-_origin : Vector2f
			-_position : Vector2f
			+getSize() : Vector2f {query}
			+getOrigin() : Vector2f& {query}
			+getPosition() : Vector2f& {query}
			-_fontSize : float
			-_rotation : float
			-_textSpacing : float
			+getFontSize() : float {query}
			+getRotation() : float {query}
			+getTextSpacing() : float {query}
			+getWidth() : float {query}
			-_font : std::shared_ptr<RlFont>
			+getFont() : std::shared_ptr<RlFont>& {query}
			-_text : std::string
			+getText() : std::string& {query}
			+setColor(const RlColor& color) : void
			+setFont(const std::shared_ptr<RlFont>& font) : void
			+setFontSize(float fontSize) : void
			+setOrigin(const Vector2f& origin) : void
			+setPosition(float x, float y) : void
			+setPosition(const Vector2f& pos) : void
			+setRotation(float rotation) : void
			+setText(const std::string& text) : void
			+setTextSpacing(float textSpacing) : void
		}

		class TextCodepoint {
			+TextCodepoint(const std::string& text)
			+getCodepointsCount() : int {query}
			+{static} codePointToUTF8(const int& codepoint, int& byteSize) : std::string
			+toUTF8String(const int& bytesLength) : std::string
			-_codepoints : std::vector<int>
			+getCodepoints() : std::vector<int>& {query}
		}
	}

	namespace shader {
		class RlShader {
			+RlShader()
			+~RlShader()
			-_shader : Shader
			+getShader() : Shader& {query}
			+getLocation(const std::string& uniformName) : int
			+getLocationAttrib(const std::string& attribName) : int
			+load(const std::string& vsFileName, const std::string& fsFileName) : void
			+loadFromMemory(const std::string& vsCode, const std::string& fsCode) : void
			+setValue(int locIndex, const void* value, int uniformType) : void
			+setValueMatrix(int locIndex, const Matrix& mat) : void
			+setValueTexture(int locIndex, const texture::RlTexture& texture) : void
			+setValueV(int locIndex, const void* value, int uniformType, int count) : void
		}
	}

	namespace model {
		class MeshGenerator {
			+{static} genMeshCone(const float& radius, const float& height, const int& slices) : RlMesh
			+{static} genMeshCube(const float& width, const float& height, const float& length) : RlMesh
			+{static} genMeshCubicmap(const image::RlImage& cubicmap, const Vector3f& cubeSize) : RlMesh
			+{static} genMeshCylinder(const float& radius, const float& height, const int& slices) : RlMesh
			+{static} genMeshHeightmap(const image::RlImage& heightmap, const Vector3f& size) : RlMesh
			+{static} genMeshHemiSphere(const float& radius, const int& rings, const int& slices) : RlMesh
			+{static} genMeshKnot(const float& radius, const float& size, const int& radSeg, const int& sides) : RlMesh
			+{static} genMeshPlane(const float& width, const float& length, const int& resX, const int& resZ) : RlMesh
			+{static} genMeshPoly(const int& sides, const float& radius) : RlMesh
			+{static} genMeshSphere(const float& radius, const int& rings, const int& slices) : RlMesh
			+{static} genMeshTorus(const float& radius, const float& size, const int& radSeg, const int& sides) : RlMesh
		}

		class RlAnimation {
			+RlAnimation()
			+RlAnimation(const std::string& animationDir, const std::string& extension)
			-_isLoaded : bool
			+isLoaded() : bool& {query}
			+getAnimationsSize() : std::size_t {query}
			-_animationModels : std::vector<RlModel>
			+getAnimationModels() : std::vector<RlModel>& {query}
			-_frame : unsigned int
			+getFrame() : unsigned int& {query}
			+update() : void
		}

		class RlMaterial {
			+RlMaterial(const std::string& fileName)
			+RlMaterial(Material& material)
			+~RlMaterial()
			-_material : Material
			+getMaterial() : Material& {query}
			+getMaterial() : Material&
		}

		class RlMesh {
			+RlMesh(const Mesh& mesh)
			+RlMesh(const RlMesh& mesh)
			+~RlMesh()
			+getBoundingBox() : BoundingBox
			+getMesh() : Mesh& {query}
			+operator=(const RlMesh& mesh) : RlMesh&
			+exportMesh(const std::string& fileName) : bool
			-_mesh : std::shared_ptr<Mesh>
			+getMeshSharedPtr() : std::shared_ptr<Mesh>& {query}
			+genBinormals() : void
			+genTangents() : void
			+updateBuffer(const int& index, void* data, const int& dataSize, const int& offset) : void
			+uploadInGPU(const bool& dynamic) : void
		}

		class RlModel {
			+RlModel(const std::string& fileName)
			+RlModel(const std::string& fileName, const std::string& textureName)
			+RlModel(const std::shared_ptr<RlMesh>& mesh)
			+RlModel(const RlMesh& mesh)
			+RlModel(const RlModel& model)
			+~RlModel()
			-_baseBoudingBox : BoundingBox
			-_boundingBox : BoundingBox
			+getDefaultBoundingBox() : BoundingBox {query}
			+getBaseBoundingBox() : BoundingBox& {query}
			+getBoundingBox() : BoundingBox& {query}
			+getModel() : Model& {query}
			-_color : RlColor
			+getColor() : RlColor& {query}
			+operator=(const RlModel& model) : RlModel&
			-_position : Vector3f
			-_rotationAxis : Vector3f
			-_scale : Vector3f
			+getPosition() : Vector3f& {query}
			+getRotationAxis() : Vector3f& {query}
			+getScale() : Vector3f& {query}
			-_rotationAngle : float
			+getRotationAngle() : float& {query}
			-_model : std::shared_ptr<Model>
			-_mesh : std::shared_ptr<RlMesh>
			-_texture : std::shared_ptr<texture::RlTexture>
			+getTexture() : std::shared_ptr<texture::RlTexture>& {query}
			+setBoundingBox(const BoundingBox& boundingBox) : void
			+setColor(const RlColor& color) : void
			+setMaterialTexture(const std::shared_ptr<texture::RlTexture>& texture) : void
			+setMaterialTexture(const std::shared_ptr<texture::RlTexture>& texture, const int& materialIndex) : void
			+setMaterialTexture(const std::shared_ptr<texture::RlTexture>& texture, const int& materialIndex, const MaterialMapIndex& type) : void
			+setMeshMaterial(const int& meshId, const int& materialId) : void
			+setPosition(const Vector3f& position) : void
			+setPosition(const float& x, const float& y, const float& z) : void
			+setRotationAngle(float rotationAngle) : void
			+setRotationAxis(const Vector3f& rotationAxis) : void
			+setRotationAxis(const float& x, const float& y, const float& z) : void
			+setScale(const Vector3f& scale) : void
			+setScale(const float& x, const float& y, const float& z) : void
		}

		class RlModelAnimation {
			+RlModelAnimation(const RlModel& model, const std::string& fileName)
			+~RlModelAnimation()
			-_anims : ModelAnimation*
			-_model : RlModel
			+animationIndexIsValid(const unsigned int& animIndex) : bool
			-_frameCount : int
			-_animations : std::vector<ModelAnimation>
			-_count : unsigned int
			+getCount() : unsigned int {query}
			+incrementFrameCount(const int& value) : void
			+unload(const unsigned int& animIndex) : void
			+update(const unsigned int& animIndex) : void
		}
	}

	namespace image {
		class ImageDrawHelper {
			+{static} clearBackground(image::RlImage& dst, const RlColor& color) : void
			+{static} drawCircle(image::RlImage& dst, int centerX, int centerY, int radius, const RlColor& color) : void
			+{static} drawCircle(image::RlImage& dst, const Vector2f& center, int radius, const RlColor& color) : void
			+{static} drawImage(image::RlImage& dst, const image::RlImage& src, const Rectangle& srcRec, const Rectangle& dstRec, const RlColor& tint) : void
			+{static} drawImageText(image::RlImage& dst, const std::string& text, int posX, int posY, int fontSize, const RlColor& color) : void
			+{static} drawImageText(image::RlImage& dst, const raylib::text::RlFont& font, const std::string& text, const Vector2f& position, float fontSize, float spacing, const RlColor& tint) : void
			+{static} drawLine(image::RlImage& dst, int startPosX, int startPosY, int endPosX, int endPosY, const RlColor& color) : void
			+{static} drawLine(image::RlImage& dst, const Vector2f& start, const Vector2f& end, const RlColor& color) : void
			+{static} drawPixel(image::RlImage& dst, int posX, int posY, const RlColor& color) : void
			+{static} drawPixel(image::RlImage& dst, const Vector2f& position, const RlColor& color) : void
			+{static} drawRectangle(image::RlImage& dst, int posX, int posY, int width, int height, const RlColor& color) : void
			+{static} drawRectangle(image::RlImage& dst, const Vector2f& position, const Vector2f& size, const RlColor& color) : void
			+{static} drawRectangleLines(image::RlImage& dst, const Rectangle& rec, int thick, const RlColor& color) : void
			+{static} drawRectangleRec(image::RlImage& dst, const Rectangle& rec, const RlColor& color) : void
		}

		class ImageGenerator {
			+{static} genImageCellular(const int& width, const int& height, const int& tileSize) : RlImage
			+{static} genImageChecked(const int& width, const int& height, const int& checksX, const int& checksY, const RlColor& col1, const RlColor& col2) : RlImage
			+{static} genImageColor(const int& width, const int& height, const RlColor& color) : RlImage
			+{static} genImageGradientH(const int& width, const int& height, const RlColor& left, const RlColor& right) : RlImage
			+{static} genImageGradientRadial(const int& width, const int& height, float density, const RlColor& inner, const RlColor& outer) : RlImage
			+{static} genImageGradientV(const int& width, const int& height, const RlColor& top, const RlColor& bottom) : RlImage
			+{static} genImageWhiteNoise(const int& width, const int& height, float factor) : RlImage
		}

		class RlImage {
			+RlImage(const Image& image)
			+RlImage(const Image& image, int frameCount)
			+~RlImage()
			-_image : Image
			+getImage() : Image& {query}
			+getImage() : Image&
			+getImageAlphaBorder(float threshold) : Rectangle
			+getImageColor(int x, int y) : RlColor
			+copy() : RlImage
			+subImage(const Rectangle& rec) : RlImage
			+save(const std::string& fileName) : bool
			+saveAsCode(const std::string& fileName) : bool
			-_frameCount : int
			+getFrameCount() : int& {query}
			+loadImageColors() : std::vector<RlColor>
			+loadImagePalette(int maxPaletteSize) : std::vector<RlColor>
			+alphaClear(const RlColor& color, float threshold) : void
			+alphaCrop(float threshold) : void
			+alphaMask(const RlImage& alphaMask) : void
			+alphaPremultiply() : void
			+changeFormat(int newFormat) : void
			+colorBrightness(int brightness) : void
			+colorContrast(float contrast) : void
			+colorGrayscale() : void
			+colorInvert() : void
			+colorReplace(const RlColor& color, const RlColor& replace) : void
			+colorTint(const RlColor& color) : void
			+crop(const Rectangle& crop) : void
			+dither(int rBpp, int gBpp, int bBpp, int aBpp) : void
			+flipHorizontal() : void
			+flipVertical() : void
			+mipmaps() : void
			+resize(int newWidth, int newHeight) : void
			+resizeCanvas(int newWidth, int newHeight, int offsetX, int offsetY, const RlColor& fill) : void
			+resizeNearesetNeighbor(int newWidth, int newHeight) : void
			+rotateClockwise() : void
			+rotateCounterClockwise() : void
			+toPot(const RlColor& fill) : void
		}
	}

	namespace helper {
		class AudioHelper {
			+{static} isAudioDeviceReady() : bool
			+{static} getNumberOfSoundsPlaying() : int
			-{static} _audioDeviceInit : static bool
			+{static} closeAudioDevice() : void
			+{static} initAudioDevice() : void
			+{static} setAudioStreamBufferSizeDefault(const int& size) : void
			+{static} setMasterVolume(float volume) : void
			+{static} stopMultiSound() : void
		}

		class CameraHelper {
			+{static} setAltControl(int keyAlt) : void
			+{static} setCameraMode(const RlCamera& camera, const CameraMode& mode) : void
			+{static} setMoveControls(int keyFront, int keyBack, int keyRight, int keyLeft, int keyUp, int keyDown) : void
			+{static} setPanControl(int keyPan) : void
			+{static} setSmoothZoomControl(int keySmoothZoom) : void
		}

		class Collision2DHelper {
			+{static} getCollisionRec(const Rectangle& rec1, const Rectangle& rec2) : Rectangle
			+{static} checkCollisionCircleRec(const Vector2f& center, const float& radius, const Rectangle& rec) : bool
			+{static} checkCollisionCircles(const Vector2f& center1, const float& radius1, const Vector2f& center2, const float& radius2) : bool
			+{static} checkCollisionLines(const Vector2f& startPos1, const Vector2f& endPos1, const Vector2f& startPos2, const Vector2f& endPos2, Vector2f& collisionPoint) : bool
			+{static} checkCollisionPointCircle(const Vector2f& point, const Vector2f& center, const float& radius) : bool
			+{static} checkCollisionPointLine(const Vector2f& point, const Vector2f& p1, const Vector2f& p2, const int& threshold) : bool
			+{static} checkCollisionPointRec(const Vector2f& point, const Rectangle& rec) : bool
			+{static} checkCollisionPointTriangle(const Vector2f& point, const Vector2f& p1, const Vector2f& p2, const Vector2f& p3) : bool
			+{static} checkCollisionRecs(const Rectangle& rec1, const Rectangle& rec2) : bool
		}

		class Collision3dHelper {
			+{static} getRayCollisionBox(const Ray& ray, const BoundingBox& box) : RayCollision
			+{static} getRayCollisionMesh(const Ray& ray, const model::RlMesh& mesh, const Matrix& transform) : RayCollision
			+{static} getRayCollisionModel(const Ray& ray, const model::RlModel& model) : RayCollision
			+{static} getRayCollisionQuad(const Ray& ray, const Vector3f& p1, const Vector3f& p2, const Vector3f& p3, const Vector3f& p4) : RayCollision
			+{static} getRayCollisionSphere(const Ray& ray, const Vector3f& center, const float& radius) : RayCollision
			+{static} getRayCollisionTriangle(const Ray& ray, const Vector3f& p1, const Vector3f& p2, const Vector3f& p3) : RayCollision
			+{static} checkCollisionBoxSphere(const BoundingBox& box, const Vector3f& center, const float& radius) : bool
			+{static} checkCollisionBoxes(const BoundingBox& box1, const BoundingBox& box2) : bool
			+{static} checkCollisionSpheres(const Vector3f& center1, const float& radius1, const Vector3f& center2, const float& radius2) : bool
		}

		class ColorHelper {
			+{static} colorAlpha(const RlColor& color, float alpha) : RlColor
			+{static} colorAlphaBlend(const RlColor& dst, const RlColor& src, const RlColor& tint) : RlColor
			+{static} colorFromHSV(float hue, float saturation, float value) : RlColor
			+{static} colorFromNormalized(const Vector4f& normalizedColor) : RlColor
			+{static} getColor(unsigned int hexValue) : RlColor
			+{static} getPixelColor(void* srcPtr, int format) : RlColor
			+{static} colorToHSV(const RlColor& color) : Vector3f
			+{static} getPixelDataSize(int width, int height, int format) : int
			+{static} setPixelColor(void* dstPtr, const RlColor& color, int format) : void
		}

		class CoreHelper {
			+{static} loadVrStereoConfig(const VrDeviceInfo& device) : VrStereoConfig
			+{static} getTime() : double
			+{static} getFrameTime() : float
			+{static} getFPS() : int
			+{static} openURL(const std::string& url) : void
			+{static} setFramerateLimit(int fps) : void
			+{static} unloadVrStereoConfig(const VrStereoConfig& config) : void
		}

		class FileHelper {
			+{static} directoryExists(const std::string& dirPath) : bool
			+{static} fileExists(const std::string& fileName) : bool
			+{static} isFileDropped() : bool
			+{static} isFileExtension(const std::string& fileName, const std::string& ext) : bool
			+{static} saveFileText(const std::string& fileName, const std::string& text) : bool
			+{static} getFileModTime(const std::string& fileName) : long long
			+{static} getDirectoryPath(const std::string& filePath) : std::string
			+{static} getFileExtension(const std::string& fileName) : std::string
			+{static} getFileName(const std::string& filePath) : std::string
			+{static} getFileNameWithoutExt(const std::string& filePath) : std::string
			+{static} getPrevDirectoryPath(const std::string& dirPath) : std::string
			+{static} getWorkingDirectory() : std::string
			+{static} loadFileText(const std::string& fileName) : std::string
			+{static} getDirectoryFiles(const std::string& dirPath, const bool& recursive) : std::vector<std::string>
			+{static} getDirectoryFiles(const std::string& dirPath, const std::function<bool ( const std::string& )>& filter) : std::vector<std::string>
			+{static} getDirectoryFiles(const std::string& dirPath, const bool& recursive, const std::function<bool ( const std::string& fileName )>& filterFunction) : std::vector<std::string>
			+{static} getDroppedFiles() : std::vector<std::string>
			+{static} loadFileData(const std::string& fileName) : std::vector<unsigned char>
			+{static} changeDirectory(const std::string& dir) : void
		}

		class ImageHelper {
			+{static} fromText(const std::string& text, int fontSize, const RlColor& color) : raylib::image::RlImage
			+{static} fromText(const raylib::text::RlFont& font, const std::string& text, float fontSize, float spacing, const RlColor& tint) : raylib::image::RlImage
			+{static} genImageFontAtlas(const GlyphInfo* chars, Rectangle** recs, int glyphCount, int fontSize, int padding, int packMethod) : raylib::image::RlImage
			+{static} load(const std::string& fileName) : raylib::image::RlImage
			+{static} loadAnim(const std::string& fileName) : raylib::image::RlImage
			+{static} loadFromMemory(const std::string& fileType, const unsigned char* fileData, int dataSize) : raylib::image::RlImage
			+{static} loadFromScreen() : raylib::image::RlImage
			+{static} loadFromTexture(const Texture2D& texture) : raylib::image::RlImage
			+{static} loadRaw(const std::string& fileName, int width, int height, int format, int headerSize) : raylib::image::RlImage
		}

		class TextHelper {
			+{static} getGlyphInfo(const raylib::text::RlFont& font, int codepoint) : GlyphInfo
			+{static} getGlyphAtlasRec(const raylib::text::RlFont& font, int codepoint) : Rectangle
			+{static} measureText(const raylib::text::RlFont& font, const std::string& text) : Vector2f
			+{static} measureText(const raylib::text::RlFont& font, const std::string& text, float fontSize, float spacing) : Vector2f
			+{static} getGlyphIndex(const raylib::text::RlFont& font, int codepoint) : int
			+{static} measureText(const std::string& text, int fontSize) : int
		}

		class VectorHelper {
			+{static} toVectorf(const::Vector2& vector) : Vector2f
			+{static} toVectorf(const::Vector3& vector) : Vector3f
			+{static} toVectorf(const::Vector4& vector) : Vector4f
			+toRaylibVector(const Vector2f& vector) : static::Vector2
			+toRaylibVector(const Vector3f& vector) : static::Vector3
			+toRaylibVector(const Vector4f& vector) : static::Vector4
		}

		class WorldHelper {
			+{static} getScreenToWorld2D(const Vector2f& position, const Camera2D& camera) : Vector2f
			+{static} getWorldToScreen(const Vector3f& position, const RlCamera& camera) : Vector2f
			+{static} getWorldToScreen2D(const Vector2f& position, const Camera2D& camera) : Vector2f
			+{static} getWorldToScreenEx(const Vector3f& position, const RlCamera& camera, int width, int height) : Vector2f
		}

		namespace input {
			class CursorHelper {
				+{static} isCursorHidden() : bool
				+{static} isCursorOnScreen() : bool
				+{static} disableCursor() : void
				+{static} enableCursor() : void
				+{static} hideCursor() : void
				+{static} showCursor() : void
			}

			class GamepadHelper {
				+{static} isGamepadAvailable(const int& gamepad) : bool
				+{static} isGamepadButtonDown(const int& gamepad, const GamepadButton& button) : bool
				+{static} isGamepadButtonPressed(const int& gamepad, const GamepadButton& button) : bool
				+{static} isGamepadButtonReleased(const int& gamepad, const GamepadButton& button) : bool
				+{static} isGamepadButtonUp(const int& gamepad, const GamepadButton& button) : bool
				+{static} getGamepadAxisMovement(const int& gamepad, const GamepadAxis& axis) : float
				+{static} getGamepadAxisCount(const int& gamepad) : int
				+{static} getGamepadButtonPressed() : int
				+{static} setGamepadMappings(const std::string& mappings) : int
				+{static} getGamepadName(const int& gamepad) : std::string
			}

			class KeyboardHelper {
				+{static} isKeyDown(const KeyboardKey& key) : bool
				+{static} isKeyPressed(const KeyboardKey& key) : bool
				+{static} isKeyReleased(const KeyboardKey& key) : bool
				+{static} isKeyUp(const KeyboardKey& key) : bool
				+{static} getCharPressed() : int
				+{static} getKeyPressed() : int
				+{static} getKeyName(const int& key, const int& scancode) : std::string
				+{static} getPressedKeys() : std::vector<KeyboardKey>
				+{static} getPressedChars() : std::vector<int>
				+{static} setExitKey(const KeyboardKey& key) : void
			}

			class MouseHelper {
				+{static} getMouseRay(const Vector2f& mousePosition, const RlCamera& camera) : Ray
				+{static} getMouseDelta() : Vector2f
				+{static} getMousePosition() : Vector2f
				+{static} isMouseButtonDown(const MouseButton& button) : bool
				+{static} isMouseButtonPressed(const MouseButton& button) : bool
				+{static} isMouseButtonReleased(const MouseButton& button) : bool
				+{static} isMouseButtonUp(const MouseButton& button) : bool
				+{static} getMouseWheelMove() : float
				+{static} getMouseX() : int
				+{static} getMouseY() : int
				+{static} setMouseCursor(const MouseCursor& cursor) : void
				+{static} setMouseOffset(int offsetX, int offsetY) : void
				+{static} setMousePosition(int x, int y) : void
				+{static} setMouseScale(float scaleX, float scaleY) : void
			}

			class TouchHelper {
				+{static} getGestureDragVector() : Vector2f
				+{static} getGesturePinchVector() : Vector2f
				+{static} getTouchPosition(const int& index) : Vector2f
				+{static} isGestureDetected(const int& gesture) : bool
				+{static} getGestureDragAngle() : float
				+{static} getGestureHoldDuration() : float
				+{static} getGesturePinchAngle() : float
				+{static} getGestureDetected() : int
				+{static} getTouchPointCount() : int
				+{static} getTouchPointId(const int& index) : int
				+{static} getTouchX() : int
				+{static} getTouchY() : int
				+{static} setGesturesEnabled(const unsigned int& flags) : void
			}
		}

		namespace draw {
			class Draw2DHelper {
				-{static} _texShapesRec : static Rectangle
				-{static} _texShapes : static Texture2D
				+{static} drawCircle(int centerX, int centerY, float radius, const RlColor& color) : void
				+{static} drawCircle(const Vector2f& center, float radius, const RlColor& color) : void
				+{static} drawCircleGradient(int centerX, int centerY, float radius, const RlColor& color1, const RlColor& color2) : void
				+{static} drawCircleLines(int centerX, int centerY, float radius, const RlColor& color) : void
				+{static} drawCircleSector(const Vector2f& center, float radius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawCircleSectorLines(const Vector2f& center, float radius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawEllipse(int centerX, int centerY, float radiusH, float radiusV, const RlColor& color) : void
				+{static} drawEllipseLines(int centerX, int centerY, float radiusH, float radiusV, const RlColor& color) : void
				+{static} drawLine(int startPosX, int startPosY, int endPosX, int endPosY, const RlColor& color) : void
				+{static} drawLine(const Vector2f& startPos, const Vector2f& endPos, const RlColor& color) : void
				+{static} drawLine(const Vector2f& startPos, const Vector2f& endPos, float thick, const RlColor& color) : void
				+{static} drawLineBezier(const Vector2f& startPos, const Vector2f& endPos, float thick, const RlColor& color) : void
				+{static} drawLineBezierCubic(const Vector2f& startPos, const Vector2f& endPos, const Vector2f& startControlPos, const Vector2f& endControlPos, float thick, const RlColor& color) : void
				+{static} drawLineBezierQuad(const Vector2f& startPos, const Vector2f& endPos, const Vector2f& controlPos, float thick, const RlColor& color) : void
				+{static} drawLineStrip(const std::vector<Vector2f>& points, const RlColor& color) : void
				+{static} drawPixel(int posX, int posY, const RlColor& color) : void
				+{static} drawPixel(const Vector2f& position, const RlColor& color) : void
				+{static} drawPoly(const Vector2f& center, int sides, float radius, float rotation, const RlColor& color) : void
				+{static} drawPolyLines(const Vector2f& center, int sides, float radius, float rotation, const RlColor& color) : void
				+{static} drawPolyLines(const Vector2f& center, int sides, float radius, float rotation, float lineThick, const RlColor& color) : void
				+{static} drawRectangle(int posX, int posY, int width, int height, const RlColor& color) : void
				+{static} drawRectangle(const Vector2f& position, const Vector2f& size, const RlColor& color) : void
				+{static} drawRectangle(const Rectangle& rec, const RlColor& color) : void
				+{static} drawRectangle(const Rectangle& rec, const Vector2f& origin, float rotation, const RlColor& color) : void
				+{static} drawRectangleGradient(const Rectangle& rec, const RlColor& col1, const RlColor& col2, const RlColor& col3, const RlColor& col4) : void
				+{static} drawRectangleGradientH(int posX, int posY, int width, int height, const RlColor& color1, const RlColor& color2) : void
				+{static} drawRectangleGradientV(int posX, int posY, int width, int height, const RlColor& color1, const RlColor& color2) : void
				+{static} drawRectangleLines(int posX, int posY, int width, int height, const RlColor& color) : void
				+{static} drawRectangleLinesEx(const Rectangle& rec, float lineThick, const RlColor& color) : void
				+{static} drawRectangleRounded(const Rectangle& rec, float roundness, int segments, const RlColor& color) : void
				+{static} drawRectangleRoundedLines(const Rectangle& rec, float roundness, int segments, float lineThick, const RlColor& color) : void
				+{static} drawRing(const Vector2f& center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawRingLines(const Vector2f& center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawTriangle(const Vector2f& v1, const Vector2f& v2, const Vector2f& v3, const RlColor& color) : void
				+{static} drawTriangleFan(const std::vector<Vector2f>& points, const RlColor& color) : void
				+{static} drawTriangleLines(const Vector2f& v1, const Vector2f& v2, const Vector2f& v3, const RlColor& color) : void
				+{static} drawTriangleStrip(const std::vector<Vector2f>& points, const RlColor& color) : void
				+{static} setShapesTexture(const texture::RlTexture& texture, const Rectangle& source) : void
			}

			class Draw3DHelper {
				+{static} drawBillboard(const RlCamera& camera, const texture::RlTexture& texture, const Vector3f& position, float size, const RlColor& tint) : void
				+{static} drawBillboardPro(const RlCamera& camera, const texture::RlTexture& texture, const Rectangle& source, const Vector3f& position, const Vector3f& up, const Vector2f& size, const Vector2f& origin, float rotation, const RlColor& tint) : void
				+{static} drawBillboardRec(const RlCamera& camera, const texture::RlTexture& texture, const Rectangle& source, const Vector3f& position, const Vector2f& size, const RlColor& tint) : void
				+{static} drawBoundingBox(const BoundingBox& box, const RlColor& color) : void
				+{static} drawCircle(const Vector3f& center, const float& radius, const Vector3f& rotationAxis, const float& rotationAngle, const RlColor& color) : void
				+{static} drawCube(const Vector3f& position, const float& width, const float& height, const float& length, const RlColor& color) : void
				+{static} drawCube(const Vector3f& position, const Vector3f& size, const RlColor& color) : void
				+{static} drawCubeTexture(const texture::RlTexture& texture, const Vector3f& position, const float& width, const float& height, const float& length, const RlColor& color) : void
				+{static} drawCubeTextureRec(const texture::RlTexture& texture, const Rectangle& source, const Vector3f& position, const float& width, const float& height, const float& length, const RlColor& color) : void
				+{static} drawCubeWires(const Vector3f& position, const float& width, const float& height, const float& length, const RlColor& color) : void
				+{static} drawCubeWires(const Vector3f& position, const Vector3f& size, const RlColor& color) : void
				+{static} drawCylinder(const Vector3f& position, const float& radiusTop, const float& radiusBottom, const float& height, const int& slices, const RlColor& color) : void
				+{static} drawCylinder(const Vector3f& startPos, const Vector3f& endPos, const float& startRadius, const float& endRadius, const int& sides, const RlColor& color) : void
				+{static} drawCylinderWires(const Vector3f& position, const float& radiusTop, const float& radiusBottom, const float& height, const int& slices, const RlColor& color) : void
				+{static} drawCylinderWires(const Vector3f& startPos, const Vector3f& endPos, const float& startRadius, const float& endRadius, const int& sides, const RlColor& color) : void
				+{static} drawGrid(const int& slices, const float& spacing) : void
				+{static} drawGrid(const Vector2i& size, const float& spacing) : void
				+{static} drawGrid(const Vector2i& size, const Vector3f& position, const float& spacing) : void
				+{static} drawGrid(const Vector2i& size, const Vector3f& position, const float& spacing, const RlColor& color) : void
				+{static} drawLine(const Vector3f& startPos, const Vector3f& endPos, const RlColor& color) : void
				+{static} drawPlane(const Vector3f& centerPos, const Vector2f& size, const RlColor& color) : void
				+{static} drawPoint(const Vector3f& position, const RlColor& color) : void
				+{static} drawRay(const Ray& ray, const RlColor& color) : void
				+{static} drawSphere(const Vector3f& centerPos, const float& radius, const RlColor& color) : void
				+{static} drawSphere(const Vector3f& centerPos, const float& radius, const int& rings, const int& slices, const RlColor& color) : void
				+{static} drawSphereWires(const Vector3f& centerPos, const float& radius, const int& rings, const int& slices, const RlColor& color) : void
				+{static} drawTriangle3D(const Vector3f& v1, const Vector3f& v2, const Vector3f& v3, const RlColor& color) : void
				+{static} drawTriangleStrip3D(const std::vector<Vector3f>& points, const RlColor& color) : void
			}

			class DrawHelper {
				+{static} beginBlendMode(int mode) : void
				+{static} beginDrawing() : void
				+{static} beginMode2D(const Camera2D& camera) : void
				+{static} beginMode3D(const RlCamera& camera) : void
				+{static} beginScissorMode(int x, int y, int width, int height) : void
				+{static} beginShaderMode(const shader::RlShader& shader) : void
				+{static} beginTextureMode(const RenderTexture2D& target) : void
				+{static} beginVrStereoMode(const VrStereoConfig& config) : void
				+{static} clearBackground(const RlColor& color) : void
				+{static} endBlendMode() : void
				+{static} endDrawing() : void
				+{static} endMode2D() : void
				+{static} endMode3D() : void
				+{static} endScissorMode() : void
				+{static} endShaderMode() : void
				+{static} endTextureMode() : void
				+{static} endVrStereoMode() : void
			}

			class DrawModelHelper {
				+{static} drawMesh(const raylib::model::RlMesh& mesh, const raylib::model::RlMaterial& material, const Matrix& transform) : void
				+{static} drawMeshInstanced(const raylib::model::RlMesh& mesh, const raylib::model::RlMaterial& material, std::vector<Matrix>& transforms) : void
				+{static} drawModel(const raylib::model::RlModel& model) : void
				+{static} drawModel(const raylib::model::RlModel& model, const Vector3f& position, const float& scale, const RlColor& tint) : void
				+{static} drawModel(const raylib::model::RlModel& model, const Vector3f& position, const Vector3f& rotationAxis, const float& rotationAngle, const Vector3f& scale, const RlColor& tint) : void
				+{static} drawModelWires(const raylib::model::RlModel& model) : void
				+{static} drawModelWires(const raylib::model::RlModel& model, const Vector3f& position, const float& scale, const RlColor& tint) : void
				+{static} drawModelWires(const raylib::model::RlModel& model, const Vector3f& position, const Vector3f& rotationAxis, const float& rotationAngle, const Vector3f& scale, const RlColor& tint) : void
			}

			class DrawTextHelper {
				+{static} drawCenteredText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const RlColor& color, const float& spacing) : void
				+{static} drawCenteredText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const float& fontSize, const RlColor& color, const float& spacing) : void
				+{static} drawCenteredText(const raylib::text::RlText& text) : void
				+{static} drawFps(const Vector2f& pos, const int& fontSize) : void
				+{static} drawFps(const float& posX, const float& posY, const int& fontSize) : void
				+{static} drawFps(const Vector2f& pos) : void
				+{static} drawFps(const int& posX, const int& posY) : void
				+{static} drawText(const std::string& text, const Vector2f& pos, const int& fontSize, const RlColor& color) : void
				+{static} drawText(const std::string& text, const float& posX, const float& posY, const int& fontSize, const RlColor& color) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const RlColor& color) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const float& rotation, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const Vector2f& origin, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const Vector2f& origin, const float& rotation, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const raylib::text::RlText& text, const Vector2f& position, const RlColor& color) : void
				+{static} drawText(const raylib::text::RlText& text, const float& posX, const float& posY, const RlColor& color) : void
				+{static} drawText(const raylib::text::RlText& text) : void
				+{static} drawTextUsingCodepoint(const raylib::text::RlFont& font, const int& codepoint, const Vector2f& position, float fontSize, const RlColor& tint) : void
			}

			class DrawTextureHelper {
				+{static} drawTexture(const texture::RlTexture& texture, int posX, int posY, const RlColor& tint) : void
				+{static} drawTexture(const texture::RlTexture& texture, const Vector2f& position, const RlColor& tint) : void
				+{static} drawTexture(const texture::RlTexture& texture, const Vector2f& position, float rotation, float scale, const RlColor& tint) : void
				+{static} drawTexture(const texture::RlTexture& texture, const Rectangle& source, const Rectangle& dest, const Vector2f& origin, float rotation, const RlColor& tint) : void
				+{static} drawTextureNPatch(const texture::RlTexture& texture, const NPatchInfo& nPatchInfo, const Rectangle& dest, const Vector2f& origin, float rotation, const RlColor& tint) : void
				+{static} drawTexturePoly(const texture::RlTexture& texture, const Vector2f& center, const std::vector<Vector2f>& points, std::vector<Vector2f>& texcoords, const RlColor& tint) : void
				+{static} drawTextureQuad(const texture::RlTexture& texture, const Vector2f& tiling, const Vector2f& offset, const Rectangle& quad, const RlColor& tint) : void
				+{static} drawTextureRec(const texture::RlTexture& texture, const Rectangle& source, const Vector2f& position, const RlColor& tint) : void
				+{static} drawTextureTiled(const texture::RlTexture& texture, const Rectangle& source, const Rectangle& dest, const Vector2f& origin, float rotation, float scale, const RlColor& tint) : void
			}
		}
	}

	namespace ex {
		class BuilderException {
			+BuilderException(const std::string& msg)
		}

		class CameraException {
			+CameraException(const std::string& message)
		}

		class InvalidArgumentException {
			+InvalidArgumentException(const std::string& msg)
		}

		class RaylibException {
			+RaylibException(const std::string& msg, bool prefix)
			+what() : char* {query}
			-_msg : std::string
		}

		class RlAnimationException {
			+RlAnimationException(const std::string& message)
		}

		class RlModelException {
			+RlModelException(const std::string& message)
		}

		class WindowException {
			+WindowException(const std::string& msg)
		}
	}

	namespace builder {
		abstract class IBuilder <template<typename T>> {
			+{abstract} build() : T
		}

		class RlCameraBuilder {
			+RlCameraBuilder()
			-_cameraMode : CameraMode
			-_projection : CameraProjection
			+build() : RlCamera
			+setCameraMode(CameraMode cameraMode) : RlCameraBuilder&
			+setFovy(float fovy) : RlCameraBuilder&
			+setLookingPoint(const Vector3f& lookingPoint) : RlCameraBuilder&
			+setPosition(const Vector3f& position) : RlCameraBuilder&
			+setProjection(CameraProjection projection) : RlCameraBuilder&
			+setTarget(const Vector3f& target) : RlCameraBuilder&
			-_lookingPoint : Vector3f
			-_position : Vector3f
			-_target : Vector3f
			-_fovy : float
		}

		class RlImageBuilder {
			+RlImageBuilder()
			-_bottom : RlColor
			-_col1 : RlColor
			-_col2 : RlColor
			-_color : RlColor
			-_inner : RlColor
			-_left : RlColor
			-_outer : RlColor
			-_right : RlColor
			-_top : RlColor
			+setBottom(const RlColor& bottom) : RlImageBuilder&
			+setChecksX(const int& checksX) : RlImageBuilder&
			+setChecksY(const int& checksY) : RlImageBuilder&
			+setCol1(const RlColor& col1) : RlImageBuilder&
			+setCol2(const RlColor& col2) : RlImageBuilder&
			+setColor(const RlColor& color) : RlImageBuilder&
			+setDensity(const float& density) : RlImageBuilder&
			+setFactor(const float& factor) : RlImageBuilder&
			+setHeight(const int& height) : RlImageBuilder&
			+setInner(const RlColor& inner) : RlImageBuilder&
			+setLeft(const RlColor& left) : RlImageBuilder&
			+setOuter(const RlColor& outer) : RlImageBuilder&
			+setRight(const RlColor& right) : RlImageBuilder&
			+setTitleSize(const int& titleSize) : RlImageBuilder&
			+setTop(const RlColor& top) : RlImageBuilder&
			+setType(ImageType type) : RlImageBuilder&
			+setWidth(const int& width) : RlImageBuilder&
			-_density : float
			-_factor : float
			-_checksX : int
			-_checksY : int
			-_height : int
			-_titleSize : int
			-_width : int
			-_flags : long
			-_type : long
			+build() : raylib::image::RlImage
		}

		class RlMeshBuilder {
			+RlMeshBuilder()
			+setConeSlices(const int& slices) : RlMeshBuilder&
			+setCubeSize(const Vector3f& cubeSize) : RlMeshBuilder&
			+setCubicmap(const image::RlImage& cubicmap) : RlMeshBuilder&
			+setHeight(const float& height) : RlMeshBuilder&
			+setHeightmap(const image::RlImage& heightmap) : RlMeshBuilder&
			+setHemisphereRings(const int& rings) : RlMeshBuilder&
			+setKnotRadSeg(const int& radSeg) : RlMeshBuilder&
			+setLength(const float& length) : RlMeshBuilder&
			+setMeshType(MeshType meshType) : RlMeshBuilder&
			+setRadSeg(const int& radSeg) : RlMeshBuilder&
			+setRadius(const float& radius) : RlMeshBuilder&
			+setResX(const int& resX) : RlMeshBuilder&
			+setResZ(const int& resZ) : RlMeshBuilder&
			+setRings(const int& rings) : RlMeshBuilder&
			+setSides(const int& sides) : RlMeshBuilder&
			+setSize(const float& size) : RlMeshBuilder&
			+setSlices(const int& slices) : RlMeshBuilder&
			+setVec3fSize(const Vector3f& size) : RlMeshBuilder&
			+setWidth(const float& width) : RlMeshBuilder&
			-_cubeSize : Vector3f
			-_vec3fSize : Vector3f
			-_height : float
			-_length : float
			-_radius : float
			-_size : float
			-_width : float
			-_cubicmap : image::RlImage
			-_heightmap : image::RlImage
			-_radSeg : int
			-_resX : int
			-_resZ : int
			-_rings : int
			-_sides : int
			-_slices : int
			-_flags : long
			-_type : long
			+build() : model::RlMesh
		}

		class RlModelBuilder {
			+RlModelBuilder()
			-_boundingBox : BoundingBox
			-_color : RlColor
			+setRotationAxis(const Vector3f& rotationAxis) : RlModelBuilder
			+setBoundingBox(const BoundingBox& boundingBox) : RlModelBuilder&
			+setColor(const RlColor& color) : RlModelBuilder&
			+setMesh(const std::shared_ptr<raylib::model::RlMesh>& mesh) : RlModelBuilder&
			+setMesh(const raylib::model::RlMesh& mesh) : RlModelBuilder&
			+setModelPath(const std::string& modelPath) : RlModelBuilder&
			+setPosition(const Vector3f& position) : RlModelBuilder&
			+setRotationAngle(const float& rotationAngle) : RlModelBuilder&
			+setScale(const Vector3f& scale) : RlModelBuilder&
			+setTexture(const std::shared_ptr<texture::RlTexture>& texture) : RlModelBuilder&
			+setTexturePath(const std::string& texturePath) : RlModelBuilder&
			-_position : Vector3f
			-_rotationAxis : Vector3f
			-_scale : Vector3f
			-_boundingBoxSet : bool
			-_rotationAngle : float
			-_flags : long
			+build() : raylib::model::RlModel
			-{static} _validTypes : static std::vector<ValidType>
			-_mesh : std::shared_ptr<raylib::model::RlMesh>
			-_texture : std::shared_ptr<texture::RlTexture>
			-_modelPath : std::string
			-_texturePath : std::string
		}

		class RlTextBuilder {
			+RlTextBuilder()
			-_color : RlColor
			+setColor(const RlColor& color) : RlTextBuilder&
			+setFont(const std::shared_ptr<raylib::text::RlFont>& font) : RlTextBuilder&
			+setFontPath(const std::string& fontPath) : RlTextBuilder&
			+setFontSize(const float& fontSize) : RlTextBuilder&
			+setOrigin(const Vector2f& origin) : RlTextBuilder&
			+setPosition(const Vector2f& position) : RlTextBuilder&
			+setRotation(const float& rotation) : RlTextBuilder&
			+setSpacing(const float& spacing) : RlTextBuilder&
			+setText(const std::string& text) : RlTextBuilder&
			-_origin : Vector2f
			-_position : Vector2f
			-_isFontPathSet : bool
			-_isFontSet : bool
			-_isFontSizeSet : bool
			-_isTextSet : bool
			-_fontSize : float
			-_rotation : float
			-_textSpacing : float
			+build() : raylib::text::RlText
			-_font : std::shared_ptr<raylib::text::RlFont>
			-_fontPath : std::string
			-_text : std::string
		}

		enum RlImageBuilder::ImageType {
			ImageCellular
			ImageChecked
			ImageColor
			ImageGradientH
			ImageGradientRadial
			ImageGradientV
			ImageWhiteNoise
		}

		enum RlImageBuilder::ParameterName {
			Bottom
			ChecksX
			ChecksY
			Col1
			Col2
			Color
			Density
			Factor
			Height
			Inner
			Left
			Outer
			Right
			TitleSize
			Top
			Width
		}

		enum RlMeshBuilder::MeshType {
			MeshCone
			MeshCube
			MeshCubicmap
			MeshCylinder
			MeshHeightmap
			MeshHemiSphere
			MeshKnot
			MeshPlane
			MeshPoly
			MeshSphere
			MeshTorus
		}

		enum RlMeshBuilder::ParameterName {
			ConeSlices
			CubeSize
			Cubicmap
			Height
			Heightmap
			HemisphereRings
			KnotRadSeg
			Length
			RadSeg
			Radius
			ResX
			ResZ
			Rings
			Sides
			Size
			Slices
			Vec3fSize
			Width
		}

		enum RlModelBuilder::RequiredParameter {
			MESH
			MODEL_PATH
			SHARED_TEXTURE
			TEXTURE_PATH
		}

		enum RlModelBuilder::ValidType {
			RLMODEL_MESH
			RLMODEL_MESH_AND_SHARED_TEXTURE
			RLMODEL_PATH
			RLMODEL_PATH_AND_SHARED_TEXTURE
			RLMODEL_PATH_AND_TEXTURE
		}
	}

	namespace audio {
		class RlAudioStream {
			+RlAudioStream(const unsigned int& sampleRate, const unsigned int& sampleSize, const unsigned int& channels)
			+~RlAudioStream()
			-_stream : AudioStream
			+isPlaying() : bool
			+isProcessed() : bool
			-_volume : float
			+getVolume() : float& {query}
			+pause() : void
			+play() : void
			+resume() : void
			+setPitch(const float& pitch) : void
			+setVolume(float volume) : void
			+stop() : void
			+update(const void* data, const int& samplesCount) : void
		}

		class RlMusic {
			+RlMusic(const std::string& fileName)
			+RlMusic(const std::string& fileType, unsigned char* data, const int& dataSize)
			+~RlMusic()
			-_music : Music
			+isPlaying() : bool
			+isLooping() : bool& {query}
			-_volume : float
			+getTimeLength() : float
			+getTimePlayed() : float
			+getVolume() : float& {query}
			+pause() : void
			+play() : void
			+resume() : void
			+seek(const float& position) : void
			+setLooping(const bool& loop) : void
			+setPitch(const float& pitch) : void
			+setVolume(const float& volume) : void
			+stop() : void
			+update() : void
		}

		class RlSound {
			+RlSound(const Sound& sound)
			+RlSound(const std::string& fileName)
			+RlSound(const RlWave& wave)
			+~RlSound()
			-_sound : Sound
			+isPlaying() : bool
			-_volume : float
			+getVolume() : float& {query}
			+pause() : void
			+play() : void
			+playMulti() : void
			+resume() : void
			+setPitch(const float& pitch) : void
			+setVolume(const float& volume) : void
			+stop() : void
			+update(const void* data, const int& samplesCount) : void
		}

		class RlWave {
			+RlWave()
			+RlWave(const Wave& wave)
			+RlWave(const std::string& path)
			+RlWave(const std::string& fileType, const unsigned char* fileData, int dataSize)
			+~RlWave()
			+copy() : RlWave
			-_wave : Wave
			+getWave() : Wave&
			+getWave() : Wave& {query}
			+exportWave(const std::string& fileName) : bool
			+exportWaveAsCode(const std::string& fileName) : bool
			-_samplesPtr : float*
			+toSound() : raylib::audio::RlSound {query}
			-_samples : std::vector<float>
			+getSamples() : std::vector<float>
			+crop(const int& initSample, const int& finalSample) : void
			+format(const int& sampleRate, const int& sampleSize, const int& channels) : void
		}
	}
}


namespace indie {
	class Bomb {
		+Bomb(const std::string& name, const raylib::model::RlModel& model, const int& range, const std::string& playerOwner)
		+~Bomb()
		-_timer : float
		-_range : int
		-_audioManager : std::shared_ptr<gameengine::AudioManager>&
		-_playerOwner : std::string
		+addMagma(const Vector3f& position, const Vector3f& addI) : void
		+enableCollision() : void
		+init() : void
		+instanceMagma(const Vector3f& pos) : void
		+setPlayerOwner(const std::string& playerOwner) : void
		+spawnMagma() : void
		+update(const float& delta) : void
	}

	class Bonus {
		+Bonus(const std::string& name, const raylib::model::RlModel& model, const std::shared_ptr<raylib::texture::RlTexture>& texture)
		+~Bonus()
		-_type : BonusType
		+getBonusType() : int& {query}
		+init() : void
		+setBonusType(BonusType type) : void
		+update(const float& delta) : void
	}

	class ChooseNumberPlayerScene {
		+ChooseNumberPlayerScene(const std::string& name, const std::string& sceneSource)
		+~ChooseNumberPlayerScene()
		-_indexMenu : int
		-_savedIndexMap : int
		-_map3DLoader : std::shared_ptr<indie::map::Map3DLoader>&
		+initScene() : void
		+sceneLauncher() : void
		+updateScene(const float& delta) : void
	}

	class GameScene {
		+GameScene(const std::string& name, const std::string& sceneSource)
		+~GameScene()
		-_winTimer : float
		-_indexMenu : int
		-_map3DLoader : std::shared_ptr<map::Map3DLoader>&
		-_map : std::shared_ptr<map::Map>
		-_textureManager : std::unique_ptr<gameengine::TextureManager>&
		-buttonsPos : std::vector<Vector2f>
		+displayWinner(const std::string& name) : void
		+initScene() : void
		+sceneLauncher() : void
		+updateScene(const float& delta) : void
	}

	class GlobalInstance {
		+GlobalInstance()
		+~GlobalInstance()
		+_indexMap : int
		+_numberPlayers : int
		+_playersAlive : int
		-{static} _instance : static std::shared_ptr<GlobalInstance>
		+{static} getInstance() : std::shared_ptr<indie::GlobalInstance>&
		+_playerWinner : std::string
	}

	class Image {
		+Image(const std::string& name, const std::shared_ptr<raylib::texture::RlTexture>& texture)
		+~Image()
		+init() : void
		+update(const float& delta) : void
	}

	class Magma {
		+Magma(const std::string& name, const raylib::model::RlModel& model, const std::shared_ptr<raylib::texture::RlTexture>& texture)
		+~Magma()
		-_timer : float
		-_playerOwner : std::string
		+checkWallCollision() : void
		+handlePlayerCollision() : void
		+init() : void
		+update(const float& delta) : void
	}

	class MainMenuScene {
		+MainMenuScene(const std::string& name, const std::string& sceneSource)
		+~MainMenuScene()
		-_indexMenu : int
		+initScene() : void
		+sceneLauncher() : void
		+updateScene(const float& delta) : void
	}

	class Player {
		+Player(const std::string& name, const raylib::model::RlModel& model, const std::shared_ptr<raylib::texture::RlTexture>& texture, const int& numpadId)
		+~Player()
		-_state : State
		-_speed : float
		-_tempSpeed : float
		-_timerAnim : float
		-_timerGhost : float
		-_bombStock : int
		-_numpadId : int
		-_range : int
		+getState() : int
		-_anim : raylib::model::RlModelAnimation
		-_audioManager : std::shared_ptr<gameengine::AudioManager>&
		-botTarget : std::string
		-_textureManager : std::unique_ptr<gameengine::TextureManager>&
		+botControl() : void
		+botSpawnBomb() : void
		+checkCollisions() : void
		+handleInput() : void
		+incrementBombStock(int bombStock) : void
		+init() : void
		+moveAndGhosting(Vector3f position) : void
		+playerDead() : void
		+setState(State state) : void
		+spawnBomb() : void
		+update(const float& delta) : void
	}

	class StartScene {
		+StartScene(const std::string& name, const std::string& sceneSource)
		+~StartScene()
		-_startTimestamp : long
		+initScene() : void
		+sceneLauncher() : void
		+updateScene(const float& delta) : void
	}

	class Wall {
		+Wall(const std::string& name, const raylib::model::RlModel& model, const std::shared_ptr<raylib::texture::RlTexture>& texture)
		+~Wall()
	}

	class WallDestroyable {
		+WallDestroyable(const std::string& name, const raylib::model::RlModel& model, const std::shared_ptr<raylib::texture::RlTexture>& texture)
		+~WallDestroyable()
		+spawnBonus() : void
	}

	class WinningScene {
		+WinningScene(const std::string& name, const std::string& sceneSource)
		+~WinningScene()
		-_indexMenu : int
		+initScene() : void
		+sceneLauncher() : void
		+updateScene(const float& delta) : void
	}

	enum Bonus::BonusType {
		BOMB
		FIRE
		GHOST
		SPEED
	}

	enum Player::State {
		ALIVE
		DEAD
		GHOST
		LOOSER
		WINNER
	}

	namespace map {
		class Map {
			+Map(const std::string& mapPath, gameengine::map::MapParser<MapType>&& mapParser, const std::vector<std::shared_ptr<gameengine::node::_3D::StaticBody>>& mapModels)
			-_mapSize : Vector2u
			-_mapSizeMax : Vector2u
			+getMapSize() : Vector2u& {query}
			+getMapSizeMax() : Vector2u& {query}
			-_mapParser : gameengine::map::MapParser<MapType>
			+getMapParser() : gameengine::map::MapParser<MapType>& {query}
			-_mapPath : std::string
			+getMapPath() : std::string& {query}
			-_playerSpawns : std::vector<Vector2f>
			+getPlayerSpawns() : std::vector<Vector2f>& {query}
			-_mapModels : std::vector<std::shared_ptr<gameengine::node::_3D::StaticBody>>
			+getMapModels() : std::vector<std::shared_ptr<gameengine::node::_3D::StaticBody>>& {query}
			-_map : std::vector<std::vector<MapType>>
			+getMap() : std::vector<std::vector<MapType>>& {query}
			+setMap(const std::vector<std::vector<MapType>>& map) : void
			+setMapModels(const std::vector<std::shared_ptr<gameengine::node::_3D::StaticBody>>& mapModels) : void
			+setMapPath(const std::string& mapPath) : void
			+setMapSize(const Vector2u& mapSize) : void
			+setMapSizeMax(const Vector2u& mapSizeMax) : void
			+setPlayerSpawns(const std::vector<Vector2f>& playerSpawns) : void
		}

		class Map3DLoader {
			+Map3DLoader()
			-_mapSizeMax : Vector2u
			+getMapSizeMax() : Vector2u& {query}
			-{static} _instance : static std::shared_ptr<Map3DLoader>
			+{static} getInstance() : std::shared_ptr<Map3DLoader>&
			-_tmpMapPath : std::string
			-_textureManager : std::unique_ptr<gameengine::TextureManager>&
			+getMapSymbol() : std::unordered_map<char , Map::MapType>& {query}
			-_mapSymbol : std::unordered_map<char, Map::MapType>
			-_maps : std::vector<std::shared_ptr<Map>>
			+getMaps() : std::vector<std::shared_ptr<Map>>& {query}
			-addBreakableWall(std::vector<std::shared_ptr<gameengine::node::_3D::StaticBody>>& models, const Vector3f& position, const std::shared_ptr<raylib::model::RlMesh>& mesh) : void
			-addFloor(std::vector<std::shared_ptr<gameengine::node::_3D::StaticBody>>& models, const Vector3f& position, const std::shared_ptr<raylib::model::RlMesh>& mesh) : void
			+addMap(const std::string& mapPath) : void
			-addWall(std::vector<std::shared_ptr<gameengine::node::_3D::StaticBody>>& models, const Vector3f& position, const std::shared_ptr<raylib::model::RlMesh>& mesh) : void
			+loadMaps(const std::string& directory) : void
			-parseMap(const std::string& mapPath) : void
			+setMapSizeMax(const Vector2u& mapSizeMax) : void
		}

		enum Map::MapType {
			BOMB
			BONUS
			BREAKABLE_WALL
			NONE
			PLAYER
			PLAYER_SPAWN
			UNKNOWN
			WALL
		}
	}

	namespace button {
		class ButtonMainMenu {
			+ButtonMainMenu(const std::string& name, const std::shared_ptr<raylib::texture::RlTexture>& texture)
		}

		class ButtonQuit {
			+ButtonQuit(const std::string& name, const std::shared_ptr<raylib::texture::RlTexture>& texture)
		}

		class ButtonRestart {
			+ButtonRestart(const std::string& name, const std::shared_ptr<raylib::texture::RlTexture>& texture)
		}

		class ButtonResume {
			+ButtonResume(const std::string& name, const std::shared_ptr<raylib::texture::RlTexture>& texture)
		}

		class IndieButton {
			+IndieButton(const std::string& name, const std::shared_ptr<raylib::texture::RlTexture>& texture, const std::function<void ( const std::string& buttonName )>& callback)
			#function<void(const std::string& buttonName)
			+pressed() : void
		}
	}
}


namespace gameengine {
	abstract class AbstractSound {
		+AbstractSound(const std::string& filePath, SoundCategory category)
		+~AbstractSound()
		-_category : SoundCategory
		+getCategory() : int {query}
		-_filePath : std::string
		-_name : std::string
		+getFilePath() : std::string& {query}
		+getName() : std::string& {query}
		+{abstract} setVolume(const float& volume) : void
	}

	class AudioManager {
		+AudioManager()
		+~AudioManager()
		-{static} _instance : static std::shared_ptr<AudioManager>
		+{static} getInstance() : std::shared_ptr<AudioManager>&
		+getSound(const std::string& name) : std::unique_ptr<AbstractSound>&
		-_sounds : std::vector<std::unique_ptr<gameengine::AbstractSound>>
		+addSound(const std::string& filePath, AbstractSound::SoundCategory category) : void
		+deleteSound(const std::string& name) : void
		+loadSounds(const std::string& assetsPath) : void
		+loadSounds(const std::string& soundDir, const std::string& musicDir) : void
		+playSound(const std::string& name) : void
		+setVolume(const float& volume, AbstractSound::SoundCategory category) : void
	}

	abstract class Scene {
		+Scene(const std::string& name, const std::string& sceneSource)
		+~Scene()
		-_isLaunched : bool
		-_isPaused : bool
		+deleteNode(const std::string& name) : bool
		+isLaunched() : bool& {query}
		+isPaused() : bool& {query}
		+getNode(const std::string& name) : std::shared_ptr<gameengine::node::AbstractBase>
		-_name : std::string
		-_sceneSource : std::string
		+getName() : std::string& {query}
		+getSceneSource() : std::string& {query}
		-_nodes : std::vector<std::shared_ptr<gameengine::node::AbstractBase>>
		+getNodes() : std::vector<std::shared_ptr<gameengine::node::AbstractBase>>& {query}
		+addNode(const std::shared_ptr<gameengine::node::AbstractBase>& node) : void
		+deleteNodeIncludes(const std::string& includeName) : void
		+destroy() : void
		+draw() : void
		+draw2D() : void
		+init() : void
		+{abstract} initScene() : void
		+{abstract} sceneLauncher() : void
		+setLaunched() : void
		+setPaused(const bool& value) : void
		+update(const float& delta) : void
		+{abstract} updateScene(const float& delta) : void
	}

	class SceneManager {
		+isPaused() : bool
		-{static} _instance : static std::shared_ptr<SceneManager>
		+getCurrentScene() : std::shared_ptr<gameengine::Scene>&
		+{static} getInstance() : std::shared_ptr<gameengine::SceneManager>&
		+getNode(const std::string& name) : std::shared_ptr<gameengine::node::AbstractBase>
		-_actualScene : std::string
		-_waitingScene : std::string
		-_scenes : std::vector<std::shared_ptr<gameengine::Scene>>
		+getAllNodes() : std::vector<std::shared_ptr<gameengine::node::AbstractBase>>
		-_nodesToDelete : std::vector<std::string>
		-_nodesToDeleteIncludes : std::vector<std::string>
		+addNode(const std::shared_ptr<gameengine::node::AbstractBase>& node) : void
		+addScene(const std::shared_ptr<gameengine::Scene>& scene) : void
		+changeScene(const std::string& scene) : void
		-changeSceneInWaiting() : void
		+deleteNode(const std::string& name) : void
		-deleteNodeInLst() : void
		+deleteNodeInclude(const std::string& containedName) : void
		+deleteScene(const std::string& scene) : void
		+draw() : void
		+draw2D() : void
		+drawAll(raylib::RlCamera& camera) : void
		+makeLoop(raylib::RlCamera& camera) : void
		+setPaused(bool value) : void
		+update() : void
	}

	class TextureManager {
		-{static} _defaultTexture : static std::shared_ptr<raylib::texture::RlTexture>
		-{static} _instance : static std::unique_ptr<TextureManager>
		+getTexture(const std::string& textureName) : std::shared_ptr<raylib::texture::RlTexture>
		+{static} getDefaultTexture() : std::shared_ptr<raylib::texture::RlTexture>&
		+{static} getInstance() : std::unique_ptr<TextureManager>&
		-_textures : std::vector<std::shared_ptr<raylib::texture::RlTexture>>
		+getTextures() : std::vector<std::shared_ptr<raylib::texture::RlTexture>>& {query}
		+loadTextures(const std::string& texturesDir) : void
	}

	class Time {
		+Time()
		+~Time()
		+{static} getMicrosecondsTime() : long
		+{static} getMillisecondsTime() : long
		+{static} getNanoTime(std::chrono::seconds time) : long
		+{static} getNanoTime(std::chrono::milliseconds time) : long
		+{static} getNanoTime(std::chrono::microseconds time) : long
		+{static} getNanosecondsTime() : long
		+{static} getSecondsTime() : long
	}

	enum AbstractSound::SoundCategory {
		FX
		MUSIC
	}

	namespace node {
		abstract class AbstractBase {
			+AbstractBase(const std::string& name)
			+AbstractBase(const AbstractBase &)
			+~AbstractBase()
			#_hiding : bool
			+isHiding() : bool& {query}
			+{abstract} getRotationDegrees() : float {query}
			#_group : std::string
			#_name : std::string
			+getGroup() : std::string& {query}
			+getName() : std::string& {query}
			+{abstract} draw() : void
			+{abstract} init() : void
			+setGroup(const std::string& group) : void
			+setHiding(bool value) : void
			+{abstract} update(const float& delta) : void
		}

		namespace _3D {
			class Grid3D {
				+Grid3D(const Vector2i& size, const Vector3f& position, const float& spacing, const RlColor& tint, const std::string& name)
				+Grid3D(const Grid3D &)
				-_tint : RlColor
				-_size : Vector2i
				-_position : Vector3f
				-_scale : Vector3f
				+getPosition() : Vector3f& {query}
				+getScale() : Vector3f& {query}
				-_spacing : float
				+getRotationDegrees() : float {query}
				+draw() : void
				+init() : void
				+setPosition(const Vector3f& pos) : void
				+setRotationDegrees(const float& degrees, const Vector3f& rotationAxis) : void
				+setScale(const Vector3f& newScale) : void
				+setSize(const Vector2i& size) : void
				+setSpacing(const float& spacing) : void
				+setTint(const RlColor& tint) : void
				+update(const float& delta) : void
			}

			class KinematicBody {
				+KinematicBody(const std::string& name, const raylib::model::RlModel& model)
				+KinematicBody(const std::string& name, const raylib::model::RlModel& model, const std::shared_ptr<raylib::texture::RlTexture>& texture)
				+~KinematicBody()
				+moveAndCollide(const Vector3f& position) : bool
			}

			abstract class Node3D {
				+Node3D(const std::string& name)
				+Node3D(const Node3D &)
				+~Node3D()
				+{abstract} getPosition() : Vector3f& {query}
				+{abstract} getScale() : Vector3f& {query}
				+{abstract} setPosition(const Vector3f& pos) : void
				+{abstract} setRotationDegrees(const float& degrees, const Vector3f& rotationAxis) : void
				+{abstract} setScale(const Vector3f& newScale) : void
			}

			class StaticBody {
				+StaticBody(const std::string& name, const raylib::model::RlModel& model)
				+StaticBody(const std::string& name, const raylib::model::RlModel& model, const std::shared_ptr<raylib::texture::RlTexture>& texture)
				+~StaticBody()
				+getBoundingBox() : BoundingBox& {query}
				+getColor() : RlColor& {query}
				+getPosition() : Vector3f& {query}
				+getScale() : Vector3f& {query}
				#_collisionEnable : bool
				+hasCollisionEnabled() : bool& {query}
				+getRotationDegrees() : float {query}
				+operator->() : raylib :: model :: RlModel*
				#_model : raylib::model::RlModel
				+getModel() : raylib::model::RlModel&
				+getModel() : raylib::model::RlModel& {query}
				+draw() : void
				+init() : void
				+setBoundingBox(const BoundingBox& boundingBox) : void
				+setCollisionEnable(bool value) : void
				+setColor(const raylib::RlColor& color) : void
				+setPosition(const Vector3f& pos) : void
				+setRotationDegrees(const float& degrees, const Vector3f& rotationAxis) : void
				+setScale(const Vector3f& newScale) : void
				+update(const float& delta) : void
			}
		}

		namespace _2D {
			abstract class Button {
				+Button(const std::string& name, const std::shared_ptr<raylib::texture::RlTexture>& texture)
				-_bounds : Rectangle
				-_rectangle : Rectangle
				+getBounds() : Rectangle& {query}
				+getRectangle() : Rectangle& {query}
				-_origin : Vector2f
				-_position : Vector2f
				-_scale : Vector2f
				+getOrigin() : Vector2f& {query}
				+getPosition() : Vector2f& {query}
				+getScale() : Vector2f& {query}
				-_action : bool
				-_isEnabled : bool
				+isEnabled() : bool& {query}
				-_frameHeight : float
				-_rotationDegrees : float
				+getRotationDegrees() : float {query}
				-_frameNum : int
				-_state : int
				-_texture : std::shared_ptr<raylib::texture::RlTexture>
				+getTexture() : std::shared_ptr<raylib::texture::RlTexture>& {query}
				+centerButton(const Vector2f& pos) : void
				+draw() : void
				+init() : void
				+{abstract} pressed() : void
				+setEnabled(const bool& value) : void
				+setOrigin(const Vector2f& origin) : void
				+setPosition(const Vector2f& position) : void
				+setRotationDegrees(const float& rotationDegrees) : void
				+setScale(const Vector2f& scale) : void
				+update(const float& delta) : void
			}

			class Label {
				+Label(const std::string& name, const Vector2f& position, const Vector2f& scale, const float& degrees, const raylib::RlColor& color)
				+~Label()
				-_position : Vector2f
				-_scale : Vector2f
				+getPosition() : Vector2f& {query}
				+getScale() : Vector2f& {query}
				-_rotationDegrees : float
				+getRotationDegrees() : float {query}
				-_color : raylib::RlColor
				+getColor() : raylib::RlColor&
				+getColor() : raylib::RlColor& {query}
				-_textComponent : raylib::text::RlText
				-_text : std::string
				+draw() : void
				+init() : void
				+setColor(raylib::RlColor color) : void
				+setPosition(const Vector2f& position) : void
				+setRotationDegrees(const float& rotationDegrees) : void
				+setScale(const Vector2f& scale) : void
				+setText(const std::string& text) : void
				+update(const float& delta) : void
			}

			abstract class Node2D {
				+Node2D(const std::string& name)
				+Node2D(const Node2D &)
				+~Node2D()
				+{abstract} getPosition() : Vector2f& {query}
				+{abstract} getScale() : Vector2f& {query}
				+{abstract} setPosition(const Vector2f& pos) : void
				+{abstract} setRotationDegrees(const float& degrees) : void
				+{abstract} setScale(const Vector2f& newScale) : void
			}

			class TextureRect {
				+TextureRect(const std::string& name, const std::shared_ptr<raylib::texture::RlTexture>& texture, const Vector2f& position, const Vector2f& scale, const float& degrees, const raylib::RlColor& color)
				+~TextureRect()
				-_position : Vector2f
				-_scale : Vector2f
				+getPosition() : Vector2f& {query}
				+getScale() : Vector2f& {query}
				-_rotationDegrees : float
				+getRotationDegrees() : float {query}
				-_color : raylib::RlColor
				+getColor() : raylib::RlColor&
				+getColor() : raylib::RlColor& {query}
				-_texture : std::shared_ptr<raylib::texture::RlTexture>
				+draw() : void
				+init() : void
				+setColor(const RlColor& color) : void
				+setPosition(const Vector2f& position) : void
				+setRotationDegrees(const float& rotationDegrees) : void
				+setScale(const Vector2f& scale) : void
				+update(const float& delta) : void
			}
		}
	}

	namespace map {
		class MapParser <template<typename T>> {
			+MapParser(const std::string& fileName, const std::unordered_map<char, T>& symbols, const Vector2u& maxSize)
			-_maxSize : Vector2u
			-_size : Vector2u
			+getMaxSize() : Vector2u& {query}
			+getSize() : Vector2u& {query}
			-_file : std::ifstream
			-_buffer : std::string
			-_fileName : std::string
			-removeComment(const std::string& line) : std::string
			+getBuffer() : std::string& {query}
			+getFileName() : std::string& {query}
			+getSymbols() : std::unordered_map<char , T>& {query}
			-_symbols : std::unordered_map<char, T>
			-_map : std::vector<std::vector<T>>
			+getMap() : std::vector<std::vector<T>>& {query}
			+parse() : void
			-parseMap() : void
		}
	}

	namespace ex {
		class GameEngineException {
			+GameEngineException(const std::string& message, const bool& prefix)
			+what() : char* {query}
			-_msg : std::string
		}

		class MapParserException {
			+MapParserException(const std::string& message)
		}
	}

	namespace audio {
		class Music {
			+Music(const std::string& fileName, AbstractSound::SoundCategory category)
			+setVolume(const float& volume) : void
		}

		class Sound {
			+Sound(const std::string& fileName, SoundCategory category)
			+setVolume(const float& volume) : void
		}
	}
}





/' Inheritance relationships '/

gameengine.node.AbstractBase <|- - gameengine.node._2D.Node2D


gameengine.node.AbstractBase <|- - gameengine.node._3D.Node3D


gameengine.AbstractSound <|- - gameengine.audio.Music


gameengine.AbstractSound <|- - gameengine.audio.Sound


gameengine.node._2D.Button <|- - indie.button.IndieButton


gameengine.ex.GameEngineException <|- - gameengine.ex.MapParserException


raylib.builder.IBuilder <|- - raylib.builder.RlCameraBuilder


raylib.builder.IBuilder <|- - raylib.builder.RlImageBuilder


raylib.builder.IBuilder <|- - raylib.builder.RlMeshBuilder


raylib.builder.IBuilder <|- - raylib.builder.RlModelBuilder


raylib.builder.IBuilder <|- - raylib.builder.RlTextBuilder


indie.button.IndieButton <|- - indie.button.ButtonMainMenu


indie.button.IndieButton <|- - indie.button.ButtonQuit


indie.button.IndieButton <|- - indie.button.ButtonRestart


indie.button.IndieButton <|- - indie.button.ButtonResume


gameengine.node._3D.KinematicBody <|- - indie.Player


gameengine.node._2D.Node2D <|- - gameengine.node._2D.Button


gameengine.node._2D.Node2D <|- - gameengine.node._2D.Label


gameengine.node._2D.Node2D <|- - gameengine.node._2D.TextureRect


gameengine.node._3D.Node3D <|- - gameengine.node._3D.Grid3D


gameengine.node._3D.Node3D <|- - gameengine.node._3D.StaticBody


raylib.ex.RaylibException <|- - raylib.ex.BuilderException


raylib.ex.RaylibException <|- - raylib.ex.CameraException


raylib.ex.RaylibException <|- - raylib.ex.InvalidArgumentException


raylib.ex.RaylibException <|- - raylib.ex.RlAnimationException


raylib.ex.RaylibException <|- - raylib.ex.RlModelException


raylib.ex.RaylibException <|- - raylib.ex.WindowException


raylib.audio.RlMusic <|- - gameengine.audio.Music


raylib.audio.RlSound <|- - gameengine.audio.Sound


gameengine.Scene <|- - indie.ChooseNumberPlayerScene


gameengine.Scene <|- - indie.GameScene


gameengine.Scene <|- - indie.MainMenuScene


gameengine.Scene <|- - indie.StartScene


gameengine.Scene <|- - indie.WinningScene


gameengine.node._3D.StaticBody <|- - indie.Bomb


gameengine.node._3D.StaticBody <|- - indie.Bonus


gameengine.node._3D.StaticBody <|- - gameengine.node._3D.KinematicBody


gameengine.node._3D.StaticBody <|- - indie.Magma


gameengine.node._3D.StaticBody <|- - indie.Wall


gameengine.node._3D.StaticBody <|- - indie.WallDestroyable


gameengine.node._2D.TextureRect <|- - indie.Image





/' Aggregation relationships '/

gameengine.AudioManager *- - gameengine.AbstractSound


gameengine.AudioManager *- - gameengine.AudioManager


indie.Bomb *- - gameengine.AudioManager


gameengine.node._2D.Button *- - raylib.texture.RlTexture


indie.ChooseNumberPlayerScene *- - indie.map.Map3DLoader


indie.GameScene *- - indie.map.Map


indie.GameScene *- - indie.map.Map3DLoader


indie.GameScene *- - gameengine.TextureManager


indie.GlobalInstance *- - indie.GlobalInstance


gameengine.node._3D.Grid3D *- - raylib.RlColor


gameengine.node._2D.Label *- - raylib.RlColor


gameengine.node._2D.Label *- - raylib.text.RlText


indie.map.Map *- - gameengine.map.MapParser


indie.map.Map *- - gameengine.node._3D.StaticBody


indie.map.Map3DLoader "2" *- - indie.map.Map


indie.map.Map3DLoader *- - indie.map.Map3DLoader


indie.map.Map3DLoader *- - indie.map.Map::MapType


indie.map.Map3DLoader *- - gameengine.TextureManager


indie.Player *- - gameengine.AudioManager


indie.Player *- - raylib.model.RlModelAnimation


indie.Player *- - gameengine.TextureManager


raylib.model.RlAnimation *- - raylib.model.RlModel


raylib.RlColor "26" *- - raylib.RlColor


raylib.image.RlImage *- - indie.Image


raylib.builder.RlImageBuilder "9" *- - raylib.RlColor


raylib.builder.RlMeshBuilder "2" *- - raylib.image.RlImage


raylib.model.RlModel *- - raylib.RlColor


raylib.model.RlModel *- - raylib.model.RlMesh


raylib.model.RlModel *- - raylib.texture.RlTexture


raylib.model.RlModelAnimation *- - raylib.model.RlModel


raylib.builder.RlModelBuilder *- - raylib.RlColor


raylib.builder.RlModelBuilder *- - raylib.model.RlMesh


raylib.builder.RlModelBuilder *- - raylib.texture.RlTexture


raylib.audio.RlMusic *- - gameengine.audio.Music


raylib.audio.RlSound *- - gameengine.audio.Sound


raylib.text.RlText *- - raylib.RlColor


raylib.text.RlText *- - raylib.text.RlFont


raylib.builder.RlTextBuilder *- - raylib.RlColor


raylib.builder.RlTextBuilder *- - raylib.text.RlFont


raylib.window.RlWindow *- - raylib.RlCamera


raylib.window.RlWindow *- - raylib.window.RlWindow


gameengine.Scene *- - gameengine.node.AbstractBase


gameengine.SceneManager *- - gameengine.Scene


gameengine.SceneManager *- - gameengine.SceneManager


gameengine.node._3D.StaticBody *- - raylib.model.RlModel


gameengine.TextureManager "2" *- - raylib.texture.RlTexture


gameengine.TextureManager *- - gameengine.TextureManager


gameengine.node._2D.TextureRect *- - raylib.RlColor


gameengine.node._2D.TextureRect *- - raylib.texture.RlTexture






/' Nested objects '/

gameengine.AbstractSound +- - gameengine.AbstractSound::SoundCategory


indie.Bonus +- - indie.Bonus::BonusType


indie.map.Map +- - indie.map.Map::MapType


indie.Player +- - indie.Player::State


raylib.builder.RlImageBuilder +- - raylib.builder.RlImageBuilder::ImageType


raylib.builder.RlImageBuilder +- - raylib.builder.RlImageBuilder::ParameterName


raylib.builder.RlMeshBuilder +- - raylib.builder.RlMeshBuilder::MeshType


raylib.builder.RlMeshBuilder +- - raylib.builder.RlMeshBuilder::ParameterName


raylib.builder.RlModelBuilder +- - raylib.builder.RlModelBuilder::RequiredParameter


raylib.builder.RlModelBuilder +- - raylib.builder.RlModelBuilder::ValidType




@enduml

@startuml






namespace raylib {
	class GlStateManager {
		+{static} color(const RlColor& color) : void
		+{static} color(unsigned char r, unsigned char g, unsigned char b, unsigned char a) : void
		+{static} color(float r, float g, float b, float a) : void
		+{static} color(unsigned char r, unsigned char g, unsigned char b) : void
		+{static} disableBackfaceCulling() : void
		+{static} disableColorBlend() : void
		+{static} disableDepthMask() : void
		+{static} disableDepthTest() : void
		+{static} disableScissorTest() : void
		+{static} disableSmoothLines() : void
		+{static} disableWireMode() : void
		+{static} enableBackfaceCulling() : void
		+{static} enableColorBlend() : void
		+{static} enableDepthMask() : void
		+{static} enableDepthTest() : void
		+{static} enableScissorTest() : void
		+{static} enableSmoothLines() : void
		+{static} enableWireMode() : void
		+{static} popMatrix() : void
		+{static} pushMatrix() : void
		+{static} rotate(const Vector3f& rotation) : void
		+{static} scale(const Vector3f& scale) : void
		+{static} scissor(int x, int y, int width, int height) : void
		+{static} scissor(const Rectangle& rect) : void
		+{static} translate(const Vector3f& translation) : void
	}

	class Random {
		+Random()
		+generate(double min, double max) : double
		+generate(float min, float max) : float
		+generate(int min, int max) : int
		+generate(long min, long max) : long
		+generate(short min, short max) : short
		-_random_device : std::random_device
		+generateSizeT(std::size_t min, std::size_t max) : std::size_t
	}

	class RlCamera {
		+RlCamera()
		+RlCamera(const Vector3f& position, const Vector3f& target, const Vector3f& lookingPoint, const float& fovy, const CameraProjection& projection, const CameraMode& cameraMode)
		-_camera : Camera3D
		+get() : Camera3D& {query}
		-_cameraMode : CameraMode
		-_mode : CameraMode
		+getConstructedCameraMode() : CameraMode& {query}
		+getMode() : CameraMode& {query}
		-_projection : CameraProjection
		+getConstructedProjection() : CameraProjection& {query}
		+geMatrix() : Matrix
		-_lookingPoint : Vector3f
		-_position : Vector3f
		-_target : Vector3f
		+getConstructedLookingPoint() : Vector3f& {query}
		+getConstructedPosition() : Vector3f& {query}
		+getConstructedTarget() : Vector3f& {query}
		-_fovy : float
		+getConstructedFovy() : float& {query}
		+reset() : void
		+setCameraMode(const CameraMode& mode) : void
		+setFov(const float& fovy) : void
		+setPosition(const Vector3f& position) : void
		+setProjection(const CameraProjection& projection) : void
		+setTarget(const Vector3f& target) : void
		+update() : void
	}

	class RlColor {
		+RlColor(Color color)
		+RlColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
		+RlColor(std::uint32_t color)
		+RlColor(const Vector4f& normalizedColor)
		+RlColor(float hue, float saturation, float value)
		-_color : Color
		+getColor() : Color& {query}
		+operator+(unsigned char value) : RlColor&
		+operator+=(unsigned char value) : RlColor&
		+operator-(unsigned char value) : RlColor&
		+operator-=(unsigned char value) : RlColor&
		+setAlpha(unsigned char a) : RlColor&
		+setBlue(unsigned char b) : RlColor&
		+setGreen(unsigned char g) : RlColor&
		+setRed(unsigned char r) : RlColor&
		+toHSV() : Vector3f
		+normalize() : Vector4f {query}
		+operator!=(const RlColor& rhs) : bool {query}
		+operator==(const RlColor& rhs) : bool {query}
		+{static} Beige : static const RlColor
		+{static} Black : static const RlColor
		+{static} Blue : static const RlColor
		+{static} Brown : static const RlColor
		+{static} DarkBlue : static const RlColor
		+{static} DarkBrown : static const RlColor
		+{static} DarkGray : static const RlColor
		+{static} DarkGreen : static const RlColor
		+{static} DarkPurple : static const RlColor
		+{static} Gold : static const RlColor
		+{static} Gray : static const RlColor
		+{static} Green : static const RlColor
		+{static} LightGray : static const RlColor
		+{static} Lime : static const RlColor
		+{static} Magenta : static const RlColor
		+{static} Maroon : static const RlColor
		+{static} Orange : static const RlColor
		+{static} Pink : static const RlColor
		+{static} Purple : static const RlColor
		+{static} RayWhite : static const RlColor
		+{static} Red : static const RlColor
		+{static} SkyBlue : static const RlColor
		+{static} Transparent : static const RlColor
		+{static} Violet : static const RlColor
		+{static} White : static const RlColor
		+{static} Yellow : static const RlColor
		+toInteger() : std::uint32_t {query}
		+getAlpha() : unsigned char& {query}
		+getBlue() : unsigned char& {query}
		+getGreen() : unsigned char& {query}
		+getRed() : unsigned char& {query}
		+alpha(float alpha) : void
		+alphaBlend(const RlColor& src, const RlColor& tint) : void
		+setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a) : void
		+setColor(const Color& color) : void
	}

	class Vector2 <template<typename T>> {
		+Vector2()
		+Vector2(T x, T y)
		+x : T
		+y : T
		+operator!=(const Vector2<T>& other) : bool {query}
		+operator==(const Vector2<T>& other) : bool {query}
	}

	class Vector3 <template<typename T>> {
		+Vector3()
		+Vector3(T x, T y, T z)
		+x : T
		+y : T
		+z : T
		+operator!=(const Vector3<T>& other) : bool {query}
		+operator==(const Vector3<T>& other) : bool {query}
	}

	class Vector4 <template<typename T>> {
		+Vector4()
		+Vector4(T x, T y, T z, T w)
		+w : T
		+x : T
		+y : T
		+z : T
		+operator!=(const Vector4& other) : bool {query}
		+operator==(const Vector4& other) : bool {query}
	}

	namespace window {
		class RlWindow {
			+RlWindow()
			+~RlWindow()
			-_isCreated : bool
			-_isOpen : bool
			+hasState(const ConfigFlags& flag) : bool
			+isFocused() : bool
			+isFullScreen() : bool
			+isHidden() : bool
			+isMaximized() : bool
			+isMinimized() : bool
			+isOpen() : bool
			+isReady() : bool
			+isResized() : bool
			+isIsCreated() : bool& {query}
			-_height : int
			-_minHeight : int
			-_minWidth : int
			-_width : int
			+getHeight() : int& {query}
			+getMinHeight() : int& {query}
			+getMinWidth() : int& {query}
			+getWidth() : int& {query}
			-_camera : raylib::RlCamera
			+getCamera() : raylib::RlCamera&
			+getCamera() : raylib::RlCamera& {query}
			-{static} _instance : static std::shared_ptr<RlWindow>
			+{static} getInstance() : std::shared_ptr<RlWindow>&
			-_title : std::string
			+getTitle() : std::string& {query}
			+clearState(unsigned int flags) : void
			+createWindow(const std::string& title, int width, int height, int fps) : void
			+maximize() : void
			+minimize() : void
			+restore() : void
			+setCamera(const RlCamera& camera) : void
			+setConfigFlags(unsigned int flags) : void
			+setIcon(const image::RlImage& image) : void
			+setIsOpen(const bool& isOpen) : void
			+setMinSize(int width, int height) : void
			+setMonitor(int monitor) : void
			+setPosition(int x, int y) : void
			+setSize(int width, int height) : void
			+setState(unsigned int flags) : void
			+setTitle(const std::string& title) : void
			+takeScreenshot(const std::string& fileName) : void
			+toggleFullscreen() : void
		}

		class System {
			+{static} getMonitorPosition(int monitorIndex) : Vector2f
			+{static} getWindowPosition() : Vector2f
			+{static} getWindowScaleDPI() : Vector2f
			+{static} getMonitorPhysicalSize(int monitorIndex) : Vector2i
			+{static} getMonitorSize(int monitorIndex) : Vector2i
			+{static} getScreenSize() : Vector2i
			+{static} getCurrentMonitor() : int
			+{static} getMonitorCount() : int
			+{static} getMonitorHeight(int monitorIndex) : int
			+{static} getMonitorPhysicalHeight(int monitorIndex) : int
			+{static} getMonitorPhysicalWidth(int monitorIndex) : int
			+{static} getMonitorRefreshRate(int monitorIndex) : int
			+{static} getMonitorWidth(int monitorIndex) : int
			+{static} getScreenHeight() : int
			+{static} getScreenWidth() : int
			+{static} getClipboardText() : std::string
			+{static} getMonitorName(int monitorIndex) : std::string
			+{static} setClipboardText(const std::string& text) : void
		}
	}

	namespace texture {
		class RlRenderTexture {
			+RlRenderTexture(int width, int height)
			+~RlRenderTexture()
			-_renderTexture : RenderTexture2D
			+getRenderTexture() : RenderTexture2D& {query}
		}

		class RlTexture {
			+RlTexture(const std::string& fileName)
			+RlTexture(const image::RlImage& image)
			+RlTexture(const image::RlImage& image, const CubemapLayout& layout)
			+~RlTexture()
			-_textureRec : Rectangle
			+getTextureRec() : Rectangle& {query}
			-_texture : Texture2D
			+get() : Texture2D& {query}
			+getTexture() : Texture2D&
			+getFormat() : int& {query}
			+getHeight() : int& {query}
			+getMipmaps() : int& {query}
			+getWidth() : int& {query}
			-_texturePath : std::string
			+getPath() : std::string& {query}
			+getID() : unsigned int& {query}
			+genTextureMipmaps() : void
			+setFilter(const TextureFilter& filter) : void
			+setWrap(const TextureWrap& wrap) : void
			+update(const void* pixels) : void
			+updateRect(const Rectangle& rec, const void* pixels) : void
		}
	}

	namespace text {
		class RlFont {
			+RlFont()
			+RlFont(const std::string& fontPath)
			+RlFont(const int& fontSize)
			+RlFont(const std::string& fontPath, const int& fontSize, int* fontChars, const int& glyphCount)
			+RlFont(const image::RlImage& image, const RlColor& key, const int& firstChar)
			+RlFont(const std::string& fileType, const unsigned char* fileData, int dataSize, const int& fontSize, int* fontChars, const int& glyphCount)
			+~RlFont()
			-_font : Font
			+getFont() : Font& {query}
			-_fontSize : int
			+getFontSize() : int {query}
			+{static} getDefaultFont() : std::shared_ptr<RlFont>
			-_fontPath : std::string
			+getFontPath() : std::string& {query}
		}

		class RlText {
			+RlText(const std::string& text, const Vector2f& position, const RlColor& color)
			+RlText(const std::string& text, std::shared_ptr<RlFont>& font, const Vector2f& position, const RlColor& color)
			+RlText(const std::string& text, const std::string& fontPath, float fontSize, const Vector2f& position, const RlColor& color)
			-_color : RlColor
			+getColor() : RlColor& {query}
			-_origin : Vector2f
			-_position : Vector2f
			+getSize() : Vector2f {query}
			+getOrigin() : Vector2f& {query}
			+getPosition() : Vector2f& {query}
			-_fontSize : float
			-_rotation : float
			-_textSpacing : float
			+getFontSize() : float {query}
			+getRotation() : float {query}
			+getTextSpacing() : float {query}
			+getWidth() : float {query}
			-_font : std::shared_ptr<RlFont>
			+getFont() : std::shared_ptr<RlFont>& {query}
			-_text : std::string
			+getText() : std::string& {query}
			+setColor(const RlColor& color) : void
			+setFont(const std::shared_ptr<RlFont>& font) : void
			+setFontSize(float fontSize) : void
			+setOrigin(const Vector2f& origin) : void
			+setPosition(float x, float y) : void
			+setPosition(const Vector2f& pos) : void
			+setRotation(float rotation) : void
			+setText(const std::string& text) : void
			+setTextSpacing(float textSpacing) : void
		}

		class TextCodepoint {
			+TextCodepoint(const std::string& text)
			+getCodepointsCount() : int {query}
			+{static} codePointToUTF8(const int& codepoint, int& byteSize) : std::string
			+toUTF8String(const int& bytesLength) : std::string
			-_codepoints : std::vector<int>
			+getCodepoints() : std::vector<int>& {query}
		}
	}

	namespace shader {
		class RlShader {
			+RlShader()
			+~RlShader()
			-_shader : Shader
			+getShader() : Shader& {query}
			+getLocation(const std::string& uniformName) : int
			+getLocationAttrib(const std::string& attribName) : int
			+load(const std::string& vsFileName, const std::string& fsFileName) : void
			+loadFromMemory(const std::string& vsCode, const std::string& fsCode) : void
			+setValue(int locIndex, const void* value, int uniformType) : void
			+setValueMatrix(int locIndex, const Matrix& mat) : void
			+setValueTexture(int locIndex, const texture::RlTexture& texture) : void
			+setValueV(int locIndex, const void* value, int uniformType, int count) : void
		}
	}

	namespace model {
		class MeshGenerator {
			+{static} genMeshCone(const float& radius, const float& height, const int& slices) : RlMesh
			+{static} genMeshCube(const float& width, const float& height, const float& length) : RlMesh
			+{static} genMeshCubicmap(const image::RlImage& cubicmap, const Vector3f& cubeSize) : RlMesh
			+{static} genMeshCylinder(const float& radius, const float& height, const int& slices) : RlMesh
			+{static} genMeshHeightmap(const image::RlImage& heightmap, const Vector3f& size) : RlMesh
			+{static} genMeshHemiSphere(const float& radius, const int& rings, const int& slices) : RlMesh
			+{static} genMeshKnot(const float& radius, const float& size, const int& radSeg, const int& sides) : RlMesh
			+{static} genMeshPlane(const float& width, const float& length, const int& resX, const int& resZ) : RlMesh
			+{static} genMeshPoly(const int& sides, const float& radius) : RlMesh
			+{static} genMeshSphere(const float& radius, const int& rings, const int& slices) : RlMesh
			+{static} genMeshTorus(const float& radius, const float& size, const int& radSeg, const int& sides) : RlMesh
		}

		class RlAnimation {
			+RlAnimation()
			+RlAnimation(const std::string& animationDir, const std::string& extension)
			-_isLoaded : bool
			+isLoaded() : bool& {query}
			+getAnimationsSize() : std::size_t {query}
			-_animationModels : std::vector<RlModel>
			+getAnimationModels() : std::vector<RlModel>& {query}
			-_frame : unsigned int
			+getFrame() : unsigned int& {query}
			+update() : void
		}

		class RlMaterial {
			+RlMaterial(const std::string& fileName)
			+RlMaterial(Material& material)
			+~RlMaterial()
			-_material : Material
			+getMaterial() : Material& {query}
			+getMaterial() : Material&
		}

		class RlMesh {
			+RlMesh(const Mesh& mesh)
			+RlMesh(const RlMesh& mesh)
			+~RlMesh()
			+getBoundingBox() : BoundingBox
			+getMesh() : Mesh& {query}
			+operator=(const RlMesh& mesh) : RlMesh&
			+exportMesh(const std::string& fileName) : bool
			-_mesh : std::shared_ptr<Mesh>
			+getMeshSharedPtr() : std::shared_ptr<Mesh>& {query}
			+genBinormals() : void
			+genTangents() : void
			+updateBuffer(const int& index, void* data, const int& dataSize, const int& offset) : void
			+uploadInGPU(const bool& dynamic) : void
		}

		class RlModel {
			+RlModel(const std::string& fileName)
			+RlModel(const std::string& fileName, const std::string& textureName)
			+RlModel(const std::shared_ptr<RlMesh>& mesh)
			+RlModel(const RlMesh& mesh)
			+RlModel(const RlModel& model)
			+~RlModel()
			-_baseBoudingBox : BoundingBox
			-_boundingBox : BoundingBox
			+getDefaultBoundingBox() : BoundingBox {query}
			+getBaseBoundingBox() : BoundingBox& {query}
			+getBoundingBox() : BoundingBox& {query}
			+getModel() : Model& {query}
			-_color : RlColor
			+getColor() : RlColor& {query}
			+operator=(const RlModel& model) : RlModel&
			-_position : Vector3f
			-_rotationAxis : Vector3f
			-_scale : Vector3f
			+getPosition() : Vector3f& {query}
			+getRotationAxis() : Vector3f& {query}
			+getScale() : Vector3f& {query}
			-_rotationAngle : float
			+getRotationAngle() : float& {query}
			-_model : std::shared_ptr<Model>
			-_mesh : std::shared_ptr<RlMesh>
			-_texture : std::shared_ptr<texture::RlTexture>
			+getTexture() : std::shared_ptr<texture::RlTexture>& {query}
			+setBoundingBox(const BoundingBox& boundingBox) : void
			+setColor(const RlColor& color) : void
			+setMaterialTexture(const std::shared_ptr<texture::RlTexture>& texture) : void
			+setMaterialTexture(const std::shared_ptr<texture::RlTexture>& texture, const int& materialIndex) : void
			+setMaterialTexture(const std::shared_ptr<texture::RlTexture>& texture, const int& materialIndex, const MaterialMapIndex& type) : void
			+setMeshMaterial(const int& meshId, const int& materialId) : void
			+setPosition(const Vector3f& position) : void
			+setPosition(const float& x, const float& y, const float& z) : void
			+setRotationAngle(float rotationAngle) : void
			+setRotationAxis(const Vector3f& rotationAxis) : void
			+setRotationAxis(const float& x, const float& y, const float& z) : void
			+setScale(const Vector3f& scale) : void
			+setScale(const float& x, const float& y, const float& z) : void
		}

		class RlModelAnimation {
			+RlModelAnimation(const RlModel& model, const std::string& fileName)
			+~RlModelAnimation()
			-_anims : ModelAnimation*
			-_model : RlModel
			+animationIndexIsValid(const unsigned int& animIndex) : bool
			-_frameCount : int
			-_animations : std::vector<ModelAnimation>
			-_count : unsigned int
			+getCount() : unsigned int {query}
			+incrementFrameCount(const int& value) : void
			+unload(const unsigned int& animIndex) : void
			+update(const unsigned int& animIndex) : void
		}
	}

	namespace image {
		class ImageDrawHelper {
			+{static} clearBackground(image::RlImage& dst, const RlColor& color) : void
			+{static} drawCircle(image::RlImage& dst, int centerX, int centerY, int radius, const RlColor& color) : void
			+{static} drawCircle(image::RlImage& dst, const Vector2f& center, int radius, const RlColor& color) : void
			+{static} drawImage(image::RlImage& dst, const image::RlImage& src, const Rectangle& srcRec, const Rectangle& dstRec, const RlColor& tint) : void
			+{static} drawImageText(image::RlImage& dst, const std::string& text, int posX, int posY, int fontSize, const RlColor& color) : void
			+{static} drawImageText(image::RlImage& dst, const raylib::text::RlFont& font, const std::string& text, const Vector2f& position, float fontSize, float spacing, const RlColor& tint) : void
			+{static} drawLine(image::RlImage& dst, int startPosX, int startPosY, int endPosX, int endPosY, const RlColor& color) : void
			+{static} drawLine(image::RlImage& dst, const Vector2f& start, const Vector2f& end, const RlColor& color) : void
			+{static} drawPixel(image::RlImage& dst, int posX, int posY, const RlColor& color) : void
			+{static} drawPixel(image::RlImage& dst, const Vector2f& position, const RlColor& color) : void
			+{static} drawRectangle(image::RlImage& dst, int posX, int posY, int width, int height, const RlColor& color) : void
			+{static} drawRectangle(image::RlImage& dst, const Vector2f& position, const Vector2f& size, const RlColor& color) : void
			+{static} drawRectangleLines(image::RlImage& dst, const Rectangle& rec, int thick, const RlColor& color) : void
			+{static} drawRectangleRec(image::RlImage& dst, const Rectangle& rec, const RlColor& color) : void
		}

		class ImageGenerator {
			+{static} genImageCellular(const int& width, const int& height, const int& tileSize) : RlImage
			+{static} genImageChecked(const int& width, const int& height, const int& checksX, const int& checksY, const RlColor& col1, const RlColor& col2) : RlImage
			+{static} genImageColor(const int& width, const int& height, const RlColor& color) : RlImage
			+{static} genImageGradientH(const int& width, const int& height, const RlColor& left, const RlColor& right) : RlImage
			+{static} genImageGradientRadial(const int& width, const int& height, float density, const RlColor& inner, const RlColor& outer) : RlImage
			+{static} genImageGradientV(const int& width, const int& height, const RlColor& top, const RlColor& bottom) : RlImage
			+{static} genImageWhiteNoise(const int& width, const int& height, float factor) : RlImage
		}

		class RlImage {
			+RlImage(const Image& image)
			+RlImage(const Image& image, int frameCount)
			+~RlImage()
			-_image : Image
			+getImage() : Image& {query}
			+getImage() : Image&
			+getImageAlphaBorder(float threshold) : Rectangle
			+getImageColor(int x, int y) : RlColor
			+copy() : RlImage
			+subImage(const Rectangle& rec) : RlImage
			+save(const std::string& fileName) : bool
			+saveAsCode(const std::string& fileName) : bool
			-_frameCount : int
			+getFrameCount() : int& {query}
			+loadImageColors() : std::vector<RlColor>
			+loadImagePalette(int maxPaletteSize) : std::vector<RlColor>
			+alphaClear(const RlColor& color, float threshold) : void
			+alphaCrop(float threshold) : void
			+alphaMask(const RlImage& alphaMask) : void
			+alphaPremultiply() : void
			+changeFormat(int newFormat) : void
			+colorBrightness(int brightness) : void
			+colorContrast(float contrast) : void
			+colorGrayscale() : void
			+colorInvert() : void
			+colorReplace(const RlColor& color, const RlColor& replace) : void
			+colorTint(const RlColor& color) : void
			+crop(const Rectangle& crop) : void
			+dither(int rBpp, int gBpp, int bBpp, int aBpp) : void
			+flipHorizontal() : void
			+flipVertical() : void
			+mipmaps() : void
			+resize(int newWidth, int newHeight) : void
			+resizeCanvas(int newWidth, int newHeight, int offsetX, int offsetY, const RlColor& fill) : void
			+resizeNearesetNeighbor(int newWidth, int newHeight) : void
			+rotateClockwise() : void
			+rotateCounterClockwise() : void
			+toPot(const RlColor& fill) : void
		}
	}

	namespace helper {
		class AudioHelper {
			+{static} isAudioDeviceReady() : bool
			+{static} getNumberOfSoundsPlaying() : int
			-{static} _audioDeviceInit : static bool
			+{static} closeAudioDevice() : void
			+{static} initAudioDevice() : void
			+{static} setAudioStreamBufferSizeDefault(const int& size) : void
			+{static} setMasterVolume(float volume) : void
			+{static} stopMultiSound() : void
		}

		class CameraHelper {
			+{static} setAltControl(int keyAlt) : void
			+{static} setCameraMode(const RlCamera& camera, const CameraMode& mode) : void
			+{static} setMoveControls(int keyFront, int keyBack, int keyRight, int keyLeft, int keyUp, int keyDown) : void
			+{static} setPanControl(int keyPan) : void
			+{static} setSmoothZoomControl(int keySmoothZoom) : void
		}

		class Collision2DHelper {
			+{static} getCollisionRec(const Rectangle& rec1, const Rectangle& rec2) : Rectangle
			+{static} checkCollisionCircleRec(const Vector2f& center, const float& radius, const Rectangle& rec) : bool
			+{static} checkCollisionCircles(const Vector2f& center1, const float& radius1, const Vector2f& center2, const float& radius2) : bool
			+{static} checkCollisionLines(const Vector2f& startPos1, const Vector2f& endPos1, const Vector2f& startPos2, const Vector2f& endPos2, Vector2f& collisionPoint) : bool
			+{static} checkCollisionPointCircle(const Vector2f& point, const Vector2f& center, const float& radius) : bool
			+{static} checkCollisionPointLine(const Vector2f& point, const Vector2f& p1, const Vector2f& p2, const int& threshold) : bool
			+{static} checkCollisionPointRec(const Vector2f& point, const Rectangle& rec) : bool
			+{static} checkCollisionPointTriangle(const Vector2f& point, const Vector2f& p1, const Vector2f& p2, const Vector2f& p3) : bool
			+{static} checkCollisionRecs(const Rectangle& rec1, const Rectangle& rec2) : bool
		}

		class Collision3dHelper {
			+{static} getRayCollisionBox(const Ray& ray, const BoundingBox& box) : RayCollision
			+{static} getRayCollisionMesh(const Ray& ray, const model::RlMesh& mesh, const Matrix& transform) : RayCollision
			+{static} getRayCollisionModel(const Ray& ray, const model::RlModel& model) : RayCollision
			+{static} getRayCollisionQuad(const Ray& ray, const Vector3f& p1, const Vector3f& p2, const Vector3f& p3, const Vector3f& p4) : RayCollision
			+{static} getRayCollisionSphere(const Ray& ray, const Vector3f& center, const float& radius) : RayCollision
			+{static} getRayCollisionTriangle(const Ray& ray, const Vector3f& p1, const Vector3f& p2, const Vector3f& p3) : RayCollision
			+{static} checkCollisionBoxSphere(const BoundingBox& box, const Vector3f& center, const float& radius) : bool
			+{static} checkCollisionBoxes(const BoundingBox& box1, const BoundingBox& box2) : bool
			+{static} checkCollisionSpheres(const Vector3f& center1, const float& radius1, const Vector3f& center2, const float& radius2) : bool
		}

		class ColorHelper {
			+{static} colorAlpha(const RlColor& color, float alpha) : RlColor
			+{static} colorAlphaBlend(const RlColor& dst, const RlColor& src, const RlColor& tint) : RlColor
			+{static} colorFromHSV(float hue, float saturation, float value) : RlColor
			+{static} colorFromNormalized(const Vector4f& normalizedColor) : RlColor
			+{static} getColor(unsigned int hexValue) : RlColor
			+{static} getPixelColor(void* srcPtr, int format) : RlColor
			+{static} colorToHSV(const RlColor& color) : Vector3f
			+{static} getPixelDataSize(int width, int height, int format) : int
			+{static} setPixelColor(void* dstPtr, const RlColor& color, int format) : void
		}

		class CoreHelper {
			+{static} loadVrStereoConfig(const VrDeviceInfo& device) : VrStereoConfig
			+{static} getTime() : double
			+{static} getFrameTime() : float
			+{static} getFPS() : int
			+{static} openURL(const std::string& url) : void
			+{static} setFramerateLimit(int fps) : void
			+{static} unloadVrStereoConfig(const VrStereoConfig& config) : void
		}

		class FileHelper {
			+{static} directoryExists(const std::string& dirPath) : bool
			+{static} fileExists(const std::string& fileName) : bool
			+{static} isFileDropped() : bool
			+{static} isFileExtension(const std::string& fileName, const std::string& ext) : bool
			+{static} saveFileText(const std::string& fileName, const std::string& text) : bool
			+{static} getFileModTime(const std::string& fileName) : long long
			+{static} getDirectoryPath(const std::string& filePath) : std::string
			+{static} getFileExtension(const std::string& fileName) : std::string
			+{static} getFileName(const std::string& filePath) : std::string
			+{static} getFileNameWithoutExt(const std::string& filePath) : std::string
			+{static} getPrevDirectoryPath(const std::string& dirPath) : std::string
			+{static} getWorkingDirectory() : std::string
			+{static} loadFileText(const std::string& fileName) : std::string
			+{static} getDirectoryFiles(const std::string& dirPath, const bool& recursive) : std::vector<std::string>
			+{static} getDirectoryFiles(const std::string& dirPath, const std::function<bool ( const std::string& )>& filter) : std::vector<std::string>
			+{static} getDirectoryFiles(const std::string& dirPath, const bool& recursive, const std::function<bool ( const std::string& fileName )>& filterFunction) : std::vector<std::string>
			+{static} getDroppedFiles() : std::vector<std::string>
			+{static} loadFileData(const std::string& fileName) : std::vector<unsigned char>
			+{static} changeDirectory(const std::string& dir) : void
		}

		class ImageHelper {
			+{static} fromText(const std::string& text, int fontSize, const RlColor& color) : raylib::image::RlImage
			+{static} fromText(const raylib::text::RlFont& font, const std::string& text, float fontSize, float spacing, const RlColor& tint) : raylib::image::RlImage
			+{static} genImageFontAtlas(const GlyphInfo* chars, Rectangle** recs, int glyphCount, int fontSize, int padding, int packMethod) : raylib::image::RlImage
			+{static} load(const std::string& fileName) : raylib::image::RlImage
			+{static} loadAnim(const std::string& fileName) : raylib::image::RlImage
			+{static} loadFromMemory(const std::string& fileType, const unsigned char* fileData, int dataSize) : raylib::image::RlImage
			+{static} loadFromScreen() : raylib::image::RlImage
			+{static} loadFromTexture(const Texture2D& texture) : raylib::image::RlImage
			+{static} loadRaw(const std::string& fileName, int width, int height, int format, int headerSize) : raylib::image::RlImage
		}

		class TextHelper {
			+{static} getGlyphInfo(const raylib::text::RlFont& font, int codepoint) : GlyphInfo
			+{static} getGlyphAtlasRec(const raylib::text::RlFont& font, int codepoint) : Rectangle
			+{static} measureText(const raylib::text::RlFont& font, const std::string& text) : Vector2f
			+{static} measureText(const raylib::text::RlFont& font, const std::string& text, float fontSize, float spacing) : Vector2f
			+{static} getGlyphIndex(const raylib::text::RlFont& font, int codepoint) : int
			+{static} measureText(const std::string& text, int fontSize) : int
		}

		class VectorHelper {
			+{static} toVectorf(const::Vector2& vector) : Vector2f
			+{static} toVectorf(const::Vector3& vector) : Vector3f
			+{static} toVectorf(const::Vector4& vector) : Vector4f
			+toRaylibVector(const Vector2f& vector) : static::Vector2
			+toRaylibVector(const Vector3f& vector) : static::Vector3
			+toRaylibVector(const Vector4f& vector) : static::Vector4
		}

		class WorldHelper {
			+{static} getScreenToWorld2D(const Vector2f& position, const Camera2D& camera) : Vector2f
			+{static} getWorldToScreen(const Vector3f& position, const RlCamera& camera) : Vector2f
			+{static} getWorldToScreen2D(const Vector2f& position, const Camera2D& camera) : Vector2f
			+{static} getWorldToScreenEx(const Vector3f& position, const RlCamera& camera, int width, int height) : Vector2f
		}

		namespace input {
			class CursorHelper {
				+{static} isCursorHidden() : bool
				+{static} isCursorOnScreen() : bool
				+{static} disableCursor() : void
				+{static} enableCursor() : void
				+{static} hideCursor() : void
				+{static} showCursor() : void
			}

			class GamepadHelper {
				+{static} isGamepadAvailable(const int& gamepad) : bool
				+{static} isGamepadButtonDown(const int& gamepad, const GamepadButton& button) : bool
				+{static} isGamepadButtonPressed(const int& gamepad, const GamepadButton& button) : bool
				+{static} isGamepadButtonReleased(const int& gamepad, const GamepadButton& button) : bool
				+{static} isGamepadButtonUp(const int& gamepad, const GamepadButton& button) : bool
				+{static} getGamepadAxisMovement(const int& gamepad, const GamepadAxis& axis) : float
				+{static} getGamepadAxisCount(const int& gamepad) : int
				+{static} getGamepadButtonPressed() : int
				+{static} setGamepadMappings(const std::string& mappings) : int
				+{static} getGamepadName(const int& gamepad) : std::string
			}

			class KeyboardHelper {
				+{static} isKeyDown(const KeyboardKey& key) : bool
				+{static} isKeyPressed(const KeyboardKey& key) : bool
				+{static} isKeyReleased(const KeyboardKey& key) : bool
				+{static} isKeyUp(const KeyboardKey& key) : bool
				+{static} getCharPressed() : int
				+{static} getKeyPressed() : int
				+{static} getKeyName(const int& key, const int& scancode) : std::string
				+{static} getPressedKeys() : std::vector<KeyboardKey>
				+{static} getPressedChars() : std::vector<int>
				+{static} setExitKey(const KeyboardKey& key) : void
			}

			class MouseHelper {
				+{static} getMouseRay(const Vector2f& mousePosition, const RlCamera& camera) : Ray
				+{static} getMouseDelta() : Vector2f
				+{static} getMousePosition() : Vector2f
				+{static} isMouseButtonDown(const MouseButton& button) : bool
				+{static} isMouseButtonPressed(const MouseButton& button) : bool
				+{static} isMouseButtonReleased(const MouseButton& button) : bool
				+{static} isMouseButtonUp(const MouseButton& button) : bool
				+{static} getMouseWheelMove() : float
				+{static} getMouseX() : int
				+{static} getMouseY() : int
				+{static} setMouseCursor(const MouseCursor& cursor) : void
				+{static} setMouseOffset(int offsetX, int offsetY) : void
				+{static} setMousePosition(int x, int y) : void
				+{static} setMouseScale(float scaleX, float scaleY) : void
			}

			class TouchHelper {
				+{static} getGestureDragVector() : Vector2f
				+{static} getGesturePinchVector() : Vector2f
				+{static} getTouchPosition(const int& index) : Vector2f
				+{static} isGestureDetected(const int& gesture) : bool
				+{static} getGestureDragAngle() : float
				+{static} getGestureHoldDuration() : float
				+{static} getGesturePinchAngle() : float
				+{static} getGestureDetected() : int
				+{static} getTouchPointCount() : int
				+{static} getTouchPointId(const int& index) : int
				+{static} getTouchX() : int
				+{static} getTouchY() : int
				+{static} setGesturesEnabled(const unsigned int& flags) : void
			}
		}

		namespace draw {
			class Draw2DHelper {
				-{static} _texShapesRec : static Rectangle
				-{static} _texShapes : static Texture2D
				+{static} drawCircle(int centerX, int centerY, float radius, const RlColor& color) : void
				+{static} drawCircle(const Vector2f& center, float radius, const RlColor& color) : void
				+{static} drawCircleGradient(int centerX, int centerY, float radius, const RlColor& color1, const RlColor& color2) : void
				+{static} drawCircleLines(int centerX, int centerY, float radius, const RlColor& color) : void
				+{static} drawCircleSector(const Vector2f& center, float radius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawCircleSectorLines(const Vector2f& center, float radius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawEllipse(int centerX, int centerY, float radiusH, float radiusV, const RlColor& color) : void
				+{static} drawEllipseLines(int centerX, int centerY, float radiusH, float radiusV, const RlColor& color) : void
				+{static} drawLine(int startPosX, int startPosY, int endPosX, int endPosY, const RlColor& color) : void
				+{static} drawLine(const Vector2f& startPos, const Vector2f& endPos, const RlColor& color) : void
				+{static} drawLine(const Vector2f& startPos, const Vector2f& endPos, float thick, const RlColor& color) : void
				+{static} drawLineBezier(const Vector2f& startPos, const Vector2f& endPos, float thick, const RlColor& color) : void
				+{static} drawLineBezierCubic(const Vector2f& startPos, const Vector2f& endPos, const Vector2f& startControlPos, const Vector2f& endControlPos, float thick, const RlColor& color) : void
				+{static} drawLineBezierQuad(const Vector2f& startPos, const Vector2f& endPos, const Vector2f& controlPos, float thick, const RlColor& color) : void
				+{static} drawLineStrip(const std::vector<Vector2f>& points, const RlColor& color) : void
				+{static} drawPixel(int posX, int posY, const RlColor& color) : void
				+{static} drawPixel(const Vector2f& position, const RlColor& color) : void
				+{static} drawPoly(const Vector2f& center, int sides, float radius, float rotation, const RlColor& color) : void
				+{static} drawPolyLines(const Vector2f& center, int sides, float radius, float rotation, const RlColor& color) : void
				+{static} drawPolyLines(const Vector2f& center, int sides, float radius, float rotation, float lineThick, const RlColor& color) : void
				+{static} drawRectangle(int posX, int posY, int width, int height, const RlColor& color) : void
				+{static} drawRectangle(const Vector2f& position, const Vector2f& size, const RlColor& color) : void
				+{static} drawRectangle(const Rectangle& rec, const RlColor& color) : void
				+{static} drawRectangle(const Rectangle& rec, const Vector2f& origin, float rotation, const RlColor& color) : void
				+{static} drawRectangleGradient(const Rectangle& rec, const RlColor& col1, const RlColor& col2, const RlColor& col3, const RlColor& col4) : void
				+{static} drawRectangleGradientH(int posX, int posY, int width, int height, const RlColor& color1, const RlColor& color2) : void
				+{static} drawRectangleGradientV(int posX, int posY, int width, int height, const RlColor& color1, const RlColor& color2) : void
				+{static} drawRectangleLines(int posX, int posY, int width, int height, const RlColor& color) : void
				+{static} drawRectangleLinesEx(const Rectangle& rec, float lineThick, const RlColor& color) : void
				+{static} drawRectangleRounded(const Rectangle& rec, float roundness, int segments, const RlColor& color) : void
				+{static} drawRectangleRoundedLines(const Rectangle& rec, float roundness, int segments, float lineThick, const RlColor& color) : void
				+{static} drawRing(const Vector2f& center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawRingLines(const Vector2f& center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawTriangle(const Vector2f& v1, const Vector2f& v2, const Vector2f& v3, const RlColor& color) : void
				+{static} drawTriangleFan(const std::vector<Vector2f>& points, const RlColor& color) : void
				+{static} drawTriangleLines(const Vector2f& v1, const Vector2f& v2, const Vector2f& v3, const RlColor& color) : void
				+{static} drawTriangleStrip(const std::vector<Vector2f>& points, const RlColor& color) : void
				+{static} setShapesTexture(const texture::RlTexture& texture, const Rectangle& source) : void
			}

			class Draw3DHelper {
				+{static} drawBillboard(const RlCamera& camera, const texture::RlTexture& texture, const Vector3f& position, float size, const RlColor& tint) : void
				+{static} drawBillboardPro(const RlCamera& camera, const texture::RlTexture& texture, const Rectangle& source, const Vector3f& position, const Vector3f& up, const Vector2f& size, const Vector2f& origin, float rotation, const RlColor& tint) : void
				+{static} drawBillboardRec(const RlCamera& camera, const texture::RlTexture& texture, const Rectangle& source, const Vector3f& position, const Vector2f& size, const RlColor& tint) : void
				+{static} drawBoundingBox(const BoundingBox& box, const RlColor& color) : void
				+{static} drawCircle(const Vector3f& center, const float& radius, const Vector3f& rotationAxis, const float& rotationAngle, const RlColor& color) : void
				+{static} drawCube(const Vector3f& position, const float& width, const float& height, const float& length, const RlColor& color) : void
				+{static} drawCube(const Vector3f& position, const Vector3f& size, const RlColor& color) : void
				+{static} drawCubeTexture(const texture::RlTexture& texture, const Vector3f& position, const float& width, const float& height, const float& length, const RlColor& color) : void
				+{static} drawCubeTextureRec(const texture::RlTexture& texture, const Rectangle& source, const Vector3f& position, const float& width, const float& height, const float& length, const RlColor& color) : void
				+{static} drawCubeWires(const Vector3f& position, const float& width, const float& height, const float& length, const RlColor& color) : void
				+{static} drawCubeWires(const Vector3f& position, const Vector3f& size, const RlColor& color) : void
				+{static} drawCylinder(const Vector3f& position, const float& radiusTop, const float& radiusBottom, const float& height, const int& slices, const RlColor& color) : void
				+{static} drawCylinder(const Vector3f& startPos, const Vector3f& endPos, const float& startRadius, const float& endRadius, const int& sides, const RlColor& color) : void
				+{static} drawCylinderWires(const Vector3f& position, const float& radiusTop, const float& radiusBottom, const float& height, const int& slices, const RlColor& color) : void
				+{static} drawCylinderWires(const Vector3f& startPos, const Vector3f& endPos, const float& startRadius, const float& endRadius, const int& sides, const RlColor& color) : void
				+{static} drawGrid(const int& slices, const float& spacing) : void
				+{static} drawGrid(const Vector2i& size, const float& spacing) : void
				+{static} drawGrid(const Vector2i& size, const Vector3f& position, const float& spacing) : void
				+{static} drawGrid(const Vector2i& size, const Vector3f& position, const float& spacing, const RlColor& color) : void
				+{static} drawLine(const Vector3f& startPos, const Vector3f& endPos, const RlColor& color) : void
				+{static} drawPlane(const Vector3f& centerPos, const Vector2f& size, const RlColor& color) : void
				+{static} drawPoint(const Vector3f& position, const RlColor& color) : void
				+{static} drawRay(const Ray& ray, const RlColor& color) : void
				+{static} drawSphere(const Vector3f& centerPos, const float& radius, const RlColor& color) : void
				+{static} drawSphere(const Vector3f& centerPos, const float& radius, const int& rings, const int& slices, const RlColor& color) : void
				+{static} drawSphereWires(const Vector3f& centerPos, const float& radius, const int& rings, const int& slices, const RlColor& color) : void
				+{static} drawTriangle3D(const Vector3f& v1, const Vector3f& v2, const Vector3f& v3, const RlColor& color) : void
				+{static} drawTriangleStrip3D(const std::vector<Vector3f>& points, const RlColor& color) : void
			}

			class DrawHelper {
				+{static} beginBlendMode(int mode) : void
				+{static} beginDrawing() : void
				+{static} beginMode2D(const Camera2D& camera) : void
				+{static} beginMode3D(const RlCamera& camera) : void
				+{static} beginScissorMode(int x, int y, int width, int height) : void
				+{static} beginShaderMode(const shader::RlShader& shader) : void
				+{static} beginTextureMode(const RenderTexture2D& target) : void
				+{static} beginVrStereoMode(const VrStereoConfig& config) : void
				+{static} clearBackground(const RlColor& color) : void
				+{static} endBlendMode() : void
				+{static} endDrawing() : void
				+{static} endMode2D() : void
				+{static} endMode3D() : void
				+{static} endScissorMode() : void
				+{static} endShaderMode() : void
				+{static} endTextureMode() : void
				+{static} endVrStereoMode() : void
			}

			class DrawModelHelper {
				+{static} drawMesh(const raylib::model::RlMesh& mesh, const raylib::model::RlMaterial& material, const Matrix& transform) : void
				+{static} drawMeshInstanced(const raylib::model::RlMesh& mesh, const raylib::model::RlMaterial& material, std::vector<Matrix>& transforms) : void
				+{static} drawModel(const raylib::model::RlModel& model) : void
				+{static} drawModel(const raylib::model::RlModel& model, const Vector3f& position, const float& scale, const RlColor& tint) : void
				+{static} drawModel(const raylib::model::RlModel& model, const Vector3f& position, const Vector3f& rotationAxis, const float& rotationAngle, const Vector3f& scale, const RlColor& tint) : void
				+{static} drawModelWires(const raylib::model::RlModel& model) : void
				+{static} drawModelWires(const raylib::model::RlModel& model, const Vector3f& position, const float& scale, const RlColor& tint) : void
				+{static} drawModelWires(const raylib::model::RlModel& model, const Vector3f& position, const Vector3f& rotationAxis, const float& rotationAngle, const Vector3f& scale, const RlColor& tint) : void
			}

			class DrawTextHelper {
				+{static} drawCenteredText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const RlColor& color, const float& spacing) : void
				+{static} drawCenteredText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const float& fontSize, const RlColor& color, const float& spacing) : void
				+{static} drawCenteredText(const raylib::text::RlText& text) : void
				+{static} drawFps(const Vector2f& pos, const int& fontSize) : void
				+{static} drawFps(const float& posX, const float& posY, const int& fontSize) : void
				+{static} drawFps(const Vector2f& pos) : void
				+{static} drawFps(const int& posX, const int& posY) : void
				+{static} drawText(const std::string& text, const Vector2f& pos, const int& fontSize, const RlColor& color) : void
				+{static} drawText(const std::string& text, const float& posX, const float& posY, const int& fontSize, const RlColor& color) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const RlColor& color) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const float& rotation, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const Vector2f& origin, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const Vector2f& origin, const float& rotation, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const raylib::text::RlText& text, const Vector2f& position, const RlColor& color) : void
				+{static} drawText(const raylib::text::RlText& text, const float& posX, const float& posY, const RlColor& color) : void
				+{static} drawText(const raylib::text::RlText& text) : void
				+{static} drawTextUsingCodepoint(const raylib::text::RlFont& font, const int& codepoint, const Vector2f& position, float fontSize, const RlColor& tint) : void
			}

			class DrawTextureHelper {
				+{static} drawTexture(const texture::RlTexture& texture, int posX, int posY, const RlColor& tint) : void
				+{static} drawTexture(const texture::RlTexture& texture, const Vector2f& position, const RlColor& tint) : void
				+{static} drawTexture(const texture::RlTexture& texture, const Vector2f& position, float rotation, float scale, const RlColor& tint) : void
				+{static} drawTexture(const texture::RlTexture& texture, const Rectangle& source, const Rectangle& dest, const Vector2f& origin, float rotation, const RlColor& tint) : void
				+{static} drawTextureNPatch(const texture::RlTexture& texture, const NPatchInfo& nPatchInfo, const Rectangle& dest, const Vector2f& origin, float rotation, const RlColor& tint) : void
				+{static} drawTexturePoly(const texture::RlTexture& texture, const Vector2f& center, const std::vector<Vector2f>& points, std::vector<Vector2f>& texcoords, const RlColor& tint) : void
				+{static} drawTextureQuad(const texture::RlTexture& texture, const Vector2f& tiling, const Vector2f& offset, const Rectangle& quad, const RlColor& tint) : void
				+{static} drawTextureRec(const texture::RlTexture& texture, const Rectangle& source, const Vector2f& position, const RlColor& tint) : void
				+{static} drawTextureTiled(const texture::RlTexture& texture, const Rectangle& source, const Rectangle& dest, const Vector2f& origin, float rotation, float scale, const RlColor& tint) : void
			}
		}
	}

	namespace ex {
		class BuilderException {
			+BuilderException(const std::string& msg)
		}

		class CameraException {
			+CameraException(const std::string& message)
		}

		class InvalidArgumentException {
			+InvalidArgumentException(const std::string& msg)
		}

		class RaylibException {
			+RaylibException(const std::string& msg, bool prefix)
			+what() : char* {query}
			-_msg : std::string
		}

		class RlAnimationException {
			+RlAnimationException(const std::string& message)
		}

		class RlModelException {
			+RlModelException(const std::string& message)
		}

		class WindowException {
			+WindowException(const std::string& msg)
		}
	}

	namespace builder {
		abstract class IBuilder <template<typename T>> {
			+{abstract} build() : T
		}

		class RlCameraBuilder {
			+RlCameraBuilder()
			-_cameraMode : CameraMode
			-_projection : CameraProjection
			+build() : RlCamera
			+setCameraMode(CameraMode cameraMode) : RlCameraBuilder&
			+setFovy(float fovy) : RlCameraBuilder&
			+setLookingPoint(const Vector3f& lookingPoint) : RlCameraBuilder&
			+setPosition(const Vector3f& position) : RlCameraBuilder&
			+setProjection(CameraProjection projection) : RlCameraBuilder&
			+setTarget(const Vector3f& target) : RlCameraBuilder&
			-_lookingPoint : Vector3f
			-_position : Vector3f
			-_target : Vector3f
			-_fovy : float
		}

		class RlImageBuilder {
			+RlImageBuilder()
			-_bottom : RlColor
			-_col1 : RlColor
			-_col2 : RlColor
			-_color : RlColor
			-_inner : RlColor
			-_left : RlColor
			-_outer : RlColor
			-_right : RlColor
			-_top : RlColor
			+setBottom(const RlColor& bottom) : RlImageBuilder&
			+setChecksX(const int& checksX) : RlImageBuilder&
			+setChecksY(const int& checksY) : RlImageBuilder&
			+setCol1(const RlColor& col1) : RlImageBuilder&
			+setCol2(const RlColor& col2) : RlImageBuilder&
			+setColor(const RlColor& color) : RlImageBuilder&
			+setDensity(const float& density) : RlImageBuilder&
			+setFactor(const float& factor) : RlImageBuilder&
			+setHeight(const int& height) : RlImageBuilder&
			+setInner(const RlColor& inner) : RlImageBuilder&
			+setLeft(const RlColor& left) : RlImageBuilder&
			+setOuter(const RlColor& outer) : RlImageBuilder&
			+setRight(const RlColor& right) : RlImageBuilder&
			+setTitleSize(const int& titleSize) : RlImageBuilder&
			+setTop(const RlColor& top) : RlImageBuilder&
			+setType(ImageType type) : RlImageBuilder&
			+setWidth(const int& width) : RlImageBuilder&
			-_density : float
			-_factor : float
			-_checksX : int
			-_checksY : int
			-_height : int
			-_titleSize : int
			-_width : int
			-_flags : long
			-_type : long
			+build() : raylib::image::RlImage
		}

		class RlMeshBuilder {
			+RlMeshBuilder()
			+setConeSlices(const int& slices) : RlMeshBuilder&
			+setCubeSize(const Vector3f& cubeSize) : RlMeshBuilder&
			+setCubicmap(const image::RlImage& cubicmap) : RlMeshBuilder&
			+setHeight(const float& height) : RlMeshBuilder&
			+setHeightmap(const image::RlImage& heightmap) : RlMeshBuilder&
			+setHemisphereRings(const int& rings) : RlMeshBuilder&
			+setKnotRadSeg(const int& radSeg) : RlMeshBuilder&
			+setLength(const float& length) : RlMeshBuilder&
			+setMeshType(MeshType meshType) : RlMeshBuilder&
			+setRadSeg(const int& radSeg) : RlMeshBuilder&
			+setRadius(const float& radius) : RlMeshBuilder&
			+setResX(const int& resX) : RlMeshBuilder&
			+setResZ(const int& resZ) : RlMeshBuilder&
			+setRings(const int& rings) : RlMeshBuilder&
			+setSides(const int& sides) : RlMeshBuilder&
			+setSize(const float& size) : RlMeshBuilder&
			+setSlices(const int& slices) : RlMeshBuilder&
			+setVec3fSize(const Vector3f& size) : RlMeshBuilder&
			+setWidth(const float& width) : RlMeshBuilder&
			-_cubeSize : Vector3f
			-_vec3fSize : Vector3f
			-_height : float
			-_length : float
			-_radius : float
			-_size : float
			-_width : float
			-_cubicmap : image::RlImage
			-_heightmap : image::RlImage
			-_radSeg : int
			-_resX : int
			-_resZ : int
			-_rings : int
			-_sides : int
			-_slices : int
			-_flags : long
			-_type : long
			+build() : model::RlMesh
		}

		class RlModelBuilder {
			+RlModelBuilder()
			-_boundingBox : BoundingBox
			-_color : RlColor
			+setRotationAxis(const Vector3f& rotationAxis) : RlModelBuilder
			+setBoundingBox(const BoundingBox& boundingBox) : RlModelBuilder&
			+setColor(const RlColor& color) : RlModelBuilder&
			+setMesh(const std::shared_ptr<raylib::model::RlMesh>& mesh) : RlModelBuilder&
			+setMesh(const raylib::model::RlMesh& mesh) : RlModelBuilder&
			+setModelPath(const std::string& modelPath) : RlModelBuilder&
			+setPosition(const Vector3f& position) : RlModelBuilder&
			+setRotationAngle(const float& rotationAngle) : RlModelBuilder&
			+setScale(const Vector3f& scale) : RlModelBuilder&
			+setTexture(const std::shared_ptr<texture::RlTexture>& texture) : RlModelBuilder&
			+setTexturePath(const std::string& texturePath) : RlModelBuilder&
			-_position : Vector3f
			-_rotationAxis : Vector3f
			-_scale : Vector3f
			-_boundingBoxSet : bool
			-_rotationAngle : float
			-_flags : long
			+build() : raylib::model::RlModel
			-{static} _validTypes : static std::vector<ValidType>
			-_mesh : std::shared_ptr<raylib::model::RlMesh>
			-_texture : std::shared_ptr<texture::RlTexture>
			-_modelPath : std::string
			-_texturePath : std::string
		}

		class RlTextBuilder {
			+RlTextBuilder()
			-_color : RlColor
			+setColor(const RlColor& color) : RlTextBuilder&
			+setFont(const std::shared_ptr<raylib::text::RlFont>& font) : RlTextBuilder&
			+setFontPath(const std::string& fontPath) : RlTextBuilder&
			+setFontSize(const float& fontSize) : RlTextBuilder&
			+setOrigin(const Vector2f& origin) : RlTextBuilder&
			+setPosition(const Vector2f& position) : RlTextBuilder&
			+setRotation(const float& rotation) : RlTextBuilder&
			+setSpacing(const float& spacing) : RlTextBuilder&
			+setText(const std::string& text) : RlTextBuilder&
			-_origin : Vector2f
			-_position : Vector2f
			-_isFontPathSet : bool
			-_isFontSet : bool
			-_isFontSizeSet : bool
			-_isTextSet : bool
			-_fontSize : float
			-_rotation : float
			-_textSpacing : float
			+build() : raylib::text::RlText
			-_font : std::shared_ptr<raylib::text::RlFont>
			-_fontPath : std::string
			-_text : std::string
		}

		enum RlImageBuilder::ImageType {
			ImageCellular
			ImageChecked
			ImageColor
			ImageGradientH
			ImageGradientRadial
			ImageGradientV
			ImageWhiteNoise
		}

		enum RlImageBuilder::ParameterName {
			Bottom
			ChecksX
			ChecksY
			Col1
			Col2
			Color
			Density
			Factor
			Height
			Inner
			Left
			Outer
			Right
			TitleSize
			Top
			Width
		}

		enum RlMeshBuilder::MeshType {
			MeshCone
			MeshCube
			MeshCubicmap
			MeshCylinder
			MeshHeightmap
			MeshHemiSphere
			MeshKnot
			MeshPlane
			MeshPoly
			MeshSphere
			MeshTorus
		}

		enum RlMeshBuilder::ParameterName {
			ConeSlices
			CubeSize
			Cubicmap
			Height
			Heightmap
			HemisphereRings
			KnotRadSeg
			Length
			RadSeg
			Radius
			ResX
			ResZ
			Rings
			Sides
			Size
			Slices
			Vec3fSize
			Width
		}

		enum RlModelBuilder::RequiredParameter {
			MESH
			MODEL_PATH
			SHARED_TEXTURE
			TEXTURE_PATH
		}

		enum RlModelBuilder::ValidType {
			RLMODEL_MESH
			RLMODEL_MESH_AND_SHARED_TEXTURE
			RLMODEL_PATH
			RLMODEL_PATH_AND_SHARED_TEXTURE
			RLMODEL_PATH_AND_TEXTURE
		}
	}

	namespace audio {
		class RlAudioStream {
			+RlAudioStream(const unsigned int& sampleRate, const unsigned int& sampleSize, const unsigned int& channels)
			+~RlAudioStream()
			-_stream : AudioStream
			+isPlaying() : bool
			+isProcessed() : bool
			-_volume : float
			+getVolume() : float& {query}
			+pause() : void
			+play() : void
			+resume() : void
			+setPitch(const float& pitch) : void
			+setVolume(float volume) : void
			+stop() : void
			+update(const void* data, const int& samplesCount) : void
		}

		class RlMusic {
			+RlMusic(const std::string& fileName)
			+RlMusic(const std::string& fileType, unsigned char* data, const int& dataSize)
			+~RlMusic()
			-_music : Music
			+isPlaying() : bool
			+isLooping() : bool& {query}
			-_volume : float
			+getTimeLength() : float
			+getTimePlayed() : float
			+getVolume() : float& {query}
			+pause() : void
			+play() : void
			+resume() : void
			+seek(const float& position) : void
			+setLooping(const bool& loop) : void
			+setPitch(const float& pitch) : void
			+setVolume(const float& volume) : void
			+stop() : void
			+update() : void
		}

		class RlSound {
			+RlSound(const Sound& sound)
			+RlSound(const std::string& fileName)
			+RlSound(const RlWave& wave)
			+~RlSound()
			-_sound : Sound
			+isPlaying() : bool
			-_volume : float
			+getVolume() : float& {query}
			+pause() : void
			+play() : void
			+playMulti() : void
			+resume() : void
			+setPitch(const float& pitch) : void
			+setVolume(const float& volume) : void
			+stop() : void
			+update(const void* data, const int& samplesCount) : void
		}

		class RlWave {
			+RlWave()
			+RlWave(const Wave& wave)
			+RlWave(const std::string& path)
			+RlWave(const std::string& fileType, const unsigned char* fileData, int dataSize)
			+~RlWave()
			+copy() : RlWave
			-_wave : Wave
			+getWave() : Wave&
			+getWave() : Wave& {query}
			+exportWave(const std::string& fileName) : bool
			+exportWaveAsCode(const std::string& fileName) : bool
			-_samplesPtr : float*
			+toSound() : raylib::audio::RlSound {query}
			-_samples : std::vector<float>
			+getSamples() : std::vector<float>
			+crop(const int& initSample, const int& finalSample) : void
			+format(const int& sampleRate, const int& sampleSize, const int& channels) : void
		}
	}
}


namespace indie {
	class Bomb {
		+Bomb(const std::string& name, const raylib::model::RlModel& model, const int& range, const std::string& playerOwner)
		+~Bomb()
		-_timer : float
		-_range : int
		-_audioManager : std::shared_ptr<gameengine::AudioManager>&
		-_playerOwner : std::string
		+addMagma(const Vector3f& position, const Vector3f& addI) : void
		+enableCollision() : void
		+init() : void
		+instanceMagma(const Vector3f& pos) : void
		+setPlayerOwner(const std::string& playerOwner) : void
		+spawnMagma() : void
		+update(const float& delta) : void
	}

	class Bonus {
		+Bonus(const std::string& name, const raylib::model::RlModel& model, const std::shared_ptr<raylib::texture::RlTexture>& texture)
		+~Bonus()
		-_type : BonusType
		+getBonusType() : int& {query}
		+init() : void
		+setBonusType(BonusType type) : void
		+update(const float& delta) : void
	}

	class ChooseNumberPlayerScene {
		+ChooseNumberPlayerScene(const std::string& name, const std::string& sceneSource)
		+~ChooseNumberPlayerScene()
		-_indexMenu : int
		-_savedIndexMap : int
		-_map3DLoader : std::shared_ptr<indie::map::Map3DLoader>&
		+initScene() : void
		+sceneLauncher() : void
		+updateScene(const float& delta) : void
	}

	class GameScene {
		+GameScene(const std::string& name, const std::string& sceneSource)
		+~GameScene()
		-_winTimer : float
		-_indexMenu : int
		-_map3DLoader : std::shared_ptr<map::Map3DLoader>&
		-_map : std::shared_ptr<map::Map>
		-_textureManager : std::unique_ptr<gameengine::TextureManager>&
		-buttonsPos : std::vector<Vector2f>
		+displayWinner(const std::string& name) : void
		+initScene() : void
		+sceneLauncher() : void
		+updateScene(const float& delta) : void
	}

	class GlobalInstance {
		+GlobalInstance()
		+~GlobalInstance()
		+_indexMap : int
		+_numberPlayers : int
		+_playersAlive : int
		-{static} _instance : static std::shared_ptr<GlobalInstance>
		+{static} getInstance() : std::shared_ptr<indie::GlobalInstance>&
		+_playerWinner : std::string
	}

	class Image {
		+Image(const std::string& name, const std::shared_ptr<raylib::texture::RlTexture>& texture)
		+~Image()
		+init() : void
		+update(const float& delta) : void
	}

	class Magma {
		+Magma(const std::string& name, const raylib::model::RlModel& model, const std::shared_ptr<raylib::texture::RlTexture>& texture)
		+~Magma()
		-_timer : float
		-_playerOwner : std::string
		+checkWallCollision() : void
		+handlePlayerCollision() : void
		+init() : void
		+update(const float& delta) : void
	}

	class MainMenuScene {
		+MainMenuScene(const std::string& name, const std::string& sceneSource)
		+~MainMenuScene()
		-_indexMenu : int
		+initScene() : void
		+sceneLauncher() : void
		+updateScene(const float& delta) : void
	}

	class Player {
		+Player(const std::string& name, const raylib::model::RlModel& model, const std::shared_ptr<raylib::texture::RlTexture>& texture, const int& numpadId)
		+~Player()
		-_state : State
		-_speed : float
		-_tempSpeed : float
		-_timerAnim : float
		-_timerGhost : float
		-_bombStock : int
		-_numpadId : int
		-_range : int
		+getState() : int
		-_anim : raylib::model::RlModelAnimation
		-_audioManager : std::shared_ptr<gameengine::AudioManager>&
		-botTarget : std::string
		-_textureManager : std::unique_ptr<gameengine::TextureManager>&
		+botControl() : void
		+botSpawnBomb() : void
		+checkCollisions() : void
		+handleInput() : void
		+incrementBombStock(int bombStock) : void
		+init() : void
		+moveAndGhosting(Vector3f position) : void
		+playerDead() : void
		+setState(State state) : void
		+spawnBomb() : void
		+update(const float& delta) : void
	}

	class StartScene {
		+StartScene(const std::string& name, const std::string& sceneSource)
		+~StartScene()
		-_startTimestamp : long
		+initScene() : void
		+sceneLauncher() : void
		+updateScene(const float& delta) : void
	}

	class Wall {
		+Wall(const std::string& name, const raylib::model::RlModel& model, const std::shared_ptr<raylib::texture::RlTexture>& texture)
		+~Wall()
	}

	class WallDestroyable {
		+WallDestroyable(const std::string& name, const raylib::model::RlModel& model, const std::shared_ptr<raylib::texture::RlTexture>& texture)
		+~WallDestroyable()
		+spawnBonus() : void
	}

	class WinningScene {
		+WinningScene(const std::string& name, const std::string& sceneSource)
		+~WinningScene()
		-_indexMenu : int
		+initScene() : void
		+sceneLauncher() : void
		+updateScene(const float& delta) : void
	}

	enum Bonus::BonusType {
		BOMB
		FIRE
		GHOST
		SPEED
	}

	enum Player::State {
		ALIVE
		DEAD
		GHOST
		LOOSER
		WINNER
	}

	namespace map {
		class Map {
			+Map(const std::string& mapPath, gameengine::map::MapParser<MapType>&& mapParser, const std::vector<std::shared_ptr<gameengine::node::_3D::StaticBody>>& mapModels)
			-_mapSize : Vector2u
			-_mapSizeMax : Vector2u
			+getMapSize() : Vector2u& {query}
			+getMapSizeMax() : Vector2u& {query}
			-_mapParser : gameengine::map::MapParser<MapType>
			+getMapParser() : gameengine::map::MapParser<MapType>& {query}
			-_mapPath : std::string
			+getMapPath() : std::string& {query}
			-_playerSpawns : std::vector<Vector2f>
			+getPlayerSpawns() : std::vector<Vector2f>& {query}
			-_mapModels : std::vector<std::shared_ptr<gameengine::node::_3D::StaticBody>>
			+getMapModels() : std::vector<std::shared_ptr<gameengine::node::_3D::StaticBody>>& {query}
			-_map : std::vector<std::vector<MapType>>
			+getMap() : std::vector<std::vector<MapType>>& {query}
			+setMap(const std::vector<std::vector<MapType>>& map) : void
			+setMapModels(const std::vector<std::shared_ptr<gameengine::node::_3D::StaticBody>>& mapModels) : void
			+setMapPath(const std::string& mapPath) : void
			+setMapSize(const Vector2u& mapSize) : void
			+setMapSizeMax(const Vector2u& mapSizeMax) : void
			+setPlayerSpawns(const std::vector<Vector2f>& playerSpawns) : void
		}

		class Map3DLoader {
			+Map3DLoader()
			-_mapSizeMax : Vector2u
			+getMapSizeMax() : Vector2u& {query}
			-{static} _instance : static std::shared_ptr<Map3DLoader>
			+{static} getInstance() : std::shared_ptr<Map3DLoader>&
			-_tmpMapPath : std::string
			-_textureManager : std::unique_ptr<gameengine::TextureManager>&
			+getMapSymbol() : std::unordered_map<char , Map::MapType>& {query}
			-_mapSymbol : std::unordered_map<char, Map::MapType>
			-_maps : std::vector<std::shared_ptr<Map>>
			+getMaps() : std::vector<std::shared_ptr<Map>>& {query}
			-addBreakableWall(std::vector<std::shared_ptr<gameengine::node::_3D::StaticBody>>& models, const Vector3f& position, const std::shared_ptr<raylib::model::RlMesh>& mesh) : void
			-addFloor(std::vector<std::shared_ptr<gameengine::node::_3D::StaticBody>>& models, const Vector3f& position, const std::shared_ptr<raylib::model::RlMesh>& mesh) : void
			+addMap(const std::string& mapPath) : void
			-addWall(std::vector<std::shared_ptr<gameengine::node::_3D::StaticBody>>& models, const Vector3f& position, const std::shared_ptr<raylib::model::RlMesh>& mesh) : void
			+loadMaps(const std::string& directory) : void
			-parseMap(const std::string& mapPath) : void
			+setMapSizeMax(const Vector2u& mapSizeMax) : void
		}

		enum Map::MapType {
			BOMB
			BONUS
			BREAKABLE_WALL
			NONE
			PLAYER
			PLAYER_SPAWN
			UNKNOWN
			WALL
		}
	}

	namespace button {
		class ButtonMainMenu {
			+ButtonMainMenu(const std::string& name, const std::shared_ptr<raylib::texture::RlTexture>& texture)
		}

		class ButtonQuit {
			+ButtonQuit(const std::string& name, const std::shared_ptr<raylib::texture::RlTexture>& texture)
		}

		class ButtonRestart {
			+ButtonRestart(const std::string& name, const std::shared_ptr<raylib::texture::RlTexture>& texture)
		}

		class ButtonResume {
			+ButtonResume(const std::string& name, const std::shared_ptr<raylib::texture::RlTexture>& texture)
		}

		class IndieButton {
			+IndieButton(const std::string& name, const std::shared_ptr<raylib::texture::RlTexture>& texture, const std::function<void ( const std::string& buttonName )>& callback)
			#function<void(const std::string& buttonName)
			+pressed() : void
		}
	}
}


namespace gameengine {
	abstract class AbstractSound {
		+AbstractSound(const std::string& filePath, SoundCategory category)
		+~AbstractSound()
		-_category : SoundCategory
		+getCategory() : int {query}
		-_filePath : std::string
		-_name : std::string
		+getFilePath() : std::string& {query}
		+getName() : std::string& {query}
		+{abstract} setVolume(const float& volume) : void
	}

	class AudioManager {
		+AudioManager()
		+~AudioManager()
		-{static} _instance : static std::shared_ptr<AudioManager>
		+{static} getInstance() : std::shared_ptr<AudioManager>&
		+getSound(const std::string& name) : std::unique_ptr<AbstractSound>&
		-_sounds : std::vector<std::unique_ptr<gameengine::AbstractSound>>
		+addSound(const std::string& filePath, AbstractSound::SoundCategory category) : void
		+deleteSound(const std::string& name) : void
		+loadSounds(const std::string& assetsPath) : void
		+loadSounds(const std::string& soundDir, const std::string& musicDir) : void
		+playSound(const std::string& name) : void
		+setVolume(const float& volume, AbstractSound::SoundCategory category) : void
	}

	abstract class Scene {
		+Scene(const std::string& name, const std::string& sceneSource)
		+~Scene()
		-_isLaunched : bool
		-_isPaused : bool
		+deleteNode(const std::string& name) : bool
		+isLaunched() : bool& {query}
		+isPaused() : bool& {query}
		+getNode(const std::string& name) : std::shared_ptr<gameengine::node::AbstractBase>
		-_name : std::string
		-_sceneSource : std::string
		+getName() : std::string& {query}
		+getSceneSource() : std::string& {query}
		-_nodes : std::vector<std::shared_ptr<gameengine::node::AbstractBase>>
		+getNodes() : std::vector<std::shared_ptr<gameengine::node::AbstractBase>>& {query}
		+addNode(const std::shared_ptr<gameengine::node::AbstractBase>& node) : void
		+deleteNodeIncludes(const std::string& includeName) : void
		+destroy() : void
		+draw() : void
		+draw2D() : void
		+init() : void
		+{abstract} initScene() : void
		+{abstract} sceneLauncher() : void
		+setLaunched() : void
		+setPaused(const bool& value) : void
		+update(const float& delta) : void
		+{abstract} updateScene(const float& delta) : void
	}

	class SceneManager {
		+isPaused() : bool
		-{static} _instance : static std::shared_ptr<SceneManager>
		+getCurrentScene() : std::shared_ptr<gameengine::Scene>&
		+{static} getInstance() : std::shared_ptr<gameengine::SceneManager>&
		+getNode(const std::string& name) : std::shared_ptr<gameengine::node::AbstractBase>
		-_actualScene : std::string
		-_waitingScene : std::string
		-_scenes : std::vector<std::shared_ptr<gameengine::Scene>>
		+getAllNodes() : std::vector<std::shared_ptr<gameengine::node::AbstractBase>>
		-_nodesToDelete : std::vector<std::string>
		-_nodesToDeleteIncludes : std::vector<std::string>
		+addNode(const std::shared_ptr<gameengine::node::AbstractBase>& node) : void
		+addScene(const std::shared_ptr<gameengine::Scene>& scene) : void
		+changeScene(const std::string& scene) : void
		-changeSceneInWaiting() : void
		+deleteNode(const std::string& name) : void
		-deleteNodeInLst() : void
		+deleteNodeInclude(const std::string& containedName) : void
		+deleteScene(const std::string& scene) : void
		+draw() : void
		+draw2D() : void
		+drawAll(raylib::RlCamera& camera) : void
		+makeLoop(raylib::RlCamera& camera) : void
		+setPaused(bool value) : void
		+update() : void
	}

	class TextureManager {
		-{static} _defaultTexture : static std::shared_ptr<raylib::texture::RlTexture>
		-{static} _instance : static std::unique_ptr<TextureManager>
		+getTexture(const std::string& textureName) : std::shared_ptr<raylib::texture::RlTexture>
		+{static} getDefaultTexture() : std::shared_ptr<raylib::texture::RlTexture>&
		+{static} getInstance() : std::unique_ptr<TextureManager>&
		-_textures : std::vector<std::shared_ptr<raylib::texture::RlTexture>>
		+getTextures() : std::vector<std::shared_ptr<raylib::texture::RlTexture>>& {query}
		+loadTextures(const std::string& texturesDir) : void
	}

	class Time {
		+Time()
		+~Time()
		+{static} getMicrosecondsTime() : long
		+{static} getMillisecondsTime() : long
		+{static} getNanoTime(std::chrono::seconds time) : long
		+{static} getNanoTime(std::chrono::milliseconds time) : long
		+{static} getNanoTime(std::chrono::microseconds time) : long
		+{static} getNanosecondsTime() : long
		+{static} getSecondsTime() : long
	}

	enum AbstractSound::SoundCategory {
		FX
		MUSIC
	}

	namespace node {
		abstract class AbstractBase {
			+AbstractBase(const std::string& name)
			+AbstractBase(const AbstractBase &)
			+~AbstractBase()
			#_hiding : bool
			+isHiding() : bool& {query}
			+{abstract} getRotationDegrees() : float {query}
			#_group : std::string
			#_name : std::string
			+getGroup() : std::string& {query}
			+getName() : std::string& {query}
			+{abstract} draw() : void
			+{abstract} init() : void
			+setGroup(const std::string& group) : void
			+setHiding(bool value) : void
			+{abstract} update(const float& delta) : void
		}

		namespace _3D {
			class Grid3D {
				+Grid3D(const Vector2i& size, const Vector3f& position, const float& spacing, const RlColor& tint, const std::string& name)
				+Grid3D(const Grid3D &)
				-_tint : RlColor
				-_size : Vector2i
				-_position : Vector3f
				-_scale : Vector3f
				+getPosition() : Vector3f& {query}
				+getScale() : Vector3f& {query}
				-_spacing : float
				+getRotationDegrees() : float {query}
				+draw() : void
				+init() : void
				+setPosition(const Vector3f& pos) : void
				+setRotationDegrees(const float& degrees, const Vector3f& rotationAxis) : void
				+setScale(const Vector3f& newScale) : void
				+setSize(const Vector2i& size) : void
				+setSpacing(const float& spacing) : void
				+setTint(const RlColor& tint) : void
				+update(const float& delta) : void
			}

			class KinematicBody {
				+KinematicBody(const std::string& name, const raylib::model::RlModel& model)
				+KinematicBody(const std::string& name, const raylib::model::RlModel& model, const std::shared_ptr<raylib::texture::RlTexture>& texture)
				+~KinematicBody()
				+moveAndCollide(const Vector3f& position) : bool
			}

			abstract class Node3D {
				+Node3D(const std::string& name)
				+Node3D(const Node3D &)
				+~Node3D()
				+{abstract} getPosition() : Vector3f& {query}
				+{abstract} getScale() : Vector3f& {query}
				+{abstract} setPosition(const Vector3f& pos) : void
				+{abstract} setRotationDegrees(const float& degrees, const Vector3f& rotationAxis) : void
				+{abstract} setScale(const Vector3f& newScale) : void
			}

			class StaticBody {
				+StaticBody(const std::string& name, const raylib::model::RlModel& model)
				+StaticBody(const std::string& name, const raylib::model::RlModel& model, const std::shared_ptr<raylib::texture::RlTexture>& texture)
				+~StaticBody()
				+getBoundingBox() : BoundingBox& {query}
				+getColor() : RlColor& {query}
				+getPosition() : Vector3f& {query}
				+getScale() : Vector3f& {query}
				#_collisionEnable : bool
				+hasCollisionEnabled() : bool& {query}
				+getRotationDegrees() : float {query}
				+operator->() : raylib :: model :: RlModel*
				#_model : raylib::model::RlModel
				+getModel() : raylib::model::RlModel&
				+getModel() : raylib::model::RlModel& {query}
				+draw() : void
				+init() : void
				+setBoundingBox(const BoundingBox& boundingBox) : void
				+setCollisionEnable(bool value) : void
				+setColor(const raylib::RlColor& color) : void
				+setPosition(const Vector3f& pos) : void
				+setRotationDegrees(const float& degrees, const Vector3f& rotationAxis) : void
				+setScale(const Vector3f& newScale) : void
				+update(const float& delta) : void
			}
		}

		namespace _2D {
			abstract class Button {
				+Button(const std::string& name, const std::shared_ptr<raylib::texture::RlTexture>& texture)
				-_bounds : Rectangle
				-_rectangle : Rectangle
				+getBounds() : Rectangle& {query}
				+getRectangle() : Rectangle& {query}
				-_origin : Vector2f
				-_position : Vector2f
				-_scale : Vector2f
				+getOrigin() : Vector2f& {query}
				+getPosition() : Vector2f& {query}
				+getScale() : Vector2f& {query}
				-_action : bool
				-_isEnabled : bool
				+isEnabled() : bool& {query}
				-_frameHeight : float
				-_rotationDegrees : float
				+getRotationDegrees() : float {query}
				-_frameNum : int
				-_state : int
				-_texture : std::shared_ptr<raylib::texture::RlTexture>
				+getTexture() : std::shared_ptr<raylib::texture::RlTexture>& {query}
				+centerButton(const Vector2f& pos) : void
				+draw() : void
				+init() : void
				+{abstract} pressed() : void
				+setEnabled(const bool& value) : void
				+setOrigin(const Vector2f& origin) : void
				+setPosition(const Vector2f& position) : void
				+setRotationDegrees(const float& rotationDegrees) : void
				+setScale(const Vector2f& scale) : void
				+update(const float& delta) : void
			}

			class Label {
				+Label(const std::string& name, const Vector2f& position, const Vector2f& scale, const float& degrees, const raylib::RlColor& color)
				+~Label()
				-_position : Vector2f
				-_scale : Vector2f
				+getPosition() : Vector2f& {query}
				+getScale() : Vector2f& {query}
				-_rotationDegrees : float
				+getRotationDegrees() : float {query}
				-_color : raylib::RlColor
				+getColor() : raylib::RlColor&
				+getColor() : raylib::RlColor& {query}
				-_textComponent : raylib::text::RlText
				-_text : std::string
				+draw() : void
				+init() : void
				+setColor(raylib::RlColor color) : void
				+setPosition(const Vector2f& position) : void
				+setRotationDegrees(const float& rotationDegrees) : void
				+setScale(const Vector2f& scale) : void
				+setText(const std::string& text) : void
				+update(const float& delta) : void
			}

			abstract class Node2D {
				+Node2D(const std::string& name)
				+Node2D(const Node2D &)
				+~Node2D()
				+{abstract} getPosition() : Vector2f& {query}
				+{abstract} getScale() : Vector2f& {query}
				+{abstract} setPosition(const Vector2f& pos) : void
				+{abstract} setRotationDegrees(const float& degrees) : void
				+{abstract} setScale(const Vector2f& newScale) : void
			}

			class TextureRect {
				+TextureRect(const std::string& name, const std::shared_ptr<raylib::texture::RlTexture>& texture, const Vector2f& position, const Vector2f& scale, const float& degrees, const raylib::RlColor& color)
				+~TextureRect()
				-_position : Vector2f
				-_scale : Vector2f
				+getPosition() : Vector2f& {query}
				+getScale() : Vector2f& {query}
				-_rotationDegrees : float
				+getRotationDegrees() : float {query}
				-_color : raylib::RlColor
				+getColor() : raylib::RlColor&
				+getColor() : raylib::RlColor& {query}
				-_texture : std::shared_ptr<raylib::texture::RlTexture>
				+draw() : void
				+init() : void
				+setColor(const RlColor& color) : void
				+setPosition(const Vector2f& position) : void
				+setRotationDegrees(const float& rotationDegrees) : void
				+setScale(const Vector2f& scale) : void
				+update(const float& delta) : void
			}
		}
	}

	namespace map {
		class MapParser <template<typename T>> {
			+MapParser(const std::string& fileName, const std::unordered_map<char, T>& symbols, const Vector2u& maxSize)
			-_maxSize : Vector2u
			-_size : Vector2u
			+getMaxSize() : Vector2u& {query}
			+getSize() : Vector2u& {query}
			-_file : std::ifstream
			-_buffer : std::string
			-_fileName : std::string
			-removeComment(const std::string& line) : std::string
			+getBuffer() : std::string& {query}
			+getFileName() : std::string& {query}
			+getSymbols() : std::unordered_map<char , T>& {query}
			-_symbols : std::unordered_map<char, T>
			-_map : std::vector<std::vector<T>>
			+getMap() : std::vector<std::vector<T>>& {query}
			+parse() : void
			-parseMap() : void
		}
	}

	namespace ex {
		class GameEngineException {
			+GameEngineException(const std::string& message, const bool& prefix)
			+what() : char* {query}
			-_msg : std::string
		}

		class MapParserException {
			+MapParserException(const std::string& message)
		}
	}

	namespace audio {
		class Music {
			+Music(const std::string& fileName, AbstractSound::SoundCategory category)
			+setVolume(const float& volume) : void
		}

		class Sound {
			+Sound(const std::string& fileName, SoundCategory category)
			+setVolume(const float& volume) : void
		}
	}
}






gameengine.node.AbstractBase <|- - gameengine.node._2D.Node2D


gameengine.node.AbstractBase <|- - gameengine.node._3D.Node3D


gameengine.AbstractSound <|- - gameengine.audio.Music


gameengine.AbstractSound <|- - gameengine.audio.Sound


gameengine.node._2D.Button <|- - indie.button.IndieButton


gameengine.ex.GameEngineException <|- - gameengine.ex.MapParserException


raylib.builder.IBuilder <|- - raylib.builder.RlCameraBuilder


raylib.builder.IBuilder <|- - raylib.builder.RlImageBuilder


raylib.builder.IBuilder <|- - raylib.builder.RlMeshBuilder


raylib.builder.IBuilder <|- - raylib.builder.RlModelBuilder


raylib.builder.IBuilder <|- - raylib.builder.RlTextBuilder


indie.button.IndieButton <|- - indie.button.ButtonMainMenu


indie.button.IndieButton <|- - indie.button.ButtonQuit


indie.button.IndieButton <|- - indie.button.ButtonRestart


indie.button.IndieButton <|- - indie.button.ButtonResume


gameengine.node._3D.KinematicBody <|- - indie.Player


gameengine.node._2D.Node2D <|- - gameengine.node._2D.Button


gameengine.node._2D.Node2D <|- - gameengine.node._2D.Label


gameengine.node._2D.Node2D <|- - gameengine.node._2D.TextureRect


gameengine.node._3D.Node3D <|- - gameengine.node._3D.Grid3D


gameengine.node._3D.Node3D <|- - gameengine.node._3D.StaticBody


raylib.ex.RaylibException <|- - raylib.ex.BuilderException


raylib.ex.RaylibException <|- - raylib.ex.CameraException


raylib.ex.RaylibException <|- - raylib.ex.InvalidArgumentException


raylib.ex.RaylibException <|- - raylib.ex.RlAnimationException


raylib.ex.RaylibException <|- - raylib.ex.RlModelException


raylib.ex.RaylibException <|- - raylib.ex.WindowException


raylib.audio.RlMusic <|- - gameengine.audio.Music


raylib.audio.RlSound <|- - gameengine.audio.Sound


gameengine.Scene <|- - indie.ChooseNumberPlayerScene


gameengine.Scene <|- - indie.GameScene


gameengine.Scene <|- - indie.MainMenuScene


gameengine.Scene <|- - indie.StartScene


gameengine.Scene <|- - indie.WinningScene


gameengine.node._3D.StaticBody <|- - indie.Bomb


gameengine.node._3D.StaticBody <|- - indie.Bonus


gameengine.node._3D.StaticBody <|- - gameengine.node._3D.KinematicBody


gameengine.node._3D.StaticBody <|- - indie.Magma


gameengine.node._3D.StaticBody <|- - indie.Wall


gameengine.node._3D.StaticBody <|- - indie.WallDestroyable


gameengine.node._2D.TextureRect <|- - indie.Image






gameengine.AudioManager *- - gameengine.AbstractSound


gameengine.AudioManager *- - gameengine.AudioManager


indie.Bomb *- - gameengine.AudioManager


gameengine.node._2D.Button *- - raylib.texture.RlTexture


indie.ChooseNumberPlayerScene *- - indie.map.Map3DLoader


indie.GameScene *- - indie.map.Map


indie.GameScene *- - indie.map.Map3DLoader


indie.GameScene *- - gameengine.TextureManager


indie.GlobalInstance *- - indie.GlobalInstance


gameengine.node._3D.Grid3D *- - raylib.RlColor


gameengine.node._2D.Label *- - raylib.RlColor


gameengine.node._2D.Label *- - raylib.text.RlText


indie.map.Map *- - gameengine.map.MapParser


indie.map.Map *- - gameengine.node._3D.StaticBody


indie.map.Map3DLoader "2" *- - indie.map.Map


indie.map.Map3DLoader *- - indie.map.Map3DLoader


indie.map.Map3DLoader *- - indie.map.Map::MapType


indie.map.Map3DLoader *- - gameengine.TextureManager


indie.Player *- - gameengine.AudioManager


indie.Player *- - raylib.model.RlModelAnimation


indie.Player *- - gameengine.TextureManager


raylib.model.RlAnimation *- - raylib.model.RlModel


raylib.RlColor "26" *- - raylib.RlColor


raylib.image.RlImage *- - indie.Image


raylib.builder.RlImageBuilder "9" *- - raylib.RlColor


raylib.builder.RlMeshBuilder "2" *- - raylib.image.RlImage


raylib.model.RlModel *- - raylib.RlColor


raylib.model.RlModel *- - raylib.model.RlMesh


raylib.model.RlModel *- - raylib.texture.RlTexture


raylib.model.RlModelAnimation *- - raylib.model.RlModel


raylib.builder.RlModelBuilder *- - raylib.RlColor


raylib.builder.RlModelBuilder *- - raylib.model.RlMesh


raylib.builder.RlModelBuilder *- - raylib.texture.RlTexture


raylib.audio.RlMusic *- - gameengine.audio.Music


raylib.audio.RlSound *- - gameengine.audio.Sound


raylib.text.RlText *- - raylib.RlColor


raylib.text.RlText *- - raylib.text.RlFont


raylib.builder.RlTextBuilder *- - raylib.RlColor


raylib.builder.RlTextBuilder *- - raylib.text.RlFont


raylib.window.RlWindow *- - raylib.RlCamera


raylib.window.RlWindow *- - raylib.window.RlWindow


gameengine.Scene *- - gameengine.node.AbstractBase


gameengine.SceneManager *- - gameengine.Scene


gameengine.SceneManager *- - gameengine.SceneManager


gameengine.node._3D.StaticBody *- - raylib.model.RlModel


gameengine.TextureManager "2" *- - raylib.texture.RlTexture


gameengine.TextureManager *- - gameengine.TextureManager


gameengine.node._2D.TextureRect *- - raylib.RlColor


gameengine.node._2D.TextureRect *- - raylib.texture.RlTexture







gameengine.AbstractSound +- - gameengine.AbstractSound::SoundCategory


indie.Bonus +- - indie.Bonus::BonusType


indie.map.Map +- - indie.map.Map::MapType


indie.Player +- - indie.Player::State


raylib.builder.RlImageBuilder +- - raylib.builder.RlImageBuilder::ImageType


raylib.builder.RlImageBuilder +- - raylib.builder.RlImageBuilder::ParameterName


raylib.builder.RlMeshBuilder +- - raylib.builder.RlMeshBuilder::MeshType


raylib.builder.RlMeshBuilder +- - raylib.builder.RlMeshBuilder::ParameterName


raylib.builder.RlModelBuilder +- - raylib.builder.RlModelBuilder::RequiredParameter


raylib.builder.RlModelBuilder +- - raylib.builder.RlModelBuilder::ValidType




@enduml

PlantUML version 1.2022.5(Sat Apr 30 14:55:52 RET 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: GB
--></g></svg>