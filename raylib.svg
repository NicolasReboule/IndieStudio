<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="4752px" preserveAspectRatio="none" style="width:32940px;height:4752px;background:#FFFFFF;" version="1.1" viewBox="0 0 32940 4752" width="32940px" zoomAndPan="magnify"><defs/><g><!--MD5=[8b0b89b7b3bae182f8f5f5903bac16d6]
cluster raylib--><g id="cluster_raylib"><path d="M6235.5,1711.59 L6275.5,1711.59 A3.75,3.75 0 0 1 6278,1714.09 L6285,1736.6579 L32729.5,1736.6579 A2.5,2.5 0 0 1 32732,1739.1579 L32732,4743.09 A2.5,2.5 0 0 1 32729.5,4745.59 L6235.5,4745.59 A2.5,2.5 0 0 1 6233,4743.09 L6233,1714.09 A2.5,2.5 0 0 1 6235.5,1711.59 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="6233" x2="6285" y1="1736.6579" y2="1736.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="39" x="6237" y="1728.5559">raylib</text></g><!--MD5=[899334e90318ecd4a8e5a68f5811988b]
cluster raylib.window--><g id="cluster_raylib.window"><path d="M31743.5,1757.59 L31799.5,1757.59 A3.75,3.75 0 0 1 31802,1760.09 L31809,1782.6579 L32705.5,1782.6579 A2.5,2.5 0 0 1 32708,1785.1579 L32708,2734.09 A2.5,2.5 0 0 1 32705.5,2736.59 L31743.5,2736.59 A2.5,2.5 0 0 1 31741,2734.09 L31741,1760.09 A2.5,2.5 0 0 1 31743.5,1757.59 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="31741" x2="31809" y1="1782.6579" y2="1782.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="55" x="31745" y="1774.5559">window</text></g><!--MD5=[12eaa1df17f3dcf9f80cb509c0578256]
cluster raylib.texture--><g id="cluster_raylib.texture"><path d="M15718.5,3928.59 L15770.5,3928.59 A3.75,3.75 0 0 1 15773,3931.09 L15780,3953.6579 L16642.5,3953.6579 A2.5,2.5 0 0 1 16645,3956.1579 L16645,4428.09 A2.5,2.5 0 0 1 16642.5,4430.59 L15718.5,4430.59 A2.5,2.5 0 0 1 15716,4428.09 L15716,3931.09 A2.5,2.5 0 0 1 15718.5,3928.59 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="15716" x2="15780" y1="3953.6579" y2="3953.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="51" x="15720" y="3945.5559">texture</text></g><!--MD5=[92864a1e6c6f69c3cea72200347dbd18]
cluster raylib.text--><g id="cluster_raylib.text"><path d="M18828.5,2838.09 L18857.5,2838.09 A3.75,3.75 0 0 1 18860,2840.59 L18867,2863.1579 L20176.5,2863.1579 A2.5,2.5 0 0 1 20179,2865.6579 L20179,4361.59 A2.5,2.5 0 0 1 20176.5,4364.09 L18828.5,4364.09 A2.5,2.5 0 0 1 18826,4361.59 L18826,2840.59 A2.5,2.5 0 0 1 18828.5,2838.09 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="18826" x2="18867" y1="2863.1579" y2="2863.1579"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="28" x="18830" y="2855.0559">text</text></g><!--MD5=[84688b521a6e648eded8a3b019fe3b1b]
cluster raylib.shader--><g id="cluster_raylib.shader"><path d="M31147.5,2081.59 L31195.5,2081.59 A3.75,3.75 0 0 1 31198,2084.09 L31205,2106.6579 L31714.5,2106.6579 A2.5,2.5 0 0 1 31717,2109.1579 L31717,2410.09 A2.5,2.5 0 0 1 31714.5,2412.59 L31147.5,2412.59 A2.5,2.5 0 0 1 31145,2410.09 L31145,2084.09 A2.5,2.5 0 0 1 31147.5,2081.59 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="31145" x2="31205" y1="2106.6579" y2="2106.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="47" x="31149" y="2098.5559">shader</text></g><!--MD5=[c431ac0f028acd34a2a96a94cdec1319]
cluster raylib.model--><g id="cluster_raylib.model"><path d="M16671.5,2081.59 L16716.5,2081.59 A3.75,3.75 0 0 1 16719,2084.09 L16726,2106.6579 L18799.5,2106.6579 A2.5,2.5 0 0 1 18802,2109.1579 L18802,4352.09 A2.5,2.5 0 0 1 18799.5,4354.59 L16671.5,4354.59 A2.5,2.5 0 0 1 16669,4352.09 L16669,2084.09 A2.5,2.5 0 0 1 16671.5,2081.59 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="16669" x2="16726" y1="2106.6579" y2="2106.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="44" x="16673" y="2098.5559">model</text></g><!--MD5=[6f0614c6d95b265dbc48a4bd364eb222]
cluster raylib.image--><g id="cluster_raylib.image"><path d="M12774.5,3766.09 L12818.5,3766.09 A3.75,3.75 0 0 1 12821,3768.59 L12828,3791.1579 L15689.5,3791.1579 A2.5,2.5 0 0 1 15692,3793.6579 L15692,4590.59 A2.5,2.5 0 0 1 15689.5,4593.09 L12774.5,4593.09 A2.5,2.5 0 0 1 12772,4590.59 L12772,3768.59 A2.5,2.5 0 0 1 12774.5,3766.09 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="12772" x2="12828" y1="3791.1579" y2="3791.1579"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="43" x="12776" y="3783.0559">image</text></g><!--MD5=[0171f304adc156ffdb059f4a8f6eca21]
cluster raylib.helper--><g id="cluster_raylib.helper"><path d="M22442.5,1768.59 L22487.5,1768.59 A3.75,3.75 0 0 1 22490,1771.09 L22497,1793.6579 L31118.5,1793.6579 A2.5,2.5 0 0 1 31121,1796.1579 L31121,4285.09 A2.5,2.5 0 0 1 31118.5,4287.59 L22442.5,4287.59 A2.5,2.5 0 0 1 22440,4285.09 L22440,1771.09 A2.5,2.5 0 0 1 22442.5,1768.59 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="22440" x2="22497" y1="1793.6579" y2="1793.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="44" x="22444" y="1785.5559">helper</text></g><!--MD5=[7c6e76a8c2d442b278df6f3b410dd15a]
cluster raylib.helper.input--><g id="cluster_raylib.helper.input"><path d="M29751.5,2100.59 L29789.5,2100.59 A3.75,3.75 0 0 1 29792,2103.09 L29799,2125.6579 L31094.5,2125.6579 A2.5,2.5 0 0 1 31097,2128.1579 L31097,3357.09 A2.5,2.5 0 0 1 31094.5,3359.59 L29751.5,3359.59 A2.5,2.5 0 0 1 29749,3357.09 L29749,2103.09 A2.5,2.5 0 0 1 29751.5,2100.59 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="29749" x2="29799" y1="2125.6579" y2="2125.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="37" x="29753" y="2117.5559">input</text></g><!--MD5=[cff780a46a811e9554eabdaec41bbaee]
cluster raylib.helper.draw--><g id="cluster_raylib.helper.draw"><path d="M25755.5,1814.59 L25791.5,1814.59 A3.75,3.75 0 0 1 25794,1817.09 L25801,1839.6579 L29722.5,1839.6579 A2.5,2.5 0 0 1 29725,1842.1579 L29725,3395.09 A2.5,2.5 0 0 1 29722.5,3397.59 L25755.5,3397.59 A2.5,2.5 0 0 1 25753,3395.09 L25753,1817.09 A2.5,2.5 0 0 1 25755.5,1814.59 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="25753" x2="25801" y1="1839.6579" y2="1839.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="35" x="25757" y="1831.5559">draw</text></g><!--MD5=[c1ec99b9bcb40ec11e5d573bb468eb91]
cluster raylib.ex--><g id="cluster_raylib.ex"><path d="M20205.5,2167.59 L20222.5,2167.59 A3.75,3.75 0 0 1 20225,2170.09 L20232,2192.6579 L22413.5,2192.6579 A2.5,2.5 0 0 1 22416,2195.1579 L22416,3233.09 A2.5,2.5 0 0 1 22413.5,3235.59 L20205.5,3235.59 A2.5,2.5 0 0 1 20203,3233.09 L20203,2170.09 A2.5,2.5 0 0 1 20205.5,2167.59 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="20203" x2="20232" y1="2192.6579" y2="2192.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="16" x="20207" y="2184.5559">ex</text></g><!--MD5=[a80ed57d422e622acc65e8bcc993edc1]
cluster raylib.builder--><g id="cluster_raylib.builder"><path d="M10159.5,2186.59 L10209.5,2186.59 A3.75,3.75 0 0 1 10212,2189.09 L10219,2211.6579 L12745.5,2211.6579 A2.5,2.5 0 0 1 12748,2214.1579 L12748,4399.59 A2.5,2.5 0 0 1 12745.5,4402.09 L10159.5,4402.09 A2.5,2.5 0 0 1 10157,4399.59 L10157,2189.09 A2.5,2.5 0 0 1 10159.5,2186.59 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="10157" x2="10219" y1="2211.6579" y2="2211.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="49" x="10161" y="2203.5559">builder</text></g><!--MD5=[5c5663f1476690eb89a50501bb5d75a5]
cluster raylib.audio--><g id="cluster_raylib.audio"><path d="M7688.5,2015.09 L7728.5,2015.09 A3.75,3.75 0 0 1 7731,2017.59 L7738,2040.1579 L10130.5,2040.1579 A2.5,2.5 0 0 1 10133,2042.6579 L10133,2476.59 A2.5,2.5 0 0 1 10130.5,2479.09 L7688.5,2479.09 A2.5,2.5 0 0 1 7686,2476.59 L7686,2017.59 A2.5,2.5 0 0 1 7688.5,2015.09 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="7686" x2="7738" y1="2040.1579" y2="2040.1579"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="39" x="7690" y="2032.0559">audio</text></g><!--MD5=[ed5108d926612df2b403672b7cd71ed5]
cluster gameengine--><g id="cluster_gameengine"><path d="M8.5,134.59 L95.5,134.59 A3.75,3.75 0 0 1 98,137.09 L105,159.6579 L6206.5,159.6579 A2.5,2.5 0 0 1 6209,162.1579 L6209,4314.09 A2.5,2.5 0 0 1 6206.5,4316.59 L8.5,4316.59 A2.5,2.5 0 0 1 6,4314.09 L6,137.09 A2.5,2.5 0 0 1 8.5,134.59 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="6" x2="105" y1="159.6579" y2="159.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="86" x="10" y="151.5559">gameengine</text></g><!--MD5=[69742786c97692da41924383d792a56d]
cluster gameengine.node--><g id="cluster_gameengine.node"><path d="M32.5,1323.59 L68.5,1323.59 A3.75,3.75 0 0 1 71,1326.09 L78,1348.6579 L4866.5,1348.6579 A2.5,2.5 0 0 1 4869,1351.1579 L4869,4290.09 A2.5,2.5 0 0 1 4866.5,4292.59 L32.5,4292.59 A2.5,2.5 0 0 1 30,4290.09 L30,1326.09 A2.5,2.5 0 0 1 32.5,1323.59 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="30" x2="78" y1="1348.6579" y2="1348.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="35" x="34" y="1340.5559">node</text></g><!--MD5=[7d7a8e46fe9bf731b652aff3302eda4c]
cluster gameengine.node._3D--><g id="cluster_gameengine.node._3D"><path d="M56.5,2119.59 L81.5,2119.59 A3.75,3.75 0 0 1 84,2122.09 L91,2144.6579 L1866.5,2144.6579 A2.5,2.5 0 0 1 1869,2147.1579 L1869,4266.09 A2.5,2.5 0 0 1 1866.5,4268.59 L56.5,4268.59 A2.5,2.5 0 0 1 54,4266.09 L54,2122.09 A2.5,2.5 0 0 1 56.5,2119.59 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="54" x2="91" y1="2144.6579" y2="2144.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="24" x="58" y="2136.5559">_3D</text></g><!--MD5=[fb06932d25d9cd344939db94e694de66]
cluster gameengine.node._2D--><g id="cluster_gameengine.node._2D"><path d="M1895.5,2119.59 L1920.5,2119.59 A3.75,3.75 0 0 1 1923,2122.09 L1930,2144.6579 L4842.5,2144.6579 A2.5,2.5 0 0 1 4845,2147.1579 L4845,3519.09 A2.5,2.5 0 0 1 4842.5,3521.59 L1895.5,3521.59 A2.5,2.5 0 0 1 1893,3519.09 L1893,2122.09 A2.5,2.5 0 0 1 1895.5,2119.59 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="1893" x2="1930" y1="2144.6579" y2="2144.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="24" x="1897" y="2136.5559">_2D</text></g><!--MD5=[e7a039f90400c1c4e746752acbc78bf3]
cluster gameengine.map--><g id="cluster_gameengine.map"><path d="M5371.5,211.09 L5403.5,211.09 A3.75,3.75 0 0 1 5406,213.59 L5413,236.1579 L6182.5,236.1579 A2.5,2.5 0 0 1 6185,238.6579 L6185,634.59 A2.5,2.5 0 0 1 6182.5,637.09 L5371.5,637.09 A2.5,2.5 0 0 1 5369,634.59 L5369,213.59 A2.5,2.5 0 0 1 5371.5,211.09 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="5369" x2="5413" y1="236.1579" y2="236.1579"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="31" x="5373" y="228.0559">map</text></g><!--MD5=[99cd3379f71692488bba8e2520ac9d6e]
cluster gameengine.ex--><g id="cluster_gameengine.ex"><path d="M4171.5,344.59 L4188.5,344.59 A3.75,3.75 0 0 1 4191,347.09 L4198,369.6579 L4696.5,369.6579 A2.5,2.5 0 0 1 4699,372.1579 L4699,1076.59 A2.5,2.5 0 0 1 4696.5,1079.09 L4171.5,1079.09 A2.5,2.5 0 0 1 4169,1076.59 L4169,347.09 A2.5,2.5 0 0 1 4171.5,344.59 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="4169" x2="4198" y1="369.6579" y2="369.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="16" x="4173" y="361.5559">ex</text></g><!--MD5=[86e1be46e0197c507d214d96b69260e4]
cluster gameengine.audio--><g id="cluster_gameengine.audio"><path d="M4895.5,1447.59 L4935.5,1447.59 A3.75,3.75 0 0 1 4938,1450.09 L4945,1472.6579 L5929.5,1472.6579 A2.5,2.5 0 0 1 5932,1475.1579 L5932,1585.09 A2.5,2.5 0 0 1 5929.5,1587.59 L4895.5,1587.59 A2.5,2.5 0 0 1 4893,1585.09 L4893,1450.09 A2.5,2.5 0 0 1 4895.5,1447.59 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="4893" x2="4945" y1="1472.6579" y2="1472.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="39" x="4897" y="1464.5559">audio</text></g><!--MD5=[562f4d60ca1c61b03823192b657c8d8e]
class raylib.GlStateManager--><g id="elem_raylib.GlStateManager"><rect codeLine="9" fill="#F1F1F1" height="524.6979" id="raylib.GlStateManager" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="571" x="6249.5" y="1995.59"/><ellipse cx="6476.25" cy="2011.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M6476.0469,2018.3244 Q6473.5625,2018.3244 6472.2344,2016.6838 Q6470.9219,2015.0119 6470.9219,2011.9025 Q6470.9219,2008.7775 6472.2344,2007.1213 Q6473.5625,2005.465 6476.0469,2005.465 Q6476.7656,2005.465 6477.4219,2005.6213 Q6478.0625,2005.7775 6478.625,2006.0744 L6478.625,2008.7931 Q6478.2656,2008.4494 6477.9688,2008.2619 Q6477.6719,2008.0588 6477.4063,2007.9338 Q6477.0938,2007.7931 6476.7813,2007.7306 Q6476.4844,2007.6681 6476.1719,2007.6681 Q6474.8438,2007.6681 6474.1563,2008.7306 Q6473.4688,2009.8244 6473.4688,2011.9025 Q6473.4688,2013.9963 6474.1563,2015.0588 Q6474.8438,2016.1369 6476.1719,2016.1369 Q6476.8125,2016.1369 6477.4063,2015.8556 Q6477.7031,2015.7306 6477.9844,2015.5431 Q6478.2813,2015.34 6478.625,2015.0119 L6478.625,2017.7306 Q6478.0469,2018.0275 6477.4063,2018.1838 Q6476.7813,2018.3244 6476.0469,2018.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="6496.75" y="2017.022">GlStateManager</text><line style="stroke:#181818;stroke-width:0.5;" x1="6250.5" x2="6819.5" y1="2027.59" y2="2027.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="6250.5" x2="6819.5" y1="2035.59" y2="2035.59"/><ellipse cx="6260.5" cy="2046.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="216" x="6269.5" y="2054.5559">color(const RlColor&amp; color) : void</text><ellipse cx="6260.5" cy="2065.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="545" x="6269.5" y="2073.6239">color(unsigned char r, unsigned char g, unsigned char b, unsigned char a) : void</text><ellipse cx="6260.5" cy="2084.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="273" x="6269.5" y="2092.6918">color(float r, float g, float b, float a) : void</text><ellipse cx="6260.5" cy="2103.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="6269.5" y="2111.7597">color(unsigned char r, unsigned char g, unsigned char b) : void</text><ellipse cx="6260.5" cy="2122.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="204" x="6269.5" y="2130.8276">disableBackfaceCulling() : void</text><ellipse cx="6260.5" cy="2141.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="171" x="6269.5" y="2149.8955">disableColorBlend() : void</text><ellipse cx="6260.5" cy="2160.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="173" x="6269.5" y="2168.9634">disableDepthMask() : void</text><ellipse cx="6260.5" cy="2180.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="166" x="6269.5" y="2188.0314">disableDepthTest() : void</text><ellipse cx="6260.5" cy="2199.1333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="172" x="6269.5" y="2207.0993">disableScissorTest() : void</text><ellipse cx="6260.5" cy="2218.2013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="6269.5" y="2226.1672">disableSmoothLines() : void</text><ellipse cx="6260.5" cy="2237.2692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="166" x="6269.5" y="2245.2351">disableWireMode() : void</text><ellipse cx="6260.5" cy="2256.3371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="201" x="6269.5" y="2264.303">enableBackfaceCulling() : void</text><ellipse cx="6260.5" cy="2275.405" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="168" x="6269.5" y="2283.3709">enableColorBlend() : void</text><ellipse cx="6260.5" cy="2294.4729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="6269.5" y="2302.4389">enableDepthMask() : void</text><ellipse cx="6260.5" cy="2313.5408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="163" x="6269.5" y="2321.5068">enableDepthTest() : void</text><ellipse cx="6260.5" cy="2332.6088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="169" x="6269.5" y="2340.5747">enableScissorTest() : void</text><ellipse cx="6260.5" cy="2351.6767" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="6269.5" y="2359.6426">enableSmoothLines() : void</text><ellipse cx="6260.5" cy="2370.7446" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="163" x="6269.5" y="2378.7105">enableWireMode() : void</text><ellipse cx="6260.5" cy="2389.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="117" x="6269.5" y="2397.7784">popMatrix() : void</text><ellipse cx="6260.5" cy="2408.8804" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="125" x="6269.5" y="2416.8464">pushMatrix() : void</text><ellipse cx="6260.5" cy="2427.9483" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="250" x="6269.5" y="2435.9143">rotate(const Vector3f&amp; rotation) : void</text><ellipse cx="6260.5" cy="2447.0163" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="225" x="6269.5" y="2454.9822">scale(const Vector3f&amp; scale) : void</text><ellipse cx="6260.5" cy="2466.0842" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="302" x="6269.5" y="2474.0501">scissor(int x, int y, int width, int height) : void</text><ellipse cx="6260.5" cy="2485.1521" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="241" x="6269.5" y="2493.118">scissor(const Rectangle&amp; rect) : void</text><ellipse cx="6260.5" cy="2504.22" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="290" x="6269.5" y="2512.1859">translate(const Vector3f&amp; translation) : void</text></g><!--MD5=[1069a8adf8bd5c0dfff5844a1b703547]
class raylib.Random--><g id="elem_raylib.Random"><rect codeLine="37" fill="#F1F1F1" height="200.5433" id="raylib.Random" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="410" x="6856" y="2157.59"/><ellipse cx="7028.75" cy="2173.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M7028.5469,2180.3244 Q7026.0625,2180.3244 7024.7344,2178.6838 Q7023.4219,2177.0119 7023.4219,2173.9025 Q7023.4219,2170.7775 7024.7344,2169.1213 Q7026.0625,2167.465 7028.5469,2167.465 Q7029.2656,2167.465 7029.9219,2167.6213 Q7030.5625,2167.7775 7031.125,2168.0744 L7031.125,2170.7931 Q7030.7656,2170.4494 7030.4688,2170.2619 Q7030.1719,2170.0588 7029.9063,2169.9338 Q7029.5938,2169.7931 7029.2813,2169.7306 Q7028.9844,2169.6681 7028.6719,2169.6681 Q7027.3438,2169.6681 7026.6563,2170.7306 Q7025.9688,2171.8244 7025.9688,2173.9025 Q7025.9688,2175.9963 7026.6563,2177.0588 Q7027.3438,2178.1369 7028.6719,2178.1369 Q7029.3125,2178.1369 7029.9063,2177.8556 Q7030.2031,2177.7306 7030.4844,2177.5431 Q7030.7813,2177.34 7031.125,2177.0119 L7031.125,2179.7306 Q7030.5469,2180.0275 7029.9063,2180.1838 Q7029.2813,2180.3244 7028.5469,2180.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="7049.25" y="2179.022">Random</text><line style="stroke:#181818;stroke-width:0.5;" x1="6857" x2="7265" y1="2189.59" y2="2189.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6864" y="2197.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="251" x="6876" y="2208.5559">_random_device : std::random_device</text><line style="stroke:#181818;stroke-width:0.5;" x1="6857" x2="7265" y1="2216.6579" y2="2216.6579"/><ellipse cx="6867" cy="2227.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="64" x="6876" y="2235.6239">Random()</text><ellipse cx="6867" cy="2246.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="292" x="6876" y="2254.6918">generate(double min, double max) : double</text><ellipse cx="6867" cy="2265.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="241" x="6876" y="2273.7597">generate(float min, float max) : float</text><ellipse cx="6867" cy="2284.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="6876" y="2292.8276">generate(int min, int max) : int</text><ellipse cx="6867" cy="2303.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="241" x="6876" y="2311.8955">generate(long min, long max) : long</text><ellipse cx="6867" cy="2322.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="256" x="6876" y="2330.9634">generate(short min, short max) : short</text><ellipse cx="6867" cy="2342.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="384" x="6876" y="2350.0314">generateSizeT(std::size_t min, std::size_t max) : std::size_t</text></g><!--MD5=[9ab3681ae809c7ee68d2b8ebbb553aa2]
class raylib.RlCamera--><g id="elem_raylib.RlCamera"><rect codeLine="48" fill="#F1F1F1" height="543.7658" id="raylib.RlCamera" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1228" x="31464" y="2914.09"/><ellipse cx="32041.25" cy="2930.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M32041.0469,2936.8244 Q32038.5625,2936.8244 32037.2344,2935.1838 Q32035.9219,2933.5119 32035.9219,2930.4025 Q32035.9219,2927.2775 32037.2344,2925.6213 Q32038.5625,2923.965 32041.0469,2923.965 Q32041.7656,2923.965 32042.4219,2924.1213 Q32043.0625,2924.2775 32043.625,2924.5744 L32043.625,2927.2931 Q32043.2656,2926.9494 32042.9688,2926.7619 Q32042.6719,2926.5588 32042.4063,2926.4338 Q32042.0938,2926.2931 32041.7813,2926.2306 Q32041.4844,2926.1681 32041.1719,2926.1681 Q32039.8438,2926.1681 32039.1563,2927.2306 Q32038.4688,2928.3244 32038.4688,2930.4025 Q32038.4688,2932.4963 32039.1563,2933.5588 Q32039.8438,2934.6369 32041.1719,2934.6369 Q32041.8125,2934.6369 32042.4063,2934.3556 Q32042.7031,2934.2306 32042.9844,2934.0431 Q32043.2813,2933.84 32043.625,2933.5119 L32043.625,2936.2306 Q32043.0469,2936.5275 32042.4063,2936.6838 Q32041.7813,2936.8244 32041.0469,2936.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="65" x="32061.75" y="2935.522">RlCamera</text><line style="stroke:#181818;stroke-width:0.5;" x1="31465" x2="32691" y1="2946.09" y2="2946.09"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="31472" y="2954.09"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="31484" y="2965.0559">_camera : Camera3D</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="31472" y="2973.1579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="31484" y="2984.1239">_cameraMode : CameraMode</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="31472" y="2992.2258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="146" x="31484" y="3003.1918">_mode : CameraMode</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="31472" y="3011.2938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="31484" y="3022.2597">_projection : CameraProjection</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="31472" y="3030.3617"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="31484" y="3041.3276">_lookingPoint : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="31472" y="3049.4296"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="31484" y="3060.3955">_position : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="31472" y="3068.4975"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="31484" y="3079.4634">_target : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="31472" y="3087.5654"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="31484" y="3098.5314">_fovy : float</text><line style="stroke:#181818;stroke-width:0.5;" x1="31465" x2="32691" y1="3106.6333" y2="3106.6333"/><ellipse cx="31475" cy="3117.6333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="31484" y="3125.5993">RlCamera()</text><ellipse cx="31475" cy="3136.7013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1202" x="31484" y="3144.6672">RlCamera(const Vector3f&amp; position, const Vector3f&amp; target, const Vector3f&amp; lookingPoint, const float&amp; fovy, const CameraProjection&amp; projection, const CameraMode&amp; cameraMode)</text><ellipse cx="31475" cy="3155.7692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="31484" y="3163.7351">get() : Camera3D&amp; {query}</text><ellipse cx="31475" cy="3174.8371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="367" x="31484" y="3182.803">getConstructedCameraMode() : CameraMode&amp; {query}</text><ellipse cx="31475" cy="3193.905" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="233" x="31484" y="3201.8709">getMode() : CameraMode&amp; {query}</text><ellipse cx="31475" cy="3212.9729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="373" x="31484" y="3220.9389">getConstructedProjection() : CameraProjection&amp; {query}</text><ellipse cx="31475" cy="3232.0408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="123" x="31484" y="3240.0068">geMatrix() : Matrix</text><ellipse cx="31475" cy="3251.1088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="328" x="31484" y="3259.0747">getConstructedLookingPoint() : Vector3f&amp; {query}</text><ellipse cx="31475" cy="3270.1767" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="295" x="31484" y="3278.1426">getConstructedPosition() : Vector3f&amp; {query}</text><ellipse cx="31475" cy="3289.2446" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="286" x="31484" y="3297.2105">getConstructedTarget() : Vector3f&amp; {query}</text><ellipse cx="31475" cy="3308.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="246" x="31484" y="3316.2784">getConstructedFovy() : float&amp; {query}</text><ellipse cx="31475" cy="3327.3804" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="31484" y="3335.3464">reset() : void</text><ellipse cx="31475" cy="3346.4483" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="340" x="31484" y="3354.4143">setCameraMode(const CameraMode&amp; mode) : void</text><ellipse cx="31475" cy="3365.5163" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="31484" y="3373.4822">setFov(const float&amp; fovy) : void</text><ellipse cx="31475" cy="3384.5842" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="284" x="31484" y="3392.5501">setPosition(const Vector3f&amp; position) : void</text><ellipse cx="31475" cy="3403.6521" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="376" x="31484" y="3411.618">setProjection(const CameraProjection&amp; projection) : void</text><ellipse cx="31475" cy="3422.72" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="262" x="31484" y="3430.6859">setTarget(const Vector3f&amp; target) : void</text><ellipse cx="31475" cy="3441.7879" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="31484" y="3449.7539">update() : void</text></g><!--MD5=[f2f5f380f64d713e3d162bbf473d6463]
class raylib.RlColor--><g id="elem_raylib.RlColor"><rect codeLine="77" fill="#F1F1F1" height="1077.6675" id="raylib.RlColor" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="593" x="9529.5" y="3651.59"/><ellipse cx="9797.75" cy="3667.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M9797.5469,3674.3244 Q9795.0625,3674.3244 9793.7344,3672.6838 Q9792.4219,3671.0119 9792.4219,3667.9025 Q9792.4219,3664.7775 9793.7344,3663.1213 Q9795.0625,3661.465 9797.5469,3661.465 Q9798.2656,3661.465 9798.9219,3661.6213 Q9799.5625,3661.7775 9800.125,3662.0744 L9800.125,3664.7931 Q9799.7656,3664.4494 9799.4688,3664.2619 Q9799.1719,3664.0588 9798.9063,3663.9338 Q9798.5938,3663.7931 9798.2813,3663.7306 Q9797.9844,3663.6681 9797.6719,3663.6681 Q9796.3438,3663.6681 9795.6563,3664.7306 Q9794.9688,3665.8244 9794.9688,3667.9025 Q9794.9688,3669.9963 9795.6563,3671.0588 Q9796.3438,3672.1369 9797.6719,3672.1369 Q9798.3125,3672.1369 9798.9063,3671.8556 Q9799.2031,3671.7306 9799.4844,3671.5431 Q9799.7813,3671.34 9800.125,3671.0119 L9800.125,3673.7306 Q9799.5469,3674.0275 9798.9063,3674.1838 Q9798.2813,3674.3244 9797.5469,3674.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="48" x="9818.25" y="3673.022">RlColor</text><line style="stroke:#181818;stroke-width:0.5;" x1="9530.5" x2="10121.5" y1="3683.59" y2="3683.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9537.5" y="3691.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="9549.5" y="3702.5559">_color : Color</text><ellipse cx="9540.5" cy="3713.6579" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="178" x="9549.5" y="3721.6239">Beige : static const RlColor</text><ellipse cx="9540.5" cy="3732.7258" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="175" x="9549.5" y="3740.6918">Black : static const RlColor</text><ellipse cx="9540.5" cy="3751.7938" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="9549.5" y="3759.7597">Blue : static const RlColor</text><ellipse cx="9540.5" cy="3770.8617" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="9549.5" y="3778.8276">Brown : static const RlColor</text><ellipse cx="9540.5" cy="3789.9296" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="201" x="9549.5" y="3797.8955">DarkBlue : static const RlColor</text><ellipse cx="9540.5" cy="3808.9975" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="214" x="9549.5" y="3816.9634">DarkBrown : static const RlColor</text><ellipse cx="9540.5" cy="3828.0654" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="202" x="9549.5" y="3836.0314">DarkGray : static const RlColor</text><ellipse cx="9540.5" cy="3847.1333" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="212" x="9549.5" y="3855.0993">DarkGreen : static const RlColor</text><ellipse cx="9540.5" cy="3866.2013" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="215" x="9549.5" y="3874.1672">DarkPurple : static const RlColor</text><ellipse cx="9540.5" cy="3885.2692" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="171" x="9549.5" y="3893.2351">Gold : static const RlColor</text><ellipse cx="9540.5" cy="3904.3371" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="171" x="9549.5" y="3912.303">Gray : static const RlColor</text><ellipse cx="9540.5" cy="3923.405" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="181" x="9549.5" y="3931.3709">Green : static const RlColor</text><ellipse cx="9540.5" cy="3942.4729" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="205" x="9549.5" y="3950.4389">LightGray : static const RlColor</text><ellipse cx="9540.5" cy="3961.5408" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="172" x="9549.5" y="3969.5068">Lime : static const RlColor</text><ellipse cx="9540.5" cy="3980.6088" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="200" x="9549.5" y="3988.5747">Magenta : static const RlColor</text><ellipse cx="9540.5" cy="3999.6767" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="192" x="9549.5" y="4007.6426">Maroon : static const RlColor</text><ellipse cx="9540.5" cy="4018.7446" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="191" x="9549.5" y="4026.7105">Orange : static const RlColor</text><ellipse cx="9540.5" cy="4037.8125" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="168" x="9549.5" y="4045.7784">Pink : static const RlColor</text><ellipse cx="9540.5" cy="4056.8804" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="184" x="9549.5" y="4064.8464">Purple : static const RlColor</text><ellipse cx="9540.5" cy="4075.9483" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="203" x="9549.5" y="4083.9143">RayWhite : static const RlColor</text><ellipse cx="9540.5" cy="4095.0163" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="166" x="9549.5" y="4102.9822">Red : static const RlColor</text><ellipse cx="9540.5" cy="4114.0842" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="192" x="9549.5" y="4122.0501">SkyBlue : static const RlColor</text><ellipse cx="9540.5" cy="4133.1521" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="223" x="9549.5" y="4141.118">Transparent : static const RlColor</text><ellipse cx="9540.5" cy="4152.22" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="177" x="9549.5" y="4160.1859">Violet : static const RlColor</text><ellipse cx="9540.5" cy="4171.2879" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="179" x="9549.5" y="4179.2539">White : static const RlColor</text><ellipse cx="9540.5" cy="4190.3558" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="9549.5" y="4198.3218">Yellow : static const RlColor</text><line style="stroke:#181818;stroke-width:0.5;" x1="9530.5" x2="10121.5" y1="4206.4238" y2="4206.4238"/><ellipse cx="9540.5" cy="4217.4238" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="9549.5" y="4225.3897">RlColor(Color color)</text><ellipse cx="9540.5" cy="4236.4917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="520" x="9549.5" y="4244.4576">RlColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)</text><ellipse cx="9540.5" cy="4255.5596" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="9549.5" y="4263.5255">RlColor(std::uint32_t color)</text><ellipse cx="9540.5" cy="4274.6275" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="276" x="9549.5" y="4282.5934">RlColor(const Vector4f&amp; normalizedColor)</text><ellipse cx="9540.5" cy="4293.6954" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="305" x="9549.5" y="4301.6614">RlColor(float hue, float saturation, float value)</text><ellipse cx="9540.5" cy="4312.7633" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="9549.5" y="4320.7293">getColor() : Color&amp; {query}</text><ellipse cx="9540.5" cy="4331.8313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="282" x="9549.5" y="4339.7972">operator+(unsigned char value) : RlColor&amp;</text><ellipse cx="9540.5" cy="4350.8992" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="290" x="9549.5" y="4358.8651">operator+=(unsigned char value) : RlColor&amp;</text><ellipse cx="9540.5" cy="4369.9671" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="279" x="9549.5" y="4377.933">operator-(unsigned char value) : RlColor&amp;</text><ellipse cx="9540.5" cy="4389.035" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="287" x="9549.5" y="4397.0009">operator-=(unsigned char value) : RlColor&amp;</text><ellipse cx="9540.5" cy="4408.1029" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="247" x="9549.5" y="4416.0689">setAlpha(unsigned char a) : RlColor&amp;</text><ellipse cx="9540.5" cy="4427.1708" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="239" x="9549.5" y="4435.1368">setBlue(unsigned char b) : RlColor&amp;</text><ellipse cx="9540.5" cy="4446.2388" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="250" x="9549.5" y="4454.2047">setGreen(unsigned char g) : RlColor&amp;</text><ellipse cx="9540.5" cy="4465.3067" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="232" x="9549.5" y="4473.2726">setRed(unsigned char r) : RlColor&amp;</text><ellipse cx="9540.5" cy="4484.3746" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="9549.5" y="4492.3405">toHSV() : Vector3f</text><ellipse cx="9540.5" cy="4503.4425" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="9549.5" y="4511.4084">normalize() : Vector4f {query}</text><ellipse cx="9540.5" cy="4522.5104" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="296" x="9549.5" y="4530.4764">operator!=(const RlColor&amp; rhs) : bool {query}</text><ellipse cx="9540.5" cy="4541.5783" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="300" x="9549.5" y="4549.5443">operator==(const RlColor&amp; rhs) : bool {query}</text><ellipse cx="9540.5" cy="4560.6463" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="9549.5" y="4568.6122">toInteger() : std::uint32_t {query}</text><ellipse cx="9540.5" cy="4579.7142" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="242" x="9549.5" y="4587.6801">getAlpha() : unsigned char&amp; {query}</text><ellipse cx="9540.5" cy="4598.7821" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="233" x="9549.5" y="4606.748">getBlue() : unsigned char&amp; {query}</text><ellipse cx="9540.5" cy="4617.85" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="244" x="9549.5" y="4625.8159">getGreen() : unsigned char&amp; {query}</text><ellipse cx="9540.5" cy="4636.9179" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="229" x="9549.5" y="4644.8839">getRed() : unsigned char&amp; {query}</text><ellipse cx="9540.5" cy="4655.9858" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="158" x="9549.5" y="4663.9518">alpha(float alpha) : void</text><ellipse cx="9540.5" cy="4675.0538" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="380" x="9549.5" y="4683.0197">alphaBlend(const RlColor&amp; src, const RlColor&amp; tint) : void</text><ellipse cx="9540.5" cy="4694.1217" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="567" x="9549.5" y="4702.0876">setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a) : void</text><ellipse cx="9540.5" cy="4713.1896" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="225" x="9549.5" y="4721.1555">setColor(const Color&amp; color) : void</text></g><!--MD5=[b50c075f80b10262884e7ec27bc531ec]
class raylib.Vector2--><g id="elem_raylib.Vector2"><rect codeLine="134" fill="#F1F1F1" height="162.4075" id="raylib.Vector2" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="366" x="7301" y="2177.09"/><ellipse cx="7390.25" cy="2193.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M7390.0469,2199.8244 Q7387.5625,2199.8244 7386.2344,2198.1838 Q7384.9219,2196.5119 7384.9219,2193.4025 Q7384.9219,2190.2775 7386.2344,2188.6213 Q7387.5625,2186.965 7390.0469,2186.965 Q7390.7656,2186.965 7391.4219,2187.1213 Q7392.0625,2187.2775 7392.625,2187.5744 L7392.625,2190.2931 Q7392.2656,2189.9494 7391.9688,2189.7619 Q7391.6719,2189.5588 7391.4063,2189.4338 Q7391.0938,2189.2931 7390.7813,2189.2306 Q7390.4844,2189.1681 7390.1719,2189.1681 Q7388.8438,2189.1681 7388.1563,2190.2306 Q7387.4688,2191.3244 7387.4688,2193.4025 Q7387.4688,2195.4963 7388.1563,2196.5588 Q7388.8438,2197.6369 7390.1719,2197.6369 Q7390.8125,2197.6369 7391.4063,2197.3556 Q7391.7031,2197.2306 7391.9844,2197.0431 Q7392.2813,2196.84 7392.625,2196.5119 L7392.625,2199.2306 Q7392.0469,2199.5275 7391.4063,2199.6838 Q7390.7813,2199.8244 7390.0469,2199.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="50" x="7410.75" y="2198.522">Vector2</text><rect fill="#FFFFFF" height="18.3441" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="127" x="7543" y="2174.09"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="125" x="7544" y="2187.9181">template&lt;typename T&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="7302" x2="7666" y1="2209.09" y2="2209.09"/><ellipse cx="7312" cy="2220.09" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="7321" y="2228.0559">x : T</text><ellipse cx="7312" cy="2239.1579" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="7321" y="2247.1239">y : T</text><line style="stroke:#181818;stroke-width:0.5;" x1="7302" x2="7666" y1="2255.2258" y2="2255.2258"/><ellipse cx="7312" cy="2266.2258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="58" x="7321" y="2274.1918">Vector2()</text><ellipse cx="7312" cy="2285.2938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="104" x="7321" y="2293.2597">Vector2(T x, T y)</text><ellipse cx="7312" cy="2304.3617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="336" x="7321" y="2312.3276">operator!=(const Vector2&lt;T&gt;&amp; other) : bool {query}</text><ellipse cx="7312" cy="2323.4296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="340" x="7321" y="2331.3955">operator==(const Vector2&lt;T&gt;&amp; other) : bool {query}</text></g><!--MD5=[2276c85978bc3f01be17943659f1d083]
class raylib.Vector3--><g id="elem_raylib.Vector3"><rect codeLine="143" fill="#F1F1F1" height="181.4754" id="raylib.Vector3" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="366" x="6352" y="3095.59"/><ellipse cx="6441.25" cy="3111.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M6441.0469,3118.3244 Q6438.5625,3118.3244 6437.2344,3116.6838 Q6435.9219,3115.0119 6435.9219,3111.9025 Q6435.9219,3108.7775 6437.2344,3107.1213 Q6438.5625,3105.465 6441.0469,3105.465 Q6441.7656,3105.465 6442.4219,3105.6213 Q6443.0625,3105.7775 6443.625,3106.0744 L6443.625,3108.7931 Q6443.2656,3108.4494 6442.9688,3108.2619 Q6442.6719,3108.0588 6442.4063,3107.9338 Q6442.0938,3107.7931 6441.7813,3107.7306 Q6441.4844,3107.6681 6441.1719,3107.6681 Q6439.8438,3107.6681 6439.1563,3108.7306 Q6438.4688,3109.8244 6438.4688,3111.9025 Q6438.4688,3113.9963 6439.1563,3115.0588 Q6439.8438,3116.1369 6441.1719,3116.1369 Q6441.8125,3116.1369 6442.4063,3115.8556 Q6442.7031,3115.7306 6442.9844,3115.5431 Q6443.2813,3115.34 6443.625,3115.0119 L6443.625,3117.7306 Q6443.0469,3118.0275 6442.4063,3118.1838 Q6441.7813,3118.3244 6441.0469,3118.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="50" x="6461.75" y="3117.022">Vector3</text><rect fill="#FFFFFF" height="18.3441" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="127" x="6594" y="3092.59"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="125" x="6595" y="3106.4181">template&lt;typename T&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="6353" x2="6717" y1="3127.59" y2="3127.59"/><ellipse cx="6363" cy="3138.59" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="6372" y="3146.5559">x : T</text><ellipse cx="6363" cy="3157.6579" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="6372" y="3165.6239">y : T</text><ellipse cx="6363" cy="3176.7258" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="6372" y="3184.6918">z : T</text><line style="stroke:#181818;stroke-width:0.5;" x1="6353" x2="6717" y1="3192.7938" y2="3192.7938"/><ellipse cx="6363" cy="3203.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="58" x="6372" y="3211.7597">Vector3()</text><ellipse cx="6363" cy="3222.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="6372" y="3230.8276">Vector3(T x, T y, T z)</text><ellipse cx="6363" cy="3241.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="336" x="6372" y="3249.8955">operator!=(const Vector3&lt;T&gt;&amp; other) : bool {query}</text><ellipse cx="6363" cy="3260.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="340" x="6372" y="3268.9634">operator==(const Vector3&lt;T&gt;&amp; other) : bool {query}</text></g><!--MD5=[c79ba26e6db5c6c137ad6311257236a9]
class raylib.Vector4--><g id="elem_raylib.Vector4"><rect codeLine="153" fill="#F1F1F1" height="200.5433" id="raylib.Vector4" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="342" x="6753" y="3085.59"/><ellipse cx="6830.25" cy="3101.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M6830.0469,3108.3244 Q6827.5625,3108.3244 6826.2344,3106.6838 Q6824.9219,3105.0119 6824.9219,3101.9025 Q6824.9219,3098.7775 6826.2344,3097.1213 Q6827.5625,3095.465 6830.0469,3095.465 Q6830.7656,3095.465 6831.4219,3095.6213 Q6832.0625,3095.7775 6832.625,3096.0744 L6832.625,3098.7931 Q6832.2656,3098.4494 6831.9688,3098.2619 Q6831.6719,3098.0588 6831.4063,3097.9338 Q6831.0938,3097.7931 6830.7813,3097.7306 Q6830.4844,3097.6681 6830.1719,3097.6681 Q6828.8438,3097.6681 6828.1563,3098.7306 Q6827.4688,3099.8244 6827.4688,3101.9025 Q6827.4688,3103.9963 6828.1563,3105.0588 Q6828.8438,3106.1369 6830.1719,3106.1369 Q6830.8125,3106.1369 6831.4063,3105.8556 Q6831.7031,3105.7306 6831.9844,3105.5431 Q6832.2813,3105.34 6832.625,3105.0119 L6832.625,3107.7306 Q6832.0469,3108.0275 6831.4063,3108.1838 Q6830.7813,3108.3244 6830.0469,3108.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="50" x="6850.75" y="3107.022">Vector4</text><rect fill="#FFFFFF" height="18.3441" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="127" x="6971" y="3082.59"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="125" x="6972" y="3096.4181">template&lt;typename T&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="6754" x2="7094" y1="3117.59" y2="3117.59"/><ellipse cx="6764" cy="3128.59" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="31" x="6773" y="3136.5559">w : T</text><ellipse cx="6764" cy="3147.6579" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="6773" y="3155.6239">x : T</text><ellipse cx="6764" cy="3166.7258" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="6773" y="3174.6918">y : T</text><ellipse cx="6764" cy="3185.7938" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="6773" y="3193.7597">z : T</text><line style="stroke:#181818;stroke-width:0.5;" x1="6754" x2="7094" y1="3201.8617" y2="3201.8617"/><ellipse cx="6764" cy="3212.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="58" x="6773" y="3220.8276">Vector4()</text><ellipse cx="6764" cy="3231.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="6773" y="3239.8955">Vector4(T x, T y, T z, T w)</text><ellipse cx="6764" cy="3250.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="312" x="6773" y="3258.9634">operator!=(const Vector4&amp; other) : bool {query}</text><ellipse cx="6764" cy="3270.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="316" x="6773" y="3278.0314">operator==(const Vector4&amp; other) : bool {query}</text></g><!--MD5=[c90c0145e5e403502970efe32264e1f9]
class raylib.window.RlWindow--><g id="elem_raylib.window.RlWindow"><rect codeLine="165" fill="#F1F1F1" height="925.1242" id="raylib.window.RlWindow" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="512" x="32162" y="1795.59"/><ellipse cx="32380.25" cy="1811.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M32380.0469,1818.3244 Q32377.5625,1818.3244 32376.2344,1816.6838 Q32374.9219,1815.0119 32374.9219,1811.9025 Q32374.9219,1808.7775 32376.2344,1807.1213 Q32377.5625,1805.465 32380.0469,1805.465 Q32380.7656,1805.465 32381.4219,1805.6213 Q32382.0625,1805.7775 32382.625,1806.0744 L32382.625,1808.7931 Q32382.2656,1808.4494 32381.9688,1808.2619 Q32381.6719,1808.0588 32381.4063,1807.9338 Q32381.0938,1807.7931 32380.7813,1807.7306 Q32380.4844,1807.6681 32380.1719,1807.6681 Q32378.8438,1807.6681 32378.1563,1808.7306 Q32377.4688,1809.8244 32377.4688,1811.9025 Q32377.4688,1813.9963 32378.1563,1815.0588 Q32378.8438,1816.1369 32380.1719,1816.1369 Q32380.8125,1816.1369 32381.4063,1815.8556 Q32381.7031,1815.7306 32381.9844,1815.5431 Q32382.2813,1815.34 32382.625,1815.0119 L32382.625,1817.7306 Q32382.0469,1818.0275 32381.4063,1818.1838 Q32380.7813,1818.3244 32380.0469,1818.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="67" x="32400.75" y="1817.022">RlWindow</text><line style="stroke:#181818;stroke-width:0.5;" x1="32163" x2="32673" y1="1827.59" y2="1827.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="32170" y="1835.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="32182" y="1846.5559">_isCreated : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="32170" y="1854.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="32182" y="1865.6239">_isOpen : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="32170" y="1873.7258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="32182" y="1884.6918">_height : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="32170" y="1892.7938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="32182" y="1903.7597">_minHeight : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="32170" y="1911.8617"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="32182" y="1922.8276">_minWidth : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="32170" y="1930.9296"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="32182" y="1941.8955">_width : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="32170" y="1949.9975"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="179" x="32182" y="1960.9634">_camera : raylib::RlCamera</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="32170" y="1969.0654"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="300" x="32182" y="1980.0314">_instance : static std::shared_ptr&lt;RlWindow&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="32170" y="1988.1333"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="32182" y="1999.0993">_title : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="32163" x2="32673" y1="2007.2013" y2="2007.2013"/><ellipse cx="32173" cy="2018.2013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="32182" y="2026.1672">RlWindow()</text><ellipse cx="32173" cy="2037.2692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="32182" y="2045.2351">~RlWindow()</text><ellipse cx="32173" cy="2056.3371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="266" x="32182" y="2064.303">hasState(const ConfigFlags&amp; flag) : bool</text><ellipse cx="32173" cy="2075.405" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="115" x="32182" y="2083.3709">isFocused() : bool</text><ellipse cx="32173" cy="2094.4729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="32182" y="2102.4389">isFullScreen() : bool</text><ellipse cx="32173" cy="2113.5408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="32182" y="2121.5068">isHidden() : bool</text><ellipse cx="32173" cy="2132.6088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="133" x="32182" y="2140.5747">isMaximized() : bool</text><ellipse cx="32173" cy="2151.6767" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="32182" y="2159.6426">isMinimized() : bool</text><ellipse cx="32173" cy="2170.7446" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="32182" y="2178.7105">isOpen() : bool</text><ellipse cx="32173" cy="2189.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="32182" y="2197.7784">isReady() : bool</text><ellipse cx="32173" cy="2208.8804" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="32182" y="2216.8464">isResized() : bool</text><ellipse cx="32173" cy="2227.9483" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="32182" y="2235.9143">isIsCreated() : bool&amp; {query}</text><ellipse cx="32173" cy="2247.0163" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="168" x="32182" y="2254.9822">getHeight() : int&amp; {query}</text><ellipse cx="32173" cy="2266.0842" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="194" x="32182" y="2274.0501">getMinHeight() : int&amp; {query}</text><ellipse cx="32173" cy="2285.1521" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="189" x="32182" y="2293.118">getMinWidth() : int&amp; {query}</text><ellipse cx="32173" cy="2304.22" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="163" x="32182" y="2312.1859">getWidth() : int&amp; {query}</text><ellipse cx="32173" cy="2323.2879" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="215" x="32182" y="2331.2539">getCamera() : raylib::RlCamera&amp;</text><ellipse cx="32173" cy="2342.3558" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="268" x="32182" y="2350.3218">getCamera() : raylib::RlCamera&amp; {query}</text><ellipse cx="32173" cy="2361.4238" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="295" x="32182" y="2369.3897">getInstance() : std::shared_ptr&lt;RlWindow&gt;&amp;</text><ellipse cx="32173" cy="2380.4917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="32182" y="2388.4576">getTitle() : std::string&amp; {query}</text><ellipse cx="32173" cy="2399.5596" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="238" x="32182" y="2407.5255">clearState(unsigned int flags) : void</text><ellipse cx="32173" cy="2418.6275" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="32182" y="2426.5934">createWindow(const std::string&amp; title, int width, int height, int fps) : void</text><ellipse cx="32173" cy="2437.6954" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="32182" y="2445.6614">maximize() : void</text><ellipse cx="32173" cy="2456.7633" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="32182" y="2464.7293">minimize() : void</text><ellipse cx="32173" cy="2475.8313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="32182" y="2483.7972">restore() : void</text><ellipse cx="32173" cy="2494.8992" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="289" x="32182" y="2502.8651">setCamera(const RlCamera&amp; camera) : void</text><ellipse cx="32173" cy="2513.9671" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="270" x="32182" y="2521.933">setConfigFlags(unsigned int flags) : void</text><ellipse cx="32173" cy="2533.035" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="299" x="32182" y="2541.0009">setIcon(const image::RlImage&amp; image) : void</text><ellipse cx="32173" cy="2552.1029" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="248" x="32182" y="2560.0689">setIsOpen(const bool&amp; isOpen) : void</text><ellipse cx="32173" cy="2571.1708" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="255" x="32182" y="2579.1368">setMinSize(int width, int height) : void</text><ellipse cx="32173" cy="2590.2388" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="32182" y="2598.2047">setMonitor(int monitor) : void</text><ellipse cx="32173" cy="2609.3067" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="187" x="32182" y="2617.2726">setPosition(int x, int y) : void</text><ellipse cx="32173" cy="2628.3746" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="229" x="32182" y="2636.3405">setSize(int width, int height) : void</text><ellipse cx="32173" cy="2647.4425" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="225" x="32182" y="2655.4084">setState(unsigned int flags) : void</text><ellipse cx="32173" cy="2666.5104" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="246" x="32182" y="2674.4764">setTitle(const std::string&amp; title) : void</text><ellipse cx="32173" cy="2685.5783" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="335" x="32182" y="2693.5443">takeScreenshot(const std::string&amp; fileName) : void</text><ellipse cx="32173" cy="2704.6463" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="160" x="32182" y="2712.6122">toggleFullscreen() : void</text></g><!--MD5=[7205982789043c7c272c32a3ef0e4818]
class raylib.window.System--><g id="elem_raylib.window.System"><rect codeLine="214" fill="#F1F1F1" height="391.2225" id="raylib.window.System" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="369" x="31757.5" y="2062.59"/><ellipse cx="31913.75" cy="2078.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M31913.5469,2085.3244 Q31911.0625,2085.3244 31909.7344,2083.6838 Q31908.4219,2082.0119 31908.4219,2078.9025 Q31908.4219,2075.7775 31909.7344,2074.1213 Q31911.0625,2072.465 31913.5469,2072.465 Q31914.2656,2072.465 31914.9219,2072.6213 Q31915.5625,2072.7775 31916.125,2073.0744 L31916.125,2075.7931 Q31915.7656,2075.4494 31915.4688,2075.2619 Q31915.1719,2075.0588 31914.9063,2074.9338 Q31914.5938,2074.7931 31914.2813,2074.7306 Q31913.9844,2074.6681 31913.6719,2074.6681 Q31912.3438,2074.6681 31911.6563,2075.7306 Q31910.9688,2076.8244 31910.9688,2078.9025 Q31910.9688,2080.9963 31911.6563,2082.0588 Q31912.3438,2083.1369 31913.6719,2083.1369 Q31914.3125,2083.1369 31914.9063,2082.8556 Q31915.2031,2082.7306 31915.4844,2082.5431 Q31915.7813,2082.34 31916.125,2082.0119 L31916.125,2084.7306 Q31915.5469,2085.0275 31914.9063,2085.1838 Q31914.2813,2085.3244 31913.5469,2085.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="48" x="31934.25" y="2084.022">System</text><line style="stroke:#181818;stroke-width:0.5;" x1="31758.5" x2="32125.5" y1="2094.59" y2="2094.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="31758.5" x2="32125.5" y1="2102.59" y2="2102.59"/><ellipse cx="31768.5" cy="2113.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="316" x="31777.5" y="2121.5559">getMonitorPosition(int monitorIndex) : Vector2f</text><ellipse cx="31768.5" cy="2132.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="204" x="31777.5" y="2140.6239">getWindowPosition() : Vector2f</text><ellipse cx="31768.5" cy="2151.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="209" x="31777.5" y="2159.6918">getWindowScaleDPI() : Vector2f</text><ellipse cx="31768.5" cy="2170.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="343" x="31777.5" y="2178.7597">getMonitorPhysicalSize(int monitorIndex) : Vector2i</text><ellipse cx="31768.5" cy="2189.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="289" x="31777.5" y="2197.8276">getMonitorSize(int monitorIndex) : Vector2i</text><ellipse cx="31768.5" cy="2208.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="169" x="31777.5" y="2216.8955">getScreenSize() : Vector2i</text><ellipse cx="31768.5" cy="2227.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="165" x="31777.5" y="2235.9634">getCurrentMonitor() : int</text><ellipse cx="31768.5" cy="2247.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="153" x="31777.5" y="2255.0314">getMonitorCount() : int</text><ellipse cx="31768.5" cy="2266.1333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="271" x="31777.5" y="2274.0993">getMonitorHeight(int monitorIndex) : int</text><ellipse cx="31768.5" cy="2285.2013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="325" x="31777.5" y="2293.1672">getMonitorPhysicalHeight(int monitorIndex) : int</text><ellipse cx="31768.5" cy="2304.2692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="320" x="31777.5" y="2312.2351">getMonitorPhysicalWidth(int monitorIndex) : int</text><ellipse cx="31768.5" cy="2323.3371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="308" x="31777.5" y="2331.303">getMonitorRefreshRate(int monitorIndex) : int</text><ellipse cx="31768.5" cy="2342.405" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="266" x="31777.5" y="2350.3709">getMonitorWidth(int monitorIndex) : int</text><ellipse cx="31768.5" cy="2361.4729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="151" x="31777.5" y="2369.4389">getScreenHeight() : int</text><ellipse cx="31768.5" cy="2380.5408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="146" x="31777.5" y="2388.5068">getScreenWidth() : int</text><ellipse cx="31768.5" cy="2399.6088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="205" x="31777.5" y="2407.5747">getClipboardText() : std::string</text><ellipse cx="31768.5" cy="2418.6767" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="317" x="31777.5" y="2426.6426">getMonitorName(int monitorIndex) : std::string</text><ellipse cx="31768.5" cy="2437.7446" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="310" x="31777.5" y="2445.7105">setClipboardText(const std::string&amp; text) : void</text></g><!--MD5=[fc44ad1c963e96c4734aeb4fba4ea08d]
class raylib.texture.RlRenderTexture--><g id="elem_raylib.texture.RlRenderTexture"><rect codeLine="237" fill="#F1F1F1" height="124.2717" id="raylib.texture.RlRenderTexture" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="349" x="16279.5" y="4128.59"/><ellipse cx="16393.25" cy="4144.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M16393.0469,4151.3244 Q16390.5625,4151.3244 16389.2344,4149.6838 Q16387.9219,4148.0119 16387.9219,4144.9025 Q16387.9219,4141.7775 16389.2344,4140.1213 Q16390.5625,4138.465 16393.0469,4138.465 Q16393.7656,4138.465 16394.4219,4138.6213 Q16395.0625,4138.7775 16395.625,4139.0744 L16395.625,4141.7931 Q16395.2656,4141.4494 16394.9688,4141.2619 Q16394.6719,4141.0588 16394.4063,4140.9338 Q16394.0938,4140.7931 16393.7813,4140.7306 Q16393.4844,4140.6681 16393.1719,4140.6681 Q16391.8438,4140.6681 16391.1563,4141.7306 Q16390.4688,4142.8244 16390.4688,4144.9025 Q16390.4688,4146.9963 16391.1563,4148.0588 Q16391.8438,4149.1369 16393.1719,4149.1369 Q16393.8125,4149.1369 16394.4063,4148.8556 Q16394.7031,4148.7306 16394.9844,4148.5431 Q16395.2813,4148.34 16395.625,4148.0119 L16395.625,4150.7306 Q16395.0469,4151.0275 16394.4063,4151.1838 Q16393.7813,4151.3244 16393.0469,4151.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="16413.75" y="4150.022">RlRenderTexture</text><line style="stroke:#181818;stroke-width:0.5;" x1="16280.5" x2="16627.5" y1="4160.59" y2="4160.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="16287.5" y="4168.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="233" x="16299.5" y="4179.5559">_renderTexture : RenderTexture2D</text><line style="stroke:#181818;stroke-width:0.5;" x1="16280.5" x2="16627.5" y1="4187.6579" y2="4187.6579"/><ellipse cx="16290.5" cy="4198.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="255" x="16299.5" y="4206.6239">RlRenderTexture(int width, int height)</text><ellipse cx="16290.5" cy="4217.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="16299.5" y="4225.6918">~RlRenderTexture()</text><ellipse cx="16290.5" cy="4236.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="323" x="16299.5" y="4244.7597">getRenderTexture() : RenderTexture2D&amp; {query}</text></g><!--MD5=[7379ad9370be35f6a7d5c3a27ad4c3cd]
class raylib.texture.RlTexture--><g id="elem_raylib.texture.RlTexture"><rect codeLine="244" fill="#F1F1F1" height="448.4263" id="raylib.texture.RlTexture" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="512" x="15732" y="3966.59"/><ellipse cx="15951.75" cy="3982.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M15951.5469,3989.3244 Q15949.0625,3989.3244 15947.7344,3987.6838 Q15946.4219,3986.0119 15946.4219,3982.9025 Q15946.4219,3979.7775 15947.7344,3978.1213 Q15949.0625,3976.465 15951.5469,3976.465 Q15952.2656,3976.465 15952.9219,3976.6213 Q15953.5625,3976.7775 15954.125,3977.0744 L15954.125,3979.7931 Q15953.7656,3979.4494 15953.4688,3979.2619 Q15953.1719,3979.0588 15952.9063,3978.9338 Q15952.5938,3978.7931 15952.2813,3978.7306 Q15951.9844,3978.6681 15951.6719,3978.6681 Q15950.3438,3978.6681 15949.6563,3979.7306 Q15948.9688,3980.8244 15948.9688,3982.9025 Q15948.9688,3984.9963 15949.6563,3986.0588 Q15950.3438,3987.1369 15951.6719,3987.1369 Q15952.3125,3987.1369 15952.9063,3986.8556 Q15953.2031,3986.7306 15953.4844,3986.5431 Q15953.7813,3986.34 15954.125,3986.0119 L15954.125,3988.7306 Q15953.5469,3989.0275 15952.9063,3989.1838 Q15952.2813,3989.3244 15951.5469,3989.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="64" x="15972.25" y="3988.022">RlTexture</text><line style="stroke:#181818;stroke-width:0.5;" x1="15733" x2="16243" y1="3998.59" y2="3998.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15740" y="4006.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="15752" y="4017.5559">_textureRec : Rectangle</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15740" y="4025.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="135" x="15752" y="4036.6239">_texture : Texture2D</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15740" y="4044.7258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="165" x="15752" y="4055.6918">_texturePath : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="15733" x2="16243" y1="4063.7938" y2="4063.7938"/><ellipse cx="15743" cy="4074.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="256" x="15752" y="4082.7597">RlTexture(const std::string&amp; fileName)</text><ellipse cx="15743" cy="4093.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="274" x="15752" y="4101.8276">RlTexture(const image::RlImage&amp; image)</text><ellipse cx="15743" cy="4112.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="15752" y="4120.8955">RlTexture(const image::RlImage&amp; image, const CubemapLayout&amp; layout)</text><ellipse cx="15743" cy="4131.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="15752" y="4139.9634">~RlTexture()</text><ellipse cx="15743" cy="4151.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="247" x="15752" y="4159.0314">getTextureRec() : Rectangle&amp; {query}</text><ellipse cx="15743" cy="4170.1333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="174" x="15752" y="4178.0993">get() : Texture2D&amp; {query}</text><ellipse cx="15743" cy="4189.2013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="172" x="15752" y="4197.1672">getTexture() : Texture2D&amp;</text><ellipse cx="15743" cy="4208.2692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="15752" y="4216.2351">getFormat() : int&amp; {query}</text><ellipse cx="15743" cy="4227.3371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="168" x="15752" y="4235.303">getHeight() : int&amp; {query}</text><ellipse cx="15743" cy="4246.405" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="186" x="15752" y="4254.3709">getMipmaps() : int&amp; {query}</text><ellipse cx="15743" cy="4265.4729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="163" x="15752" y="4273.4389">getWidth() : int&amp; {query}</text><ellipse cx="15743" cy="4284.5408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="204" x="15752" y="4292.5068">getPath() : std::string&amp; {query}</text><ellipse cx="15743" cy="4303.6088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="206" x="15752" y="4311.5747">getID() : unsigned int&amp; {query}</text><ellipse cx="15743" cy="4322.6767" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="15752" y="4330.6426">genTextureMipmaps() : void</text><ellipse cx="15743" cy="4341.7446" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="273" x="15752" y="4349.7105">setFilter(const TextureFilter&amp; filter) : void</text><ellipse cx="15743" cy="4360.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="279" x="15752" y="4368.7784">setWrap(const TextureWrap&amp; wrap) : void</text><ellipse cx="15743" cy="4379.8804" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="215" x="15752" y="4387.8464">update(const void* pixels) : void</text><ellipse cx="15743" cy="4398.9483" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="394" x="15752" y="4406.9143">updateRect(const Rectangle&amp; rec, const void* pixels) : void</text></g><!--MD5=[bc479f3e982e72a86dbb927c603cf7ff]
class raylib.text.RlFont--><g id="elem_raylib.text.RlFont"><rect codeLine="270" fill="#F1F1F1" height="314.9508" id="raylib.text.RlFont" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="945" x="19029.5" y="4033.09"/><ellipse cx="19476.75" cy="4049.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M19476.5469,4055.8244 Q19474.0625,4055.8244 19472.7344,4054.1838 Q19471.4219,4052.5119 19471.4219,4049.4025 Q19471.4219,4046.2775 19472.7344,4044.6213 Q19474.0625,4042.965 19476.5469,4042.965 Q19477.2656,4042.965 19477.9219,4043.1213 Q19478.5625,4043.2775 19479.125,4043.5744 L19479.125,4046.2931 Q19478.7656,4045.9494 19478.4688,4045.7619 Q19478.1719,4045.5588 19477.9063,4045.4338 Q19477.5938,4045.2931 19477.2813,4045.2306 Q19476.9844,4045.1681 19476.6719,4045.1681 Q19475.3438,4045.1681 19474.6563,4046.2306 Q19473.9688,4047.3244 19473.9688,4049.4025 Q19473.9688,4051.4963 19474.6563,4052.5588 Q19475.3438,4053.6369 19476.6719,4053.6369 Q19477.3125,4053.6369 19477.9063,4053.3556 Q19478.2031,4053.2306 19478.4844,4053.0431 Q19478.7813,4052.84 19479.125,4052.5119 L19479.125,4055.2306 Q19478.5469,4055.5275 19477.9063,4055.6838 Q19477.2813,4055.8244 19476.5469,4055.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="42" x="19497.25" y="4054.522">RlFont</text><line style="stroke:#181818;stroke-width:0.5;" x1="19030.5" x2="19973.5" y1="4065.09" y2="4065.09"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="19037.5" y="4073.09"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="19049.5" y="4084.0559">_font : Font</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="19037.5" y="4092.1579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="19049.5" y="4103.1239">_fontSize : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="19037.5" y="4111.2258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="19049.5" y="4122.1918">_fontPath : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="19030.5" x2="19973.5" y1="4130.2938" y2="4130.2938"/><ellipse cx="19040.5" cy="4141.2938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="50" x="19049.5" y="4149.2597">RlFont()</text><ellipse cx="19040.5" cy="4160.3617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="230" x="19049.5" y="4168.3276">RlFont(const std::string&amp; fontPath)</text><ellipse cx="19040.5" cy="4179.4296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="19049.5" y="4187.3955">RlFont(const int&amp; fontSize)</text><ellipse cx="19040.5" cy="4198.4975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="626" x="19049.5" y="4206.4634">RlFont(const std::string&amp; fontPath, const int&amp; fontSize, int* fontChars, const int&amp; glyphCount)</text><ellipse cx="19040.5" cy="4217.5654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="523" x="19049.5" y="4225.5314">RlFont(const image::RlImage&amp; image, const RlColor&amp; key, const int&amp; firstChar)</text><ellipse cx="19040.5" cy="4236.6333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="919" x="19049.5" y="4244.5993">RlFont(const std::string&amp; fileType, const unsigned char* fileData, int dataSize, const int&amp; fontSize, int* fontChars, const int&amp; glyphCount)</text><ellipse cx="19040.5" cy="4255.7013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="58" x="19049.5" y="4263.6672">~RlFont()</text><ellipse cx="19040.5" cy="4274.7692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="163" x="19049.5" y="4282.7351">getFont() : Font&amp; {query}</text><ellipse cx="19040.5" cy="4293.8371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="169" x="19049.5" y="4301.803">getFontSize() : int {query}</text><ellipse cx="19040.5" cy="4312.905" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="280" x="19049.5" y="4320.8709">getDefaultFont() : std::shared_ptr&lt;RlFont&gt;</text><ellipse cx="19040.5" cy="4331.9729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="233" x="19049.5" y="4339.9389">getFontPath() : std::string&amp; {query}</text></g><!--MD5=[a08e6e857956ab5fef281e57096395c2]
class raylib.text.RlText--><g id="elem_raylib.text.RlText"><rect codeLine="287" fill="#F1F1F1" height="620.0375" id="raylib.text.RlText" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="821" x="19342.5" y="2876.09"/><ellipse cx="19728.25" cy="2892.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M19728.0469,2898.8244 Q19725.5625,2898.8244 19724.2344,2897.1838 Q19722.9219,2895.5119 19722.9219,2892.4025 Q19722.9219,2889.2775 19724.2344,2887.6213 Q19725.5625,2885.965 19728.0469,2885.965 Q19728.7656,2885.965 19729.4219,2886.1213 Q19730.0625,2886.2775 19730.625,2886.5744 L19730.625,2889.2931 Q19730.2656,2888.9494 19729.9688,2888.7619 Q19729.6719,2888.5588 19729.4063,2888.4338 Q19729.0938,2888.2931 19728.7813,2888.2306 Q19728.4844,2888.1681 19728.1719,2888.1681 Q19726.8438,2888.1681 19726.1563,2889.2306 Q19725.4688,2890.3244 19725.4688,2892.4025 Q19725.4688,2894.4963 19726.1563,2895.5588 Q19726.8438,2896.6369 19728.1719,2896.6369 Q19728.8125,2896.6369 19729.4063,2896.3556 Q19729.7031,2896.2306 19729.9844,2896.0431 Q19730.2813,2895.84 19730.625,2895.5119 L19730.625,2898.2306 Q19730.0469,2898.5275 19729.4063,2898.6838 Q19728.7813,2898.8244 19728.0469,2898.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="41" x="19748.75" y="2897.522">RlText</text><line style="stroke:#181818;stroke-width:0.5;" x1="19343.5" x2="20162.5" y1="2908.09" y2="2908.09"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="19350.5" y="2916.09"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="19362.5" y="2927.0559">_color : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="19350.5" y="2935.1579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="19362.5" y="2946.1239">_origin : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="19350.5" y="2954.2258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="19362.5" y="2965.1918">_position : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="19350.5" y="2973.2938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="19362.5" y="2984.2597">_fontSize : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="19350.5" y="2992.3617"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="19362.5" y="3003.3276">_rotation : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="19350.5" y="3011.4296"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="19362.5" y="3022.3955">_textSpacing : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="19350.5" y="3030.4975"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="19362.5" y="3041.4634">_font : std::shared_ptr&lt;RlFont&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="19350.5" y="3049.5654"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="19362.5" y="3060.5314">_text : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="19343.5" x2="20162.5" y1="3068.6333" y2="3068.6333"/><ellipse cx="19353.5" cy="3079.6333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="511" x="19362.5" y="3087.5993">RlText(const std::string&amp; text, const Vector2f&amp; position, const RlColor&amp; color)</text><ellipse cx="19353.5" cy="3098.7013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="720" x="19362.5" y="3106.6672">RlText(const std::string&amp; text, std::shared_ptr&lt;RlFont&gt;&amp; font, const Vector2f&amp; position, const RlColor&amp; color)</text><ellipse cx="19353.5" cy="3117.7692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="795" x="19362.5" y="3125.7351">RlText(const std::string&amp; text, const std::string&amp; fontPath, float fontSize, const Vector2f&amp; position, const RlColor&amp; color)</text><ellipse cx="19353.5" cy="3136.8371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="19362.5" y="3144.803">getColor() : RlColor&amp; {query}</text><ellipse cx="19353.5" cy="3155.905" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="177" x="19362.5" y="3163.8709">getSize() : Vector2f {query}</text><ellipse cx="19353.5" cy="3174.9729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="19362.5" y="3182.9389">getOrigin() : Vector2f&amp; {query}</text><ellipse cx="19353.5" cy="3194.0408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="19362.5" y="3202.0068">getPosition() : Vector2f&amp; {query}</text><ellipse cx="19353.5" cy="3213.1088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="181" x="19362.5" y="3221.0747">getFontSize() : float {query}</text><ellipse cx="19353.5" cy="3232.1767" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="181" x="19362.5" y="3240.1426">getRotation() : float {query}</text><ellipse cx="19353.5" cy="3251.2446" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="207" x="19362.5" y="3259.2105">getTextSpacing() : float {query}</text><ellipse cx="19353.5" cy="3270.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="165" x="19362.5" y="3278.2784">getWidth() : float {query}</text><ellipse cx="19353.5" cy="3289.3804" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="294" x="19362.5" y="3297.3464">getFont() : std::shared_ptr&lt;RlFont&gt;&amp; {query}</text><ellipse cx="19353.5" cy="3308.4483" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="202" x="19362.5" y="3316.4143">getText() : std::string&amp; {query}</text><ellipse cx="19353.5" cy="3327.5163" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="238" x="19362.5" y="3335.4822">setColor(const RlColor&amp; color) : void</text><ellipse cx="19353.5" cy="3346.5842" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="338" x="19362.5" y="3354.5501">setFont(const std::shared_ptr&lt;RlFont&gt;&amp; font) : void</text><ellipse cx="19353.5" cy="3365.6521" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="212" x="19362.5" y="3373.618">setFontSize(float fontSize) : void</text><ellipse cx="19353.5" cy="3384.72" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="260" x="19362.5" y="3392.6859">setOrigin(const Vector2f&amp; origin) : void</text><ellipse cx="19353.5" cy="3403.7879" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="211" x="19362.5" y="3411.7539">setPosition(float x, float y) : void</text><ellipse cx="19353.5" cy="3422.8558" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="254" x="19362.5" y="3430.8218">setPosition(const Vector2f&amp; pos) : void</text><ellipse cx="19353.5" cy="3441.9238" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="211" x="19362.5" y="3449.8897">setRotation(float rotation) : void</text><ellipse cx="19353.5" cy="3460.9917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="244" x="19362.5" y="3468.9576">setText(const std::string&amp; text) : void</text><ellipse cx="19353.5" cy="3480.0596" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="263" x="19362.5" y="3488.0255">setTextSpacing(float textSpacing) : void</text></g><!--MD5=[414a3c818b9afa2f2bb0e0e7f1df53da]
class raylib.text.TextCodepoint--><g id="elem_raylib.text.TextCodepoint"><rect codeLine="320" fill="#F1F1F1" height="162.4075" id="raylib.text.TextCodepoint" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="465" x="18842.5" y="3105.09"/><ellipse cx="19022.25" cy="3121.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M19022.0469,3127.8244 Q19019.5625,3127.8244 19018.2344,3126.1838 Q19016.9219,3124.5119 19016.9219,3121.4025 Q19016.9219,3118.2775 19018.2344,3116.6213 Q19019.5625,3114.965 19022.0469,3114.965 Q19022.7656,3114.965 19023.4219,3115.1213 Q19024.0625,3115.2775 19024.625,3115.5744 L19024.625,3118.2931 Q19024.2656,3117.9494 19023.9688,3117.7619 Q19023.6719,3117.5588 19023.4063,3117.4338 Q19023.0938,3117.2931 19022.7813,3117.2306 Q19022.4844,3117.1681 19022.1719,3117.1681 Q19020.8438,3117.1681 19020.1563,3118.2306 Q19019.4688,3119.3244 19019.4688,3121.4025 Q19019.4688,3123.4963 19020.1563,3124.5588 Q19020.8438,3125.6369 19022.1719,3125.6369 Q19022.8125,3125.6369 19023.4063,3125.3556 Q19023.7031,3125.2306 19023.9844,3125.0431 Q19024.2813,3124.84 19024.625,3124.5119 L19024.625,3127.2306 Q19024.0469,3127.5275 19023.4063,3127.6838 Q19022.7813,3127.8244 19022.0469,3127.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="19042.75" y="3126.522">TextCodepoint</text><line style="stroke:#181818;stroke-width:0.5;" x1="18843.5" x2="19306.5" y1="3137.09" y2="3137.09"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="18850.5" y="3145.09"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="18862.5" y="3156.0559">_codepoints : std::vector&lt;int&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="18843.5" x2="19306.5" y1="3164.1579" y2="3164.1579"/><ellipse cx="18853.5" cy="3175.1579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="253" x="18862.5" y="3183.1239">TextCodepoint(const std::string&amp; text)</text><ellipse cx="18853.5" cy="3194.2258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="229" x="18862.5" y="3202.1918">getCodepointsCount() : int {query}</text><ellipse cx="18853.5" cy="3213.2938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="439" x="18862.5" y="3221.2597">codePointToUTF8(const int&amp; codepoint, int&amp; byteSize) : std::string</text><ellipse cx="18853.5" cy="3232.3617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="331" x="18862.5" y="3240.3276">toUTF8String(const int&amp; bytesLength) : std::string</text><ellipse cx="18853.5" cy="3251.4296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="285" x="18862.5" y="3259.3955">getCodepoints() : std::vector&lt;int&gt;&amp; {query}</text></g><!--MD5=[cd96a88098b489e1eff701340b7b474a]
class raylib.shader.RlShader--><g id="elem_raylib.shader.RlShader"><rect codeLine="331" fill="#F1F1F1" height="276.815" id="raylib.shader.RlShader" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="540" x="31161" y="2119.59"/><ellipse cx="31396.25" cy="2135.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M31396.0469,2142.3244 Q31393.5625,2142.3244 31392.2344,2140.6838 Q31390.9219,2139.0119 31390.9219,2135.9025 Q31390.9219,2132.7775 31392.2344,2131.1213 Q31393.5625,2129.465 31396.0469,2129.465 Q31396.7656,2129.465 31397.4219,2129.6213 Q31398.0625,2129.7775 31398.625,2130.0744 L31398.625,2132.7931 Q31398.2656,2132.4494 31397.9688,2132.2619 Q31397.6719,2132.0588 31397.4063,2131.9338 Q31397.0938,2131.7931 31396.7813,2131.7306 Q31396.4844,2131.6681 31396.1719,2131.6681 Q31394.8438,2131.6681 31394.1563,2132.7306 Q31393.4688,2133.8244 31393.4688,2135.9025 Q31393.4688,2137.9963 31394.1563,2139.0588 Q31394.8438,2140.1369 31396.1719,2140.1369 Q31396.8125,2140.1369 31397.4063,2139.8556 Q31397.7031,2139.7306 31397.9844,2139.5431 Q31398.2813,2139.34 31398.625,2139.0119 L31398.625,2141.7306 Q31398.0469,2142.0275 31397.4063,2142.1838 Q31396.7813,2142.3244 31396.0469,2142.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="61" x="31416.75" y="2141.022">RlShader</text><line style="stroke:#181818;stroke-width:0.5;" x1="31162" x2="31700" y1="2151.59" y2="2151.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="31169" y="2159.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="31181" y="2170.5559">_shader : Shader</text><line style="stroke:#181818;stroke-width:0.5;" x1="31162" x2="31700" y1="2178.6579" y2="2178.6579"/><ellipse cx="31172" cy="2189.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="31181" y="2197.6239">RlShader()</text><ellipse cx="31172" cy="2208.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="31181" y="2216.6918">~RlShader()</text><ellipse cx="31172" cy="2227.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="31181" y="2235.7597">getShader() : Shader&amp; {query}</text><ellipse cx="31172" cy="2246.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="333" x="31181" y="2254.8276">getLocation(const std::string&amp; uniformName) : int</text><ellipse cx="31172" cy="2265.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="354" x="31181" y="2273.8955">getLocationAttrib(const std::string&amp; attribName) : int</text><ellipse cx="31172" cy="2284.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="483" x="31181" y="2292.9634">load(const std::string&amp; vsFileName, const std::string&amp; fsFileName) : void</text><ellipse cx="31172" cy="2304.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="514" x="31181" y="2312.0314">loadFromMemory(const std::string&amp; vsCode, const std::string&amp; fsCode) : void</text><ellipse cx="31172" cy="2323.1333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="424" x="31181" y="2331.0993">setValue(int locIndex, const void* value, int uniformType) : void</text><ellipse cx="31172" cy="2342.2013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="358" x="31181" y="2350.1672">setValueMatrix(int locIndex, const Matrix&amp; mat) : void</text><ellipse cx="31172" cy="2361.2692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="465" x="31181" y="2369.2351">setValueTexture(int locIndex, const texture::RlTexture&amp; texture) : void</text><ellipse cx="31172" cy="2380.3371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="500" x="31181" y="2388.303">setValueV(int locIndex, const void* value, int uniformType, int count) : void</text></g><!--MD5=[3a75f0316c44a70a064a37217c323314]
class raylib.model.MeshGenerator--><g id="elem_raylib.model.MeshGenerator"><rect codeLine="348" fill="#F1F1F1" height="257.7471" id="raylib.model.MeshGenerator" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="685" x="18101.5" y="2129.09"/><ellipse cx="18387.25" cy="2145.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M18387.0469,2151.8244 Q18384.5625,2151.8244 18383.2344,2150.1838 Q18381.9219,2148.5119 18381.9219,2145.4025 Q18381.9219,2142.2775 18383.2344,2140.6213 Q18384.5625,2138.965 18387.0469,2138.965 Q18387.7656,2138.965 18388.4219,2139.1213 Q18389.0625,2139.2775 18389.625,2139.5744 L18389.625,2142.2931 Q18389.2656,2141.9494 18388.9688,2141.7619 Q18388.6719,2141.5588 18388.4063,2141.4338 Q18388.0938,2141.2931 18387.7813,2141.2306 Q18387.4844,2141.1681 18387.1719,2141.1681 Q18385.8438,2141.1681 18385.1563,2142.2306 Q18384.4688,2143.3244 18384.4688,2145.4025 Q18384.4688,2147.4963 18385.1563,2148.5588 Q18385.8438,2149.6369 18387.1719,2149.6369 Q18387.8125,2149.6369 18388.4063,2149.3556 Q18388.7031,2149.2306 18388.9844,2149.0431 Q18389.2813,2148.84 18389.625,2148.5119 L18389.625,2151.2306 Q18389.0469,2151.5275 18388.4063,2151.6838 Q18387.7813,2151.8244 18387.0469,2151.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="105" x="18407.75" y="2150.522">MeshGenerator</text><line style="stroke:#181818;stroke-width:0.5;" x1="18102.5" x2="18785.5" y1="2161.09" y2="2161.09"/><line style="stroke:#181818;stroke-width:0.5;" x1="18102.5" x2="18785.5" y1="2169.09" y2="2169.09"/><ellipse cx="18112.5" cy="2180.09" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="547" x="18121.5" y="2188.0559">genMeshCone(const float&amp; radius, const float&amp; height, const int&amp; slices) : RlMesh</text><ellipse cx="18112.5" cy="2199.1579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="562" x="18121.5" y="2207.1239">genMeshCube(const float&amp; width, const float&amp; height, const float&amp; length) : RlMesh</text><ellipse cx="18112.5" cy="2218.2258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="604" x="18121.5" y="2226.1918">genMeshCubicmap(const image::RlImage&amp; cubicmap, const Vector3f&amp; cubeSize) : RlMesh</text><ellipse cx="18112.5" cy="2237.2938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="569" x="18121.5" y="2245.2597">genMeshCylinder(const float&amp; radius, const float&amp; height, const int&amp; slices) : RlMesh</text><ellipse cx="18112.5" cy="2256.3617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="585" x="18121.5" y="2264.3276">genMeshHeightmap(const image::RlImage&amp; heightmap, const Vector3f&amp; size) : RlMesh</text><ellipse cx="18112.5" cy="2275.4296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="575" x="18121.5" y="2283.3955">genMeshHemiSphere(const float&amp; radius, const int&amp; rings, const int&amp; slices) : RlMesh</text><ellipse cx="18112.5" cy="2294.4975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="652" x="18121.5" y="2302.4634">genMeshKnot(const float&amp; radius, const float&amp; size, const int&amp; radSeg, const int&amp; sides) : RlMesh</text><ellipse cx="18112.5" cy="2313.5654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="646" x="18121.5" y="2321.5314">genMeshPlane(const float&amp; width, const float&amp; length, const int&amp; resX, const int&amp; resZ) : RlMesh</text><ellipse cx="18112.5" cy="2332.6333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="402" x="18121.5" y="2340.5993">genMeshPoly(const int&amp; sides, const float&amp; radius) : RlMesh</text><ellipse cx="18112.5" cy="2351.7013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="540" x="18121.5" y="2359.6672">genMeshSphere(const float&amp; radius, const int&amp; rings, const int&amp; slices) : RlMesh</text><ellipse cx="18112.5" cy="2370.7692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="659" x="18121.5" y="2378.7351">genMeshTorus(const float&amp; radius, const float&amp; size, const int&amp; radSeg, const int&amp; sides) : RlMesh</text></g><!--MD5=[ea61e7fe6e31189d20317c2f28baaaca]
class raylib.model.RlAnimation--><g id="elem_raylib.model.RlAnimation"><rect codeLine="362" fill="#F1F1F1" height="238.6792" id="raylib.model.RlAnimation" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="523" x="17543.5" y="2138.59"/><ellipse cx="17759.75" cy="2154.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M17759.5469,2161.3244 Q17757.0625,2161.3244 17755.7344,2159.6838 Q17754.4219,2158.0119 17754.4219,2154.9025 Q17754.4219,2151.7775 17755.7344,2150.1213 Q17757.0625,2148.465 17759.5469,2148.465 Q17760.2656,2148.465 17760.9219,2148.6213 Q17761.5625,2148.7775 17762.125,2149.0744 L17762.125,2151.7931 Q17761.7656,2151.4494 17761.4688,2151.2619 Q17761.1719,2151.0588 17760.9063,2150.9338 Q17760.5938,2150.7931 17760.2813,2150.7306 Q17759.9844,2150.6681 17759.6719,2150.6681 Q17758.3438,2150.6681 17757.6563,2151.7306 Q17756.9688,2152.8244 17756.9688,2154.9025 Q17756.9688,2156.9963 17757.6563,2158.0588 Q17758.3438,2159.1369 17759.6719,2159.1369 Q17760.3125,2159.1369 17760.9063,2158.8556 Q17761.2031,2158.7306 17761.4844,2158.5431 Q17761.7813,2158.34 17762.125,2158.0119 L17762.125,2160.7306 Q17761.5469,2161.0275 17760.9063,2161.1838 Q17760.2813,2161.3244 17759.5469,2161.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="17780.25" y="2160.022">RlAnimation</text><line style="stroke:#181818;stroke-width:0.5;" x1="17544.5" x2="18065.5" y1="2170.59" y2="2170.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17551.5" y="2178.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="17563.5" y="2189.5559">_isLoaded : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17551.5" y="2197.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="276" x="17563.5" y="2208.6239">_animationModels : std::vector&lt;RlModel&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17551.5" y="2216.7258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="17563.5" y="2227.6918">_frame : unsigned int</text><line style="stroke:#181818;stroke-width:0.5;" x1="17544.5" x2="18065.5" y1="2235.7938" y2="2235.7938"/><ellipse cx="17554.5" cy="2246.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="17563.5" y="2254.7597">RlAnimation()</text><ellipse cx="17554.5" cy="2265.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="497" x="17563.5" y="2273.8276">RlAnimation(const std::string&amp; animationDir, const std::string&amp; extension)</text><ellipse cx="17554.5" cy="2284.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="172" x="17563.5" y="2292.8955">isLoaded() : bool&amp; {query}</text><ellipse cx="17554.5" cy="2303.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="264" x="17563.5" y="2311.9634">getAnimationsSize() : std::size_t {query}</text><ellipse cx="17554.5" cy="2323.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="364" x="17563.5" y="2331.0314">getAnimationModels() : std::vector&lt;RlModel&gt;&amp; {query}</text><ellipse cx="17554.5" cy="2342.1333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="233" x="17563.5" y="2350.0993">getFrame() : unsigned int&amp; {query}</text><ellipse cx="17554.5" cy="2361.2013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="17563.5" y="2369.1672">update() : void</text></g><!--MD5=[158c9382e708bcdce4d4e6c38fe9647b]
class raylib.model.RlMaterial--><g id="elem_raylib.model.RlMaterial"><rect codeLine="375" fill="#F1F1F1" height="162.4075" id="raylib.model.RlMaterial" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="287" x="17221.5" y="2177.09"/><ellipse cx="17326.25" cy="2193.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M17326.0469,2199.8244 Q17323.5625,2199.8244 17322.2344,2198.1838 Q17320.9219,2196.5119 17320.9219,2193.4025 Q17320.9219,2190.2775 17322.2344,2188.6213 Q17323.5625,2186.965 17326.0469,2186.965 Q17326.7656,2186.965 17327.4219,2187.1213 Q17328.0625,2187.2775 17328.625,2187.5744 L17328.625,2190.2931 Q17328.2656,2189.9494 17327.9688,2189.7619 Q17327.6719,2189.5588 17327.4063,2189.4338 Q17327.0938,2189.2931 17326.7813,2189.2306 Q17326.4844,2189.1681 17326.1719,2189.1681 Q17324.8438,2189.1681 17324.1563,2190.2306 Q17323.4688,2191.3244 17323.4688,2193.4025 Q17323.4688,2195.4963 17324.1563,2196.5588 Q17324.8438,2197.6369 17326.1719,2197.6369 Q17326.8125,2197.6369 17327.4063,2197.3556 Q17327.7031,2197.2306 17327.9844,2197.0431 Q17328.2813,2196.84 17328.625,2196.5119 L17328.625,2199.2306 Q17328.0469,2199.5275 17327.4063,2199.6838 Q17326.7813,2199.8244 17326.0469,2199.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="17346.75" y="2198.522">RlMaterial</text><line style="stroke:#181818;stroke-width:0.5;" x1="17222.5" x2="17507.5" y1="2209.09" y2="2209.09"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17229.5" y="2217.09"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="17241.5" y="2228.0559">_material : Material</text><line style="stroke:#181818;stroke-width:0.5;" x1="17222.5" x2="17507.5" y1="2236.1579" y2="2236.1579"/><ellipse cx="17232.5" cy="2247.1579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="261" x="17241.5" y="2255.1239">RlMaterial(const std::string&amp; fileName)</text><ellipse cx="17232.5" cy="2266.2258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="17241.5" y="2274.1918">RlMaterial(Material&amp; material)</text><ellipse cx="17232.5" cy="2285.2938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="85" x="17241.5" y="2293.2597">~RlMaterial()</text><ellipse cx="17232.5" cy="2304.3617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="217" x="17241.5" y="2312.3276">getMaterial() : Material&amp; {query}</text><ellipse cx="17232.5" cy="2323.4296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="164" x="17241.5" y="2331.3955">getMaterial() : Material&amp;</text></g><!--MD5=[a662ceebf40526b929c182dded1ce946]
class raylib.model.RlMesh--><g id="elem_raylib.model.RlMesh"><rect codeLine="384" fill="#F1F1F1" height="295.8829" id="raylib.model.RlMesh" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="606" x="16766" y="4042.59"/><ellipse cx="17039.75" cy="4058.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M17039.5469,4065.3244 Q17037.0625,4065.3244 17035.7344,4063.6838 Q17034.4219,4062.0119 17034.4219,4058.9025 Q17034.4219,4055.7775 17035.7344,4054.1213 Q17037.0625,4052.465 17039.5469,4052.465 Q17040.2656,4052.465 17040.9219,4052.6213 Q17041.5625,4052.7775 17042.125,4053.0744 L17042.125,4055.7931 Q17041.7656,4055.4494 17041.4688,4055.2619 Q17041.1719,4055.0588 17040.9063,4054.9338 Q17040.5938,4054.7931 17040.2813,4054.7306 Q17039.9844,4054.6681 17039.6719,4054.6681 Q17038.3438,4054.6681 17037.6563,4055.7306 Q17036.9688,4056.8244 17036.9688,4058.9025 Q17036.9688,4060.9963 17037.6563,4062.0588 Q17038.3438,4063.1369 17039.6719,4063.1369 Q17040.3125,4063.1369 17040.9063,4062.8556 Q17041.2031,4062.7306 17041.4844,4062.5431 Q17041.7813,4062.34 17042.125,4062.0119 L17042.125,4064.7306 Q17041.5469,4065.0275 17040.9063,4065.1838 Q17040.2813,4065.3244 17039.5469,4065.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="50" x="17060.25" y="4064.022">RlMesh</text><line style="stroke:#181818;stroke-width:0.5;" x1="16767" x2="17371" y1="4074.59" y2="4074.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="16774" y="4082.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="210" x="16786" y="4093.5559">_mesh : std::shared_ptr&lt;Mesh&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="16767" x2="17371" y1="4101.6579" y2="4101.6579"/><ellipse cx="16777" cy="4112.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="186" x="16786" y="4120.6239">RlMesh(const Mesh&amp; mesh)</text><ellipse cx="16777" cy="4131.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="199" x="16786" y="4139.6918">RlMesh(const RlMesh&amp; mesh)</text><ellipse cx="16777" cy="4150.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="66" x="16786" y="4158.7597">~RlMesh()</text><ellipse cx="16777" cy="4169.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="222" x="16786" y="4177.8276">getBoundingBox() : BoundingBox</text><ellipse cx="16777" cy="4188.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="179" x="16786" y="4196.8955">getMesh() : Mesh&amp; {query}</text><ellipse cx="16777" cy="4207.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="287" x="16786" y="4215.9634">operator=(const RlMesh&amp; mesh) : RlMesh&amp;</text><ellipse cx="16777" cy="4227.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="16786" y="4235.0314">exportMesh(const std::string&amp; fileName) : bool</text><ellipse cx="16777" cy="4246.1333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="364" x="16786" y="4254.0993">getMeshSharedPtr() : std::shared_ptr&lt;Mesh&gt;&amp; {query}</text><ellipse cx="16777" cy="4265.2013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="142" x="16786" y="4273.1672">genBinormals() : void</text><ellipse cx="16777" cy="4284.2692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="137" x="16786" y="4292.2351">genTangents() : void</text><ellipse cx="16777" cy="4303.3371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="580" x="16786" y="4311.303">updateBuffer(const int&amp; index, void* data, const int&amp; dataSize, const int&amp; offset) : void</text><ellipse cx="16777" cy="4322.405" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="277" x="16786" y="4330.3709">uploadInGPU(const bool&amp; dynamic) : void</text></g><!--MD5=[85c0f06d372a814258bf1f07ffd0ff6c]
class raylib.model.RlModel--><g id="elem_raylib.model.RlModel"><rect codeLine="400" fill="#F1F1F1" height="810.7167" id="raylib.model.RlModel" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="930" x="16685" y="2780.59"/><ellipse cx="17118.25" cy="2796.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M17118.0469,2803.3244 Q17115.5625,2803.3244 17114.2344,2801.6838 Q17112.9219,2800.0119 17112.9219,2796.9025 Q17112.9219,2793.7775 17114.2344,2792.1213 Q17115.5625,2790.465 17118.0469,2790.465 Q17118.7656,2790.465 17119.4219,2790.6213 Q17120.0625,2790.7775 17120.625,2791.0744 L17120.625,2793.7931 Q17120.2656,2793.4494 17119.9688,2793.2619 Q17119.6719,2793.0588 17119.4063,2792.9338 Q17119.0938,2792.7931 17118.7813,2792.7306 Q17118.4844,2792.6681 17118.1719,2792.6681 Q17116.8438,2792.6681 17116.1563,2793.7306 Q17115.4688,2794.8244 17115.4688,2796.9025 Q17115.4688,2798.9963 17116.1563,2800.0588 Q17116.8438,2801.1369 17118.1719,2801.1369 Q17118.8125,2801.1369 17119.4063,2800.8556 Q17119.7031,2800.7306 17119.9844,2800.5431 Q17120.2813,2800.34 17120.625,2800.0119 L17120.625,2802.7306 Q17120.0469,2803.0275 17119.4063,2803.1838 Q17118.7813,2803.3244 17118.0469,2803.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="55" x="17138.75" y="2802.022">RlModel</text><line style="stroke:#181818;stroke-width:0.5;" x1="16686" x2="17614" y1="2812.59" y2="2812.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="16693" y="2820.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="16705" y="2831.5559">_baseBoudingBox : BoundingBox</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="16693" y="2839.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="198" x="16705" y="2850.6239">_boundingBox : BoundingBox</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="16693" y="2858.7258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="16705" y="2869.6918">_color : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="16693" y="2877.7938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="16705" y="2888.7597">_position : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="16693" y="2896.8617"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="16705" y="2907.8276">_rotationAxis : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="16693" y="2915.9296"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="16705" y="2926.8955">_scale : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="16693" y="2934.9975"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="140" x="16705" y="2945.9634">_rotationAngle : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="16693" y="2954.0654"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="220" x="16705" y="2965.0314">_model : std::shared_ptr&lt;Model&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="16693" y="2973.1333"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="223" x="16705" y="2984.0993">_mesh : std::shared_ptr&lt;RlMesh&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="16693" y="2992.2013"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="304" x="16705" y="3003.1672">_texture : std::shared_ptr&lt;texture::RlTexture&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="16686" x2="17614" y1="3011.2692" y2="3011.2692"/><ellipse cx="16696" cy="3022.2692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="247" x="16705" y="3030.2351">RlModel(const std::string&amp; fileName)</text><ellipse cx="16696" cy="3041.3371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="466" x="16705" y="3049.303">RlModel(const std::string&amp; fileName, const std::string&amp; textureName)</text><ellipse cx="16696" cy="3060.405" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="322" x="16705" y="3068.3709">RlModel(const std::shared_ptr&lt;RlMesh&gt;&amp; mesh)</text><ellipse cx="16696" cy="3079.4729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="204" x="16705" y="3087.4389">RlModel(const RlMesh&amp; mesh)</text><ellipse cx="16696" cy="3098.5408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="16705" y="3106.5068">RlModel(const RlModel&amp; model)</text><ellipse cx="16696" cy="3117.6088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="16705" y="3125.5747">~RlModel()</text><ellipse cx="16696" cy="3136.6767" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="324" x="16705" y="3144.6426">getDefaultBoundingBox() : BoundingBox {query}</text><ellipse cx="16696" cy="3155.7446" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="317" x="16705" y="3163.7105">getBaseBoundingBox() : BoundingBox&amp; {query}</text><ellipse cx="16696" cy="3174.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="285" x="16705" y="3182.7784">getBoundingBox() : BoundingBox&amp; {query}</text><ellipse cx="16696" cy="3193.8804" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="189" x="16705" y="3201.8464">getModel() : Model&amp; {query}</text><ellipse cx="16696" cy="3212.9483" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="16705" y="3220.9143">getColor() : RlColor&amp; {query}</text><ellipse cx="16696" cy="3232.0163" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="302" x="16705" y="3239.9822">operator=(const RlModel&amp; model) : RlModel&amp;</text><ellipse cx="16696" cy="3251.0842" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="16705" y="3259.0501">getPosition() : Vector3f&amp; {query}</text><ellipse cx="16696" cy="3270.1521" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="243" x="16705" y="3278.118">getRotationAxis() : Vector3f&amp; {query}</text><ellipse cx="16696" cy="3289.22" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="16705" y="3297.1859">getScale() : Vector3f&amp; {query}</text><ellipse cx="16696" cy="3308.2879" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="230" x="16705" y="3316.2539">getRotationAngle() : float&amp; {query}</text><ellipse cx="16696" cy="3327.3558" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="394" x="16705" y="3335.3218">getTexture() : std::shared_ptr&lt;texture::RlTexture&gt;&amp; {query}</text><ellipse cx="16696" cy="3346.4238" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="392" x="16705" y="3354.3897">setBoundingBox(const BoundingBox&amp; boundingBox) : void</text><ellipse cx="16696" cy="3365.4917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="238" x="16705" y="3373.4576">setColor(const RlColor&amp; color) : void</text><ellipse cx="16696" cy="3384.5596" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="515" x="16705" y="3392.5255">setMaterialTexture(const std::shared_ptr&lt;texture::RlTexture&gt;&amp; texture) : void</text><ellipse cx="16696" cy="3403.6275" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="689" x="16705" y="3411.5934">setMaterialTexture(const std::shared_ptr&lt;texture::RlTexture&gt;&amp; texture, const int&amp; materialIndex) : void</text><ellipse cx="16696" cy="3422.6954" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="904" x="16705" y="3430.6614">setMaterialTexture(const std::shared_ptr&lt;texture::RlTexture&gt;&amp; texture, const int&amp; materialIndex, const MaterialMapIndex&amp; type) : void</text><ellipse cx="16696" cy="3441.7633" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="434" x="16705" y="3449.7293">setMeshMaterial(const int&amp; meshId, const int&amp; materialId) : void</text><ellipse cx="16696" cy="3460.8313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="284" x="16705" y="3468.7972">setPosition(const Vector3f&amp; position) : void</text><ellipse cx="16696" cy="3479.8992" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="410" x="16705" y="3487.8651">setPosition(const float&amp; x, const float&amp; y, const float&amp; z) : void</text><ellipse cx="16696" cy="3498.9671" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="289" x="16705" y="3506.933">setRotationAngle(float rotationAngle) : void</text><ellipse cx="16696" cy="3518.035" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="340" x="16705" y="3526.0009">setRotationAxis(const Vector3f&amp; rotationAxis) : void</text><ellipse cx="16696" cy="3537.1029" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="440" x="16705" y="3545.0689">setRotationAxis(const float&amp; x, const float&amp; y, const float&amp; z) : void</text><ellipse cx="16696" cy="3556.1708" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="246" x="16705" y="3564.1368">setScale(const Vector3f&amp; scale) : void</text><ellipse cx="16696" cy="3575.2388" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="392" x="16705" y="3583.2047">setScale(const float&amp; x, const float&amp; y, const float&amp; z) : void</text></g><!--MD5=[d94b4d6d8ed1386c8bb337f58c92da1c]
class raylib.model.RlModelAnimation--><g id="elem_raylib.model.RlModelAnimation"><rect codeLine="443" fill="#F1F1F1" height="276.815" id="raylib.model.RlModelAnimation" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="501" x="16685.5" y="2119.59"/><ellipse cx="16869.75" cy="2135.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M16869.5469,2142.3244 Q16867.0625,2142.3244 16865.7344,2140.6838 Q16864.4219,2139.0119 16864.4219,2135.9025 Q16864.4219,2132.7775 16865.7344,2131.1213 Q16867.0625,2129.465 16869.5469,2129.465 Q16870.2656,2129.465 16870.9219,2129.6213 Q16871.5625,2129.7775 16872.125,2130.0744 L16872.125,2132.7931 Q16871.7656,2132.4494 16871.4688,2132.2619 Q16871.1719,2132.0588 16870.9063,2131.9338 Q16870.5938,2131.7931 16870.2813,2131.7306 Q16869.9844,2131.6681 16869.6719,2131.6681 Q16868.3438,2131.6681 16867.6563,2132.7306 Q16866.9688,2133.8244 16866.9688,2135.9025 Q16866.9688,2137.9963 16867.6563,2139.0588 Q16868.3438,2140.1369 16869.6719,2140.1369 Q16870.3125,2140.1369 16870.9063,2139.8556 Q16871.2031,2139.7306 16871.4844,2139.5431 Q16871.7813,2139.34 16872.125,2139.0119 L16872.125,2141.7306 Q16871.5469,2142.0275 16870.9063,2142.1838 Q16870.2813,2142.3244 16869.5469,2142.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="16890.25" y="2141.022">RlModelAnimation</text><line style="stroke:#181818;stroke-width:0.5;" x1="16686.5" x2="17185.5" y1="2151.59" y2="2151.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="16693.5" y="2159.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="178" x="16705.5" y="2170.5559">_anims : ModelAnimation*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="16693.5" y="2178.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="115" x="16705.5" y="2189.6239">_model : RlModel</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="16693.5" y="2197.7258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="16705.5" y="2208.6918">_frameCount : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="16693.5" y="2216.7938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="290" x="16705.5" y="2227.7597">_animations : std::vector&lt;ModelAnimation&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="16693.5" y="2235.8617"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="142" x="16705.5" y="2246.8276">_count : unsigned int</text><line style="stroke:#181818;stroke-width:0.5;" x1="16686.5" x2="17185.5" y1="2254.9296" y2="2254.9296"/><ellipse cx="16696.5" cy="2265.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="475" x="16705.5" y="2273.8955">RlModelAnimation(const RlModel&amp; model, const std::string&amp; fileName)</text><ellipse cx="16696.5" cy="2284.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="140" x="16705.5" y="2292.9634">~RlModelAnimation()</text><ellipse cx="16696.5" cy="2304.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="412" x="16705.5" y="2312.0314">animationIndexIsValid(const unsigned int&amp; animIndex) : bool</text><ellipse cx="16696.5" cy="2323.1333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="16705.5" y="2331.0993">getCount() : unsigned int {query}</text><ellipse cx="16696.5" cy="2342.2013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="307" x="16705.5" y="2350.1672">incrementFrameCount(const int&amp; value) : void</text><ellipse cx="16696.5" cy="2361.2692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="307" x="16705.5" y="2369.2351">unload(const unsigned int&amp; animIndex) : void</text><ellipse cx="16696.5" cy="2380.3371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="308" x="16705.5" y="2388.303">update(const unsigned int&amp; animIndex) : void</text></g><!--MD5=[f5666ac8e2832b2e801c802f596759bc]
class raylib.image.ImageDrawHelper--><g id="elem_raylib.image.ImageDrawHelper"><rect codeLine="460" fill="#F1F1F1" height="314.9508" id="raylib.image.ImageDrawHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1181" x="14494.5" y="4033.09"/><ellipse cx="15019.25" cy="4049.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M15019.0469,4055.8244 Q15016.5625,4055.8244 15015.2344,4054.1838 Q15013.9219,4052.5119 15013.9219,4049.4025 Q15013.9219,4046.2775 15015.2344,4044.6213 Q15016.5625,4042.965 15019.0469,4042.965 Q15019.7656,4042.965 15020.4219,4043.1213 Q15021.0625,4043.2775 15021.625,4043.5744 L15021.625,4046.2931 Q15021.2656,4045.9494 15020.9688,4045.7619 Q15020.6719,4045.5588 15020.4063,4045.4338 Q15020.0938,4045.2931 15019.7813,4045.2306 Q15019.4844,4045.1681 15019.1719,4045.1681 Q15017.8438,4045.1681 15017.1563,4046.2306 Q15016.4688,4047.3244 15016.4688,4049.4025 Q15016.4688,4051.4963 15017.1563,4052.5588 Q15017.8438,4053.6369 15019.1719,4053.6369 Q15019.8125,4053.6369 15020.4063,4053.3556 Q15020.7031,4053.2306 15020.9844,4053.0431 Q15021.2813,4052.84 15021.625,4052.5119 L15021.625,4055.2306 Q15021.0469,4055.5275 15020.4063,4055.6838 Q15019.7813,4055.8244 15019.0469,4055.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="123" x="15039.75" y="4054.522">ImageDrawHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="14495.5" x2="15674.5" y1="4065.09" y2="4065.09"/><line style="stroke:#181818;stroke-width:0.5;" x1="14495.5" x2="15674.5" y1="4073.09" y2="4073.09"/><ellipse cx="14505.5" cy="4084.09" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="446" x="14514.5" y="4092.0559">clearBackground(image::RlImage&amp; dst, const RlColor&amp; color) : void</text><ellipse cx="14505.5" cy="4103.1579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="639" x="14514.5" y="4111.1239">drawCircle(image::RlImage&amp; dst, int centerX, int centerY, int radius, const RlColor&amp; color) : void</text><ellipse cx="14505.5" cy="4122.2258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="637" x="14514.5" y="4130.1918">drawCircle(image::RlImage&amp; dst, const Vector2f&amp; center, int radius, const RlColor&amp; color) : void</text><ellipse cx="14505.5" cy="4141.2938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="934" x="14514.5" y="4149.2597">drawImage(image::RlImage&amp; dst, const image::RlImage&amp; src, const Rectangle&amp; srcRec, const Rectangle&amp; dstRec, const RlColor&amp; tint) : void</text><ellipse cx="14505.5" cy="4160.3617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="801" x="14514.5" y="4168.3276">drawImageText(image::RlImage&amp; dst, const std::string&amp; text, int posX, int posY, int fontSize, const RlColor&amp; color) : void</text><ellipse cx="14505.5" cy="4179.4296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1155" x="14514.5" y="4187.3955">drawImageText(image::RlImage&amp; dst, const raylib::text::RlFont&amp; font, const std::string&amp; text, const Vector2f&amp; position, float fontSize, float spacing, const RlColor&amp; tint) : void</text><ellipse cx="14505.5" cy="4198.4975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="752" x="14514.5" y="4206.4634">drawLine(image::RlImage&amp; dst, int startPosX, int startPosY, int endPosX, int endPosY, const RlColor&amp; color) : void</text><ellipse cx="14505.5" cy="4217.5654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="685" x="14514.5" y="4225.5314">drawLine(image::RlImage&amp; dst, const Vector2f&amp; start, const Vector2f&amp; end, const RlColor&amp; color) : void</text><ellipse cx="14505.5" cy="4236.6333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="521" x="14514.5" y="4244.5993">drawPixel(image::RlImage&amp; dst, int posX, int posY, const RlColor&amp; color) : void</text><ellipse cx="14505.5" cy="4255.7013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="568" x="14514.5" y="4263.6672">drawPixel(image::RlImage&amp; dst, const Vector2f&amp; position, const RlColor&amp; color) : void</text><ellipse cx="14505.5" cy="4274.7692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="699" x="14514.5" y="4282.7351">drawRectangle(image::RlImage&amp; dst, int posX, int posY, int width, int height, const RlColor&amp; color) : void</text><ellipse cx="14505.5" cy="4293.8371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="747" x="14514.5" y="4301.803">drawRectangle(image::RlImage&amp; dst, const Vector2f&amp; position, const Vector2f&amp; size, const RlColor&amp; color) : void</text><ellipse cx="14505.5" cy="4312.905" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="680" x="14514.5" y="4320.8709">drawRectangleLines(image::RlImage&amp; dst, const Rectangle&amp; rec, int thick, const RlColor&amp; color) : void</text><ellipse cx="14505.5" cy="4331.9729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="607" x="14514.5" y="4339.9389">drawRectangleRec(image::RlImage&amp; dst, const Rectangle&amp; rec, const RlColor&amp; color) : void</text></g><!--MD5=[7d4cfb9bd6499976d6afcdf8cdcf205c]
class raylib.image.ImageGenerator--><g id="elem_raylib.image.ImageGenerator"><rect codeLine="477" fill="#F1F1F1" height="181.4754" id="raylib.image.ImageGenerator" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1002" x="13457" y="4100.09"/><ellipse cx="13898.25" cy="4116.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M13898.0469,4122.8244 Q13895.5625,4122.8244 13894.2344,4121.1838 Q13892.9219,4119.5119 13892.9219,4116.4025 Q13892.9219,4113.2775 13894.2344,4111.6213 Q13895.5625,4109.965 13898.0469,4109.965 Q13898.7656,4109.965 13899.4219,4110.1213 Q13900.0625,4110.2775 13900.625,4110.5744 L13900.625,4113.2931 Q13900.2656,4112.9494 13899.9688,4112.7619 Q13899.6719,4112.5588 13899.4063,4112.4338 Q13899.0938,4112.2931 13898.7813,4112.2306 Q13898.4844,4112.1681 13898.1719,4112.1681 Q13896.8438,4112.1681 13896.1563,4113.2306 Q13895.4688,4114.3244 13895.4688,4116.4025 Q13895.4688,4118.4963 13896.1563,4119.5588 Q13896.8438,4120.6369 13898.1719,4120.6369 Q13898.8125,4120.6369 13899.4063,4120.3556 Q13899.7031,4120.2306 13899.9844,4120.0431 Q13900.2813,4119.84 13900.625,4119.5119 L13900.625,4122.2306 Q13900.0469,4122.5275 13899.4063,4122.6838 Q13898.7813,4122.8244 13898.0469,4122.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="13918.75" y="4121.522">ImageGenerator</text><line style="stroke:#181818;stroke-width:0.5;" x1="13458" x2="14458" y1="4132.09" y2="4132.09"/><line style="stroke:#181818;stroke-width:0.5;" x1="13458" x2="14458" y1="4140.09" y2="4140.09"/><ellipse cx="13468" cy="4151.09" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="559" x="13477" y="4159.0559">genImageCellular(const int&amp; width, const int&amp; height, const int&amp; tileSize) : RlImage</text><ellipse cx="13468" cy="4170.1579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="976" x="13477" y="4178.1239">genImageChecked(const int&amp; width, const int&amp; height, const int&amp; checksX, const int&amp; checksY, const RlColor&amp; col1, const RlColor&amp; col2) : RlImage</text><ellipse cx="13468" cy="4189.2258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="557" x="13477" y="4197.1918">genImageColor(const int&amp; width, const int&amp; height, const RlColor&amp; color) : RlImage</text><ellipse cx="13468" cy="4208.2938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="723" x="13477" y="4216.2597">genImageGradientH(const int&amp; width, const int&amp; height, const RlColor&amp; left, const RlColor&amp; right) : RlImage</text><ellipse cx="13468" cy="4227.3617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="863" x="13477" y="4235.3276">genImageGradientRadial(const int&amp; width, const int&amp; height, float density, const RlColor&amp; inner, const RlColor&amp; outer) : RlImage</text><ellipse cx="13468" cy="4246.4296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="736" x="13477" y="4254.3955">genImageGradientV(const int&amp; width, const int&amp; height, const RlColor&amp; top, const RlColor&amp; bottom) : RlImage</text><ellipse cx="13468" cy="4265.4975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="537" x="13477" y="4273.4634">genImageWhiteNoise(const int&amp; width, const int&amp; height, float factor) : RlImage</text></g><!--MD5=[ec2be861a767ef9e64d0fbd9dd84831a]
class raylib.image.RlImage--><g id="elem_raylib.image.RlImage"><rect codeLine="487" fill="#F1F1F1" height="772.5808" id="raylib.image.RlImage" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="634" x="12788" y="3804.09"/><ellipse cx="13072.75" cy="3820.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M13072.5469,3826.8244 Q13070.0625,3826.8244 13068.7344,3825.1838 Q13067.4219,3823.5119 13067.4219,3820.4025 Q13067.4219,3817.2775 13068.7344,3815.6213 Q13070.0625,3813.965 13072.5469,3813.965 Q13073.2656,3813.965 13073.9219,3814.1213 Q13074.5625,3814.2775 13075.125,3814.5744 L13075.125,3817.2931 Q13074.7656,3816.9494 13074.4688,3816.7619 Q13074.1719,3816.5588 13073.9063,3816.4338 Q13073.5938,3816.2931 13073.2813,3816.2306 Q13072.9844,3816.1681 13072.6719,3816.1681 Q13071.3438,3816.1681 13070.6563,3817.2306 Q13069.9688,3818.3244 13069.9688,3820.4025 Q13069.9688,3822.4963 13070.6563,3823.5588 Q13071.3438,3824.6369 13072.6719,3824.6369 Q13073.3125,3824.6369 13073.9063,3824.3556 Q13074.2031,3824.2306 13074.4844,3824.0431 Q13074.7813,3823.84 13075.125,3823.5119 L13075.125,3826.2306 Q13074.5469,3826.5275 13073.9063,3826.6838 Q13073.2813,3826.8244 13072.5469,3826.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="13093.25" y="3825.522">RlImage</text><line style="stroke:#181818;stroke-width:0.5;" x1="12789" x2="13421" y1="3836.09" y2="3836.09"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12796" y="3844.09"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="12808" y="3855.0559">_image : Image</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12796" y="3863.1579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="12808" y="3874.1239">_frameCount : int</text><line style="stroke:#181818;stroke-width:0.5;" x1="12789" x2="13421" y1="3882.2258" y2="3882.2258"/><ellipse cx="12799" cy="3893.2258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="12808" y="3901.1918">RlImage(const Image&amp; image)</text><ellipse cx="12799" cy="3912.2938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="12808" y="3920.2597">RlImage(const Image&amp; image, int frameCount)</text><ellipse cx="12799" cy="3931.3617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="12808" y="3939.3276">~RlImage()</text><ellipse cx="12799" cy="3950.4296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="191" x="12808" y="3958.3955">getImage() : Image&amp; {query}</text><ellipse cx="12799" cy="3969.4975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="12808" y="3977.4634">getImage() : Image&amp;</text><ellipse cx="12799" cy="3988.5654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="336" x="12808" y="3996.5314">getImageAlphaBorder(float threshold) : Rectangle</text><ellipse cx="12799" cy="4007.6333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="12808" y="4015.5993">getImageColor(int x, int y) : RlColor</text><ellipse cx="12799" cy="4026.7013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="12808" y="4034.6672">copy() : RlImage</text><ellipse cx="12799" cy="4045.7692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="286" x="12808" y="4053.7351">subImage(const Rectangle&amp; rec) : RlImage</text><ellipse cx="12799" cy="4064.8371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="263" x="12808" y="4072.803">save(const std::string&amp; fileName) : bool</text><ellipse cx="12799" cy="4083.905" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="12808" y="4091.8709">saveAsCode(const std::string&amp; fileName) : bool</text><ellipse cx="12799" cy="4102.9729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="12808" y="4110.9389">getFrameCount() : int&amp; {query}</text><ellipse cx="12799" cy="4122.0408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="268" x="12808" y="4130.0068">loadImageColors() : std::vector&lt;RlColor&gt;</text><ellipse cx="12799" cy="4141.1088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="395" x="12808" y="4149.0747">loadImagePalette(int maxPaletteSize) : std::vector&lt;RlColor&gt;</text><ellipse cx="12799" cy="4160.1767" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="363" x="12808" y="4168.1426">alphaClear(const RlColor&amp; color, float threshold) : void</text><ellipse cx="12799" cy="4179.2446" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="217" x="12808" y="4187.2105">alphaCrop(float threshold) : void</text><ellipse cx="12799" cy="4198.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="304" x="12808" y="4206.2784">alphaMask(const RlImage&amp; alphaMask) : void</text><ellipse cx="12799" cy="4217.3804" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="163" x="12808" y="4225.3464">alphaPremultiply() : void</text><ellipse cx="12799" cy="4236.4483" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="242" x="12808" y="4244.4143">changeFormat(int newFormat) : void</text><ellipse cx="12799" cy="4255.5163" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="249" x="12808" y="4263.4822">colorBrightness(int brightness) : void</text><ellipse cx="12799" cy="4274.5842" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="227" x="12808" y="4282.5501">colorContrast(float contrast) : void</text><ellipse cx="12799" cy="4293.6521" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="146" x="12808" y="4301.618">colorGrayscale() : void</text><ellipse cx="12799" cy="4312.72" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="121" x="12808" y="4320.6859">colorInvert() : void</text><ellipse cx="12799" cy="4331.7879" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="429" x="12808" y="4339.7539">colorReplace(const RlColor&amp; color, const RlColor&amp; replace) : void</text><ellipse cx="12799" cy="4350.8558" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="242" x="12808" y="4358.8218">colorTint(const RlColor&amp; color) : void</text><ellipse cx="12799" cy="4369.9238" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="229" x="12808" y="4377.8897">crop(const Rectangle&amp; crop) : void</text><ellipse cx="12799" cy="4388.9917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="341" x="12808" y="4396.9576">dither(int rBpp, int gBpp, int bBpp, int aBpp) : void</text><ellipse cx="12799" cy="4408.0596" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="139" x="12808" y="4416.0255">flipHorizontal() : void</text><ellipse cx="12799" cy="4427.1275" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="12808" y="4435.0934">flipVertical() : void</text><ellipse cx="12799" cy="4446.1954" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="12808" y="4454.1614">mipmaps() : void</text><ellipse cx="12799" cy="4465.2633" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="281" x="12808" y="4473.2293">resize(int newWidth, int newHeight) : void</text><ellipse cx="12799" cy="4484.3313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="608" x="12808" y="4492.2972">resizeCanvas(int newWidth, int newHeight, int offsetX, int offsetY, const RlColor&amp; fill) : void</text><ellipse cx="12799" cy="4503.3992" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="406" x="12808" y="4511.3651">resizeNearesetNeighbor(int newWidth, int newHeight) : void</text><ellipse cx="12799" cy="4522.4671" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="12808" y="4530.433">rotateClockwise() : void</text><ellipse cx="12799" cy="4541.535" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="207" x="12808" y="4549.5009">rotateCounterClockwise() : void</text><ellipse cx="12799" cy="4560.6029" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="12808" y="4568.5689">toPot(const RlColor&amp; fill) : void</text></g><!--MD5=[d0b105104f664e8ac1338958bf80dba8]
class raylib.helper.AudioHelper--><g id="elem_raylib.helper.AudioHelper"><rect codeLine="530" fill="#F1F1F1" height="200.5433" id="raylib.helper.AudioHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="397" x="22552.5" y="2157.59"/><ellipse cx="22704.75" cy="2173.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M22704.5469,2180.3244 Q22702.0625,2180.3244 22700.7344,2178.6838 Q22699.4219,2177.0119 22699.4219,2173.9025 Q22699.4219,2170.7775 22700.7344,2169.1213 Q22702.0625,2167.465 22704.5469,2167.465 Q22705.2656,2167.465 22705.9219,2167.6213 Q22706.5625,2167.7775 22707.125,2168.0744 L22707.125,2170.7931 Q22706.7656,2170.4494 22706.4688,2170.2619 Q22706.1719,2170.0588 22705.9063,2169.9338 Q22705.5938,2169.7931 22705.2813,2169.7306 Q22704.9844,2169.6681 22704.6719,2169.6681 Q22703.3438,2169.6681 22702.6563,2170.7306 Q22701.9688,2171.8244 22701.9688,2173.9025 Q22701.9688,2175.9963 22702.6563,2177.0588 Q22703.3438,2178.1369 22704.6719,2178.1369 Q22705.3125,2178.1369 22705.9063,2177.8556 Q22706.2031,2177.7306 22706.4844,2177.5431 Q22706.7813,2177.34 22707.125,2177.0119 L22707.125,2179.7306 Q22706.5469,2180.0275 22705.9063,2180.1838 Q22705.2813,2180.3244 22704.5469,2180.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="84" x="22725.25" y="2179.022">AudioHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="22553.5" x2="22948.5" y1="2189.59" y2="2189.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22560.5" y="2197.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="192" x="22572.5" y="2208.5559">_audioDeviceInit : static bool</text><line style="stroke:#181818;stroke-width:0.5;" x1="22553.5" x2="22948.5" y1="2216.6579" y2="2216.6579"/><ellipse cx="22563.5" cy="2227.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="184" x="22572.5" y="2235.6239">isAudioDeviceReady() : bool</text><ellipse cx="22563.5" cy="2246.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="231" x="22572.5" y="2254.6918">getNumberOfSoundsPlaying() : int</text><ellipse cx="22563.5" cy="2265.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="165" x="22572.5" y="2273.7597">closeAudioDevice() : void</text><ellipse cx="22563.5" cy="2284.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="153" x="22572.5" y="2292.8276">initAudioDevice() : void</text><ellipse cx="22563.5" cy="2303.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="371" x="22572.5" y="2311.8955">setAudioStreamBufferSizeDefault(const int&amp; size) : void</text><ellipse cx="22563.5" cy="2322.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="248" x="22572.5" y="2330.9634">setMasterVolume(float volume) : void</text><ellipse cx="22563.5" cy="2342.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="155" x="22572.5" y="2350.0314">stopMultiSound() : void</text></g><!--MD5=[14b0dacecc39382ff07f69a7fe67296b]
class raylib.helper.CameraHelper--><g id="elem_raylib.helper.CameraHelper"><rect codeLine="541" fill="#F1F1F1" height="143.3396" id="raylib.helper.CameraHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="674" x="22985" y="2186.59"/><ellipse cx="23269.25" cy="2202.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M23269.0469,2209.3244 Q23266.5625,2209.3244 23265.2344,2207.6838 Q23263.9219,2206.0119 23263.9219,2202.9025 Q23263.9219,2199.7775 23265.2344,2198.1213 Q23266.5625,2196.465 23269.0469,2196.465 Q23269.7656,2196.465 23270.4219,2196.6213 Q23271.0625,2196.7775 23271.625,2197.0744 L23271.625,2199.7931 Q23271.2656,2199.4494 23270.9688,2199.2619 Q23270.6719,2199.0588 23270.4063,2198.9338 Q23270.0938,2198.7931 23269.7813,2198.7306 Q23269.4844,2198.6681 23269.1719,2198.6681 Q23267.8438,2198.6681 23267.1563,2199.7306 Q23266.4688,2200.8244 23266.4688,2202.9025 Q23266.4688,2204.9963 23267.1563,2206.0588 Q23267.8438,2207.1369 23269.1719,2207.1369 Q23269.8125,2207.1369 23270.4063,2206.8556 Q23270.7031,2206.7306 23270.9844,2206.5431 Q23271.2813,2206.34 23271.625,2206.0119 L23271.625,2208.7306 Q23271.0469,2209.0275 23270.4063,2209.1838 Q23269.7813,2209.3244 23269.0469,2209.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="23289.75" y="2208.022">CameraHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="22986" x2="23658" y1="2218.59" y2="2218.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="22986" x2="23658" y1="2226.59" y2="2226.59"/><ellipse cx="22996" cy="2237.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="197" x="23005" y="2245.5559">setAltControl(int keyAlt) : void</text><ellipse cx="22996" cy="2256.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="517" x="23005" y="2264.6239">setCameraMode(const RlCamera&amp; camera, const CameraMode&amp; mode) : void</text><ellipse cx="22996" cy="2275.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="648" x="23005" y="2283.6918">setMoveControls(int keyFront, int keyBack, int keyRight, int keyLeft, int keyUp, int keyDown) : void</text><ellipse cx="22996" cy="2294.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="211" x="23005" y="2302.7597">setPanControl(int keyPan) : void</text><ellipse cx="22996" cy="2313.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="337" x="23005" y="2321.8276">setSmoothZoomControl(int keySmoothZoom) : void</text></g><!--MD5=[62470add8b0f268603f45b2f16cfa911]
class raylib.helper.Collision2DHelper--><g id="elem_raylib.helper.Collision2DHelper"><rect codeLine="549" fill="#F1F1F1" height="219.6113" id="raylib.helper.Collision2DHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1069" x="23694.5" y="2148.09"/><ellipse cx="24164.75" cy="2164.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M24164.5469,2170.8244 Q24162.0625,2170.8244 24160.7344,2169.1838 Q24159.4219,2167.5119 24159.4219,2164.4025 Q24159.4219,2161.2775 24160.7344,2159.6213 Q24162.0625,2157.965 24164.5469,2157.965 Q24165.2656,2157.965 24165.9219,2158.1213 Q24166.5625,2158.2775 24167.125,2158.5744 L24167.125,2161.2931 Q24166.7656,2160.9494 24166.4688,2160.7619 Q24166.1719,2160.5588 24165.9063,2160.4338 Q24165.5938,2160.2931 24165.2813,2160.2306 Q24164.9844,2160.1681 24164.6719,2160.1681 Q24163.3438,2160.1681 24162.6563,2161.2306 Q24161.9688,2162.3244 24161.9688,2164.4025 Q24161.9688,2166.4963 24162.6563,2167.5588 Q24163.3438,2168.6369 24164.6719,2168.6369 Q24165.3125,2168.6369 24165.9063,2168.3556 Q24166.2031,2168.2306 24166.4844,2168.0431 Q24166.7813,2167.84 24167.125,2167.5119 L24167.125,2170.2306 Q24166.5469,2170.5275 24165.9063,2170.6838 Q24165.2813,2170.8244 24164.5469,2170.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="24185.25" y="2169.522">Collision2DHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="23695.5" x2="24762.5" y1="2180.09" y2="2180.09"/><line style="stroke:#181818;stroke-width:0.5;" x1="23695.5" x2="24762.5" y1="2188.09" y2="2188.09"/><ellipse cx="23705.5" cy="2199.09" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="498" x="23714.5" y="2207.0559">getCollisionRec(const Rectangle&amp; rec1, const Rectangle&amp; rec2) : Rectangle</text><ellipse cx="23705.5" cy="2218.1579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="643" x="23714.5" y="2226.1239">checkCollisionCircleRec(const Vector2f&amp; center, const float&amp; radius, const Rectangle&amp; rec) : bool</text><ellipse cx="23705.5" cy="2237.2258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="803" x="23714.5" y="2245.1918">checkCollisionCircles(const Vector2f&amp; center1, const float&amp; radius1, const Vector2f&amp; center2, const float&amp; radius2) : bool</text><ellipse cx="23705.5" cy="2256.2938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1043" x="23714.5" y="2264.2597">checkCollisionLines(const Vector2f&amp; startPos1, const Vector2f&amp; endPos1, const Vector2f&amp; startPos2, const Vector2f&amp; endPos2, Vector2f&amp; collisionPoint) : bool</text><ellipse cx="23705.5" cy="2275.3617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="655" x="23714.5" y="2283.3276">checkCollisionPointCircle(const Vector2f&amp; point, const Vector2f&amp; center, const float&amp; radius) : bool</text><ellipse cx="23705.5" cy="2294.4296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="763" x="23714.5" y="2302.3955">checkCollisionPointLine(const Vector2f&amp; point, const Vector2f&amp; p1, const Vector2f&amp; p2, const int&amp; threshold) : bool</text><ellipse cx="23705.5" cy="2313.4975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="496" x="23714.5" y="2321.4634">checkCollisionPointRec(const Vector2f&amp; point, const Rectangle&amp; rec) : bool</text><ellipse cx="23705.5" cy="2332.5654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="780" x="23714.5" y="2340.5314">checkCollisionPointTriangle(const Vector2f&amp; point, const Vector2f&amp; p1, const Vector2f&amp; p2, const Vector2f&amp; p3) : bool</text><ellipse cx="23705.5" cy="2351.6333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="483" x="23714.5" y="2359.5993">checkCollisionRecs(const Rectangle&amp; rec1, const Rectangle&amp; rec2) : bool</text></g><!--MD5=[c4d317f45dc25df0dd1395498caf5d22]
class raylib.helper.Collision3dHelper--><g id="elem_raylib.helper.Collision3dHelper"><rect codeLine="561" fill="#F1F1F1" height="219.6113" id="raylib.helper.Collision3dHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="902" x="24799" y="2148.09"/><ellipse cx="25186.25" cy="2164.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M25186.0469,2170.8244 Q25183.5625,2170.8244 25182.2344,2169.1838 Q25180.9219,2167.5119 25180.9219,2164.4025 Q25180.9219,2161.2775 25182.2344,2159.6213 Q25183.5625,2157.965 25186.0469,2157.965 Q25186.7656,2157.965 25187.4219,2158.1213 Q25188.0625,2158.2775 25188.625,2158.5744 L25188.625,2161.2931 Q25188.2656,2160.9494 25187.9688,2160.7619 Q25187.6719,2160.5588 25187.4063,2160.4338 Q25187.0938,2160.2931 25186.7813,2160.2306 Q25186.4844,2160.1681 25186.1719,2160.1681 Q25184.8438,2160.1681 25184.1563,2161.2306 Q25183.4688,2162.3244 25183.4688,2164.4025 Q25183.4688,2166.4963 25184.1563,2167.5588 Q25184.8438,2168.6369 25186.1719,2168.6369 Q25186.8125,2168.6369 25187.4063,2168.3556 Q25187.7031,2168.2306 25187.9844,2168.0431 Q25188.2813,2167.84 25188.625,2167.5119 L25188.625,2170.2306 Q25188.0469,2170.5275 25187.4063,2170.6838 Q25186.7813,2170.8244 25186.0469,2170.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="119" x="25206.75" y="2169.522">Collision3dHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="24800" x2="25700" y1="2180.09" y2="2180.09"/><line style="stroke:#181818;stroke-width:0.5;" x1="24800" x2="25700" y1="2188.09" y2="2188.09"/><ellipse cx="24810" cy="2199.09" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="503" x="24819" y="2207.0559">getRayCollisionBox(const Ray&amp; ray, const BoundingBox&amp; box) : RayCollision</text><ellipse cx="24810" cy="2218.1579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="711" x="24819" y="2226.1239">getRayCollisionMesh(const Ray&amp; ray, const model::RlMesh&amp; mesh, const Matrix&amp; transform) : RayCollision</text><ellipse cx="24810" cy="2237.2258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="554" x="24819" y="2245.1918">getRayCollisionModel(const Ray&amp; ray, const model::RlModel&amp; model) : RayCollision</text><ellipse cx="24810" cy="2256.2938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="876" x="24819" y="2264.2597">getRayCollisionQuad(const Ray&amp; ray, const Vector3f&amp; p1, const Vector3f&amp; p2, const Vector3f&amp; p3, const Vector3f&amp; p4) : RayCollision</text><ellipse cx="24810" cy="2275.3617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="646" x="24819" y="2283.3276">getRayCollisionSphere(const Ray&amp; ray, const Vector3f&amp; center, const float&amp; radius) : RayCollision</text><ellipse cx="24810" cy="2294.4296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="761" x="24819" y="2302.3955">getRayCollisionTriangle(const Ray&amp; ray, const Vector3f&amp; p1, const Vector3f&amp; p2, const Vector3f&amp; p3) : RayCollision</text><ellipse cx="24810" cy="2313.4975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="679" x="24819" y="2321.4634">checkCollisionBoxSphere(const BoundingBox&amp; box, const Vector3f&amp; center, const float&amp; radius) : bool</text><ellipse cx="24810" cy="2332.5654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="543" x="24819" y="2340.5314">checkCollisionBoxes(const BoundingBox&amp; box1, const BoundingBox&amp; box2) : bool</text><ellipse cx="24810" cy="2351.6333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="813" x="24819" y="2359.5993">checkCollisionSpheres(const Vector3f&amp; center1, const float&amp; radius1, const Vector3f&amp; center2, const float&amp; radius2) : bool</text></g><!--MD5=[dfc8580c76ca14c833565e9202216036]
class raylib.helper.ColorHelper--><g id="elem_raylib.helper.ColorHelper"><rect codeLine="573" fill="#F1F1F1" height="219.6113" id="raylib.helper.ColorHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="591" x="22455.5" y="3076.09"/><ellipse cx="22706.75" cy="3092.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M22706.5469,3098.8244 Q22704.0625,3098.8244 22702.7344,3097.1838 Q22701.4219,3095.5119 22701.4219,3092.4025 Q22701.4219,3089.2775 22702.7344,3087.6213 Q22704.0625,3085.965 22706.5469,3085.965 Q22707.2656,3085.965 22707.9219,3086.1213 Q22708.5625,3086.2775 22709.125,3086.5744 L22709.125,3089.2931 Q22708.7656,3088.9494 22708.4688,3088.7619 Q22708.1719,3088.5588 22707.9063,3088.4338 Q22707.5938,3088.2931 22707.2813,3088.2306 Q22706.9844,3088.1681 22706.6719,3088.1681 Q22705.3438,3088.1681 22704.6563,3089.2306 Q22703.9688,3090.3244 22703.9688,3092.4025 Q22703.9688,3094.4963 22704.6563,3095.5588 Q22705.3438,3096.6369 22706.6719,3096.6369 Q22707.3125,3096.6369 22707.9063,3096.3556 Q22708.2031,3096.2306 22708.4844,3096.0431 Q22708.7813,3095.84 22709.125,3095.5119 L22709.125,3098.2306 Q22708.5469,3098.5275 22707.9063,3098.6838 Q22707.2813,3098.8244 22706.5469,3098.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="22727.25" y="3097.522">ColorHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="22456.5" x2="23045.5" y1="3108.09" y2="3108.09"/><line style="stroke:#181818;stroke-width:0.5;" x1="22456.5" x2="23045.5" y1="3116.09" y2="3116.09"/><ellipse cx="22466.5" cy="3127.09" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="355" x="22475.5" y="3135.0559">colorAlpha(const RlColor&amp; color, float alpha) : RlColor</text><ellipse cx="22466.5" cy="3146.1579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="565" x="22475.5" y="3154.1239">colorAlphaBlend(const RlColor&amp; dst, const RlColor&amp; src, const RlColor&amp; tint) : RlColor</text><ellipse cx="22466.5" cy="3165.2258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="410" x="22475.5" y="3173.1918">colorFromHSV(float hue, float saturation, float value) : RlColor</text><ellipse cx="22466.5" cy="3184.2938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="433" x="22475.5" y="3192.2597">colorFromNormalized(const Vector4f&amp; normalizedColor) : RlColor</text><ellipse cx="22466.5" cy="3203.3617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="276" x="22475.5" y="3211.3276">getColor(unsigned int hexValue) : RlColor</text><ellipse cx="22466.5" cy="3222.4296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="310" x="22475.5" y="3230.3955">getPixelColor(void* srcPtr, int format) : RlColor</text><ellipse cx="22466.5" cy="3241.4975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="285" x="22475.5" y="3249.4634">colorToHSV(const RlColor&amp; color) : Vector3f</text><ellipse cx="22466.5" cy="3260.5654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="358" x="22475.5" y="3268.5314">getPixelDataSize(int width, int height, int format) : int</text><ellipse cx="22466.5" cy="3279.6333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="432" x="22475.5" y="3287.5993">setPixelColor(void* dstPtr, const RlColor&amp; color, int format) : void</text></g><!--MD5=[054dc182820133524a250f1982d089ae]
class raylib.helper.CoreHelper--><g id="elem_raylib.helper.CoreHelper"><rect codeLine="585" fill="#F1F1F1" height="181.4754" id="raylib.helper.CoreHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="459" x="23081.5" y="3095.59"/><ellipse cx="23268.75" cy="3111.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M23268.5469,3118.3244 Q23266.0625,3118.3244 23264.7344,3116.6838 Q23263.4219,3115.0119 23263.4219,3111.9025 Q23263.4219,3108.7775 23264.7344,3107.1213 Q23266.0625,3105.465 23268.5469,3105.465 Q23269.2656,3105.465 23269.9219,3105.6213 Q23270.5625,3105.7775 23271.125,3106.0744 L23271.125,3108.7931 Q23270.7656,3108.4494 23270.4688,3108.2619 Q23270.1719,3108.0588 23269.9063,3107.9338 Q23269.5938,3107.7931 23269.2813,3107.7306 Q23268.9844,3107.6681 23268.6719,3107.6681 Q23267.3438,3107.6681 23266.6563,3108.7306 Q23265.9688,3109.8244 23265.9688,3111.9025 Q23265.9688,3113.9963 23266.6563,3115.0588 Q23267.3438,3116.1369 23268.6719,3116.1369 Q23269.3125,3116.1369 23269.9063,3115.8556 Q23270.2031,3115.7306 23270.4844,3115.5431 Q23270.7813,3115.34 23271.125,3115.0119 L23271.125,3117.7306 Q23270.5469,3118.0275 23269.9063,3118.1838 Q23269.2813,3118.3244 23268.5469,3118.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="23289.25" y="3117.022">CoreHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="23082.5" x2="23539.5" y1="3127.59" y2="3127.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="23082.5" x2="23539.5" y1="3135.59" y2="3135.59"/><ellipse cx="23092.5" cy="3146.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="433" x="23101.5" y="3154.5559">loadVrStereoConfig(const VrDeviceInfo&amp; device) : VrStereoConfig</text><ellipse cx="23092.5" cy="3165.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="122" x="23101.5" y="3173.6239">getTime() : double</text><ellipse cx="23092.5" cy="3184.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="147" x="23101.5" y="3192.6918">getFrameTime() : float</text><ellipse cx="23092.5" cy="3203.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="83" x="23101.5" y="3211.7597">getFPS() : int</text><ellipse cx="23092.5" cy="3222.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="250" x="23101.5" y="3230.8276">openURL(const std::string&amp; url) : void</text><ellipse cx="23092.5" cy="3241.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="213" x="23101.5" y="3249.8955">setFramerateLimit(int fps) : void</text><ellipse cx="23092.5" cy="3260.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="393" x="23101.5" y="3268.9634">unloadVrStereoConfig(const VrStereoConfig&amp; config) : void</text></g><!--MD5=[4cf40de1822577f09e71119bf2324adf]
class raylib.helper.FileHelper--><g id="elem_raylib.helper.FileHelper"><rect codeLine="595" fill="#F1F1F1" height="410.2904" id="raylib.helper.FileHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1125" x="23575.5" y="2981.09"/><ellipse cx="24099.75" cy="2997.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M24099.5469,3003.8244 Q24097.0625,3003.8244 24095.7344,3002.1838 Q24094.4219,3000.5119 24094.4219,2997.4025 Q24094.4219,2994.2775 24095.7344,2992.6213 Q24097.0625,2990.965 24099.5469,2990.965 Q24100.2656,2990.965 24100.9219,2991.1213 Q24101.5625,2991.2775 24102.125,2991.5744 L24102.125,2994.2931 Q24101.7656,2993.9494 24101.4688,2993.7619 Q24101.1719,2993.5588 24100.9063,2993.4338 Q24100.5938,2993.2931 24100.2813,2993.2306 Q24099.9844,2993.1681 24099.6719,2993.1681 Q24098.3438,2993.1681 24097.6563,2994.2306 Q24096.9688,2995.3244 24096.9688,2997.4025 Q24096.9688,2999.4963 24097.6563,3000.5588 Q24098.3438,3001.6369 24099.6719,3001.6369 Q24100.3125,3001.6369 24100.9063,3001.3556 Q24101.2031,3001.2306 24101.4844,3001.0431 Q24101.7813,3000.84 24102.125,3000.5119 L24102.125,3003.2306 Q24101.5469,3003.5275 24100.9063,3003.6838 Q24100.2813,3003.8244 24099.5469,3003.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="68" x="24120.25" y="3002.522">FileHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="23576.5" x2="24699.5" y1="3013.09" y2="3013.09"/><line style="stroke:#181818;stroke-width:0.5;" x1="23576.5" x2="24699.5" y1="3021.09" y2="3021.09"/><ellipse cx="23586.5" cy="3032.09" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="319" x="23595.5" y="3040.0559">directoryExists(const std::string&amp; dirPath) : bool</text><ellipse cx="23586.5" cy="3051.1579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="292" x="23595.5" y="3059.1239">fileExists(const std::string&amp; fileName) : bool</text><ellipse cx="23586.5" cy="3070.2258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="142" x="23595.5" y="3078.1918">isFileDropped() : bool</text><ellipse cx="23586.5" cy="3089.2938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="483" x="23595.5" y="3097.2597">isFileExtension(const std::string&amp; fileName, const std::string&amp; ext) : bool</text><ellipse cx="23586.5" cy="3108.3617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="470" x="23595.5" y="3116.3276">saveFileText(const std::string&amp; fileName, const std::string&amp; text) : bool</text><ellipse cx="23586.5" cy="3127.4296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="376" x="23595.5" y="3135.3955">getFileModTime(const std::string&amp; fileName) : long long</text><ellipse cx="23586.5" cy="3146.4975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="376" x="23595.5" y="3154.4634">getDirectoryPath(const std::string&amp; filePath) : std::string</text><ellipse cx="23586.5" cy="3165.5654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="383" x="23595.5" y="3173.5314">getFileExtension(const std::string&amp; fileName) : std::string</text><ellipse cx="23586.5" cy="3184.6333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="348" x="23595.5" y="3192.5993">getFileName(const std::string&amp; filePath) : std::string</text><ellipse cx="23586.5" cy="3203.7013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="421" x="23595.5" y="3211.6672">getFileNameWithoutExt(const std::string&amp; filePath) : std::string</text><ellipse cx="23586.5" cy="3222.7692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="403" x="23595.5" y="3230.7351">getPrevDirectoryPath(const std::string&amp; dirPath) : std::string</text><ellipse cx="23586.5" cy="3241.8371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="228" x="23595.5" y="3249.803">getWorkingDirectory() : std::string</text><ellipse cx="23586.5" cy="3260.905" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="353" x="23595.5" y="3268.8709">loadFileText(const std::string&amp; fileName) : std::string</text><ellipse cx="23586.5" cy="3279.9729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="613" x="23595.5" y="3287.9389">getDirectoryFiles(const std::string&amp; dirPath, const bool&amp; recursive) : std::vector&lt;std::string&gt;</text><ellipse cx="23586.5" cy="3299.0408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="823" x="23595.5" y="3307.0068">getDirectoryFiles(const std::string&amp; dirPath, const std::function&lt;bool ( const std::string&amp; )&gt;&amp; filter) : std::vector&lt;std::string&gt;</text><ellipse cx="23586.5" cy="3318.1088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1099" x="23595.5" y="3326.0747">getDirectoryFiles(const std::string&amp; dirPath, const bool&amp; recursive, const std::function&lt;bool ( const std::string&amp; fileName )&gt;&amp; filterFunction) : std::vector&lt;std::string&gt;</text><ellipse cx="23586.5" cy="3337.1767" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="286" x="23595.5" y="3345.1426">getDroppedFiles() : std::vector&lt;std::string&gt;</text><ellipse cx="23586.5" cy="3356.2446" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="471" x="23595.5" y="3364.2105">loadFileData(const std::string&amp; fileName) : std::vector&lt;unsigned char&gt;</text><ellipse cx="23586.5" cy="3375.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="301" x="23595.5" y="3383.2784">changeDirectory(const std::string&amp; dir) : void</text></g><!--MD5=[54cc7663e54c6d090332d0a9a17cb499]
class raylib.helper.ImageHelper--><g id="elem_raylib.helper.ImageHelper"><rect codeLine="617" fill="#F1F1F1" height="219.6113" id="raylib.helper.ImageHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="999" x="24735.5" y="3076.09"/><ellipse cx="25186.75" cy="3092.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M25186.5469,3098.8244 Q25184.0625,3098.8244 25182.7344,3097.1838 Q25181.4219,3095.5119 25181.4219,3092.4025 Q25181.4219,3089.2775 25182.7344,3087.6213 Q25184.0625,3085.965 25186.5469,3085.965 Q25187.2656,3085.965 25187.9219,3086.1213 Q25188.5625,3086.2775 25189.125,3086.5744 L25189.125,3089.2931 Q25188.7656,3088.9494 25188.4688,3088.7619 Q25188.1719,3088.5588 25187.9063,3088.4338 Q25187.5938,3088.2931 25187.2813,3088.2306 Q25186.9844,3088.1681 25186.6719,3088.1681 Q25185.3438,3088.1681 25184.6563,3089.2306 Q25183.9688,3090.3244 25183.9688,3092.4025 Q25183.9688,3094.4963 25184.6563,3095.5588 Q25185.3438,3096.6369 25186.6719,3096.6369 Q25187.3125,3096.6369 25187.9063,3096.3556 Q25188.2031,3096.2306 25188.4844,3096.0431 Q25188.7813,3095.84 25189.125,3095.5119 L25189.125,3098.2306 Q25188.5469,3098.5275 25187.9063,3098.6838 Q25187.2813,3098.8244 25186.5469,3098.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="88" x="25207.25" y="3097.522">ImageHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="24736.5" x2="25733.5" y1="3108.09" y2="3108.09"/><line style="stroke:#181818;stroke-width:0.5;" x1="24736.5" x2="25733.5" y1="3116.09" y2="3116.09"/><ellipse cx="24746.5" cy="3127.09" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="607" x="24755.5" y="3135.0559">fromText(const std::string&amp; text, int fontSize, const RlColor&amp; color) : raylib::image::RlImage</text><ellipse cx="24746.5" cy="3146.1579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="914" x="24755.5" y="3154.1239">fromText(const raylib::text::RlFont&amp; font, const std::string&amp; text, float fontSize, float spacing, const RlColor&amp; tint) : raylib::image::RlImage</text><ellipse cx="24746.5" cy="3165.2258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="973" x="24755.5" y="3173.1918">genImageFontAtlas(const GlyphInfo* chars, Rectangle** recs, int glyphCount, int fontSize, int padding, int packMethod) : raylib::image::RlImage</text><ellipse cx="24746.5" cy="3184.2938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="385" x="24755.5" y="3192.2597">load(const std::string&amp; fileName) : raylib::image::RlImage</text><ellipse cx="24746.5" cy="3203.3617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="420" x="24755.5" y="3211.3276">loadAnim(const std::string&amp; fileName) : raylib::image::RlImage</text><ellipse cx="24746.5" cy="3222.4296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="763" x="24755.5" y="3230.3955">loadFromMemory(const std::string&amp; fileType, const unsigned char* fileData, int dataSize) : raylib::image::RlImage</text><ellipse cx="24746.5" cy="3241.4975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="281" x="24755.5" y="3249.4634">loadFromScreen() : raylib::image::RlImage</text><ellipse cx="24746.5" cy="3260.5654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="457" x="24755.5" y="3268.5314">loadFromTexture(const Texture2D&amp; texture) : raylib::image::RlImage</text><ellipse cx="24746.5" cy="3279.6333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="735" x="24755.5" y="3287.5993">loadRaw(const std::string&amp; fileName, int width, int height, int format, int headerSize) : raylib::image::RlImage</text></g><!--MD5=[a046b8fec0eb06a5cc4cec55ec71fd8f]
class raylib.helper.TextHelper--><g id="elem_raylib.helper.TextHelper"><rect codeLine="629" fill="#F1F1F1" height="162.4075" id="raylib.helper.TextHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="737" x="22456.5" y="4109.59"/><ellipse cx="22784.25" cy="4125.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M22784.0469,4132.3244 Q22781.5625,4132.3244 22780.2344,4130.6838 Q22778.9219,4129.0119 22778.9219,4125.9025 Q22778.9219,4122.7775 22780.2344,4121.1213 Q22781.5625,4119.465 22784.0469,4119.465 Q22784.7656,4119.465 22785.4219,4119.6213 Q22786.0625,4119.7775 22786.625,4120.0744 L22786.625,4122.7931 Q22786.2656,4122.4494 22785.9688,4122.2619 Q22785.6719,4122.0588 22785.4063,4121.9338 Q22785.0938,4121.7931 22784.7813,4121.7306 Q22784.4844,4121.6681 22784.1719,4121.6681 Q22782.8438,4121.6681 22782.1563,4122.7306 Q22781.4688,4123.8244 22781.4688,4125.9025 Q22781.4688,4127.9963 22782.1563,4129.0588 Q22782.8438,4130.1369 22784.1719,4130.1369 Q22784.8125,4130.1369 22785.4063,4129.8556 Q22785.7031,4129.7306 22785.9844,4129.5431 Q22786.2813,4129.34 22786.625,4129.0119 L22786.625,4131.7306 Q22786.0469,4132.0275 22785.4063,4132.1838 Q22784.7813,4132.3244 22784.0469,4132.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="22804.75" y="4131.022">TextHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="22457.5" x2="23192.5" y1="4141.59" y2="4141.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="22457.5" x2="23192.5" y1="4149.59" y2="4149.59"/><ellipse cx="22467.5" cy="4160.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="473" x="22476.5" y="4168.5559">getGlyphInfo(const raylib::text::RlFont&amp; font, int codepoint) : GlyphInfo</text><ellipse cx="22467.5" cy="4179.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="504" x="22476.5" y="4187.6239">getGlyphAtlasRec(const raylib::text::RlFont&amp; font, int codepoint) : Rectangle</text><ellipse cx="22467.5" cy="4198.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="520" x="22476.5" y="4206.6918">measureText(const raylib::text::RlFont&amp; font, const std::string&amp; text) : Vector2f</text><ellipse cx="22467.5" cy="4217.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="711" x="22476.5" y="4225.7597">measureText(const raylib::text::RlFont&amp; font, const std::string&amp; text, float fontSize, float spacing) : Vector2f</text><ellipse cx="22467.5" cy="4236.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="436" x="22476.5" y="4244.8276">getGlyphIndex(const raylib::text::RlFont&amp; font, int codepoint) : int</text><ellipse cx="22467.5" cy="4255.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="357" x="22476.5" y="4263.8955">measureText(const std::string&amp; text, int fontSize) : int</text></g><!--MD5=[465da1b7a75d73e5a892fec67be6d952]
class raylib.helper.VectorHelper--><g id="elem_raylib.helper.VectorHelper"><rect codeLine="638" fill="#F1F1F1" height="162.4075" id="raylib.helper.VectorHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="386" x="23229" y="4109.59"/><ellipse cx="23374.25" cy="4125.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M23374.0469,4132.3244 Q23371.5625,4132.3244 23370.2344,4130.6838 Q23368.9219,4129.0119 23368.9219,4125.9025 Q23368.9219,4122.7775 23370.2344,4121.1213 Q23371.5625,4119.465 23374.0469,4119.465 Q23374.7656,4119.465 23375.4219,4119.6213 Q23376.0625,4119.7775 23376.625,4120.0744 L23376.625,4122.7931 Q23376.2656,4122.4494 23375.9688,4122.2619 Q23375.6719,4122.0588 23375.4063,4121.9338 Q23375.0938,4121.7931 23374.7813,4121.7306 Q23374.4844,4121.6681 23374.1719,4121.6681 Q23372.8438,4121.6681 23372.1563,4122.7306 Q23371.4688,4123.8244 23371.4688,4125.9025 Q23371.4688,4127.9963 23372.1563,4129.0588 Q23372.8438,4130.1369 23374.1719,4130.1369 Q23374.8125,4130.1369 23375.4063,4129.8556 Q23375.7031,4129.7306 23375.9844,4129.5431 Q23376.2813,4129.34 23376.625,4129.0119 L23376.625,4131.7306 Q23376.0469,4132.0275 23375.4063,4132.1838 Q23374.7813,4132.3244 23374.0469,4132.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="87" x="23394.75" y="4131.022">VectorHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="23230" x2="23614" y1="4141.59" y2="4141.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="23230" x2="23614" y1="4149.59" y2="4149.59"/><ellipse cx="23240" cy="4160.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="284" x="23249" y="4168.5559">toVectorf(const::Vector2&amp; vector) : Vector2f</text><ellipse cx="23240" cy="4179.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="284" x="23249" y="4187.6239">toVectorf(const::Vector3&amp; vector) : Vector3f</text><ellipse cx="23240" cy="4198.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="284" x="23249" y="4206.6918">toVectorf(const::Vector4&amp; vector) : Vector4f</text><ellipse cx="23240" cy="4217.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="360" x="23249" y="4225.7597">toRaylibVector(const Vector2f&amp; vector) : static::Vector2</text><ellipse cx="23240" cy="4236.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="360" x="23249" y="4244.8276">toRaylibVector(const Vector3f&amp; vector) : static::Vector3</text><ellipse cx="23240" cy="4255.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="360" x="23249" y="4263.8955">toRaylibVector(const Vector4f&amp; vector) : static::Vector4</text></g><!--MD5=[38359bdffa633f70dec5383cb35091f3]
class raylib.helper.WorldHelper--><g id="elem_raylib.helper.WorldHelper"><rect codeLine="647" fill="#F1F1F1" height="124.2717" id="raylib.helper.WorldHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="722" x="23650" y="4128.59"/><ellipse cx="23964.25" cy="4144.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M23964.0469,4151.3244 Q23961.5625,4151.3244 23960.2344,4149.6838 Q23958.9219,4148.0119 23958.9219,4144.9025 Q23958.9219,4141.7775 23960.2344,4140.1213 Q23961.5625,4138.465 23964.0469,4138.465 Q23964.7656,4138.465 23965.4219,4138.6213 Q23966.0625,4138.7775 23966.625,4139.0744 L23966.625,4141.7931 Q23966.2656,4141.4494 23965.9688,4141.2619 Q23965.6719,4141.0588 23965.4063,4140.9338 Q23965.0938,4140.7931 23964.7813,4140.7306 Q23964.4844,4140.6681 23964.1719,4140.6681 Q23962.8438,4140.6681 23962.1563,4141.7306 Q23961.4688,4142.8244 23961.4688,4144.9025 Q23961.4688,4146.9963 23962.1563,4148.0588 Q23962.8438,4149.1369 23964.1719,4149.1369 Q23964.8125,4149.1369 23965.4063,4148.8556 Q23965.7031,4148.7306 23965.9844,4148.5431 Q23966.2813,4148.34 23966.625,4148.0119 L23966.625,4150.7306 Q23966.0469,4151.0275 23965.4063,4151.1838 Q23964.7813,4151.3244 23964.0469,4151.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="85" x="23984.75" y="4150.022">WorldHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="23651" x2="24371" y1="4160.59" y2="4160.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="23651" x2="24371" y1="4168.59" y2="4168.59"/><ellipse cx="23661" cy="4179.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="562" x="23670" y="4187.5559">getScreenToWorld2D(const Vector2f&amp; position, const Camera2D&amp; camera) : Vector2f</text><ellipse cx="23661" cy="4198.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="539" x="23670" y="4206.6239">getWorldToScreen(const Vector3f&amp; position, const RlCamera&amp; camera) : Vector2f</text><ellipse cx="23661" cy="4217.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="562" x="23670" y="4225.6918">getWorldToScreen2D(const Vector2f&amp; position, const Camera2D&amp; camera) : Vector2f</text><ellipse cx="23661" cy="4236.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="696" x="23670" y="4244.7597">getWorldToScreenEx(const Vector3f&amp; position, const RlCamera&amp; camera, int width, int height) : Vector2f</text></g><!--MD5=[dd22ee461e77f179b57a3063ac52d38d]
class raylib.helper.input.CursorHelper--><g id="elem_raylib.helper.input.CursorHelper"><rect codeLine="655" fill="#F1F1F1" height="162.4075" id="raylib.helper.input.CursorHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="197" x="29765.5" y="2177.09"/><ellipse cx="29814.75" cy="2193.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M29814.5469,2199.8244 Q29812.0625,2199.8244 29810.7344,2198.1838 Q29809.4219,2196.5119 29809.4219,2193.4025 Q29809.4219,2190.2775 29810.7344,2188.6213 Q29812.0625,2186.965 29814.5469,2186.965 Q29815.2656,2186.965 29815.9219,2187.1213 Q29816.5625,2187.2775 29817.125,2187.5744 L29817.125,2190.2931 Q29816.7656,2189.9494 29816.4688,2189.7619 Q29816.1719,2189.5588 29815.9063,2189.4338 Q29815.5938,2189.2931 29815.2813,2189.2306 Q29814.9844,2189.1681 29814.6719,2189.1681 Q29813.3438,2189.1681 29812.6563,2190.2306 Q29811.9688,2191.3244 29811.9688,2193.4025 Q29811.9688,2195.4963 29812.6563,2196.5588 Q29813.3438,2197.6369 29814.6719,2197.6369 Q29815.3125,2197.6369 29815.9063,2197.3556 Q29816.2031,2197.2306 29816.4844,2197.0431 Q29816.7813,2196.84 29817.125,2196.5119 L29817.125,2199.2306 Q29816.5469,2199.5275 29815.9063,2199.6838 Q29815.2813,2199.8244 29814.5469,2199.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="29835.25" y="2198.522">CursorHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="29766.5" x2="29961.5" y1="2209.09" y2="2209.09"/><line style="stroke:#181818;stroke-width:0.5;" x1="29766.5" x2="29961.5" y1="2217.09" y2="2217.09"/><ellipse cx="29776.5" cy="2228.09" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="154" x="29785.5" y="2236.0559">isCursorHidden() : bool</text><ellipse cx="29776.5" cy="2247.1579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="171" x="29785.5" y="2255.1239">isCursorOnScreen() : bool</text><ellipse cx="29776.5" cy="2266.2258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="142" x="29785.5" y="2274.1918">disableCursor() : void</text><ellipse cx="29776.5" cy="2285.2938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="139" x="29785.5" y="2293.2597">enableCursor() : void</text><ellipse cx="29776.5" cy="2304.3617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="123" x="29785.5" y="2312.3276">hideCursor() : void</text><ellipse cx="29776.5" cy="2323.4296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="128" x="29785.5" y="2331.3955">showCursor() : void</text></g><!--MD5=[79b81ab3485f6af6f9801b1139eb9023]
class raylib.helper.input.GamepadHelper--><g id="elem_raylib.helper.input.GamepadHelper"><rect codeLine="664" fill="#F1F1F1" height="238.6792" id="raylib.helper.input.GamepadHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="610" x="29998" y="2138.59"/><ellipse cx="30243.75" cy="2154.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M30243.5469,2161.3244 Q30241.0625,2161.3244 30239.7344,2159.6838 Q30238.4219,2158.0119 30238.4219,2154.9025 Q30238.4219,2151.7775 30239.7344,2150.1213 Q30241.0625,2148.465 30243.5469,2148.465 Q30244.2656,2148.465 30244.9219,2148.6213 Q30245.5625,2148.7775 30246.125,2149.0744 L30246.125,2151.7931 Q30245.7656,2151.4494 30245.4688,2151.2619 Q30245.1719,2151.0588 30244.9063,2150.9338 Q30244.5938,2150.7931 30244.2813,2150.7306 Q30243.9844,2150.6681 30243.6719,2150.6681 Q30242.3438,2150.6681 30241.6563,2151.7306 Q30240.9688,2152.8244 30240.9688,2154.9025 Q30240.9688,2156.9963 30241.6563,2158.0588 Q30242.3438,2159.1369 30243.6719,2159.1369 Q30244.3125,2159.1369 30244.9063,2158.8556 Q30245.2031,2158.7306 30245.4844,2158.5431 Q30245.7813,2158.34 30246.125,2158.0119 L30246.125,2160.7306 Q30245.5469,2161.0275 30244.9063,2161.1838 Q30244.2813,2161.3244 30243.5469,2161.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="30264.25" y="2160.022">GamepadHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="29999" x2="30607" y1="2170.59" y2="2170.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="29999" x2="30607" y1="2178.59" y2="2178.59"/><ellipse cx="30009" cy="2189.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="322" x="30018" y="2197.5559">isGamepadAvailable(const int&amp; gamepad) : bool</text><ellipse cx="30009" cy="2208.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="561" x="30018" y="2216.6239">isGamepadButtonDown(const int&amp; gamepad, const GamepadButton&amp; button) : bool</text><ellipse cx="30009" cy="2227.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="576" x="30018" y="2235.6918">isGamepadButtonPressed(const int&amp; gamepad, const GamepadButton&amp; button) : bool</text><ellipse cx="30009" cy="2246.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="584" x="30018" y="2254.7597">isGamepadButtonReleased(const int&amp; gamepad, const GamepadButton&amp; button) : bool</text><ellipse cx="30009" cy="2265.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="542" x="30018" y="2273.8276">isGamepadButtonUp(const int&amp; gamepad, const GamepadButton&amp; button) : bool</text><ellipse cx="30009" cy="2284.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="551" x="30018" y="2292.8955">getGamepadAxisMovement(const int&amp; gamepad, const GamepadAxis&amp; axis) : float</text><ellipse cx="30009" cy="2303.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="328" x="30018" y="2311.9634">getGamepadAxisCount(const int&amp; gamepad) : int</text><ellipse cx="30009" cy="2323.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="223" x="30018" y="2331.0314">getGamepadButtonPressed() : int</text><ellipse cx="30009" cy="2342.1333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="382" x="30018" y="2350.0993">setGamepadMappings(const std::string&amp; mappings) : int</text><ellipse cx="30009" cy="2361.2013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="352" x="30018" y="2369.1672">getGamepadName(const int&amp; gamepad) : std::string</text></g><!--MD5=[a103ccbc999a5c86e16d3876335d41b5]
class raylib.helper.input.KeyboardHelper--><g id="elem_raylib.helper.input.KeyboardHelper"><rect codeLine="677" fill="#F1F1F1" height="238.6792" id="raylib.helper.input.KeyboardHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="438" x="30643" y="2138.59"/><ellipse cx="30803.25" cy="2154.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M30803.0469,2161.3244 Q30800.5625,2161.3244 30799.2344,2159.6838 Q30797.9219,2158.0119 30797.9219,2154.9025 Q30797.9219,2151.7775 30799.2344,2150.1213 Q30800.5625,2148.465 30803.0469,2148.465 Q30803.7656,2148.465 30804.4219,2148.6213 Q30805.0625,2148.7775 30805.625,2149.0744 L30805.625,2151.7931 Q30805.2656,2151.4494 30804.9688,2151.2619 Q30804.6719,2151.0588 30804.4063,2150.9338 Q30804.0938,2150.7931 30803.7813,2150.7306 Q30803.4844,2150.6681 30803.1719,2150.6681 Q30801.8438,2150.6681 30801.1563,2151.7306 Q30800.4688,2152.8244 30800.4688,2154.9025 Q30800.4688,2156.9963 30801.1563,2158.0588 Q30801.8438,2159.1369 30803.1719,2159.1369 Q30803.8125,2159.1369 30804.4063,2158.8556 Q30804.7031,2158.7306 30804.9844,2158.5431 Q30805.2813,2158.34 30805.625,2158.0119 L30805.625,2160.7306 Q30805.0469,2161.0275 30804.4063,2161.1838 Q30803.7813,2161.3244 30803.0469,2161.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="30823.75" y="2160.022">KeyboardHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="30644" x2="31080" y1="2170.59" y2="2170.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="30644" x2="31080" y1="2178.59" y2="2178.59"/><ellipse cx="30654" cy="2189.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="286" x="30663" y="2197.5559">isKeyDown(const KeyboardKey&amp; key) : bool</text><ellipse cx="30654" cy="2208.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="301" x="30663" y="2216.6239">isKeyPressed(const KeyboardKey&amp; key) : bool</text><ellipse cx="30654" cy="2227.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="309" x="30663" y="2235.6918">isKeyReleased(const KeyboardKey&amp; key) : bool</text><ellipse cx="30654" cy="2246.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="267" x="30663" y="2254.7597">isKeyUp(const KeyboardKey&amp; key) : bool</text><ellipse cx="30654" cy="2265.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="145" x="30663" y="2273.8276">getCharPressed() : int</text><ellipse cx="30654" cy="2284.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="137" x="30663" y="2292.8955">getKeyPressed() : int</text><ellipse cx="30654" cy="2303.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="412" x="30663" y="2311.9634">getKeyName(const int&amp; key, const int&amp; scancode) : std::string</text><ellipse cx="30654" cy="2323.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="300" x="30663" y="2331.0314">getPressedKeys() : std::vector&lt;KeyboardKey&gt;</text><ellipse cx="30654" cy="2342.1333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="238" x="30663" y="2350.0993">getPressedChars() : std::vector&lt;int&gt;</text><ellipse cx="30654" cy="2361.2013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="280" x="30663" y="2369.1672">setExitKey(const KeyboardKey&amp; key) : void</text></g><!--MD5=[cb60c79014d4d03d67e504aef510cbef]
class raylib.helper.input.MouseHelper--><g id="elem_raylib.helper.input.MouseHelper"><rect codeLine="690" fill="#F1F1F1" height="314.9508" id="raylib.helper.input.MouseHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="545" x="29765.5" y="3028.59"/><ellipse cx="29988.75" cy="3044.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M29988.5469,3051.3244 Q29986.0625,3051.3244 29984.7344,3049.6838 Q29983.4219,3048.0119 29983.4219,3044.9025 Q29983.4219,3041.7775 29984.7344,3040.1213 Q29986.0625,3038.465 29988.5469,3038.465 Q29989.2656,3038.465 29989.9219,3038.6213 Q29990.5625,3038.7775 29991.125,3039.0744 L29991.125,3041.7931 Q29990.7656,3041.4494 29990.4688,3041.2619 Q29990.1719,3041.0588 29989.9063,3040.9338 Q29989.5938,3040.7931 29989.2813,3040.7306 Q29988.9844,3040.6681 29988.6719,3040.6681 Q29987.3438,3040.6681 29986.6563,3041.7306 Q29985.9688,3042.8244 29985.9688,3044.9025 Q29985.9688,3046.9963 29986.6563,3048.0588 Q29987.3438,3049.1369 29988.6719,3049.1369 Q29989.3125,3049.1369 29989.9063,3048.8556 Q29990.2031,3048.7306 29990.4844,3048.5431 Q29990.7813,3048.34 29991.125,3048.0119 L29991.125,3050.7306 Q29990.5469,3051.0275 29989.9063,3051.1838 Q29989.2813,3051.3244 29988.5469,3051.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="30009.25" y="3050.022">MouseHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="29766.5" x2="30309.5" y1="3060.59" y2="3060.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="29766.5" x2="30309.5" y1="3068.59" y2="3068.59"/><ellipse cx="29776.5" cy="3079.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="519" x="29785.5" y="3087.5559">getMouseRay(const Vector2f&amp; mousePosition, const RlCamera&amp; camera) : Ray</text><ellipse cx="29776.5" cy="3098.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="177" x="29785.5" y="3106.6239">getMouseDelta() : Vector2f</text><ellipse cx="29776.5" cy="3117.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="195" x="29785.5" y="3125.6918">getMousePosition() : Vector2f</text><ellipse cx="29776.5" cy="3136.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="377" x="29785.5" y="3144.7597">isMouseButtonDown(const MouseButton&amp; button) : bool</text><ellipse cx="29776.5" cy="3155.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="392" x="29785.5" y="3163.8276">isMouseButtonPressed(const MouseButton&amp; button) : bool</text><ellipse cx="29776.5" cy="3174.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="400" x="29785.5" y="3182.8955">isMouseButtonReleased(const MouseButton&amp; button) : bool</text><ellipse cx="29776.5" cy="3193.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="358" x="29785.5" y="3201.9634">isMouseButtonUp(const MouseButton&amp; button) : bool</text><ellipse cx="29776.5" cy="3213.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="195" x="29785.5" y="3221.0314">getMouseWheelMove() : float</text><ellipse cx="29776.5" cy="3232.1333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="113" x="29785.5" y="3240.0993">getMouseX() : int</text><ellipse cx="29776.5" cy="3251.2013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="113" x="29785.5" y="3259.1672">getMouseY() : int</text><ellipse cx="29776.5" cy="3270.2692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="345" x="29785.5" y="3278.2351">setMouseCursor(const MouseCursor&amp; cursor) : void</text><ellipse cx="29776.5" cy="3289.3371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="298" x="29785.5" y="3297.303">setMouseOffset(int offsetX, int offsetY) : void</text><ellipse cx="29776.5" cy="3308.405" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="232" x="29785.5" y="3316.3709">setMousePosition(int x, int y) : void</text><ellipse cx="29776.5" cy="3327.4729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="308" x="29785.5" y="3335.4389">setMouseScale(float scaleX, float scaleY) : void</text></g><!--MD5=[bacff03f7d85e8e70bf8356996a4a2f6]
class raylib.helper.input.TouchHelper--><g id="elem_raylib.helper.input.TouchHelper"><rect codeLine="707" fill="#F1F1F1" height="295.8829" id="raylib.helper.input.TouchHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="382" x="30346" y="3038.09"/><ellipse cx="30489.75" cy="3054.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M30489.5469,3060.8244 Q30487.0625,3060.8244 30485.7344,3059.1838 Q30484.4219,3057.5119 30484.4219,3054.4025 Q30484.4219,3051.2775 30485.7344,3049.6213 Q30487.0625,3047.965 30489.5469,3047.965 Q30490.2656,3047.965 30490.9219,3048.1213 Q30491.5625,3048.2775 30492.125,3048.5744 L30492.125,3051.2931 Q30491.7656,3050.9494 30491.4688,3050.7619 Q30491.1719,3050.5588 30490.9063,3050.4338 Q30490.5938,3050.2931 30490.2813,3050.2306 Q30489.9844,3050.1681 30489.6719,3050.1681 Q30488.3438,3050.1681 30487.6563,3051.2306 Q30486.9688,3052.3244 30486.9688,3054.4025 Q30486.9688,3056.4963 30487.6563,3057.5588 Q30488.3438,3058.6369 30489.6719,3058.6369 Q30490.3125,3058.6369 30490.9063,3058.3556 Q30491.2031,3058.2306 30491.4844,3058.0431 Q30491.7813,3057.84 30492.125,3057.5119 L30492.125,3060.2306 Q30491.5469,3060.5275 30490.9063,3060.6838 Q30490.2813,3060.8244 30489.5469,3060.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="30510.25" y="3059.522">TouchHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="30347" x2="30727" y1="3070.09" y2="3070.09"/><line style="stroke:#181818;stroke-width:0.5;" x1="30347" x2="30727" y1="3078.09" y2="3078.09"/><ellipse cx="30357" cy="3089.09" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="225" x="30366" y="3097.0559">getGestureDragVector() : Vector2f</text><ellipse cx="30357" cy="3108.1579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="229" x="30366" y="3116.1239">getGesturePinchVector() : Vector2f</text><ellipse cx="30357" cy="3127.2258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="300" x="30366" y="3135.1918">getTouchPosition(const int&amp; index) : Vector2f</text><ellipse cx="30357" cy="3146.2938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="297" x="30366" y="3154.2597">isGestureDetected(const int&amp; gesture) : bool</text><ellipse cx="30357" cy="3165.3617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="197" x="30366" y="3173.3276">getGestureDragAngle() : float</text><ellipse cx="30357" cy="3184.4296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="215" x="30366" y="3192.3955">getGestureHoldDuration() : float</text><ellipse cx="30357" cy="3203.4975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="201" x="30366" y="3211.4634">getGesturePinchAngle() : float</text><ellipse cx="30357" cy="3222.5654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="173" x="30366" y="3230.5314">getGestureDetected() : int</text><ellipse cx="30357" cy="3241.6333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="175" x="30366" y="3249.5993">getTouchPointCount() : int</text><ellipse cx="30357" cy="3260.7013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="258" x="30366" y="3268.6672">getTouchPointId(const int&amp; index) : int</text><ellipse cx="30357" cy="3279.7692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="109" x="30366" y="3287.7351">getTouchX() : int</text><ellipse cx="30357" cy="3298.8371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="109" x="30366" y="3306.803">getTouchY() : int</text><ellipse cx="30357" cy="3317.905" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="356" x="30366" y="3325.8709">setGesturesEnabled(const unsigned int&amp; flags) : void</text></g><!--MD5=[4e14db6015d2944397354ce607b3a3ca]
class raylib.helper.draw.Draw2DHelper--><g id="elem_raylib.helper.draw.Draw2DHelper"><rect codeLine="725" fill="#F1F1F1" height="810.7167" id="raylib.helper.draw.Draw2DHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1197" x="25806.5" y="1852.59"/><ellipse cx="26351.75" cy="1868.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M26351.5469,1875.3244 Q26349.0625,1875.3244 26347.7344,1873.6838 Q26346.4219,1872.0119 26346.4219,1868.9025 Q26346.4219,1865.7775 26347.7344,1864.1213 Q26349.0625,1862.465 26351.5469,1862.465 Q26352.2656,1862.465 26352.9219,1862.6213 Q26353.5625,1862.7775 26354.125,1863.0744 L26354.125,1865.7931 Q26353.7656,1865.4494 26353.4688,1865.2619 Q26353.1719,1865.0588 26352.9063,1864.9338 Q26352.5938,1864.7931 26352.2813,1864.7306 Q26351.9844,1864.6681 26351.6719,1864.6681 Q26350.3438,1864.6681 26349.6563,1865.7306 Q26348.9688,1866.8244 26348.9688,1868.9025 Q26348.9688,1870.9963 26349.6563,1872.0588 Q26350.3438,1873.1369 26351.6719,1873.1369 Q26352.3125,1873.1369 26352.9063,1872.8556 Q26353.2031,1872.7306 26353.4844,1872.5431 Q26353.7813,1872.34 26354.125,1872.0119 L26354.125,1874.7306 Q26353.5469,1875.0275 26352.9063,1875.1838 Q26352.2813,1875.3244 26351.5469,1875.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="26372.25" y="1874.022">Draw2DHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="25807.5" x2="27002.5" y1="1884.59" y2="1884.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="25814.5" y="1892.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="218" x="25826.5" y="1903.5559">_texShapesRec : static Rectangle</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="25814.5" y="1911.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="196" x="25826.5" y="1922.6239">_texShapes : static Texture2D</text><line style="stroke:#181818;stroke-width:0.5;" x1="25807.5" x2="27002.5" y1="1930.7258" y2="1930.7258"/><ellipse cx="25817.5" cy="1941.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="502" x="25826.5" y="1949.6918">drawCircle(int centerX, int centerY, float radius, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="1960.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="500" x="25826.5" y="1968.7597">drawCircle(const Vector2f&amp; center, float radius, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="1979.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="720" x="25826.5" y="1987.8276">drawCircleGradient(int centerX, int centerY, float radius, const RlColor&amp; color1, const RlColor&amp; color2) : void</text><ellipse cx="25817.5" cy="1998.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="537" x="25826.5" y="2006.8955">drawCircleLines(int centerX, int centerY, float radius, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2017.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="857" x="25826.5" y="2025.9634">drawCircleSector(const Vector2f&amp; center, float radius, float startAngle, float endAngle, int segments, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2037.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="892" x="25826.5" y="2045.0314">drawCircleSectorLines(const Vector2f&amp; center, float radius, float startAngle, float endAngle, int segments, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2056.1333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="611" x="25826.5" y="2064.0993">drawEllipse(int centerX, int centerY, float radiusH, float radiusV, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2075.2013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="646" x="25826.5" y="2083.1672">drawEllipseLines(int centerX, int centerY, float radiusH, float radiusV, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2094.2692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="603" x="25826.5" y="2102.2351">drawLine(int startPosX, int startPosY, int endPosX, int endPosY, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2113.3371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="582" x="25826.5" y="2121.303">drawLine(const Vector2f&amp; startPos, const Vector2f&amp; endPos, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2132.405" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="656" x="25826.5" y="2140.3709">drawLine(const Vector2f&amp; startPos, const Vector2f&amp; endPos, float thick, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2151.4729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="698" x="25826.5" y="2159.4389">drawLineBezier(const Vector2f&amp; startPos, const Vector2f&amp; endPos, float thick, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2170.5408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1171" x="25826.5" y="2178.5068">drawLineBezierCubic(const Vector2f&amp; startPos, const Vector2f&amp; endPos, const Vector2f&amp; startControlPos, const Vector2f&amp; endControlPos, float thick, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2189.6088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="922" x="25826.5" y="2197.5747">drawLineBezierQuad(const Vector2f&amp; startPos, const Vector2f&amp; endPos, const Vector2f&amp; controlPos, float thick, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2208.6767" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="522" x="25826.5" y="2216.6426">drawLineStrip(const std::vector&lt;Vector2f&gt;&amp; points, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2227.7446" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="372" x="25826.5" y="2235.7105">drawPixel(int posX, int posY, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2246.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="419" x="25826.5" y="2254.7784">drawPixel(const Vector2f&amp; position, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2265.8804" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="649" x="25826.5" y="2273.8464">drawPoly(const Vector2f&amp; center, int sides, float radius, float rotation, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2284.9483" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="684" x="25826.5" y="2292.9143">drawPolyLines(const Vector2f&amp; center, int sides, float radius, float rotation, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2304.0163" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="786" x="25826.5" y="2311.9822">drawPolyLines(const Vector2f&amp; center, int sides, float radius, float rotation, float lineThick, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2323.0842" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="550" x="25826.5" y="2331.0501">drawRectangle(int posX, int posY, int width, int height, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2342.1521" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="598" x="25826.5" y="2350.118">drawRectangle(const Vector2f&amp; position, const Vector2f&amp; size, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2361.22" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="434" x="25826.5" y="2369.1859">drawRectangle(const Rectangle&amp; rec, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2380.2879" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="686" x="25826.5" y="2388.2539">drawRectangle(const Rectangle&amp; rec, const Vector2f&amp; origin, float rotation, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2399.3558" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="898" x="25826.5" y="2407.3218">drawRectangleGradient(const Rectangle&amp; rec, const RlColor&amp; col1, const RlColor&amp; col2, const RlColor&amp; col3, const RlColor&amp; col4) : void</text><ellipse cx="25817.5" cy="2418.4238" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="778" x="25826.5" y="2426.3897">drawRectangleGradientH(int posX, int posY, int width, int height, const RlColor&amp; color1, const RlColor&amp; color2) : void</text><ellipse cx="25817.5" cy="2437.4917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="776" x="25826.5" y="2445.4576">drawRectangleGradientV(int posX, int posY, int width, int height, const RlColor&amp; color1, const RlColor&amp; color2) : void</text><ellipse cx="25817.5" cy="2456.5596" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="585" x="25826.5" y="2464.5255">drawRectangleLines(int posX, int posY, int width, int height, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2475.6275" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="586" x="25826.5" y="2483.5934">drawRectangleLinesEx(const Rectangle&amp; rec, float lineThick, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2494.6954" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="705" x="25826.5" y="2502.6614">drawRectangleRounded(const Rectangle&amp; rec, float roundness, int segments, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2513.7633" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="842" x="25826.5" y="2521.7293">drawRectangleRoundedLines(const Rectangle&amp; rec, float roundness, int segments, float lineThick, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2532.8313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="971" x="25826.5" y="2540.7972">drawRing(const Vector2f&amp; center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2551.8992" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1006" x="25826.5" y="2559.8651">drawRingLines(const Vector2f&amp; center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2570.9671" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="669" x="25826.5" y="2578.933">drawTriangle(const Vector2f&amp; v1, const Vector2f&amp; v2, const Vector2f&amp; v3, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2590.035" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="542" x="25826.5" y="2598.0009">drawTriangleFan(const std::vector&lt;Vector2f&gt;&amp; points, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2609.1029" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="704" x="25826.5" y="2617.0689">drawTriangleLines(const Vector2f&amp; v1, const Vector2f&amp; v2, const Vector2f&amp; v3, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2628.1708" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="550" x="25826.5" y="2636.1368">drawTriangleStrip(const std::vector&lt;Vector2f&gt;&amp; points, const RlColor&amp; color) : void</text><ellipse cx="25817.5" cy="2647.2388" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="564" x="25826.5" y="2655.2047">setShapesTexture(const texture::RlTexture&amp; texture, const Rectangle&amp; source) : void</text></g><!--MD5=[6ddc1bda24d0803844728d0858223c9b]
class raylib.helper.draw.Draw3DHelper--><g id="elem_raylib.helper.draw.Draw3DHelper"><rect codeLine="768" fill="#F1F1F1" height="581.9017" id="raylib.helper.draw.Draw3DHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1598" x="27039" y="1967.09"/><ellipse cx="27784.75" cy="1983.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M27784.5469,1989.8244 Q27782.0625,1989.8244 27780.7344,1988.1838 Q27779.4219,1986.5119 27779.4219,1983.4025 Q27779.4219,1980.2775 27780.7344,1978.6213 Q27782.0625,1976.965 27784.5469,1976.965 Q27785.2656,1976.965 27785.9219,1977.1213 Q27786.5625,1977.2775 27787.125,1977.5744 L27787.125,1980.2931 Q27786.7656,1979.9494 27786.4688,1979.7619 Q27786.1719,1979.5588 27785.9063,1979.4338 Q27785.5938,1979.2931 27785.2813,1979.2306 Q27784.9844,1979.1681 27784.6719,1979.1681 Q27783.3438,1979.1681 27782.6563,1980.2306 Q27781.9688,1981.3244 27781.9688,1983.4025 Q27781.9688,1985.4963 27782.6563,1986.5588 Q27783.3438,1987.6369 27784.6719,1987.6369 Q27785.3125,1987.6369 27785.9063,1987.3556 Q27786.2031,1987.2306 27786.4844,1987.0431 Q27786.7813,1986.84 27787.125,1986.5119 L27787.125,1989.2306 Q27786.5469,1989.5275 27785.9063,1989.6838 Q27785.2813,1989.8244 27784.5469,1989.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="27805.25" y="1988.522">Draw3DHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="27040" x2="28636" y1="1999.09" y2="1999.09"/><line style="stroke:#181818;stroke-width:0.5;" x1="27040" x2="28636" y1="2007.09" y2="2007.09"/><ellipse cx="27050" cy="2018.09" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="914" x="27059" y="2026.0559">drawBillboard(const RlCamera&amp; camera, const texture::RlTexture&amp; texture, const Vector3f&amp; position, float size, const RlColor&amp; tint) : void</text><ellipse cx="27050" cy="2037.1579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1572" x="27059" y="2045.1239">drawBillboardPro(const RlCamera&amp; camera, const texture::RlTexture&amp; texture, const Rectangle&amp; source, const Vector3f&amp; position, const Vector3f&amp; up, const Vector2f&amp; size, const Vector2f&amp; origin, float rotation, const RlColor&amp; tint) : void</text><ellipse cx="27050" cy="2056.2258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1187" x="27059" y="2064.1918">drawBillboardRec(const RlCamera&amp; camera, const texture::RlTexture&amp; texture, const Rectangle&amp; source, const Vector3f&amp; position, const Vector2f&amp; size, const RlColor&amp; tint) : void</text><ellipse cx="27050" cy="2075.2938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="483" x="27059" y="2083.2597">drawBoundingBox(const BoundingBox&amp; box, const RlColor&amp; color) : void</text><ellipse cx="27050" cy="2094.3617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="931" x="27059" y="2102.3276">drawCircle(const Vector3f&amp; center, const float&amp; radius, const Vector3f&amp; rotationAxis, const float&amp; rotationAngle, const RlColor&amp; color) : void</text><ellipse cx="27050" cy="2113.4296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="825" x="27059" y="2121.3955">drawCube(const Vector3f&amp; position, const float&amp; width, const float&amp; height, const float&amp; length, const RlColor&amp; color) : void</text><ellipse cx="27050" cy="2132.4975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="566" x="27059" y="2140.4634">drawCube(const Vector3f&amp; position, const Vector3f&amp; size, const RlColor&amp; color) : void</text><ellipse cx="27050" cy="2151.5654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1106" x="27059" y="2159.5314">drawCubeTexture(const texture::RlTexture&amp; texture, const Vector3f&amp; position, const float&amp; width, const float&amp; height, const float&amp; length, const RlColor&amp; color) : void</text><ellipse cx="27050" cy="2170.6333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1304" x="27059" y="2178.5993">drawCubeTextureRec(const texture::RlTexture&amp; texture, const Rectangle&amp; source, const Vector3f&amp; position, const float&amp; width, const float&amp; height, const float&amp; length, const RlColor&amp; color) : void</text><ellipse cx="27050" cy="2189.7013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="863" x="27059" y="2197.6672">drawCubeWires(const Vector3f&amp; position, const float&amp; width, const float&amp; height, const float&amp; length, const RlColor&amp; color) : void</text><ellipse cx="27050" cy="2208.7692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="604" x="27059" y="2216.7351">drawCubeWires(const Vector3f&amp; position, const Vector3f&amp; size, const RlColor&amp; color) : void</text><ellipse cx="27050" cy="2227.8371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1040" x="27059" y="2235.803">drawCylinder(const Vector3f&amp; position, const float&amp; radiusTop, const float&amp; radiusBottom, const float&amp; height, const int&amp; slices, const RlColor&amp; color) : void</text><ellipse cx="27050" cy="2246.905" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1058" x="27059" y="2254.8709">drawCylinder(const Vector3f&amp; startPos, const Vector3f&amp; endPos, const float&amp; startRadius, const float&amp; endRadius, const int&amp; sides, const RlColor&amp; color) : void</text><ellipse cx="27050" cy="2265.9729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1078" x="27059" y="2273.9389">drawCylinderWires(const Vector3f&amp; position, const float&amp; radiusTop, const float&amp; radiusBottom, const float&amp; height, const int&amp; slices, const RlColor&amp; color) : void</text><ellipse cx="27050" cy="2285.0408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1096" x="27059" y="2293.0068">drawCylinderWires(const Vector3f&amp; startPos, const Vector3f&amp; endPos, const float&amp; startRadius, const float&amp; endRadius, const int&amp; sides, const RlColor&amp; color) : void</text><ellipse cx="27050" cy="2304.1088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="365" x="27059" y="2312.0747">drawGrid(const int&amp; slices, const float&amp; spacing) : void</text><ellipse cx="27050" cy="2323.1767" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="390" x="27059" y="2331.1426">drawGrid(const Vector2i&amp; size, const float&amp; spacing) : void</text><ellipse cx="27050" cy="2342.2446" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="561" x="27059" y="2350.2105">drawGrid(const Vector2i&amp; size, const Vector3f&amp; position, const float&amp; spacing) : void</text><ellipse cx="27050" cy="2361.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="704" x="27059" y="2369.2784">drawGrid(const Vector2i&amp; size, const Vector3f&amp; position, const float&amp; spacing, const RlColor&amp; color) : void</text><ellipse cx="27050" cy="2380.3804" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="582" x="27059" y="2388.3464">drawLine(const Vector3f&amp; startPos, const Vector3f&amp; endPos, const RlColor&amp; color) : void</text><ellipse cx="27050" cy="2399.4483" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="580" x="27059" y="2407.4143">drawPlane(const Vector3f&amp; centerPos, const Vector2f&amp; size, const RlColor&amp; color) : void</text><ellipse cx="27050" cy="2418.5163" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="422" x="27059" y="2426.4822">drawPoint(const Vector3f&amp; position, const RlColor&amp; color) : void</text><ellipse cx="27050" cy="2437.5842" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="348" x="27059" y="2445.5501">drawRay(const Ray&amp; ray, const RlColor&amp; color) : void</text><ellipse cx="27050" cy="2456.6521" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="583" x="27059" y="2464.618">drawSphere(const Vector3f&amp; centerPos, const float&amp; radius, const RlColor&amp; color) : void</text><ellipse cx="27050" cy="2475.72" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="815" x="27059" y="2483.6859">drawSphere(const Vector3f&amp; centerPos, const float&amp; radius, const int&amp; rings, const int&amp; slices, const RlColor&amp; color) : void</text><ellipse cx="27050" cy="2494.7879" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="853" x="27059" y="2502.7539">drawSphereWires(const Vector3f&amp; centerPos, const float&amp; radius, const int&amp; rings, const int&amp; slices, const RlColor&amp; color) : void</text><ellipse cx="27050" cy="2513.8558" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="687" x="27059" y="2521.8218">drawTriangle3D(const Vector3f&amp; v1, const Vector3f&amp; v2, const Vector3f&amp; v3, const RlColor&amp; color) : void</text><ellipse cx="27050" cy="2532.9238" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="568" x="27059" y="2540.8897">drawTriangleStrip3D(const std::vector&lt;Vector3f&gt;&amp; points, const RlColor&amp; color) : void</text></g><!--MD5=[22dbd257a5b9b60e0fcce8e474411a4d]
class raylib.helper.draw.DrawHelper--><g id="elem_raylib.helper.draw.DrawHelper"><rect codeLine="799" fill="#F1F1F1" height="372.1546" id="raylib.helper.draw.DrawHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="416" x="28672" y="2072.09"/><ellipse cx="28835.75" cy="2088.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M28835.5469,2094.8244 Q28833.0625,2094.8244 28831.7344,2093.1838 Q28830.4219,2091.5119 28830.4219,2088.4025 Q28830.4219,2085.2775 28831.7344,2083.6213 Q28833.0625,2081.965 28835.5469,2081.965 Q28836.2656,2081.965 28836.9219,2082.1213 Q28837.5625,2082.2775 28838.125,2082.5744 L28838.125,2085.2931 Q28837.7656,2084.9494 28837.4688,2084.7619 Q28837.1719,2084.5588 28836.9063,2084.4338 Q28836.5938,2084.2931 28836.2813,2084.2306 Q28835.9844,2084.1681 28835.6719,2084.1681 Q28834.3438,2084.1681 28833.6563,2085.2306 Q28832.9688,2086.3244 28832.9688,2088.4025 Q28832.9688,2090.4963 28833.6563,2091.5588 Q28834.3438,2092.6369 28835.6719,2092.6369 Q28836.3125,2092.6369 28836.9063,2092.3556 Q28837.2031,2092.2306 28837.4844,2092.0431 Q28837.7813,2091.84 28838.125,2091.5119 L28838.125,2094.2306 Q28837.5469,2094.5275 28836.9063,2094.6838 Q28836.2813,2094.8244 28835.5469,2094.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="28856.25" y="2093.522">DrawHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="28673" x2="29087" y1="2104.09" y2="2104.09"/><line style="stroke:#181818;stroke-width:0.5;" x1="28673" x2="29087" y1="2112.09" y2="2112.09"/><ellipse cx="28683" cy="2123.09" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="224" x="28692" y="2131.0559">beginBlendMode(int mode) : void</text><ellipse cx="28683" cy="2142.1579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="144" x="28692" y="2150.1239">beginDrawing() : void</text><ellipse cx="28683" cy="2161.2258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="317" x="28692" y="2169.1918">beginMode2D(const Camera2D&amp; camera) : void</text><ellipse cx="28683" cy="2180.2938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="312" x="28692" y="2188.2597">beginMode3D(const RlCamera&amp; camera) : void</text><ellipse cx="28683" cy="2199.3617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="380" x="28692" y="2207.3276">beginScissorMode(int x, int y, int width, int height) : void</text><ellipse cx="28683" cy="2218.4296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="390" x="28692" y="2226.3955">beginShaderMode(const shader::RlShader&amp; shader) : void</text><ellipse cx="28683" cy="2237.4975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="389" x="28692" y="2245.4634">beginTextureMode(const RenderTexture2D&amp; target) : void</text><ellipse cx="28683" cy="2256.5654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="379" x="28692" y="2264.5314">beginVrStereoMode(const VrStereoConfig&amp; config) : void</text><ellipse cx="28683" cy="2275.6333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="297" x="28692" y="2283.5993">clearBackground(const RlColor&amp; color) : void</text><ellipse cx="28683" cy="2294.7013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="151" x="28692" y="2302.6672">endBlendMode() : void</text><ellipse cx="28683" cy="2313.7692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="131" x="28692" y="2321.7351">endDrawing() : void</text><ellipse cx="28683" cy="2332.8371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="130" x="28692" y="2340.803">endMode2D() : void</text><ellipse cx="28683" cy="2351.905" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="130" x="28692" y="2359.8709">endMode3D() : void</text><ellipse cx="28683" cy="2370.9729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="159" x="28692" y="2378.9389">endScissorMode() : void</text><ellipse cx="28683" cy="2390.0408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="160" x="28692" y="2398.0068">endShaderMode() : void</text><ellipse cx="28683" cy="2409.1088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="163" x="28692" y="2417.0747">endTextureMode() : void</text><ellipse cx="28683" cy="2428.1767" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="169" x="28692" y="2436.1426">endVrStereoMode() : void</text></g><!--MD5=[ba9627c1223659b0a946c0624168cd2f]
class raylib.helper.draw.DrawModelHelper--><g id="elem_raylib.helper.draw.DrawModelHelper"><rect codeLine="819" fill="#F1F1F1" height="200.5433" id="raylib.helper.draw.DrawModelHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1271" x="25769.5" y="3085.59"/><ellipse cx="26339.75" cy="3101.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M26339.5469,3108.3244 Q26337.0625,3108.3244 26335.7344,3106.6838 Q26334.4219,3105.0119 26334.4219,3101.9025 Q26334.4219,3098.7775 26335.7344,3097.1213 Q26337.0625,3095.465 26339.5469,3095.465 Q26340.2656,3095.465 26340.9219,3095.6213 Q26341.5625,3095.7775 26342.125,3096.0744 L26342.125,3098.7931 Q26341.7656,3098.4494 26341.4688,3098.2619 Q26341.1719,3098.0588 26340.9063,3097.9338 Q26340.5938,3097.7931 26340.2813,3097.7306 Q26339.9844,3097.6681 26339.6719,3097.6681 Q26338.3438,3097.6681 26337.6563,3098.7306 Q26336.9688,3099.8244 26336.9688,3101.9025 Q26336.9688,3103.9963 26337.6563,3105.0588 Q26338.3438,3106.1369 26339.6719,3106.1369 Q26340.3125,3106.1369 26340.9063,3105.8556 Q26341.2031,3105.7306 26341.4844,3105.5431 Q26341.7813,3105.34 26342.125,3105.0119 L26342.125,3107.7306 Q26341.5469,3108.0275 26340.9063,3108.1838 Q26340.2813,3108.3244 26339.5469,3108.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="122" x="26360.25" y="3107.022">DrawModelHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="25770.5" x2="27039.5" y1="3117.59" y2="3117.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="25770.5" x2="27039.5" y1="3125.59" y2="3125.59"/><ellipse cx="25780.5" cy="3136.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="811" x="25789.5" y="3144.5559">drawMesh(const raylib::model::RlMesh&amp; mesh, const raylib::model::RlMaterial&amp; material, const Matrix&amp; transform) : void</text><ellipse cx="25780.5" cy="3155.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="931" x="25789.5" y="3163.6239">drawMeshInstanced(const raylib::model::RlMesh&amp; mesh, const raylib::model::RlMaterial&amp; material, std::vector&lt;Matrix&gt;&amp; transforms) : void</text><ellipse cx="25780.5" cy="3174.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="371" x="25789.5" y="3182.6918">drawModel(const raylib::model::RlModel&amp; model) : void</text><ellipse cx="25780.5" cy="3193.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="801" x="25789.5" y="3201.7597">drawModel(const raylib::model::RlModel&amp; model, const Vector3f&amp; position, const float&amp; scale, const RlColor&amp; tint) : void</text><ellipse cx="25780.5" cy="3212.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1207" x="25789.5" y="3220.8276">drawModel(const raylib::model::RlModel&amp; model, const Vector3f&amp; position, const Vector3f&amp; rotationAxis, const float&amp; rotationAngle, const Vector3f&amp; scale, const RlColor&amp; tint) : void</text><ellipse cx="25780.5" cy="3231.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="409" x="25789.5" y="3239.8955">drawModelWires(const raylib::model::RlModel&amp; model) : void</text><ellipse cx="25780.5" cy="3250.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="839" x="25789.5" y="3258.9634">drawModelWires(const raylib::model::RlModel&amp; model, const Vector3f&amp; position, const float&amp; scale, const RlColor&amp; tint) : void</text><ellipse cx="25780.5" cy="3270.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1245" x="25789.5" y="3278.0314">drawModelWires(const raylib::model::RlModel&amp; model, const Vector3f&amp; position, const Vector3f&amp; rotationAxis, const float&amp; rotationAngle, const Vector3f&amp; scale, const RlColor&amp; tint) : void</text></g><!--MD5=[8c873c49ce49d4c3fae6911f380a097a]
class raylib.helper.draw.DrawTextHelper--><g id="elem_raylib.helper.draw.DrawTextHelper"><rect codeLine="830" fill="#F1F1F1" height="391.2225" id="raylib.helper.draw.DrawTextHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1391" x="27075.5" y="2990.59"/><ellipse cx="27712.75" cy="3006.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M27712.5469,3013.3244 Q27710.0625,3013.3244 27708.7344,3011.6838 Q27707.4219,3010.0119 27707.4219,3006.9025 Q27707.4219,3003.7775 27708.7344,3002.1213 Q27710.0625,3000.465 27712.5469,3000.465 Q27713.2656,3000.465 27713.9219,3000.6213 Q27714.5625,3000.7775 27715.125,3001.0744 L27715.125,3003.7931 Q27714.7656,3003.4494 27714.4688,3003.2619 Q27714.1719,3003.0588 27713.9063,3002.9338 Q27713.5938,3002.7931 27713.2813,3002.7306 Q27712.9844,3002.6681 27712.6719,3002.6681 Q27711.3438,3002.6681 27710.6563,3003.7306 Q27709.9688,3004.8244 27709.9688,3006.9025 Q27709.9688,3008.9963 27710.6563,3010.0588 Q27711.3438,3011.1369 27712.6719,3011.1369 Q27713.3125,3011.1369 27713.9063,3010.8556 Q27714.2031,3010.7306 27714.4844,3010.5431 Q27714.7813,3010.34 27715.125,3010.0119 L27715.125,3012.7306 Q27714.5469,3013.0275 27713.9063,3013.1838 Q27713.2813,3013.3244 27712.5469,3013.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="108" x="27733.25" y="3012.022">DrawTextHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="27076.5" x2="28465.5" y1="3022.59" y2="3022.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="27076.5" x2="28465.5" y1="3030.59" y2="3030.59"/><ellipse cx="27086.5" cy="3041.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="989" x="27095.5" y="3049.5559">drawCenteredText(const std::string&amp; text, const raylib::text::RlFont&amp; font, const Vector2f&amp; position, const RlColor&amp; color, const float&amp; spacing) : void</text><ellipse cx="27086.5" cy="3060.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1135" x="27095.5" y="3068.6239">drawCenteredText(const std::string&amp; text, const raylib::text::RlFont&amp; font, const Vector2f&amp; position, const float&amp; fontSize, const RlColor&amp; color, const float&amp; spacing) : void</text><ellipse cx="27086.5" cy="3079.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="371" x="27095.5" y="3087.6918">drawCenteredText(const raylib::text::RlText&amp; text) : void</text><ellipse cx="27086.5" cy="3098.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="372" x="27095.5" y="3106.7597">drawFps(const Vector2f&amp; pos, const int&amp; fontSize) : void</text><ellipse cx="27086.5" cy="3117.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="479" x="27095.5" y="3125.8276">drawFps(const float&amp; posX, const float&amp; posY, const int&amp; fontSize) : void</text><ellipse cx="27086.5" cy="3136.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="238" x="27095.5" y="3144.8955">drawFps(const Vector2f&amp; pos) : void</text><ellipse cx="27086.5" cy="3155.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="321" x="27095.5" y="3163.9634">drawFps(const int&amp; posX, const int&amp; posY) : void</text><ellipse cx="27086.5" cy="3175.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="676" x="27095.5" y="3183.0314">drawText(const std::string&amp; text, const Vector2f&amp; pos, const int&amp; fontSize, const RlColor&amp; color) : void</text><ellipse cx="27086.5" cy="3194.1333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="783" x="27095.5" y="3202.0993">drawText(const std::string&amp; text, const float&amp; posX, const float&amp; posY, const int&amp; fontSize, const RlColor&amp; color) : void</text><ellipse cx="27086.5" cy="3213.2013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="782" x="27095.5" y="3221.1672">drawText(const std::string&amp; text, const raylib::text::RlFont&amp; font, const Vector2f&amp; position, const RlColor&amp; color) : void</text><ellipse cx="27086.5" cy="3232.2692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1063" x="27095.5" y="3240.2351">drawText(const std::string&amp; text, const raylib::text::RlFont&amp; font, const Vector2f&amp; position, const float&amp; fontSize, const RlColor&amp; tint, const float&amp; spacing) : void</text><ellipse cx="27086.5" cy="3251.3371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1208" x="27095.5" y="3259.303">drawText(const std::string&amp; text, const raylib::text::RlFont&amp; font, const Vector2f&amp; position, const float&amp; rotation, const float&amp; fontSize, const RlColor&amp; tint, const float&amp; spacing) : void</text><ellipse cx="27086.5" cy="3270.405" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1220" x="27095.5" y="3278.3709">drawText(const std::string&amp; text, const raylib::text::RlFont&amp; font, const Vector2f&amp; position, const Vector2f&amp; origin, const float&amp; fontSize, const RlColor&amp; tint, const float&amp; spacing) : void</text><ellipse cx="27086.5" cy="3289.4729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1365" x="27095.5" y="3297.4389">drawText(const std::string&amp; text, const raylib::text::RlFont&amp; font, const Vector2f&amp; position, const Vector2f&amp; origin, const float&amp; rotation, const float&amp; fontSize, const RlColor&amp; tint, const float&amp; spacing) : void</text><ellipse cx="27086.5" cy="3308.5408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="623" x="27095.5" y="3316.5068">drawText(const raylib::text::RlText&amp; text, const Vector2f&amp; position, const RlColor&amp; color) : void</text><ellipse cx="27086.5" cy="3327.6088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="700" x="27095.5" y="3335.5747">drawText(const raylib::text::RlText&amp; text, const float&amp; posX, const float&amp; posY, const RlColor&amp; color) : void</text><ellipse cx="27086.5" cy="3346.6767" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="309" x="27095.5" y="3354.6426">drawText(const raylib::text::RlText&amp; text) : void</text><ellipse cx="27086.5" cy="3365.7446" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="967" x="27095.5" y="3373.7105">drawTextUsingCodepoint(const raylib::text::RlFont&amp; font, const int&amp; codepoint, const Vector2f&amp; position, float fontSize, const RlColor&amp; tint) : void</text></g><!--MD5=[e884ed1053af52c66226a9c3a06f0df3]
class raylib.helper.draw.DrawTextureHelper--><g id="elem_raylib.helper.draw.DrawTextureHelper"><rect codeLine="851" fill="#F1F1F1" height="219.6113" id="raylib.helper.draw.DrawTextureHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1207" x="28501.5" y="3076.09"/><ellipse cx="29035.25" cy="3092.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M29035.0469,3098.8244 Q29032.5625,3098.8244 29031.2344,3097.1838 Q29029.9219,3095.5119 29029.9219,3092.4025 Q29029.9219,3089.2775 29031.2344,3087.6213 Q29032.5625,3085.965 29035.0469,3085.965 Q29035.7656,3085.965 29036.4219,3086.1213 Q29037.0625,3086.2775 29037.625,3086.5744 L29037.625,3089.2931 Q29037.2656,3088.9494 29036.9688,3088.7619 Q29036.6719,3088.5588 29036.4063,3088.4338 Q29036.0938,3088.2931 29035.7813,3088.2306 Q29035.4844,3088.1681 29035.1719,3088.1681 Q29033.8438,3088.1681 29033.1563,3089.2306 Q29032.4688,3090.3244 29032.4688,3092.4025 Q29032.4688,3094.4963 29033.1563,3095.5588 Q29033.8438,3096.6369 29035.1719,3096.6369 Q29035.8125,3096.6369 29036.4063,3096.3556 Q29036.7031,3096.2306 29036.9844,3096.0431 Q29037.2813,3095.84 29037.625,3095.5119 L29037.625,3098.2306 Q29037.0469,3098.5275 29036.4063,3098.6838 Q29035.7813,3098.8244 29035.0469,3098.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="29055.75" y="3097.522">DrawTextureHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="28502.5" x2="29707.5" y1="3108.09" y2="3108.09"/><line style="stroke:#181818;stroke-width:0.5;" x1="28502.5" x2="29707.5" y1="3116.09" y2="3116.09"/><ellipse cx="28512.5" cy="3127.09" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="612" x="28521.5" y="3135.0559">drawTexture(const texture::RlTexture&amp; texture, int posX, int posY, const RlColor&amp; tint) : void</text><ellipse cx="28512.5" cy="3146.1579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="659" x="28521.5" y="3154.1239">drawTexture(const texture::RlTexture&amp; texture, const Vector2f&amp; position, const RlColor&amp; tint) : void</text><ellipse cx="28512.5" cy="3165.2258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="830" x="28521.5" y="3173.1918">drawTexture(const texture::RlTexture&amp; texture, const Vector2f&amp; position, float rotation, float scale, const RlColor&amp; tint) : void</text><ellipse cx="28512.5" cy="3184.2938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1072" x="28521.5" y="3192.2597">drawTexture(const texture::RlTexture&amp; texture, const Rectangle&amp; source, const Rectangle&amp; dest, const Vector2f&amp; origin, float rotation, const RlColor&amp; tint) : void</text><ellipse cx="28512.5" cy="3203.3617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1156" x="28521.5" y="3211.3276">drawTextureNPatch(const texture::RlTexture&amp; texture, const NPatchInfo&amp; nPatchInfo, const Rectangle&amp; dest, const Vector2f&amp; origin, float rotation, const RlColor&amp; tint) : void</text><ellipse cx="28512.5" cy="3222.4296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1148" x="28521.5" y="3230.3955">drawTexturePoly(const texture::RlTexture&amp; texture, const Vector2f&amp; center, const std::vector&lt;Vector2f&gt;&amp; points, std::vector&lt;Vector2f&gt;&amp; texcoords, const RlColor&amp; tint) : void</text><ellipse cx="28512.5" cy="3241.4975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="996" x="28521.5" y="3249.4634">drawTextureQuad(const texture::RlTexture&amp; texture, const Vector2f&amp; tiling, const Vector2f&amp; offset, const Rectangle&amp; quad, const RlColor&amp; tint) : void</text><ellipse cx="28512.5" cy="3260.5654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="857" x="28521.5" y="3268.5314">drawTextureRec(const texture::RlTexture&amp; texture, const Rectangle&amp; source, const Vector2f&amp; position, const RlColor&amp; tint) : void</text><ellipse cx="28512.5" cy="3279.6333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="1181" x="28521.5" y="3287.5993">drawTextureTiled(const texture::RlTexture&amp; texture, const Rectangle&amp; source, const Rectangle&amp; dest, const Vector2f&amp; origin, float rotation, float scale, const RlColor&amp; tint) : void</text></g><!--MD5=[09f67b4294edfd8b4f73926348b360ee]
class raylib.ex.BuilderException--><g id="elem_raylib.ex.BuilderException"><rect codeLine="866" fill="#F1F1F1" height="67.0679" id="raylib.ex.BuilderException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="300" x="20219" y="3152.59"/><ellipse cx="20307.75" cy="3168.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M20307.5469,3175.3244 Q20305.0625,3175.3244 20303.7344,3173.6838 Q20302.4219,3172.0119 20302.4219,3168.9025 Q20302.4219,3165.7775 20303.7344,3164.1213 Q20305.0625,3162.465 20307.5469,3162.465 Q20308.2656,3162.465 20308.9219,3162.6213 Q20309.5625,3162.7775 20310.125,3163.0744 L20310.125,3165.7931 Q20309.7656,3165.4494 20309.4688,3165.2619 Q20309.1719,3165.0588 20308.9063,3164.9338 Q20308.5938,3164.7931 20308.2813,3164.7306 Q20307.9844,3164.6681 20307.6719,3164.6681 Q20306.3438,3164.6681 20305.6563,3165.7306 Q20304.9688,3166.8244 20304.9688,3168.9025 Q20304.9688,3170.9963 20305.6563,3172.0588 Q20306.3438,3173.1369 20307.6719,3173.1369 Q20308.3125,3173.1369 20308.9063,3172.8556 Q20309.2031,3172.7306 20309.4844,3172.5431 Q20309.7813,3172.34 20310.125,3172.0119 L20310.125,3174.7306 Q20309.5469,3175.0275 20308.9063,3175.1838 Q20308.2813,3175.3244 20307.5469,3175.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="20328.25" y="3174.022">BuilderException</text><line style="stroke:#181818;stroke-width:0.5;" x1="20220" x2="20518" y1="3184.59" y2="3184.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="20220" x2="20518" y1="3192.59" y2="3192.59"/><ellipse cx="20230" cy="3203.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="274" x="20239" y="3211.5559">BuilderException(const std::string&amp; msg)</text></g><!--MD5=[4d93514fa9216e860f0c08082e90b7b8]
class raylib.ex.CameraException--><g id="elem_raylib.ex.CameraException"><rect codeLine="870" fill="#F1F1F1" height="67.0679" id="raylib.ex.CameraException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="334" x="20554" y="3152.59"/><ellipse cx="20658.25" cy="3168.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M20658.0469,3175.3244 Q20655.5625,3175.3244 20654.2344,3173.6838 Q20652.9219,3172.0119 20652.9219,3168.9025 Q20652.9219,3165.7775 20654.2344,3164.1213 Q20655.5625,3162.465 20658.0469,3162.465 Q20658.7656,3162.465 20659.4219,3162.6213 Q20660.0625,3162.7775 20660.625,3163.0744 L20660.625,3165.7931 Q20660.2656,3165.4494 20659.9688,3165.2619 Q20659.6719,3165.0588 20659.4063,3164.9338 Q20659.0938,3164.7931 20658.7813,3164.7306 Q20658.4844,3164.6681 20658.1719,3164.6681 Q20656.8438,3164.6681 20656.1563,3165.7306 Q20655.4688,3166.8244 20655.4688,3168.9025 Q20655.4688,3170.9963 20656.1563,3172.0588 Q20656.8438,3173.1369 20658.1719,3173.1369 Q20658.8125,3173.1369 20659.4063,3172.8556 Q20659.7031,3172.7306 20659.9844,3172.5431 Q20660.2813,3172.34 20660.625,3172.0119 L20660.625,3174.7306 Q20660.0469,3175.0275 20659.4063,3175.1838 Q20658.7813,3175.3244 20658.0469,3175.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="117" x="20678.75" y="3174.022">CameraException</text><line style="stroke:#181818;stroke-width:0.5;" x1="20555" x2="20887" y1="3184.59" y2="3184.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="20555" x2="20887" y1="3192.59" y2="3192.59"/><ellipse cx="20565" cy="3203.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="308" x="20574" y="3211.5559">CameraException(const std::string&amp; message)</text></g><!--MD5=[bd15cbd12d374606497c682a63ad01b2]
class raylib.ex.InvalidArgumentException--><g id="elem_raylib.ex.InvalidArgumentException"><rect codeLine="874" fill="#F1F1F1" height="67.0679" id="raylib.ex.InvalidArgumentException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="365" x="20922.5" y="3152.59"/><ellipse cx="21011.25" cy="3168.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M21011.0469,3175.3244 Q21008.5625,3175.3244 21007.2344,3173.6838 Q21005.9219,3172.0119 21005.9219,3168.9025 Q21005.9219,3165.7775 21007.2344,3164.1213 Q21008.5625,3162.465 21011.0469,3162.465 Q21011.7656,3162.465 21012.4219,3162.6213 Q21013.0625,3162.7775 21013.625,3163.0744 L21013.625,3165.7931 Q21013.2656,3165.4494 21012.9688,3165.2619 Q21012.6719,3165.0588 21012.4063,3164.9338 Q21012.0938,3164.7931 21011.7813,3164.7306 Q21011.4844,3164.6681 21011.1719,3164.6681 Q21009.8438,3164.6681 21009.1563,3165.7306 Q21008.4688,3166.8244 21008.4688,3168.9025 Q21008.4688,3170.9963 21009.1563,3172.0588 Q21009.8438,3173.1369 21011.1719,3173.1369 Q21011.8125,3173.1369 21012.4063,3172.8556 Q21012.7031,3172.7306 21012.9844,3172.5431 Q21013.2813,3172.34 21013.625,3172.0119 L21013.625,3174.7306 Q21013.0469,3175.0275 21012.4063,3175.1838 Q21011.7813,3175.3244 21011.0469,3175.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="179" x="21031.75" y="3174.022">InvalidArgumentException</text><line style="stroke:#181818;stroke-width:0.5;" x1="20923.5" x2="21286.5" y1="3184.59" y2="3184.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="20923.5" x2="21286.5" y1="3192.59" y2="3192.59"/><ellipse cx="20933.5" cy="3203.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="339" x="20942.5" y="3211.5559">InvalidArgumentException(const std::string&amp; msg)</text></g><!--MD5=[3b06a239824b813c3599b273f1e06ad1]
class raylib.ex.RaylibException--><g id="elem_raylib.ex.RaylibException"><rect codeLine="878" fill="#F1F1F1" height="105.2038" id="raylib.ex.RaylibException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="372" x="21119" y="2205.59"/><ellipse cx="21247.75" cy="2221.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M21247.5469,2228.3244 Q21245.0625,2228.3244 21243.7344,2226.6838 Q21242.4219,2225.0119 21242.4219,2221.9025 Q21242.4219,2218.7775 21243.7344,2217.1213 Q21245.0625,2215.465 21247.5469,2215.465 Q21248.2656,2215.465 21248.9219,2215.6213 Q21249.5625,2215.7775 21250.125,2216.0744 L21250.125,2218.7931 Q21249.7656,2218.4494 21249.4688,2218.2619 Q21249.1719,2218.0588 21248.9063,2217.9338 Q21248.5938,2217.7931 21248.2813,2217.7306 Q21247.9844,2217.6681 21247.6719,2217.6681 Q21246.3438,2217.6681 21245.6563,2218.7306 Q21244.9688,2219.8244 21244.9688,2221.9025 Q21244.9688,2223.9963 21245.6563,2225.0588 Q21246.3438,2226.1369 21247.6719,2226.1369 Q21248.3125,2226.1369 21248.9063,2225.8556 Q21249.2031,2225.7306 21249.4844,2225.5431 Q21249.7813,2225.34 21250.125,2225.0119 L21250.125,2227.7306 Q21249.5469,2228.0275 21248.9063,2228.1838 Q21248.2813,2228.3244 21247.5469,2228.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="106" x="21268.25" y="2227.022">RaylibException</text><line style="stroke:#181818;stroke-width:0.5;" x1="21120" x2="21490" y1="2237.59" y2="2237.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="21127" y="2245.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="21139" y="2256.5559">_msg : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="21120" x2="21490" y1="2264.6579" y2="2264.6579"/><ellipse cx="21130" cy="2275.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="346" x="21139" y="2283.6239">RaylibException(const std::string&amp; msg, bool prefix)</text><ellipse cx="21130" cy="2294.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="21139" y="2302.6918">what() : char* {query}</text></g><!--MD5=[7cae69f713c5407cbaf7b8e5175e0178]
class raylib.ex.RlAnimationException--><g id="elem_raylib.ex.RlAnimationException"><rect codeLine="884" fill="#F1F1F1" height="67.0679" id="raylib.ex.RlAnimationException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="364" x="21323" y="3152.59"/><ellipse cx="21427.25" cy="3168.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M21427.0469,3175.3244 Q21424.5625,3175.3244 21423.2344,3173.6838 Q21421.9219,3172.0119 21421.9219,3168.9025 Q21421.9219,3165.7775 21423.2344,3164.1213 Q21424.5625,3162.465 21427.0469,3162.465 Q21427.7656,3162.465 21428.4219,3162.6213 Q21429.0625,3162.7775 21429.625,3163.0744 L21429.625,3165.7931 Q21429.2656,3165.4494 21428.9688,3165.2619 Q21428.6719,3165.0588 21428.4063,3164.9338 Q21428.0938,3164.7931 21427.7813,3164.7306 Q21427.4844,3164.6681 21427.1719,3164.6681 Q21425.8438,3164.6681 21425.1563,3165.7306 Q21424.4688,3166.8244 21424.4688,3168.9025 Q21424.4688,3170.9963 21425.1563,3172.0588 Q21425.8438,3173.1369 21427.1719,3173.1369 Q21427.8125,3173.1369 21428.4063,3172.8556 Q21428.7031,3172.7306 21428.9844,3172.5431 Q21429.2813,3172.34 21429.625,3172.0119 L21429.625,3174.7306 Q21429.0469,3175.0275 21428.4063,3175.1838 Q21427.7813,3175.3244 21427.0469,3175.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="147" x="21447.75" y="3174.022">RlAnimationException</text><line style="stroke:#181818;stroke-width:0.5;" x1="21324" x2="21686" y1="3184.59" y2="3184.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="21324" x2="21686" y1="3192.59" y2="3192.59"/><ellipse cx="21334" cy="3203.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="338" x="21343" y="3211.5559">RlAnimationException(const std::string&amp; message)</text></g><!--MD5=[6a9519d46412c1798291b18570074c52]
class raylib.ex.RlModelException--><g id="elem_raylib.ex.RlModelException"><rect codeLine="888" fill="#F1F1F1" height="67.0679" id="raylib.ex.RlModelException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="337" x="21722.5" y="3152.59"/><ellipse cx="21826.75" cy="3168.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M21826.5469,3175.3244 Q21824.0625,3175.3244 21822.7344,3173.6838 Q21821.4219,3172.0119 21821.4219,3168.9025 Q21821.4219,3165.7775 21822.7344,3164.1213 Q21824.0625,3162.465 21826.5469,3162.465 Q21827.2656,3162.465 21827.9219,3162.6213 Q21828.5625,3162.7775 21829.125,3163.0744 L21829.125,3165.7931 Q21828.7656,3165.4494 21828.4688,3165.2619 Q21828.1719,3165.0588 21827.9063,3164.9338 Q21827.5938,3164.7931 21827.2813,3164.7306 Q21826.9844,3164.6681 21826.6719,3164.6681 Q21825.3438,3164.6681 21824.6563,3165.7306 Q21823.9688,3166.8244 21823.9688,3168.9025 Q21823.9688,3170.9963 21824.6563,3172.0588 Q21825.3438,3173.1369 21826.6719,3173.1369 Q21827.3125,3173.1369 21827.9063,3172.8556 Q21828.2031,3172.7306 21828.4844,3172.5431 Q21828.7813,3172.34 21829.125,3172.0119 L21829.125,3174.7306 Q21828.5469,3175.0275 21827.9063,3175.1838 Q21827.2813,3175.3244 21826.5469,3175.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="21847.25" y="3174.022">RlModelException</text><line style="stroke:#181818;stroke-width:0.5;" x1="21723.5" x2="22058.5" y1="3184.59" y2="3184.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="21723.5" x2="22058.5" y1="3192.59" y2="3192.59"/><ellipse cx="21733.5" cy="3203.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="311" x="21742.5" y="3211.5559">RlModelException(const std::string&amp; message)</text></g><!--MD5=[374ef434073c24a094f825153c564bf2]
class raylib.ex.WindowException--><g id="elem_raylib.ex.WindowException"><rect codeLine="892" fill="#F1F1F1" height="67.0679" id="raylib.ex.WindowException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="305" x="22094.5" y="3152.59"/><ellipse cx="22183.25" cy="3168.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M22183.0469,3175.3244 Q22180.5625,3175.3244 22179.2344,3173.6838 Q22177.9219,3172.0119 22177.9219,3168.9025 Q22177.9219,3165.7775 22179.2344,3164.1213 Q22180.5625,3162.465 22183.0469,3162.465 Q22183.7656,3162.465 22184.4219,3162.6213 Q22185.0625,3162.7775 22185.625,3163.0744 L22185.625,3165.7931 Q22185.2656,3165.4494 22184.9688,3165.2619 Q22184.6719,3165.0588 22184.4063,3164.9338 Q22184.0938,3164.7931 22183.7813,3164.7306 Q22183.4844,3164.6681 22183.1719,3164.6681 Q22181.8438,3164.6681 22181.1563,3165.7306 Q22180.4688,3166.8244 22180.4688,3168.9025 Q22180.4688,3170.9963 22181.1563,3172.0588 Q22181.8438,3173.1369 22183.1719,3173.1369 Q22183.8125,3173.1369 22184.4063,3172.8556 Q22184.7031,3172.7306 22184.9844,3172.5431 Q22185.2813,3172.34 22185.625,3172.0119 L22185.625,3174.7306 Q22185.0469,3175.0275 22184.4063,3175.1838 Q22183.7813,3175.3244 22183.0469,3175.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="119" x="22203.75" y="3174.022">WindowException</text><line style="stroke:#181818;stroke-width:0.5;" x1="22095.5" x2="22398.5" y1="3184.59" y2="3184.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="22095.5" x2="22398.5" y1="3192.59" y2="3192.59"/><ellipse cx="22105.5" cy="3203.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="279" x="22114.5" y="3211.5559">WindowException(const std::string&amp; msg)</text></g><!--MD5=[745590256b95e9da45dcf0ef304f0520]
class raylib.builder.IBuilder--><g id="elem_raylib.builder.IBuilder"><rect codeLine="898" fill="#F1F1F1" height="67.0679" id="raylib.builder.IBuilder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="211" x="11226.5" y="2224.59"/><ellipse cx="11241.5" cy="2240.59" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M11240.125,2233.9494 L11243.1094,2233.9494 L11246.4688,2246.34 L11244.0156,2246.34 L11243.25,2243.2775 L11239.9688,2243.2775 L11239.2188,2246.34 L11236.7813,2246.34 L11240.125,2233.9494 Z M11242.7813,2241.2619 L11241.6094,2236.1838 L11240.4531,2241.2619 L11242.7813,2241.2619 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="50" x="11255.5" y="2246.022">IBuilder</text><rect fill="#FFFFFF" height="18.3441" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="127" x="11313.5" y="2221.59"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="125" x="11314.5" y="2235.4181">template&lt;typename T&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="11227.5" x2="11436.5" y1="2256.59" y2="2256.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="11227.5" x2="11436.5" y1="2264.59" y2="2264.59"/><ellipse cx="11237.5" cy="2275.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="59" x="11246.5" y="2283.5559">build() : T</text></g><!--MD5=[806b130846df0b1593a3fee07e478ddf]
class raylib.builder.RlCameraBuilder--><g id="elem_raylib.builder.RlCameraBuilder"><rect codeLine="902" fill="#F1F1F1" height="314.9508" id="raylib.builder.RlCameraBuilder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="468" x="10173" y="3028.59"/><ellipse cx="10345.75" cy="3044.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M10345.5469,3051.3244 Q10343.0625,3051.3244 10341.7344,3049.6838 Q10340.4219,3048.0119 10340.4219,3044.9025 Q10340.4219,3041.7775 10341.7344,3040.1213 Q10343.0625,3038.465 10345.5469,3038.465 Q10346.2656,3038.465 10346.9219,3038.6213 Q10347.5625,3038.7775 10348.125,3039.0744 L10348.125,3041.7931 Q10347.7656,3041.4494 10347.4688,3041.2619 Q10347.1719,3041.0588 10346.9063,3040.9338 Q10346.5938,3040.7931 10346.2813,3040.7306 Q10345.9844,3040.6681 10345.6719,3040.6681 Q10344.3438,3040.6681 10343.6563,3041.7306 Q10342.9688,3042.8244 10342.9688,3044.9025 Q10342.9688,3046.9963 10343.6563,3048.0588 Q10344.3438,3049.1369 10345.6719,3049.1369 Q10346.3125,3049.1369 10346.9063,3048.8556 Q10347.2031,3048.7306 10347.4844,3048.5431 Q10347.7813,3048.34 10348.125,3048.0119 L10348.125,3050.7306 Q10347.5469,3051.0275 10346.9063,3051.1838 Q10346.2813,3051.3244 10345.5469,3051.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="10366.25" y="3050.022">RlCameraBuilder</text><line style="stroke:#181818;stroke-width:0.5;" x1="10174" x2="10640" y1="3060.59" y2="3060.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10181" y="3068.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="10193" y="3079.5559">_cameraMode : CameraMode</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10181" y="3087.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="10193" y="3098.6239">_projection : CameraProjection</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10181" y="3106.7258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="10193" y="3117.6918">_lookingPoint : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10181" y="3125.7938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="10193" y="3136.7597">_position : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10181" y="3144.8617"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="10193" y="3155.8276">_target : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10181" y="3163.9296"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="10193" y="3174.8955">_fovy : float</text><line style="stroke:#181818;stroke-width:0.5;" x1="10174" x2="10640" y1="3182.9975" y2="3182.9975"/><ellipse cx="10184" cy="3193.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="122" x="10193" y="3201.9634">RlCameraBuilder()</text><ellipse cx="10184" cy="3213.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="10193" y="3221.0314">build() : RlCamera</text><ellipse cx="10184" cy="3232.1333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="436" x="10193" y="3240.0993">setCameraMode(CameraMode cameraMode) : RlCameraBuilder&amp;</text><ellipse cx="10184" cy="3251.2013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="254" x="10193" y="3259.1672">setFovy(float fovy) : RlCameraBuilder&amp;</text><ellipse cx="10184" cy="3270.2692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="442" x="10193" y="3278.2351">setLookingPoint(const Vector3f&amp; lookingPoint) : RlCameraBuilder&amp;</text><ellipse cx="10184" cy="3289.3371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="380" x="10193" y="3297.303">setPosition(const Vector3f&amp; position) : RlCameraBuilder&amp;</text><ellipse cx="10184" cy="3308.405" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="422" x="10193" y="3316.3709">setProjection(CameraProjection projection) : RlCameraBuilder&amp;</text><ellipse cx="10184" cy="3327.4729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="358" x="10193" y="3335.4389">setTarget(const Vector3f&amp; target) : RlCameraBuilder&amp;</text></g><!--MD5=[81e0877a4882158be22e698a9e5257e4]
class raylib.builder.RlImageBuilder--><g id="elem_raylib.builder.RlImageBuilder"><rect codeLine="919" fill="#F1F1F1" height="753.5129" id="raylib.builder.RlImageBuilder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="379" x="10676.5" y="2809.09"/><ellipse cx="10809.25" cy="2825.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M10809.0469,2831.8244 Q10806.5625,2831.8244 10805.2344,2830.1838 Q10803.9219,2828.5119 10803.9219,2825.4025 Q10803.9219,2822.2775 10805.2344,2820.6213 Q10806.5625,2818.965 10809.0469,2818.965 Q10809.7656,2818.965 10810.4219,2819.1213 Q10811.0625,2819.2775 10811.625,2819.5744 L10811.625,2822.2931 Q10811.2656,2821.9494 10810.9688,2821.7619 Q10810.6719,2821.5588 10810.4063,2821.4338 Q10810.0938,2821.2931 10809.7813,2821.2306 Q10809.4844,2821.1681 10809.1719,2821.1681 Q10807.8438,2821.1681 10807.1563,2822.2306 Q10806.4688,2823.3244 10806.4688,2825.4025 Q10806.4688,2827.4963 10807.1563,2828.5588 Q10807.8438,2829.6369 10809.1719,2829.6369 Q10809.8125,2829.6369 10810.4063,2829.3556 Q10810.7031,2829.2306 10810.9844,2829.0431 Q10811.2813,2828.84 10811.625,2828.5119 L10811.625,2831.2306 Q10811.0469,2831.5275 10810.4063,2831.6838 Q10809.7813,2831.8244 10809.0469,2831.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="105" x="10829.75" y="2830.522">RlImageBuilder</text><line style="stroke:#181818;stroke-width:0.5;" x1="10677.5" x2="11054.5" y1="2841.09" y2="2841.09"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10684.5" y="2849.09"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="10696.5" y="2860.0559">_bottom : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10684.5" y="2868.1579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="93" x="10696.5" y="2879.1239">_col1 : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10684.5" y="2887.2258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="93" x="10696.5" y="2898.1918">_col2 : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10684.5" y="2906.2938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="10696.5" y="2917.2597">_color : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10684.5" y="2925.3617"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="10696.5" y="2936.3276">_inner : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10684.5" y="2944.4296"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="88" x="10696.5" y="2955.3955">_left : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10684.5" y="2963.4975"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="10696.5" y="2974.4634">_outer : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10684.5" y="2982.5654"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="10696.5" y="2993.5314">_right : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10684.5" y="3001.6333"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="88" x="10696.5" y="3012.5993">_top : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10684.5" y="3020.7013"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="10696.5" y="3031.6672">_density : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10684.5" y="3039.7692"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="87" x="10696.5" y="3050.7351">_factor : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10684.5" y="3058.8371"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="10696.5" y="3069.803">_checksX : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10684.5" y="3077.905"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="10696.5" y="3088.8709">_checksY : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10684.5" y="3096.9729"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="10696.5" y="3107.9389">_height : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10684.5" y="3116.0408"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="10696.5" y="3127.0068">_titleSize : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10684.5" y="3135.1088"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="10696.5" y="3146.0747">_width : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10684.5" y="3154.1767"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="81" x="10696.5" y="3165.1426">_flags : long</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10684.5" y="3173.2446"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="10696.5" y="3184.2105">_type : long</text><line style="stroke:#181818;stroke-width:0.5;" x1="10677.5" x2="11054.5" y1="3192.3125" y2="3192.3125"/><ellipse cx="10687.5" cy="3203.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="10696.5" y="3211.2784">RlImageBuilder()</text><ellipse cx="10687.5" cy="3222.3804" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="353" x="10696.5" y="3230.3464">setBottom(const RlColor&amp; bottom) : RlImageBuilder&amp;</text><ellipse cx="10687.5" cy="3241.4483" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="335" x="10696.5" y="3249.4143">setChecksX(const int&amp; checksX) : RlImageBuilder&amp;</text><ellipse cx="10687.5" cy="3260.5163" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="335" x="10696.5" y="3268.4822">setChecksY(const int&amp; checksY) : RlImageBuilder&amp;</text><ellipse cx="10687.5" cy="3279.5842" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="10696.5" y="3287.5501">setCol1(const RlColor&amp; col1) : RlImageBuilder&amp;</text><ellipse cx="10687.5" cy="3298.6521" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="10696.5" y="3306.618">setCol2(const RlColor&amp; col2) : RlImageBuilder&amp;</text><ellipse cx="10687.5" cy="3317.72" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="325" x="10696.5" y="3325.6859">setColor(const RlColor&amp; color) : RlImageBuilder&amp;</text><ellipse cx="10687.5" cy="3336.7879" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="338" x="10696.5" y="3344.7539">setDensity(const float&amp; density) : RlImageBuilder&amp;</text><ellipse cx="10687.5" cy="3355.8558" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="319" x="10696.5" y="3363.8218">setFactor(const float&amp; factor) : RlImageBuilder&amp;</text><ellipse cx="10687.5" cy="3374.9238" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="316" x="10696.5" y="3382.8897">setHeight(const int&amp; height) : RlImageBuilder&amp;</text><ellipse cx="10687.5" cy="3393.9917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="330" x="10696.5" y="3401.9576">setInner(const RlColor&amp; inner) : RlImageBuilder&amp;</text><ellipse cx="10687.5" cy="3413.0596" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="304" x="10696.5" y="3421.0255">setLeft(const RlColor&amp; left) : RlImageBuilder&amp;</text><ellipse cx="10687.5" cy="3432.1275" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="332" x="10696.5" y="3440.0934">setOuter(const RlColor&amp; outer) : RlImageBuilder&amp;</text><ellipse cx="10687.5" cy="3451.1954" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="326" x="10696.5" y="3459.1614">setRight(const RlColor&amp; right) : RlImageBuilder&amp;</text><ellipse cx="10687.5" cy="3470.2633" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="336" x="10696.5" y="3478.2293">setTitleSize(const int&amp; titleSize) : RlImageBuilder&amp;</text><ellipse cx="10687.5" cy="3489.3313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="304" x="10696.5" y="3497.2972">setTop(const RlColor&amp; top) : RlImageBuilder&amp;</text><ellipse cx="10687.5" cy="3508.3992" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="295" x="10696.5" y="3516.3651">setType(ImageType type) : RlImageBuilder&amp;</text><ellipse cx="10687.5" cy="3527.4671" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="305" x="10696.5" y="3535.433">setWidth(const int&amp; width) : RlImageBuilder&amp;</text><ellipse cx="10687.5" cy="3546.535" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="207" x="10696.5" y="3554.5009">build() : raylib::image::RlImage</text></g><!--MD5=[3b7ecc343caed62a40870f10057519fe]
class raylib.builder.RlMeshBuilder--><g id="elem_raylib.builder.RlMeshBuilder"><rect codeLine="959" fill="#F1F1F1" height="772.5808" id="raylib.builder.RlMeshBuilder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="484" x="11090" y="2799.59"/><ellipse cx="11278.25" cy="2815.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M11278.0469,2822.3244 Q11275.5625,2822.3244 11274.2344,2820.6838 Q11272.9219,2819.0119 11272.9219,2815.9025 Q11272.9219,2812.7775 11274.2344,2811.1213 Q11275.5625,2809.465 11278.0469,2809.465 Q11278.7656,2809.465 11279.4219,2809.6213 Q11280.0625,2809.7775 11280.625,2810.0744 L11280.625,2812.7931 Q11280.2656,2812.4494 11279.9688,2812.2619 Q11279.6719,2812.0588 11279.4063,2811.9338 Q11279.0938,2811.7931 11278.7813,2811.7306 Q11278.4844,2811.6681 11278.1719,2811.6681 Q11276.8438,2811.6681 11276.1563,2812.7306 Q11275.4688,2813.8244 11275.4688,2815.9025 Q11275.4688,2817.9963 11276.1563,2819.0588 Q11276.8438,2820.1369 11278.1719,2820.1369 Q11278.8125,2820.1369 11279.4063,2819.8556 Q11279.7031,2819.7306 11279.9844,2819.5431 Q11280.2813,2819.34 11280.625,2819.0119 L11280.625,2821.7306 Q11280.0469,2822.0275 11279.4063,2822.1838 Q11278.7813,2822.3244 11278.0469,2822.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="11298.75" y="2821.022">RlMeshBuilder</text><line style="stroke:#181818;stroke-width:0.5;" x1="11091" x2="11573" y1="2831.59" y2="2831.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11098" y="2839.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="133" x="11110" y="2850.5559">_cubeSize : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11098" y="2858.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="135" x="11110" y="2869.6239">_vec3fSize : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11098" y="2877.7258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="92" x="11110" y="2888.6918">_height : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11098" y="2896.7938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="92" x="11110" y="2907.7597">_length : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11098" y="2915.8617"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="91" x="11110" y="2926.8276">_radius : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11098" y="2934.9296"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="11110" y="2945.8955">_size : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11098" y="2953.9975"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="11110" y="2964.9634">_width : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11098" y="2973.0654"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="190" x="11110" y="2984.0314">_cubicmap : image::RlImage</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11098" y="2992.1333"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="198" x="11110" y="3003.0993">_heightmap : image::RlImage</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11098" y="3011.2013"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="84" x="11110" y="3022.1672">_radSeg : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11098" y="3030.2692"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="65" x="11110" y="3041.2351">_resX : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11098" y="3049.3371"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="65" x="11110" y="3060.303">_resZ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11098" y="3068.405"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="11110" y="3079.3709">_rings : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11098" y="3087.4729"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="11110" y="3098.4389">_sides : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11098" y="3106.5408"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="11110" y="3117.5068">_slices : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11098" y="3125.6088"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="81" x="11110" y="3136.5747">_flags : long</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11098" y="3144.6767"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="11110" y="3155.6426">_type : long</text><line style="stroke:#181818;stroke-width:0.5;" x1="11091" x2="11573" y1="3163.7446" y2="3163.7446"/><ellipse cx="11101" cy="3174.7446" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="11110" y="3182.7105">RlMeshBuilder()</text><ellipse cx="11101" cy="3193.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="330" x="11110" y="3201.7784">setConeSlices(const int&amp; slices) : RlMeshBuilder&amp;</text><ellipse cx="11101" cy="3212.8804" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="380" x="11110" y="3220.8464">setCubeSize(const Vector3f&amp; cubeSize) : RlMeshBuilder&amp;</text><ellipse cx="11101" cy="3231.9483" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="443" x="11110" y="3239.9143">setCubicmap(const image::RlImage&amp; cubicmap) : RlMeshBuilder&amp;</text><ellipse cx="11101" cy="3251.0163" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="322" x="11110" y="3258.9822">setHeight(const float&amp; height) : RlMeshBuilder&amp;</text><ellipse cx="11101" cy="3270.0842" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="458" x="11110" y="3278.0501">setHeightmap(const image::RlImage&amp; heightmap) : RlMeshBuilder&amp;</text><ellipse cx="11101" cy="3289.1521" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="376" x="11110" y="3297.118">setHemisphereRings(const int&amp; rings) : RlMeshBuilder&amp;</text><ellipse cx="11101" cy="3308.22" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="351" x="11110" y="3316.1859">setKnotRadSeg(const int&amp; radSeg) : RlMeshBuilder&amp;</text><ellipse cx="11101" cy="3327.2879" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="324" x="11110" y="3335.2539">setLength(const float&amp; length) : RlMeshBuilder&amp;</text><ellipse cx="11101" cy="3346.3558" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="360" x="11110" y="3354.3218">setMeshType(MeshType meshType) : RlMeshBuilder&amp;</text><ellipse cx="11101" cy="3365.4238" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="320" x="11110" y="3373.3897">setRadSeg(const int&amp; radSeg) : RlMeshBuilder&amp;</text><ellipse cx="11101" cy="3384.4917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="322" x="11110" y="3392.4576">setRadius(const float&amp; radius) : RlMeshBuilder&amp;</text><ellipse cx="11101" cy="3403.5596" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="282" x="11110" y="3411.5255">setResX(const int&amp; resX) : RlMeshBuilder&amp;</text><ellipse cx="11101" cy="3422.6275" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="282" x="11110" y="3430.5934">setResZ(const int&amp; resZ) : RlMeshBuilder&amp;</text><ellipse cx="11101" cy="3441.6954" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="294" x="11110" y="3449.6614">setRings(const int&amp; rings) : RlMeshBuilder&amp;</text><ellipse cx="11101" cy="3460.7633" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="292" x="11110" y="3468.7293">setSides(const int&amp; sides) : RlMeshBuilder&amp;</text><ellipse cx="11101" cy="3479.8313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="286" x="11110" y="3487.7972">setSize(const float&amp; size) : RlMeshBuilder&amp;</text><ellipse cx="11101" cy="3498.8992" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="296" x="11110" y="3506.8651">setSlices(const int&amp; slices) : RlMeshBuilder&amp;</text><ellipse cx="11101" cy="3517.9671" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="347" x="11110" y="3525.933">setVec3fSize(const Vector3f&amp; size) : RlMeshBuilder&amp;</text><ellipse cx="11101" cy="3537.035" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="311" x="11110" y="3545.0009">setWidth(const float&amp; width) : RlMeshBuilder&amp;</text><ellipse cx="11101" cy="3556.1029" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="155" x="11110" y="3564.0689">build() : model::RlMesh</text></g><!--MD5=[00e79b1a3b0446364c705889fb3ec78f]
class raylib.builder.RlModelBuilder--><g id="elem_raylib.builder.RlModelBuilder"><rect codeLine="1000" fill="#F1F1F1" height="543.7658" id="raylib.builder.RlModelBuilder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="572" x="11609" y="2914.09"/><ellipse cx="11838.75" cy="2930.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M11838.5469,2936.8244 Q11836.0625,2936.8244 11834.7344,2935.1838 Q11833.4219,2933.5119 11833.4219,2930.4025 Q11833.4219,2927.2775 11834.7344,2925.6213 Q11836.0625,2923.965 11838.5469,2923.965 Q11839.2656,2923.965 11839.9219,2924.1213 Q11840.5625,2924.2775 11841.125,2924.5744 L11841.125,2927.2931 Q11840.7656,2926.9494 11840.4688,2926.7619 Q11840.1719,2926.5588 11839.9063,2926.4338 Q11839.5938,2926.2931 11839.2813,2926.2306 Q11838.9844,2926.1681 11838.6719,2926.1681 Q11837.3438,2926.1681 11836.6563,2927.2306 Q11835.9688,2928.3244 11835.9688,2930.4025 Q11835.9688,2932.4963 11836.6563,2933.5588 Q11837.3438,2934.6369 11838.6719,2934.6369 Q11839.3125,2934.6369 11839.9063,2934.3556 Q11840.2031,2934.2306 11840.4844,2934.0431 Q11840.7813,2933.84 11841.125,2933.5119 L11841.125,2936.2306 Q11840.5469,2936.5275 11839.9063,2936.6838 Q11839.2813,2936.8244 11838.5469,2936.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="104" x="11859.25" y="2935.522">RlModelBuilder</text><line style="stroke:#181818;stroke-width:0.5;" x1="11610" x2="12180" y1="2946.09" y2="2946.09"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11617" y="2954.09"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="198" x="11629" y="2965.0559">_boundingBox : BoundingBox</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11617" y="2973.1579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="11629" y="2984.1239">_color : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11617" y="2992.2258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="11629" y="3003.1918">_position : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11617" y="3011.2938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="11629" y="3022.2597">_rotationAxis : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11617" y="3030.3617"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="11629" y="3041.3276">_scale : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11617" y="3049.4296"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="158" x="11629" y="3060.3955">_boundingBoxSet : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11617" y="3068.4975"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="140" x="11629" y="3079.4634">_rotationAngle : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11617" y="3087.5654"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="81" x="11629" y="3098.5314">_flags : long</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11617" y="3106.6333"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="280" x="11629" y="3117.5993">_validTypes : static std::vector&lt;ValidType&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11617" y="3125.7013"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="319" x="11629" y="3136.6672">_mesh : std::shared_ptr&lt;raylib::model::RlMesh&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11617" y="3144.7692"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="304" x="11629" y="3155.7351">_texture : std::shared_ptr&lt;texture::RlTexture&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11617" y="3163.8371"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="159" x="11629" y="3174.803">_modelPath : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11617" y="3182.905"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="165" x="11629" y="3193.8709">_texturePath : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="11610" x2="12180" y1="3201.9729" y2="3201.9729"/><ellipse cx="11620" cy="3212.9729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="11629" y="3220.9389">RlModelBuilder()</text><ellipse cx="11620" cy="3232.0408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="416" x="11629" y="3240.0068">setRotationAxis(const Vector3f&amp; rotationAxis) : RlModelBuilder</text><ellipse cx="11620" cy="3251.1088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="478" x="11629" y="3259.0747">setBoundingBox(const BoundingBox&amp; boundingBox) : RlModelBuilder&amp;</text><ellipse cx="11620" cy="3270.1767" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="324" x="11629" y="3278.1426">setColor(const RlColor&amp; color) : RlModelBuilder&amp;</text><ellipse cx="11620" cy="3289.2446" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="546" x="11629" y="3297.2105">setMesh(const std::shared_ptr&lt;raylib::model::RlMesh&gt;&amp; mesh) : RlModelBuilder&amp;</text><ellipse cx="11620" cy="3308.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="428" x="11629" y="3316.2784">setMesh(const raylib::model::RlMesh&amp; mesh) : RlModelBuilder&amp;</text><ellipse cx="11620" cy="3327.3804" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="421" x="11629" y="3335.3464">setModelPath(const std::string&amp; modelPath) : RlModelBuilder&amp;</text><ellipse cx="11620" cy="3346.4483" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="370" x="11629" y="3354.4143">setPosition(const Vector3f&amp; position) : RlModelBuilder&amp;</text><ellipse cx="11620" cy="3365.5163" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="425" x="11629" y="3373.4822">setRotationAngle(const float&amp; rotationAngle) : RlModelBuilder&amp;</text><ellipse cx="11620" cy="3384.5842" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="332" x="11629" y="3392.5501">setScale(const Vector3f&amp; scale) : RlModelBuilder&amp;</text><ellipse cx="11620" cy="3403.6521" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="545" x="11629" y="3411.618">setTexture(const std::shared_ptr&lt;texture::RlTexture&gt;&amp; texture) : RlModelBuilder&amp;</text><ellipse cx="11620" cy="3422.72" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="436" x="11629" y="3430.6859">setTexturePath(const std::string&amp; texturePath) : RlModelBuilder&amp;</text><ellipse cx="11620" cy="3441.7879" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="206" x="11629" y="3449.7539">build() : raylib::model::RlModel</text></g><!--MD5=[29538f7755bd2325990f0c2ee99bf13e]
class raylib.builder.RlTextBuilder--><g id="elem_raylib.builder.RlTextBuilder"><rect codeLine="1029" fill="#F1F1F1" height="505.63" id="raylib.builder.RlTextBuilder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="515" x="12216.5" y="2933.09"/><ellipse cx="12424.75" cy="2949.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M12424.5469,2955.8244 Q12422.0625,2955.8244 12420.7344,2954.1838 Q12419.4219,2952.5119 12419.4219,2949.4025 Q12419.4219,2946.2775 12420.7344,2944.6213 Q12422.0625,2942.965 12424.5469,2942.965 Q12425.2656,2942.965 12425.9219,2943.1213 Q12426.5625,2943.2775 12427.125,2943.5744 L12427.125,2946.2931 Q12426.7656,2945.9494 12426.4688,2945.7619 Q12426.1719,2945.5588 12425.9063,2945.4338 Q12425.5938,2945.2931 12425.2813,2945.2306 Q12424.9844,2945.1681 12424.6719,2945.1681 Q12423.3438,2945.1681 12422.6563,2946.2306 Q12421.9688,2947.3244 12421.9688,2949.4025 Q12421.9688,2951.4963 12422.6563,2952.5588 Q12423.3438,2953.6369 12424.6719,2953.6369 Q12425.3125,2953.6369 12425.9063,2953.3556 Q12426.2031,2953.2306 12426.4844,2953.0431 Q12426.7813,2952.84 12427.125,2952.5119 L12427.125,2955.2306 Q12426.5469,2955.5275 12425.9063,2955.6838 Q12425.2813,2955.8244 12424.5469,2955.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="12445.25" y="2954.522">RlTextBuilder</text><line style="stroke:#181818;stroke-width:0.5;" x1="12217.5" x2="12730.5" y1="2965.09" y2="2965.09"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12224.5" y="2973.09"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="12236.5" y="2984.0559">_color : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12224.5" y="2992.1579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="12236.5" y="3003.1239">_origin : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12224.5" y="3011.2258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="12236.5" y="3022.1918">_position : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12224.5" y="3030.2938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="12236.5" y="3041.2597">_isFontPathSet : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12224.5" y="3049.3617"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="108" x="12236.5" y="3060.3276">_isFontSet : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12224.5" y="3068.4296"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="135" x="12236.5" y="3079.3955">_isFontSizeSet : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12224.5" y="3087.4975"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="12236.5" y="3098.4634">_isTextSet : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12224.5" y="3106.5654"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="12236.5" y="3117.5314">_fontSize : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12224.5" y="3125.6333"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="12236.5" y="3136.5993">_rotation : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12224.5" y="3144.7013"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="12236.5" y="3155.6672">_textSpacing : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12224.5" y="3163.7692"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="284" x="12236.5" y="3174.7351">_font : std::shared_ptr&lt;raylib::text::RlFont&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12224.5" y="3182.8371"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="12236.5" y="3193.803">_fontPath : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12224.5" y="3201.905"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="12236.5" y="3212.8709">_text : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="12217.5" x2="12730.5" y1="3220.9729" y2="3220.9729"/><ellipse cx="12227.5" cy="3231.9729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="12236.5" y="3239.9389">RlTextBuilder()</text><ellipse cx="12227.5" cy="3251.0408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="310" x="12236.5" y="3259.0068">setColor(const RlColor&amp; color) : RlTextBuilder&amp;</text><ellipse cx="12227.5" cy="3270.1088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="489" x="12236.5" y="3278.0747">setFont(const std::shared_ptr&lt;raylib::text::RlFont&gt;&amp; font) : RlTextBuilder&amp;</text><ellipse cx="12227.5" cy="3289.1767" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="379" x="12236.5" y="3297.1426">setFontPath(const std::string&amp; fontPath) : RlTextBuilder&amp;</text><ellipse cx="12227.5" cy="3308.2446" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="334" x="12236.5" y="3316.2105">setFontSize(const float&amp; fontSize) : RlTextBuilder&amp;</text><ellipse cx="12227.5" cy="3327.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="332" x="12236.5" y="3335.2784">setOrigin(const Vector2f&amp; origin) : RlTextBuilder&amp;</text><ellipse cx="12227.5" cy="3346.3804" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="356" x="12236.5" y="3354.3464">setPosition(const Vector2f&amp; position) : RlTextBuilder&amp;</text><ellipse cx="12227.5" cy="3365.4483" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="333" x="12236.5" y="3373.4143">setRotation(const float&amp; rotation) : RlTextBuilder&amp;</text><ellipse cx="12227.5" cy="3384.5163" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="331" x="12236.5" y="3392.4822">setSpacing(const float&amp; spacing) : RlTextBuilder&amp;</text><ellipse cx="12227.5" cy="3403.5842" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="316" x="12236.5" y="3411.5501">setText(const std::string&amp; text) : RlTextBuilder&amp;</text><ellipse cx="12227.5" cy="3422.6521" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="12236.5" y="3430.618">build() : raylib::text::RlText</text></g><!--MD5=[2f92eb9eddbb53a77ac8fa899ba3ae23]
class raylib.builder.RlImageBuilder::ImageType--><g id="elem_raylib.builder.RlImageBuilder::ImageType"><rect codeLine="1056" fill="#F1F1F1" height="181.4754" id="raylib.builder.RlImageBuilder::ImageType" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="220" x="10508" y="4100.09"/><ellipse cx="10523" cy="4116.09" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M10519.3906,4110.1994 L10527.1094,4110.1994 L10527.1094,4112.3556 L10521.8438,4112.3556 L10521.8438,4115.0275 L10526.6094,4115.0275 L10526.6094,4117.1838 L10521.8438,4117.1838 L10521.8438,4120.4338 L10527.1094,4120.4338 L10527.1094,4122.59 L10519.3906,4122.59 L10519.3906,4110.1994 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="10537" y="4121.522">RlImageBuilder::ImageType</text><line style="stroke:#181818;stroke-width:0.5;" x1="10509" x2="10727" y1="4132.09" y2="4132.09"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="10514" y="4151.0559">ImageCellular</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="10514" y="4170.1239">ImageChecked</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="78" x="10514" y="4189.1918">ImageColor</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="10514" y="4208.2597">ImageGradientH</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="10514" y="4227.3276">ImageGradientRadial</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="10514" y="4246.3955">ImageGradientV</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="10514" y="4265.4634">ImageWhiteNoise</text><line style="stroke:#181818;stroke-width:0.5;" x1="10509" x2="10727" y1="4273.5654" y2="4273.5654"/></g><!--MD5=[3936ca64184c47e72f549fd88b81ba13]
class raylib.builder.RlImageBuilder::ParameterName--><g id="elem_raylib.builder.RlImageBuilder::ParameterName"><rect codeLine="1066" fill="#F1F1F1" height="353.0867" id="raylib.builder.RlImageBuilder::ParameterName" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="255" x="10763.5" y="4014.09"/><ellipse cx="10778.5" cy="4030.09" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M10774.8906,4024.1994 L10782.6094,4024.1994 L10782.6094,4026.3556 L10777.3438,4026.3556 L10777.3438,4029.0275 L10782.1094,4029.0275 L10782.1094,4031.1838 L10777.3438,4031.1838 L10777.3438,4034.4338 L10782.6094,4034.4338 L10782.6094,4036.59 L10774.8906,4036.59 L10774.8906,4024.1994 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="223" x="10792.5" y="4035.522">RlImageBuilder::ParameterName</text><line style="stroke:#181818;stroke-width:0.5;" x1="10764.5" x2="11017.5" y1="4046.09" y2="4046.09"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="48" x="10769.5" y="4065.0559">Bottom</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="55" x="10769.5" y="4084.1239">ChecksX</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="55" x="10769.5" y="4103.1918">ChecksY</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="29" x="10769.5" y="4122.2597">Col1</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="29" x="10769.5" y="4141.3276">Col2</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="35" x="10769.5" y="4160.3955">Color</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="50" x="10769.5" y="4179.4634">Density</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="41" x="10769.5" y="4198.5314">Factor</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="45" x="10769.5" y="4217.5993">Height</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="37" x="10769.5" y="4236.6672">Inner</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="25" x="10769.5" y="4255.7351">Left</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="39" x="10769.5" y="4274.803">Outer</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="36" x="10769.5" y="4293.8709">Right</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="10769.5" y="4312.9389">TitleSize</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="25" x="10769.5" y="4332.0068">Top</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="40" x="10769.5" y="4351.0747">Width</text><line style="stroke:#181818;stroke-width:0.5;" x1="10764.5" x2="11017.5" y1="4359.1767" y2="4359.1767"/></g><!--MD5=[5b2c63a1681952f0b429955e11ff60f8]
class raylib.builder.RlMeshBuilder::MeshType--><g id="elem_raylib.builder.RlMeshBuilder::MeshType"><rect codeLine="1085" fill="#F1F1F1" height="257.7471" id="raylib.builder.RlMeshBuilder::MeshType" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="208" x="11153" y="4061.59"/><ellipse cx="11168" cy="4077.59" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M11164.3906,4071.6994 L11172.1094,4071.6994 L11172.1094,4073.8556 L11166.8438,4073.8556 L11166.8438,4076.5275 L11171.6094,4076.5275 L11171.6094,4078.6838 L11166.8438,4078.6838 L11166.8438,4081.9338 L11172.1094,4081.9338 L11172.1094,4084.09 L11164.3906,4084.09 L11164.3906,4071.6994 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="11182" y="4083.022">RlMeshBuilder::MeshType</text><line style="stroke:#181818;stroke-width:0.5;" x1="11154" x2="11360" y1="4093.59" y2="4093.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="11159" y="4112.5559">MeshCone</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="11159" y="4131.6239">MeshCube</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="105" x="11159" y="4150.6918">MeshCubicmap</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="93" x="11159" y="4169.7597">MeshCylinder</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="11159" y="4188.8276">MeshHeightmap</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="11159" y="4207.8955">MeshHemiSphere</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="68" x="11159" y="4226.9634">MeshKnot</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="11159" y="4246.0314">MeshPlane</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="64" x="11159" y="4265.0993">MeshPoly</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="85" x="11159" y="4284.1672">MeshSphere</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="11159" y="4303.2351">MeshTorus</text><line style="stroke:#181818;stroke-width:0.5;" x1="11154" x2="11360" y1="4311.3371" y2="4311.3371"/></g><!--MD5=[7a20b23c03bc5d510bbd0cd034319bce]
class raylib.builder.RlMeshBuilder::ParameterName--><g id="elem_raylib.builder.RlMeshBuilder::ParameterName"><rect codeLine="1099" fill="#F1F1F1" height="391.2225" id="raylib.builder.RlMeshBuilder::ParameterName" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="249" x="11396.5" y="3995.09"/><ellipse cx="11411.5" cy="4011.09" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M11407.8906,4005.1994 L11415.6094,4005.1994 L11415.6094,4007.3556 L11410.3438,4007.3556 L11410.3438,4010.0275 L11415.1094,4010.0275 L11415.1094,4012.1838 L11410.3438,4012.1838 L11410.3438,4015.4338 L11415.6094,4015.4338 L11415.6094,4017.59 L11407.8906,4017.59 L11407.8906,4005.1994 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="217" x="11425.5" y="4016.522">RlMeshBuilder::ParameterName</text><line style="stroke:#181818;stroke-width:0.5;" x1="11397.5" x2="11644.5" y1="4027.09" y2="4027.09"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="11402.5" y="4046.0559">ConeSlices</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="62" x="11402.5" y="4065.1239">CubeSize</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="68" x="11402.5" y="4084.1918">Cubicmap</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="45" x="11402.5" y="4103.2597">Height</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="11402.5" y="4122.3276">Heightmap</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="11402.5" y="4141.3955">HemisphereRings</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="11402.5" y="4160.4634">KnotRadSeg</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="47" x="11402.5" y="4179.5314">Length</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="51" x="11402.5" y="4198.5993">RadSeg</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="46" x="11402.5" y="4217.6672">Radius</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="32" x="11402.5" y="4236.7351">ResX</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="32" x="11402.5" y="4255.803">ResZ</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="38" x="11402.5" y="4274.8709">Rings</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="36" x="11402.5" y="4293.9389">Sides</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="11402.5" y="4313.0068">Size</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="38" x="11402.5" y="4332.0747">Slices</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="63" x="11402.5" y="4351.1426">Vec3fSize</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="40" x="11402.5" y="4370.2105">Width</text><line style="stroke:#181818;stroke-width:0.5;" x1="11397.5" x2="11644.5" y1="4378.3125" y2="4378.3125"/></g><!--MD5=[dedff44a6773ff2e0ba5f39ff109dc76]
class raylib.builder.RlModelBuilder::RequiredParameter--><g id="elem_raylib.builder.RlModelBuilder::RequiredParameter"><rect codeLine="1120" fill="#F1F1F1" height="124.2717" id="raylib.builder.RlModelBuilder::RequiredParameter" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="276" x="11731" y="4128.59"/><ellipse cx="11746" cy="4144.59" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M11742.3906,4138.6994 L11750.1094,4138.6994 L11750.1094,4140.8556 L11744.8438,4140.8556 L11744.8438,4143.5275 L11749.6094,4143.5275 L11749.6094,4145.6838 L11744.8438,4145.6838 L11744.8438,4148.9338 L11750.1094,4148.9338 L11750.1094,4151.09 L11742.3906,4151.09 L11742.3906,4138.6994 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="244" x="11760" y="4150.022">RlModelBuilder::RequiredParameter</text><line style="stroke:#181818;stroke-width:0.5;" x1="11732" x2="12006" y1="4160.59" y2="4160.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="39" x="11737" y="4179.5559">MESH</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="11737" y="4198.6239">MODEL_PATH</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="119" x="11737" y="4217.6918">SHARED_TEXTURE</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="11737" y="4236.7597">TEXTURE_PATH</text><line style="stroke:#181818;stroke-width:0.5;" x1="11732" x2="12006" y1="4244.8617" y2="4244.8617"/></g><!--MD5=[db52b25ad10c0d6652c0505d612d07a4]
class raylib.builder.RlModelBuilder::ValidType--><g id="elem_raylib.builder.RlModelBuilder::ValidType"><rect codeLine="1127" fill="#F1F1F1" height="143.3396" id="raylib.builder.RlModelBuilder::ValidType" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="283" x="12042.5" y="4119.09"/><ellipse cx="12091.25" cy="4135.09" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M12087.6406,4129.1994 L12095.3594,4129.1994 L12095.3594,4131.3556 L12090.0938,4131.3556 L12090.0938,4134.0275 L12094.8594,4134.0275 L12094.8594,4136.1838 L12090.0938,4136.1838 L12090.0938,4139.4338 L12095.3594,4139.4338 L12095.3594,4141.59 L12087.6406,4141.59 L12087.6406,4129.1994 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="177" x="12111.75" y="4140.522">RlModelBuilder::ValidType</text><line style="stroke:#181818;stroke-width:0.5;" x1="12043.5" x2="12324.5" y1="4151.09" y2="4151.09"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="12048.5" y="4170.0559">RLMODEL_MESH</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="271" x="12048.5" y="4189.1239">RLMODEL_MESH_AND_SHARED_TEXTURE</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="106" x="12048.5" y="4208.1918">RLMODEL_PATH</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="267" x="12048.5" y="4227.2597">RLMODEL_PATH_AND_SHARED_TEXTURE</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="207" x="12048.5" y="4246.3276">RLMODEL_PATH_AND_TEXTURE</text><line style="stroke:#181818;stroke-width:0.5;" x1="12043.5" x2="12324.5" y1="4254.4296" y2="4254.4296"/></g><!--MD5=[e3431bddd82fc428f9c4777c31b6d1bb]
class raylib.audio.RlAudioStream--><g id="elem_raylib.audio.RlAudioStream"><rect codeLine="1137" fill="#F1F1F1" height="314.9508" id="raylib.audio.RlAudioStream" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="786" x="9331" y="2100.59"/><ellipse cx="9669.75" cy="2116.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M9669.5469,2123.3244 Q9667.0625,2123.3244 9665.7344,2121.6838 Q9664.4219,2120.0119 9664.4219,2116.9025 Q9664.4219,2113.7775 9665.7344,2112.1213 Q9667.0625,2110.465 9669.5469,2110.465 Q9670.2656,2110.465 9670.9219,2110.6213 Q9671.5625,2110.7775 9672.125,2111.0744 L9672.125,2113.7931 Q9671.7656,2113.4494 9671.4688,2113.2619 Q9671.1719,2113.0588 9670.9063,2112.9338 Q9670.5938,2112.7931 9670.2813,2112.7306 Q9669.9844,2112.6681 9669.6719,2112.6681 Q9668.3438,2112.6681 9667.6563,2113.7306 Q9666.9688,2114.8244 9666.9688,2116.9025 Q9666.9688,2118.9963 9667.6563,2120.0588 Q9668.3438,2121.1369 9669.6719,2121.1369 Q9670.3125,2121.1369 9670.9063,2120.8556 Q9671.2031,2120.7306 9671.4844,2120.5431 Q9671.7813,2120.34 9672.125,2120.0119 L9672.125,2122.7306 Q9671.5469,2123.0275 9670.9063,2123.1838 Q9670.2813,2123.3244 9669.5469,2123.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="9690.25" y="2122.022">RlAudioStream</text><line style="stroke:#181818;stroke-width:0.5;" x1="9332" x2="10116" y1="2132.59" y2="2132.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9339" y="2140.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="152" x="9351" y="2151.5559">_stream : AudioStream</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9339" y="2159.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="9351" y="2170.6239">_volume : float</text><line style="stroke:#181818;stroke-width:0.5;" x1="9332" x2="10116" y1="2178.7258" y2="2178.7258"/><ellipse cx="9342" cy="2189.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="760" x="9351" y="2197.6918">RlAudioStream(const unsigned int&amp; sampleRate, const unsigned int&amp; sampleSize, const unsigned int&amp; channels)</text><ellipse cx="9342" cy="2208.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="9351" y="2216.7597">~RlAudioStream()</text><ellipse cx="9342" cy="2227.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="9351" y="2235.8276">isPlaying() : bool</text><ellipse cx="9342" cy="2246.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="9351" y="2254.8955">isProcessed() : bool</text><ellipse cx="9342" cy="2265.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="185" x="9351" y="2273.9634">getVolume() : float&amp; {query}</text><ellipse cx="9342" cy="2285.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="9351" y="2293.0314">pause() : void</text><ellipse cx="9342" cy="2304.1333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="9351" y="2312.0993">play() : void</text><ellipse cx="9342" cy="2323.2013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="9351" y="2331.1672">resume() : void</text><ellipse cx="9342" cy="2342.2692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="9351" y="2350.2351">setPitch(const float&amp; pitch) : void</text><ellipse cx="9342" cy="2361.3371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="9351" y="2369.303">setVolume(float volume) : void</text><ellipse cx="9342" cy="2380.405" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="9351" y="2388.3709">stop() : void</text><ellipse cx="9342" cy="2399.4729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="382" x="9351" y="2407.4389">update(const void* data, const int&amp; samplesCount) : void</text></g><!--MD5=[6916dbfd61d8c525ca678e71067b9efa]
class raylib.audio.RlMusic--><g id="elem_raylib.audio.RlMusic"><rect codeLine="1154" fill="#F1F1F1" height="410.2904" id="raylib.audio.RlMusic" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="548" x="8748" y="2053.09"/><ellipse cx="8991.25" cy="2069.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M8991.0469,2075.8244 Q8988.5625,2075.8244 8987.2344,2074.1838 Q8985.9219,2072.5119 8985.9219,2069.4025 Q8985.9219,2066.2775 8987.2344,2064.6213 Q8988.5625,2062.965 8991.0469,2062.965 Q8991.7656,2062.965 8992.4219,2063.1213 Q8993.0625,2063.2775 8993.625,2063.5744 L8993.625,2066.2931 Q8993.2656,2065.9494 8992.9688,2065.7619 Q8992.6719,2065.5588 8992.4063,2065.4338 Q8992.0938,2065.2931 8991.7813,2065.2306 Q8991.4844,2065.1681 8991.1719,2065.1681 Q8989.8438,2065.1681 8989.1563,2066.2306 Q8988.4688,2067.3244 8988.4688,2069.4025 Q8988.4688,2071.4963 8989.1563,2072.5588 Q8989.8438,2073.6369 8991.1719,2073.6369 Q8991.8125,2073.6369 8992.4063,2073.3556 Q8992.7031,2073.2306 8992.9844,2073.0431 Q8993.2813,2072.84 8993.625,2072.5119 L8993.625,2075.2306 Q8993.0469,2075.5275 8992.4063,2075.6838 Q8991.7813,2075.8244 8991.0469,2075.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="53" x="9011.75" y="2074.522">RlMusic</text><line style="stroke:#181818;stroke-width:0.5;" x1="8749" x2="9295" y1="2085.09" y2="2085.09"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="8756" y="2093.09"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="8768" y="2104.0559">_music : Music</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="8756" y="2112.1579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="8768" y="2123.1239">_volume : float</text><line style="stroke:#181818;stroke-width:0.5;" x1="8749" x2="9295" y1="2131.2258" y2="2131.2258"/><ellipse cx="8759" cy="2142.2258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="245" x="8768" y="2150.1918">RlMusic(const std::string&amp; fileName)</text><ellipse cx="8759" cy="2161.2938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="522" x="8768" y="2169.2597">RlMusic(const std::string&amp; fileType, unsigned char* data, const int&amp; dataSize)</text><ellipse cx="8759" cy="2180.3617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="8768" y="2188.3276">~RlMusic()</text><ellipse cx="8759" cy="2199.4296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="8768" y="2207.3955">isPlaying() : bool</text><ellipse cx="8759" cy="2218.4975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="177" x="8768" y="2226.4634">isLooping() : bool&amp; {query}</text><ellipse cx="8759" cy="2237.5654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="152" x="8768" y="2245.5314">getTimeLength() : float</text><ellipse cx="8759" cy="2256.6333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="149" x="8768" y="2264.5993">getTimePlayed() : float</text><ellipse cx="8759" cy="2275.7013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="185" x="8768" y="2283.6672">getVolume() : float&amp; {query}</text><ellipse cx="8759" cy="2294.7692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="8768" y="2302.7351">pause() : void</text><ellipse cx="8759" cy="2313.8371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="8768" y="2321.803">play() : void</text><ellipse cx="8759" cy="2332.905" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="8768" y="2340.8709">resume() : void</text><ellipse cx="8759" cy="2351.9729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="216" x="8768" y="2359.9389">seek(const float&amp; position) : void</text><ellipse cx="8759" cy="2371.0408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="8768" y="2379.0068">setLooping(const bool&amp; loop) : void</text><ellipse cx="8759" cy="2390.1088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="8768" y="2398.0747">setPitch(const float&amp; pitch) : void</text><ellipse cx="8759" cy="2409.1767" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="251" x="8768" y="2417.1426">setVolume(const float&amp; volume) : void</text><ellipse cx="8759" cy="2428.2446" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="8768" y="2436.2105">stop() : void</text><ellipse cx="8759" cy="2447.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="8768" y="2455.2784">update() : void</text></g><!--MD5=[48889dbb51d175831d6f99c2c77ffabc]
class raylib.audio.RlSound--><g id="elem_raylib.audio.RlSound"><rect codeLine="1176" fill="#F1F1F1" height="353.0867" id="raylib.audio.RlSound" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="408" x="8305" y="2081.59"/><ellipse cx="8476.75" cy="2097.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M8476.5469,2104.3244 Q8474.0625,2104.3244 8472.7344,2102.6838 Q8471.4219,2101.0119 8471.4219,2097.9025 Q8471.4219,2094.7775 8472.7344,2093.1213 Q8474.0625,2091.465 8476.5469,2091.465 Q8477.2656,2091.465 8477.9219,2091.6213 Q8478.5625,2091.7775 8479.125,2092.0744 L8479.125,2094.7931 Q8478.7656,2094.4494 8478.4688,2094.2619 Q8478.1719,2094.0588 8477.9063,2093.9338 Q8477.5938,2093.7931 8477.2813,2093.7306 Q8476.9844,2093.6681 8476.6719,2093.6681 Q8475.3438,2093.6681 8474.6563,2094.7306 Q8473.9688,2095.8244 8473.9688,2097.9025 Q8473.9688,2099.9963 8474.6563,2101.0588 Q8475.3438,2102.1369 8476.6719,2102.1369 Q8477.3125,2102.1369 8477.9063,2101.8556 Q8478.2031,2101.7306 8478.4844,2101.5431 Q8478.7813,2101.34 8479.125,2101.0119 L8479.125,2103.7306 Q8478.5469,2104.0275 8477.9063,2104.1838 Q8477.2813,2104.3244 8476.5469,2104.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="8497.25" y="2103.022">RlSound</text><line style="stroke:#181818;stroke-width:0.5;" x1="8306" x2="8712" y1="2113.59" y2="2113.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="8313" y="2121.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="8325" y="2132.5559">_sound : Sound</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="8313" y="2140.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="8325" y="2151.6239">_volume : float</text><line style="stroke:#181818;stroke-width:0.5;" x1="8306" x2="8712" y1="2159.7258" y2="2159.7258"/><ellipse cx="8316" cy="2170.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="8325" y="2178.6918">RlSound(const Sound&amp; sound)</text><ellipse cx="8316" cy="2189.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="248" x="8325" y="2197.7597">RlSound(const std::string&amp; fileName)</text><ellipse cx="8316" cy="2208.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="8325" y="2216.8276">RlSound(const RlWave&amp; wave)</text><ellipse cx="8316" cy="2227.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="8325" y="2235.8955">~RlSound()</text><ellipse cx="8316" cy="2246.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="8325" y="2254.9634">isPlaying() : bool</text><ellipse cx="8316" cy="2266.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="185" x="8325" y="2274.0314">getVolume() : float&amp; {query}</text><ellipse cx="8316" cy="2285.1333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="8325" y="2293.0993">pause() : void</text><ellipse cx="8316" cy="2304.2013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="8325" y="2312.1672">play() : void</text><ellipse cx="8316" cy="2323.2692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="8325" y="2331.2351">playMulti() : void</text><ellipse cx="8316" cy="2342.3371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="8325" y="2350.303">resume() : void</text><ellipse cx="8316" cy="2361.405" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="8325" y="2369.3709">setPitch(const float&amp; pitch) : void</text><ellipse cx="8316" cy="2380.4729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="251" x="8325" y="2388.4389">setVolume(const float&amp; volume) : void</text><ellipse cx="8316" cy="2399.5408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="8325" y="2407.5068">stop() : void</text><ellipse cx="8316" cy="2418.6088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="382" x="8325" y="2426.5747">update(const void* data, const int&amp; samplesCount) : void</text></g><!--MD5=[6b250e1f0e9affbbb5eef47b032bc760]
class raylib.audio.RlWave--><g id="elem_raylib.audio.RlWave"><rect codeLine="1195" fill="#F1F1F1" height="372.1546" id="raylib.audio.RlWave" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="567" x="7702.5" y="2072.09"/><ellipse cx="7957.25" cy="2088.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M7957.0469,2094.8244 Q7954.5625,2094.8244 7953.2344,2093.1838 Q7951.9219,2091.5119 7951.9219,2088.4025 Q7951.9219,2085.2775 7953.2344,2083.6213 Q7954.5625,2081.965 7957.0469,2081.965 Q7957.7656,2081.965 7958.4219,2082.1213 Q7959.0625,2082.2775 7959.625,2082.5744 L7959.625,2085.2931 Q7959.2656,2084.9494 7958.9688,2084.7619 Q7958.6719,2084.5588 7958.4063,2084.4338 Q7958.0938,2084.2931 7957.7813,2084.2306 Q7957.4844,2084.1681 7957.1719,2084.1681 Q7955.8438,2084.1681 7955.1563,2085.2306 Q7954.4688,2086.3244 7954.4688,2088.4025 Q7954.4688,2090.4963 7955.1563,2091.5588 Q7955.8438,2092.6369 7957.1719,2092.6369 Q7957.8125,2092.6369 7958.4063,2092.3556 Q7958.7031,2092.2306 7958.9844,2092.0431 Q7959.2813,2091.84 7959.625,2091.5119 L7959.625,2094.2306 Q7959.0469,2094.5275 7958.4063,2094.6838 Q7957.7813,2094.8244 7957.0469,2094.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="49" x="7977.75" y="2093.522">RlWave</text><line style="stroke:#181818;stroke-width:0.5;" x1="7703.5" x2="8268.5" y1="2104.09" y2="2104.09"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7710.5" y="2112.09"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="88" x="7722.5" y="2123.0559">_wave : Wave</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7710.5" y="2131.1579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="7722.5" y="2142.1239">_samplesPtr : float*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7710.5" y="2150.2258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="190" x="7722.5" y="2161.1918">_samples : std::vector&lt;float&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="7703.5" x2="8268.5" y1="2169.2938" y2="2169.2938"/><ellipse cx="7713.5" cy="2180.2938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="57" x="7722.5" y="2188.2597">RlWave()</text><ellipse cx="7713.5" cy="2199.3617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="181" x="7722.5" y="2207.3276">RlWave(const Wave&amp; wave)</text><ellipse cx="7713.5" cy="2218.4296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="211" x="7722.5" y="2226.3955">RlWave(const std::string&amp; path)</text><ellipse cx="7713.5" cy="2237.4975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="530" x="7722.5" y="2245.4634">RlWave(const std::string&amp; fileType, const unsigned char* fileData, int dataSize)</text><ellipse cx="7713.5" cy="2256.5654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="65" x="7722.5" y="2264.5314">~RlWave()</text><ellipse cx="7713.5" cy="2275.6333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="7722.5" y="2283.5993">copy() : RlWave</text><ellipse cx="7713.5" cy="2294.7013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="7722.5" y="2302.6672">getWave() : Wave&amp;</text><ellipse cx="7713.5" cy="2313.7692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="177" x="7722.5" y="2321.7351">getWave() : Wave&amp; {query}</text><ellipse cx="7713.5" cy="2332.8371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="312" x="7722.5" y="2340.803">exportWave(const std::string&amp; fileName) : bool</text><ellipse cx="7713.5" cy="2351.905" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="362" x="7722.5" y="2359.8709">exportWaveAsCode(const std::string&amp; fileName) : bool</text><ellipse cx="7713.5" cy="2370.9729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="277" x="7722.5" y="2378.9389">toSound() : raylib::audio::RlSound {query}</text><ellipse cx="7713.5" cy="2390.0408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="215" x="7722.5" y="2398.0068">getSamples() : std::vector&lt;float&gt;</text><ellipse cx="7713.5" cy="2409.1088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="382" x="7722.5" y="2417.0747">crop(const int&amp; initSample, const int&amp; finalSample) : void</text><ellipse cx="7713.5" cy="2428.1767" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="541" x="7722.5" y="2436.1426">format(const int&amp; sampleRate, const int&amp; sampleSize, const int&amp; channels) : void</text></g><!--MD5=[ca913dcafbef00bb2178a2ee5547751e]
class gameengine.AbstractSound--><g id="elem_gameengine.AbstractSound"><rect codeLine="1219" fill="#F1F1F1" height="219.6113" id="gameengine.AbstractSound" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="480" x="3673" y="919.59"/><ellipse cx="3863.25" cy="935.59" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M3861.875,928.9494 L3864.8594,928.9494 L3868.2188,941.34 L3865.7656,941.34 L3865,938.2775 L3861.7188,938.2775 L3860.9688,941.34 L3858.5313,941.34 L3861.875,928.9494 Z M3864.5313,936.2619 L3863.3594,931.1838 L3862.2031,936.2619 L3864.5313,936.2619 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="91" x="3883.75" y="941.022">AbstractSound</text><line style="stroke:#181818;stroke-width:0.5;" x1="3674" x2="4152" y1="951.59" y2="951.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3681" y="959.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="179" x="3693" y="970.5559">_category : SoundCategory</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3681" y="978.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="3693" y="989.6239">_filePath : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3681" y="997.7258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="3693" y="1008.6918">_name : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="3674" x2="4152" y1="1016.7938" y2="1016.7938"/><ellipse cx="3684" cy="1027.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="454" x="3693" y="1035.7597">AbstractSound(const std::string&amp; filePath, SoundCategory category)</text><ellipse cx="3684" cy="1046.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="115" x="3693" y="1054.8276">~AbstractSound()</text><ellipse cx="3684" cy="1065.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="173" x="3693" y="1073.8955">getCategory() : int {query}</text><ellipse cx="3684" cy="1084.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="227" x="3693" y="1092.9634">getFilePath() : std::string&amp; {query}</text><ellipse cx="3684" cy="1104.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="3693" y="1112.0314">getName() : std::string&amp; {query}</text><ellipse cx="3684" cy="1123.1333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="237" x="3693" y="1131.0993">setVolume(const float&amp; volume) : void</text></g><!--MD5=[73ba47e2addc18d86b710781c56ce235]
class gameengine.AudioManager--><g id="elem_gameengine.AudioManager"><rect codeLine="1231" fill="#F1F1F1" height="276.815" id="gameengine.AudioManager" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="597" x="3534.5" y="296.59"/><ellipse cx="3778.75" cy="312.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M3778.5469,319.3244 Q3776.0625,319.3244 3774.7344,317.6838 Q3773.4219,316.0119 3773.4219,312.9025 Q3773.4219,309.7775 3774.7344,308.1213 Q3776.0625,306.465 3778.5469,306.465 Q3779.2656,306.465 3779.9219,306.6213 Q3780.5625,306.7775 3781.125,307.0744 L3781.125,309.7931 Q3780.7656,309.4494 3780.4688,309.2619 Q3780.1719,309.0588 3779.9063,308.9338 Q3779.5938,308.7931 3779.2813,308.7306 Q3778.9844,308.6681 3778.6719,308.6681 Q3777.3438,308.6681 3776.6563,309.7306 Q3775.9688,310.8244 3775.9688,312.9025 Q3775.9688,314.9963 3776.6563,316.0588 Q3777.3438,317.1369 3778.6719,317.1369 Q3779.3125,317.1369 3779.9063,316.8556 Q3780.2031,316.7306 3780.4844,316.5431 Q3780.7813,316.34 3781.125,316.0119 L3781.125,318.7306 Q3780.5469,319.0275 3779.9063,319.1838 Q3779.2813,319.3244 3778.5469,319.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="3799.25" y="318.022">AudioManager</text><line style="stroke:#181818;stroke-width:0.5;" x1="3535.5" x2="4130.5" y1="328.59" y2="328.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3542.5" y="336.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="333" x="3554.5" y="347.5559">_instance : static std::shared_ptr&lt;AudioManager&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3542.5" y="355.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="464" x="3554.5" y="366.6239">_sounds : std::vector&lt;std::unique_ptr&lt;gameengine::AbstractSound&gt;&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="3535.5" x2="4130.5" y1="374.7258" y2="374.7258"/><ellipse cx="3545.5" cy="385.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="108" x="3554.5" y="393.6918">AudioManager()</text><ellipse cx="3545.5" cy="404.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="3554.5" y="412.7597">~AudioManager()</text><ellipse cx="3545.5" cy="423.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="328" x="3554.5" y="431.8276">getInstance() : std::shared_ptr&lt;AudioManager&gt;&amp;</text><ellipse cx="3545.5" cy="442.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="474" x="3554.5" y="450.8955">getSound(const std::string&amp; name) : std::unique_ptr&lt;AbstractSound&gt;&amp;</text><ellipse cx="3545.5" cy="461.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="571" x="3554.5" y="469.9634">addSound(const std::string&amp; filePath, AbstractSound::SoundCategory category) : void</text><ellipse cx="3545.5" cy="481.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="294" x="3554.5" y="489.0314">deleteSound(const std::string&amp; name) : void</text><ellipse cx="3545.5" cy="500.1333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="322" x="3554.5" y="508.0993">loadSounds(const std::string&amp; assetsPath) : void</text><ellipse cx="3545.5" cy="519.2013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="503" x="3554.5" y="527.1672">loadSounds(const std::string&amp; soundDir, const std::string&amp; musicDir) : void</text><ellipse cx="3545.5" cy="538.2692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="280" x="3554.5" y="546.2351">playSound(const std::string&amp; name) : void</text><ellipse cx="3545.5" cy="557.3371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="531" x="3554.5" y="565.303">setVolume(const float&amp; volume, AbstractSound::SoundCategory category) : void</text></g><!--MD5=[45baea9acfbc71376df38649e7928e62]
class gameengine.Scene--><g id="elem_gameengine.Scene"><rect codeLine="1246" fill="#F1F1F1" height="543.7658" id="gameengine.Scene" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="606" x="1592" y="757.59"/><ellipse cx="1873.25" cy="773.59" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1871.875,766.9494 L1874.8594,766.9494 L1878.2188,779.34 L1875.7656,779.34 L1875,776.2775 L1871.7188,776.2775 L1870.9688,779.34 L1868.5313,779.34 L1871.875,766.9494 Z M1874.5313,774.2619 L1873.3594,769.1838 L1872.2031,774.2619 L1874.5313,774.2619 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="35" x="1893.75" y="779.022">Scene</text><line style="stroke:#181818;stroke-width:0.5;" x1="1593" x2="2197" y1="789.59" y2="789.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1600" y="797.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="1612" y="808.5559">_isLaunched : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1600" y="816.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="1612" y="827.6239">_isPaused : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1600" y="835.7258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="1612" y="846.6918">_name : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1600" y="854.7938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="172" x="1612" y="865.7597">_sceneSource : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1600" y="873.8617"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="1612" y="884.8276">_nodes : std::vector&lt;std::shared_ptr&lt;gameengine::node::AbstractBase&gt;&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="1593" x2="2197" y1="892.9296" y2="892.9296"/><ellipse cx="1603" cy="903.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="425" x="1612" y="911.8955">Scene(const std::string&amp; name, const std::string&amp; sceneSource)</text><ellipse cx="1603" cy="922.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="1612" y="930.9634">~Scene()</text><ellipse cx="1603" cy="942.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="288" x="1612" y="950.0314">deleteNode(const std::string&amp; name) : bool</text><ellipse cx="1603" cy="961.1333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="189" x="1612" y="969.0993">isLaunched() : bool&amp; {query}</text><ellipse cx="1603" cy="980.2013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="172" x="1612" y="988.1672">isPaused() : bool&amp; {query}</text><ellipse cx="1603" cy="999.2692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="580" x="1612" y="1007.2351">getNode(const std::string&amp; name) : std::shared_ptr&lt;gameengine::node::AbstractBase&gt;</text><ellipse cx="1603" cy="1018.3371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="1612" y="1026.303">getName() : std::string&amp; {query}</text><ellipse cx="1603" cy="1037.405" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="260" x="1612" y="1045.3709">getSceneSource() : std::string&amp; {query}</text><ellipse cx="1603" cy="1056.4729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="575" x="1612" y="1064.4389">getNodes() : std::vector&lt;std::shared_ptr&lt;gameengine::node::AbstractBase&gt;&gt;&amp; {query}</text><ellipse cx="1603" cy="1075.5408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="539" x="1612" y="1083.5068">addNode(const std::shared_ptr&lt;gameengine::node::AbstractBase&gt;&amp; node) : void</text><ellipse cx="1603" cy="1094.6088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="397" x="1612" y="1102.5747">deleteNodeIncludes(const std::string&amp; includeName) : void</text><ellipse cx="1603" cy="1113.6767" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="1612" y="1121.6426">destroy() : void</text><ellipse cx="1603" cy="1132.7446" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="1612" y="1140.7105">draw() : void</text><ellipse cx="1603" cy="1151.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="1612" y="1159.7784">draw2D() : void</text><ellipse cx="1603" cy="1170.8804" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="1612" y="1178.8464">init() : void</text><ellipse cx="1603" cy="1189.9483" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="103" x="1612" y="1197.9143">initScene() : void</text><ellipse cx="1603" cy="1209.0163" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="139" x="1612" y="1216.9822">sceneLauncher() : void</text><ellipse cx="1603" cy="1228.0842" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="134" x="1612" y="1236.0501">setLaunched() : void</text><ellipse cx="1603" cy="1247.1521" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="236" x="1612" y="1255.118">setPaused(const bool&amp; value) : void</text><ellipse cx="1603" cy="1266.22" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="1612" y="1274.1859">update(const float&amp; delta) : void</text><ellipse cx="1603" cy="1285.2879" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="237" x="1612" y="1293.2539">updateScene(const float&amp; delta) : void</text></g><!--MD5=[c64c2c1fb0f8a18ba61acdfa109b25fb]
class gameengine.SceneManager--><g id="elem_gameengine.SceneManager"><rect codeLine="1275" fill="#F1F1F1" height="524.6979" id="gameengine.SceneManager" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="606" x="1592" y="172.59"/><ellipse cx="1840.25" cy="188.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1840.0469,195.3244 Q1837.5625,195.3244 1836.2344,193.6838 Q1834.9219,192.0119 1834.9219,188.9025 Q1834.9219,185.7775 1836.2344,184.1213 Q1837.5625,182.465 1840.0469,182.465 Q1840.7656,182.465 1841.4219,182.6213 Q1842.0625,182.7775 1842.625,183.0744 L1842.625,185.7931 Q1842.2656,185.4494 1841.9688,185.2619 Q1841.6719,185.0588 1841.4063,184.9338 Q1841.0938,184.7931 1840.7813,184.7306 Q1840.4844,184.6681 1840.1719,184.6681 Q1838.8438,184.6681 1838.1563,185.7306 Q1837.4688,186.8244 1837.4688,188.9025 Q1837.4688,190.9963 1838.1563,192.0588 Q1838.8438,193.1369 1840.1719,193.1369 Q1840.8125,193.1369 1841.4063,192.8556 Q1841.7031,192.7306 1841.9844,192.5431 Q1842.2813,192.34 1842.625,192.0119 L1842.625,194.7306 Q1842.0469,195.0275 1841.4063,195.1838 Q1840.7813,195.3244 1840.0469,195.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="1860.75" y="194.022">SceneManager</text><line style="stroke:#181818;stroke-width:0.5;" x1="1593" x2="2197" y1="204.59" y2="204.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1600" y="212.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="334" x="1612" y="223.5559">_instance : static std::shared_ptr&lt;SceneManager&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1600" y="231.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="168" x="1612" y="242.6239">_actualScene : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1600" y="250.7258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="177" x="1612" y="261.6918">_waitingScene : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1600" y="269.7938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="401" x="1612" y="280.7597">_scenes : std::vector&lt;std::shared_ptr&lt;gameengine::Scene&gt;&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1600" y="288.8617"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="273" x="1612" y="299.8276">_nodesToDelete : std::vector&lt;std::string&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1600" y="307.9296"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="331" x="1612" y="318.8955">_nodesToDeleteIncludes : std::vector&lt;std::string&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="1593" x2="2197" y1="326.9975" y2="326.9975"/><ellipse cx="1603" cy="337.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="1612" y="345.9634">isPaused() : bool</text><ellipse cx="1603" cy="357.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="395" x="1612" y="365.0314">getCurrentScene() : std::shared_ptr&lt;gameengine::Scene&gt;&amp;</text><ellipse cx="1603" cy="376.1333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="422" x="1612" y="384.0993">getInstance() : std::shared_ptr&lt;gameengine::SceneManager&gt;&amp;</text><ellipse cx="1603" cy="395.2013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="580" x="1612" y="403.1672">getNode(const std::string&amp; name) : std::shared_ptr&lt;gameengine::node::AbstractBase&gt;</text><ellipse cx="1603" cy="414.2692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="529" x="1612" y="422.2351">getAllNodes() : std::vector&lt;std::shared_ptr&lt;gameengine::node::AbstractBase&gt;&gt;</text><ellipse cx="1603" cy="433.3371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="539" x="1612" y="441.303">addNode(const std::shared_ptr&lt;gameengine::node::AbstractBase&gt;&amp; node) : void</text><ellipse cx="1603" cy="452.405" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="458" x="1612" y="460.3709">addScene(const std::shared_ptr&lt;gameengine::Scene&gt;&amp; scene) : void</text><ellipse cx="1603" cy="471.4729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="300" x="1612" y="479.4389">changeScene(const std::string&amp; scene) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1600" y="487.5408"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="204" x="1612" y="498.5068">changeSceneInWaiting() : void</text><ellipse cx="1603" cy="509.6088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="287" x="1612" y="517.5747">deleteNode(const std::string&amp; name) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1600" y="525.6767"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="159" x="1612" y="536.6426">deleteNodeInLst() : void</text><ellipse cx="1603" cy="547.7446" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="407" x="1612" y="555.7105">deleteNodeInclude(const std::string&amp; containedName) : void</text><ellipse cx="1603" cy="566.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="292" x="1612" y="574.7784">deleteScene(const std::string&amp; scene) : void</text><ellipse cx="1603" cy="585.8804" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="1612" y="593.8464">draw() : void</text><ellipse cx="1603" cy="604.9483" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="1612" y="612.9143">draw2D() : void</text><ellipse cx="1603" cy="624.0163" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="274" x="1612" y="631.9822">drawAll(raylib::RlCamera&amp; camera) : void</text><ellipse cx="1603" cy="643.0842" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="291" x="1612" y="651.0501">makeLoop(raylib::RlCamera&amp; camera) : void</text><ellipse cx="1603" cy="662.1521" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="186" x="1612" y="670.118">setPaused(bool value) : void</text><ellipse cx="1603" cy="681.22" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="1612" y="689.1859">update() : void</text></g><!--MD5=[63f83beb00359108c7ae4b2c14724fc3]
class gameengine.TextureManager--><g id="elem_gameengine.TextureManager"><rect codeLine="1303" fill="#F1F1F1" height="200.5433" id="gameengine.TextureManager" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="614" x="4718" y="334.59"/><ellipse cx="4964.75" cy="350.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4964.5469,357.3244 Q4962.0625,357.3244 4960.7344,355.6838 Q4959.4219,354.0119 4959.4219,350.9025 Q4959.4219,347.7775 4960.7344,346.1213 Q4962.0625,344.465 4964.5469,344.465 Q4965.2656,344.465 4965.9219,344.6213 Q4966.5625,344.7775 4967.125,345.0744 L4967.125,347.7931 Q4966.7656,347.4494 4966.4688,347.2619 Q4966.1719,347.0588 4965.9063,346.9338 Q4965.5938,346.7931 4965.2813,346.7306 Q4964.9844,346.6681 4964.6719,346.6681 Q4963.3438,346.6681 4962.6563,347.7306 Q4961.9688,348.8244 4961.9688,350.9025 Q4961.9688,352.9963 4962.6563,354.0588 Q4963.3438,355.1369 4964.6719,355.1369 Q4965.3125,355.1369 4965.9063,354.8556 Q4966.2031,354.7306 4966.4844,354.5431 Q4966.7813,354.34 4967.125,354.0119 L4967.125,356.7306 Q4966.5469,357.0275 4965.9063,357.1838 Q4965.2813,357.3244 4964.5469,357.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="4985.25" y="356.022">TextureManager</text><line style="stroke:#181818;stroke-width:0.5;" x1="4719" x2="5331" y1="366.59" y2="366.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4726" y="374.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="441" x="4738" y="385.5559">_defaultTexture : static std::shared_ptr&lt;raylib::texture::RlTexture&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4726" y="393.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="346" x="4738" y="404.6239">_instance : static std::unique_ptr&lt;TextureManager&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4726" y="412.7258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="443" x="4738" y="423.6918">_textures : std::vector&lt;std::shared_ptr&lt;raylib::texture::RlTexture&gt;&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="4719" x2="5331" y1="431.7938" y2="431.7938"/><ellipse cx="4729" cy="442.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="588" x="4738" y="450.7597">getTexture(const std::string&amp; textureName) : std::shared_ptr&lt;raylib::texture::RlTexture&gt;</text><ellipse cx="4729" cy="461.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="436" x="4738" y="469.8276">getDefaultTexture() : std::shared_ptr&lt;raylib::texture::RlTexture&gt;&amp;</text><ellipse cx="4729" cy="480.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="341" x="4738" y="488.8955">getInstance() : std::unique_ptr&lt;TextureManager&gt;&amp;</text><ellipse cx="4729" cy="499.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="533" x="4738" y="507.9634">getTextures() : std::vector&lt;std::shared_ptr&lt;raylib::texture::RlTexture&gt;&gt;&amp; {query}</text><ellipse cx="4729" cy="519.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="333" x="4738" y="527.0314">loadTextures(const std::string&amp; texturesDir) : void</text></g><!--MD5=[40bc7110d5956849c69340a3649935d2]
class gameengine.Time--><g id="elem_gameengine.Time"><rect codeLine="1314" fill="#F1F1F1" height="219.6113" id="gameengine.Time" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="378" x="830" y="325.09"/><ellipse cx="998.25" cy="341.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M998.0469,347.8244 Q995.5625,347.8244 994.2344,346.1838 Q992.9219,344.5119 992.9219,341.4025 Q992.9219,338.2775 994.2344,336.6213 Q995.5625,334.965 998.0469,334.965 Q998.7656,334.965 999.4219,335.1213 Q1000.0625,335.2775 1000.625,335.5744 L1000.625,338.2931 Q1000.2656,337.9494 999.9688,337.7619 Q999.6719,337.5588 999.4063,337.4338 Q999.0938,337.2931 998.7813,337.2306 Q998.4844,337.1681 998.1719,337.1681 Q996.8438,337.1681 996.1563,338.2306 Q995.4688,339.3244 995.4688,341.4025 Q995.4688,343.4963 996.1563,344.5588 Q996.8438,345.6369 998.1719,345.6369 Q998.8125,345.6369 999.4063,345.3556 Q999.7031,345.2306 999.9844,345.0431 Q1000.2813,344.84 1000.625,344.5119 L1000.625,347.2306 Q1000.0469,347.5275 999.4063,347.6838 Q998.7813,347.8244 998.0469,347.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="33" x="1018.75" y="346.522">Time</text><line style="stroke:#181818;stroke-width:0.5;" x1="831" x2="1207" y1="357.09" y2="357.09"/><line style="stroke:#181818;stroke-width:0.5;" x1="831" x2="1207" y1="365.09" y2="365.09"/><ellipse cx="841" cy="376.09" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="41" x="850" y="384.0559">Time()</text><ellipse cx="841" cy="395.1579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="49" x="850" y="403.1239">~Time()</text><ellipse cx="841" cy="414.2258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="198" x="850" y="422.1918">getMicrosecondsTime() : long</text><ellipse cx="841" cy="433.2938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="189" x="850" y="441.2597">getMillisecondsTime() : long</text><ellipse cx="841" cy="452.3617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="314" x="850" y="460.3276">getNanoTime(std::chrono::seconds time) : long</text><ellipse cx="841" cy="471.4296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="343" x="850" y="479.3955">getNanoTime(std::chrono::milliseconds time) : long</text><ellipse cx="841" cy="490.4975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="352" x="850" y="498.4634">getNanoTime(std::chrono::microseconds time) : long</text><ellipse cx="841" cy="509.5654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="196" x="850" y="517.5314">getNanosecondsTime() : long</text><ellipse cx="841" cy="528.6333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="161" x="850" y="536.5993">getSecondsTime() : long</text></g><!--MD5=[4eccf2137b869170cd4461fa999763d7]
class gameengine.AbstractSound::SoundCategory--><g id="elem_gameengine.AbstractSound::SoundCategory"><rect codeLine="1326" fill="#F1F1F1" height="86.1358" id="gameengine.AbstractSound::SoundCategory" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="242" x="5951" y="1485.59"/><ellipse cx="5966" cy="1501.59" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5962.3906,1495.6994 L5970.1094,1495.6994 L5970.1094,1497.8556 L5964.8438,1497.8556 L5964.8438,1500.5275 L5969.6094,1500.5275 L5969.6094,1502.6838 L5964.8438,1502.6838 L5964.8438,1505.9338 L5970.1094,1505.9338 L5970.1094,1508.09 L5962.3906,1508.09 L5962.3906,1495.6994 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="210" x="5980" y="1507.022">AbstractSound::SoundCategory</text><line style="stroke:#181818;stroke-width:0.5;" x1="5952" x2="6192" y1="1517.59" y2="1517.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="15" x="5957" y="1536.5559">FX</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="45" x="5957" y="1555.6239">MUSIC</text><line style="stroke:#181818;stroke-width:0.5;" x1="5952" x2="6192" y1="1563.7258" y2="1563.7258"/></g><!--MD5=[37232a0a6477ab18d5e8bba16aef28cf]
class gameengine.node.AbstractBase--><g id="elem_gameengine.node.AbstractBase"><rect codeLine="1332" fill="#F1F1F1" height="334.0188" id="gameengine.node.AbstractBase" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="300" x="1745" y="1361.59"/><ellipse cx="1850.25" cy="1377.59" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1848.875,1370.9494 L1851.8594,1370.9494 L1855.2188,1383.34 L1852.7656,1383.34 L1852,1380.2775 L1848.7188,1380.2775 L1847.9688,1383.34 L1845.5313,1383.34 L1848.875,1370.9494 Z M1851.5313,1378.2619 L1850.3594,1373.1838 L1849.2031,1378.2619 L1851.5313,1378.2619 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="81" x="1870.75" y="1383.022">AbstractBase</text><line style="stroke:#181818;stroke-width:0.5;" x1="1746" x2="2044" y1="1393.59" y2="1393.59"/><polygon fill="none" points="1756,1399.59,1760,1403.59,1756,1407.59,1752,1403.59" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="91" x="1765" y="1412.5559">_hiding : bool</text><polygon fill="none" points="1756,1418.6579,1760,1422.6579,1756,1426.6579,1752,1422.6579" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="1765" y="1431.6239">_group : std::string</text><polygon fill="none" points="1756,1437.7258,1760,1441.7258,1756,1445.7258,1752,1441.7258" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="1765" y="1450.6918">_name : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="1746" x2="2044" y1="1458.7938" y2="1458.7938"/><ellipse cx="1756" cy="1469.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="257" x="1765" y="1477.7597">AbstractBase(const std::string&amp; name)</text><ellipse cx="1756" cy="1488.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="238" x="1765" y="1496.8276">AbstractBase(const AbstractBase &amp;)</text><ellipse cx="1756" cy="1507.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="104" x="1765" y="1515.8955">~AbstractBase()</text><ellipse cx="1756" cy="1526.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="168" x="1765" y="1534.9634">isHiding() : bool&amp; {query}</text><ellipse cx="1756" cy="1546.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="223" x="1765" y="1554.0314">getRotationDegrees() : float {query}</text><ellipse cx="1756" cy="1565.1333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="216" x="1765" y="1573.0993">getGroup() : std::string&amp; {query}</text><ellipse cx="1756" cy="1584.2013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="1765" y="1592.1672">getName() : std::string&amp; {query}</text><ellipse cx="1756" cy="1603.2692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="79" x="1765" y="1611.2351">draw() : void</text><ellipse cx="1756" cy="1622.3371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="68" x="1765" y="1630.303">init() : void</text><ellipse cx="1756" cy="1641.405" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="274" x="1765" y="1649.3709">setGroup(const std::string&amp; group) : void</text><ellipse cx="1756" cy="1660.4729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="182" x="1765" y="1668.4389">setHiding(bool value) : void</text><ellipse cx="1756" cy="1679.5408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="202" x="1765" y="1687.5068">update(const float&amp; delta) : void</text></g><!--MD5=[913bf6c6a4374c5e0145c251d3b54395]
class gameengine.node._3D.Grid3D--><g id="elem_gameengine.node._3D.Grid3D"><rect codeLine="1351" fill="#F1F1F1" height="410.2904" id="gameengine.node._3D.Grid3D" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="833" x="1019.5" y="2981.09"/><ellipse cx="1408.25" cy="2997.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1408.0469,3003.8244 Q1405.5625,3003.8244 1404.2344,3002.1838 Q1402.9219,3000.5119 1402.9219,2997.4025 Q1402.9219,2994.2775 1404.2344,2992.6213 Q1405.5625,2990.965 1408.0469,2990.965 Q1408.7656,2990.965 1409.4219,2991.1213 Q1410.0625,2991.2775 1410.625,2991.5744 L1410.625,2994.2931 Q1410.2656,2993.9494 1409.9688,2993.7619 Q1409.6719,2993.5588 1409.4063,2993.4338 Q1409.0938,2993.2931 1408.7813,2993.2306 Q1408.4844,2993.1681 1408.1719,2993.1681 Q1406.8438,2993.1681 1406.1563,2994.2306 Q1405.4688,2995.3244 1405.4688,2997.4025 Q1405.4688,2999.4963 1406.1563,3000.5588 Q1406.8438,3001.6369 1408.1719,3001.6369 Q1408.8125,3001.6369 1409.4063,3001.3556 Q1409.7031,3001.2306 1409.9844,3001.0431 Q1410.2813,3000.84 1410.625,3000.5119 L1410.625,3003.2306 Q1410.0469,3003.5275 1409.4063,3003.6838 Q1408.7813,3003.8244 1408.0469,3003.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="47" x="1428.75" y="3002.522">Grid3D</text><line style="stroke:#181818;stroke-width:0.5;" x1="1020.5" x2="1851.5" y1="3013.09" y2="3013.09"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1027.5" y="3021.09"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="1039.5" y="3032.0559">_tint : RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1027.5" y="3040.1579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="1039.5" y="3051.1239">_size : Vector2i</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1027.5" y="3059.2258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="1039.5" y="3070.1918">_position : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1027.5" y="3078.2938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="1039.5" y="3089.2597">_scale : Vector3f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1027.5" y="3097.3617"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="1039.5" y="3108.3276">_spacing : float</text><line style="stroke:#181818;stroke-width:0.5;" x1="1020.5" x2="1851.5" y1="3116.4296" y2="3116.4296"/><ellipse cx="1030.5" cy="3127.4296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="807" x="1039.5" y="3135.3955">Grid3D(const Vector2i&amp; size, const Vector3f&amp; position, const float&amp; spacing, const RlColor&amp; tint, const std::string&amp; name)</text><ellipse cx="1030.5" cy="3146.4975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="1039.5" y="3154.4634">Grid3D(const Grid3D &amp;)</text><ellipse cx="1030.5" cy="3165.5654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="1039.5" y="3173.5314">getPosition() : Vector3f&amp; {query}</text><ellipse cx="1030.5" cy="3184.6333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="1039.5" y="3192.5993">getScale() : Vector3f&amp; {query}</text><ellipse cx="1030.5" cy="3203.7013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="237" x="1039.5" y="3211.6672">getRotationDegrees() : float {query}</text><ellipse cx="1030.5" cy="3222.7692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="1039.5" y="3230.7351">draw() : void</text><ellipse cx="1030.5" cy="3241.8371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="1039.5" y="3249.803">init() : void</text><ellipse cx="1030.5" cy="3260.905" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="254" x="1039.5" y="3268.8709">setPosition(const Vector3f&amp; pos) : void</text><ellipse cx="1030.5" cy="3279.9729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="516" x="1039.5" y="3287.9389">setRotationDegrees(const float&amp; degrees, const Vector3f&amp; rotationAxis) : void</text><ellipse cx="1030.5" cy="3299.0408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="275" x="1039.5" y="3307.0068">setScale(const Vector3f&amp; newScale) : void</text><ellipse cx="1030.5" cy="3318.1088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="229" x="1039.5" y="3326.0747">setSize(const Vector2i&amp; size) : void</text><ellipse cx="1030.5" cy="3337.1767" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="259" x="1039.5" y="3345.1426">setSpacing(const float&amp; spacing) : void</text><ellipse cx="1030.5" cy="3356.2446" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="1039.5" y="3364.2105">setTint(const RlColor&amp; tint) : void</text><ellipse cx="1030.5" cy="3375.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="1039.5" y="3383.2784">update(const float&amp; delta) : void</text></g><!--MD5=[fb4e65c598c272102cd1dfba58e22c58]
class gameengine.node._3D.KinematicBody--><g id="elem_gameengine.node._3D.KinematicBody"><rect codeLine="1373" fill="#F1F1F1" height="124.2717" id="gameengine.node._3D.KinematicBody" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="944" x="70" y="4128.59"/><ellipse cx="487.75" cy="4144.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M487.5469,4151.3244 Q485.0625,4151.3244 483.7344,4149.6838 Q482.4219,4148.0119 482.4219,4144.9025 Q482.4219,4141.7775 483.7344,4140.1213 Q485.0625,4138.465 487.5469,4138.465 Q488.2656,4138.465 488.9219,4138.6213 Q489.5625,4138.7775 490.125,4139.0744 L490.125,4141.7931 Q489.7656,4141.4494 489.4688,4141.2619 Q489.1719,4141.0588 488.9063,4140.9338 Q488.5938,4140.7931 488.2813,4140.7306 Q487.9844,4140.6681 487.6719,4140.6681 Q486.3438,4140.6681 485.6563,4141.7306 Q484.9688,4142.8244 484.9688,4144.9025 Q484.9688,4146.9963 485.6563,4148.0588 Q486.3438,4149.1369 487.6719,4149.1369 Q488.3125,4149.1369 488.9063,4148.8556 Q489.2031,4148.7306 489.4844,4148.5431 Q489.7813,4148.34 490.125,4148.0119 L490.125,4150.7306 Q489.5469,4151.0275 488.9063,4151.1838 Q488.2813,4151.3244 487.5469,4151.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="508.25" y="4150.022">KinematicBody</text><line style="stroke:#181818;stroke-width:0.5;" x1="71" x2="1013" y1="4160.59" y2="4160.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="71" x2="1013" y1="4168.59" y2="4168.59"/><ellipse cx="81" cy="4179.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="524" x="90" y="4187.5559">KinematicBody(const std::string&amp; name, const raylib::model::RlModel&amp; model)</text><ellipse cx="81" cy="4198.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="918" x="90" y="4206.6239">KinematicBody(const std::string&amp; name, const raylib::model::RlModel&amp; model, const std::shared_ptr&lt;raylib::texture::RlTexture&gt;&amp; texture)</text><ellipse cx="81" cy="4217.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="90" y="4225.6918">~KinematicBody()</text><ellipse cx="81" cy="4236.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="321" x="90" y="4244.7597">moveAndCollide(const Vector3f&amp; position) : bool</text></g><!--MD5=[be65e1648764f9611b702ebd868a9037]
class gameengine.node._3D.Node3D--><g id="elem_gameengine.node._3D.Node3D"><rect codeLine="1380" fill="#F1F1F1" height="200.5433" id="gameengine.node._3D.Node3D" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="510" x="1181" y="2157.59"/><ellipse cx="1406.75" cy="2173.59" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1405.375,2166.9494 L1408.3594,2166.9494 L1411.7188,2179.34 L1409.2656,2179.34 L1408.5,2176.2775 L1405.2188,2176.2775 L1404.4688,2179.34 L1402.0313,2179.34 L1405.375,2166.9494 Z M1408.0313,2174.2619 L1406.8594,2169.1838 L1405.7031,2174.2619 L1408.0313,2174.2619 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="50" x="1427.25" y="2179.022">Node3D</text><line style="stroke:#181818;stroke-width:0.5;" x1="1182" x2="1690" y1="2189.59" y2="2189.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="1182" x2="1690" y1="2197.59" y2="2197.59"/><ellipse cx="1192" cy="2208.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="223" x="1201" y="2216.5559">Node3D(const std::string&amp; name)</text><ellipse cx="1192" cy="2227.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="1201" y="2235.6239">Node3D(const Node3D &amp;)</text><ellipse cx="1192" cy="2246.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="1201" y="2254.6918">~Node3D()</text><ellipse cx="1192" cy="2265.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="202" x="1201" y="2273.7597">getPosition() : Vector3f&amp; {query}</text><ellipse cx="1192" cy="2284.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="183" x="1201" y="2292.8276">getScale() : Vector3f&amp; {query}</text><ellipse cx="1192" cy="2303.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="240" x="1201" y="2311.8955">setPosition(const Vector3f&amp; pos) : void</text><ellipse cx="1192" cy="2322.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="484" x="1201" y="2330.9634">setRotationDegrees(const float&amp; degrees, const Vector3f&amp; rotationAxis) : void</text><ellipse cx="1192" cy="2342.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="256" x="1201" y="2350.0314">setScale(const Vector3f&amp; newScale) : void</text></g><!--MD5=[4794cd8fce7c1e1129489e6043945c4f]
class gameengine.node._3D.StaticBody--><g id="elem_gameengine.node._3D.StaticBody"><rect codeLine="1391" fill="#F1F1F1" height="486.5621" id="gameengine.node._3D.StaticBody" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="914" x="70" y="2942.59"/><ellipse cx="487.75" cy="2958.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M487.5469,2965.3244 Q485.0625,2965.3244 483.7344,2963.6838 Q482.4219,2962.0119 482.4219,2958.9025 Q482.4219,2955.7775 483.7344,2954.1213 Q485.0625,2952.465 487.5469,2952.465 Q488.2656,2952.465 488.9219,2952.6213 Q489.5625,2952.7775 490.125,2953.0744 L490.125,2955.7931 Q489.7656,2955.4494 489.4688,2955.2619 Q489.1719,2955.0588 488.9063,2954.9338 Q488.5938,2954.7931 488.2813,2954.7306 Q487.9844,2954.6681 487.6719,2954.6681 Q486.3438,2954.6681 485.6563,2955.7306 Q484.9688,2956.8244 484.9688,2958.9025 Q484.9688,2960.9963 485.6563,2962.0588 Q486.3438,2963.1369 487.6719,2963.1369 Q488.3125,2963.1369 488.9063,2962.8556 Q489.2031,2962.7306 489.4844,2962.5431 Q489.7813,2962.34 490.125,2962.0119 L490.125,2964.7306 Q489.5469,2965.0275 488.9063,2965.1838 Q488.2813,2965.3244 487.5469,2965.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="508.25" y="2964.022">StaticBody</text><line style="stroke:#181818;stroke-width:0.5;" x1="71" x2="983" y1="2974.59" y2="2974.59"/><polygon fill="none" points="81,2980.59,85,2984.59,81,2988.59,77,2984.59" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="90" y="2993.5559">_collisionEnable : bool</text><polygon fill="none" points="81,2999.6579,85,3003.6579,81,3007.6579,77,3003.6579" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="211" x="90" y="3012.6239">_model : raylib::model::RlModel</text><line style="stroke:#181818;stroke-width:0.5;" x1="71" x2="983" y1="3020.7258" y2="3020.7258"/><ellipse cx="81" cy="3031.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="494" x="90" y="3039.6918">StaticBody(const std::string&amp; name, const raylib::model::RlModel&amp; model)</text><ellipse cx="81" cy="3050.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="888" x="90" y="3058.7597">StaticBody(const std::string&amp; name, const raylib::model::RlModel&amp; model, const std::shared_ptr&lt;raylib::texture::RlTexture&gt;&amp; texture)</text><ellipse cx="81" cy="3069.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="90" y="3077.8276">~StaticBody()</text><ellipse cx="81" cy="3088.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="285" x="90" y="3096.8955">getBoundingBox() : BoundingBox&amp; {query}</text><ellipse cx="81" cy="3107.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="90" y="3115.9634">getColor() : RlColor&amp; {query}</text><ellipse cx="81" cy="3127.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="90" y="3135.0314">getPosition() : Vector3f&amp; {query}</text><ellipse cx="81" cy="3146.1333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="90" y="3154.0993">getScale() : Vector3f&amp; {query}</text><ellipse cx="81" cy="3165.2013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="248" x="90" y="3173.1672">hasCollisionEnabled() : bool&amp; {query}</text><ellipse cx="81" cy="3184.2692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="237" x="90" y="3192.2351">getRotationDegrees() : float {query}</text><ellipse cx="81" cy="3203.3371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="266" x="90" y="3211.303">operator-&gt;() : raylib :: model :: RlModel*</text><ellipse cx="81" cy="3222.405" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="245" x="90" y="3230.3709">getModel() : raylib::model::RlModel&amp;</text><ellipse cx="81" cy="3241.4729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="298" x="90" y="3249.4389">getModel() : raylib::model::RlModel&amp; {query}</text><ellipse cx="81" cy="3260.5408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="90" y="3268.5068">draw() : void</text><ellipse cx="81" cy="3279.6088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="90" y="3287.5747">init() : void</text><ellipse cx="81" cy="3298.6767" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="392" x="90" y="3306.6426">setBoundingBox(const BoundingBox&amp; boundingBox) : void</text><ellipse cx="81" cy="3317.7446" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="240" x="90" y="3325.7105">setCollisionEnable(bool value) : void</text><ellipse cx="81" cy="3336.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="284" x="90" y="3344.7784">setColor(const raylib::RlColor&amp; color) : void</text><ellipse cx="81" cy="3355.8804" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="254" x="90" y="3363.8464">setPosition(const Vector3f&amp; pos) : void</text><ellipse cx="81" cy="3374.9483" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="516" x="90" y="3382.9143">setRotationDegrees(const float&amp; degrees, const Vector3f&amp; rotationAxis) : void</text><ellipse cx="81" cy="3394.0163" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="275" x="90" y="3401.9822">setScale(const Vector3f&amp; newScale) : void</text><ellipse cx="81" cy="3413.0842" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="90" y="3421.0501">update(const float&amp; delta) : void</text></g><!--MD5=[3beb618146e952a5a4467b055cc69748]
class gameengine.node._2D.Button--><g id="elem_gameengine.node._2D.Button"><rect codeLine="1419" fill="#F1F1F1" height="639.1054" id="gameengine.node._2D.Button" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="634" x="4195" y="2866.59"/><ellipse cx="4486.75" cy="2882.59" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4485.375,2875.9494 L4488.3594,2875.9494 L4491.7188,2888.34 L4489.2656,2888.34 L4488.5,2885.2775 L4485.2188,2885.2775 L4484.4688,2888.34 L4482.0313,2888.34 L4485.375,2875.9494 Z M4488.0313,2883.2619 L4486.8594,2878.1838 L4485.7031,2883.2619 L4488.0313,2883.2619 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="42" x="4507.25" y="2888.022">Button</text><line style="stroke:#181818;stroke-width:0.5;" x1="4196" x2="4828" y1="2898.59" y2="2898.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4203" y="2906.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="136" x="4215" y="2917.5559">_bounds : Rectangle</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4203" y="2925.6579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="149" x="4215" y="2936.6239">_rectangle : Rectangle</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4203" y="2944.7258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="4215" y="2955.6918">_origin : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4203" y="2963.7938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="4215" y="2974.7597">_position : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4203" y="2982.8617"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="4215" y="2993.8276">_scale : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4203" y="3001.9296"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="88" x="4215" y="3012.8955">_action : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4203" y="3020.9975"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="4215" y="3031.9634">_isEnabled : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4203" y="3040.0654"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="133" x="4215" y="3051.0314">_frameHeight : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4203" y="3059.1333"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="4215" y="3070.0993">_rotationDegrees : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4203" y="3078.2013"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="4215" y="3089.1672">_frameNum : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4203" y="3097.2692"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="4215" y="3108.2351">_state : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4203" y="3116.3371"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="350" x="4215" y="3127.303">_texture : std::shared_ptr&lt;raylib::texture::RlTexture&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="4196" x2="4828" y1="3135.405" y2="3135.405"/><ellipse cx="4206" cy="3146.405" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="608" x="4215" y="3154.3709">Button(const std::string&amp; name, const std::shared_ptr&lt;raylib::texture::RlTexture&gt;&amp; texture)</text><ellipse cx="4206" cy="3165.4729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="223" x="4215" y="3173.4389">getBounds() : Rectangle&amp; {query}</text><ellipse cx="4206" cy="3184.5408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="239" x="4215" y="3192.5068">getRectangle() : Rectangle&amp; {query}</text><ellipse cx="4206" cy="3203.6088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="4215" y="3211.5747">getOrigin() : Vector2f&amp; {query}</text><ellipse cx="4206" cy="3222.6767" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="4215" y="3230.6426">getPosition() : Vector2f&amp; {query}</text><ellipse cx="4206" cy="3241.7446" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="4215" y="3249.7105">getScale() : Vector2f&amp; {query}</text><ellipse cx="4206" cy="3260.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="178" x="4215" y="3268.7784">isEnabled() : bool&amp; {query}</text><ellipse cx="4206" cy="3279.8804" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="237" x="4215" y="3287.8464">getRotationDegrees() : float {query}</text><ellipse cx="4206" cy="3298.9483" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="440" x="4215" y="3306.9143">getTexture() : std::shared_ptr&lt;raylib::texture::RlTexture&gt;&amp; {query}</text><ellipse cx="4206" cy="3318.0163" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="269" x="4215" y="3325.9822">centerButton(const Vector2f&amp; pos) : void</text><ellipse cx="4206" cy="3337.0842" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="4215" y="3345.0501">draw() : void</text><ellipse cx="4206" cy="3356.1521" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="4215" y="3364.118">init() : void</text><ellipse cx="4206" cy="3375.22" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="95" x="4215" y="3383.1859">pressed() : void</text><ellipse cx="4206" cy="3394.2879" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="242" x="4215" y="3402.2539">setEnabled(const bool&amp; value) : void</text><ellipse cx="4206" cy="3413.3558" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="260" x="4215" y="3421.3218">setOrigin(const Vector2f&amp; origin) : void</text><ellipse cx="4206" cy="3432.4238" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="284" x="4215" y="3440.3897">setPosition(const Vector2f&amp; position) : void</text><ellipse cx="4206" cy="3451.4917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="373" x="4215" y="3459.4576">setRotationDegrees(const float&amp; rotationDegrees) : void</text><ellipse cx="4206" cy="3470.5596" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="246" x="4215" y="3478.5255">setScale(const Vector2f&amp; scale) : void</text><ellipse cx="4206" cy="3489.6275" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="4215" y="3497.5934">update(const float&amp; delta) : void</text></g><!--MD5=[15d1a0032e266012fab171eeaa9ae5d3]
class gameengine.node._2D.Label--><g id="elem_gameengine.node._2D.Label"><rect codeLine="1453" fill="#F1F1F1" height="448.4263" id="gameengine.node._2D.Label" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="889" x="1909.5" y="2962.09"/><ellipse cx="2331.75" cy="2978.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2331.5469,2984.8244 Q2329.0625,2984.8244 2327.7344,2983.1838 Q2326.4219,2981.5119 2326.4219,2978.4025 Q2326.4219,2975.2775 2327.7344,2973.6213 Q2329.0625,2971.965 2331.5469,2971.965 Q2332.2656,2971.965 2332.9219,2972.1213 Q2333.5625,2972.2775 2334.125,2972.5744 L2334.125,2975.2931 Q2333.7656,2974.9494 2333.4688,2974.7619 Q2333.1719,2974.5588 2332.9063,2974.4338 Q2332.5938,2974.2931 2332.2813,2974.2306 Q2331.9844,2974.1681 2331.6719,2974.1681 Q2330.3438,2974.1681 2329.6563,2975.2306 Q2328.9688,2976.3244 2328.9688,2978.4025 Q2328.9688,2980.4963 2329.6563,2981.5588 Q2330.3438,2982.6369 2331.6719,2982.6369 Q2332.3125,2982.6369 2332.9063,2982.3556 Q2333.2031,2982.2306 2333.4844,2982.0431 Q2333.7813,2981.84 2334.125,2981.5119 L2334.125,2984.2306 Q2333.5469,2984.5275 2332.9063,2984.6838 Q2332.2813,2984.8244 2331.5469,2984.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="36" x="2352.25" y="2983.522">Label</text><line style="stroke:#181818;stroke-width:0.5;" x1="1910.5" x2="2797.5" y1="2994.09" y2="2994.09"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1917.5" y="3002.09"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="1929.5" y="3013.0559">_position : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1917.5" y="3021.1579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="1929.5" y="3032.1239">_scale : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1917.5" y="3040.2258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="1929.5" y="3051.1918">_rotationDegrees : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1917.5" y="3059.2938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="1929.5" y="3070.2597">_color : raylib::RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1917.5" y="3078.3617"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="241" x="1929.5" y="3089.3276">_textComponent : raylib::text::RlText</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1917.5" y="3097.4296"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="1929.5" y="3108.3955">_text : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="1910.5" x2="2797.5" y1="3116.4975" y2="3116.4975"/><ellipse cx="1920.5" cy="3127.4975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="863" x="1929.5" y="3135.4634">Label(const std::string&amp; name, const Vector2f&amp; position, const Vector2f&amp; scale, const float&amp; degrees, const raylib::RlColor&amp; color)</text><ellipse cx="1920.5" cy="3146.5654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="52" x="1929.5" y="3154.5314">~Label()</text><ellipse cx="1920.5" cy="3165.6333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="1929.5" y="3173.5993">getPosition() : Vector2f&amp; {query}</text><ellipse cx="1920.5" cy="3184.7013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="1929.5" y="3192.6672">getScale() : Vector2f&amp; {query}</text><ellipse cx="1920.5" cy="3203.7692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="237" x="1929.5" y="3211.7351">getRotationDegrees() : float {query}</text><ellipse cx="1920.5" cy="3222.8371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="181" x="1929.5" y="3230.803">getColor() : raylib::RlColor&amp;</text><ellipse cx="1920.5" cy="3241.905" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="1929.5" y="3249.8709">getColor() : raylib::RlColor&amp; {query}</text><ellipse cx="1920.5" cy="3260.9729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="1929.5" y="3268.9389">draw() : void</text><ellipse cx="1920.5" cy="3280.0408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="1929.5" y="3288.0068">init() : void</text><ellipse cx="1920.5" cy="3299.1088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="1929.5" y="3307.0747">setColor(raylib::RlColor color) : void</text><ellipse cx="1920.5" cy="3318.1767" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="284" x="1929.5" y="3326.1426">setPosition(const Vector2f&amp; position) : void</text><ellipse cx="1920.5" cy="3337.2446" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="373" x="1929.5" y="3345.2105">setRotationDegrees(const float&amp; rotationDegrees) : void</text><ellipse cx="1920.5" cy="3356.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="246" x="1929.5" y="3364.2784">setScale(const Vector2f&amp; scale) : void</text><ellipse cx="1920.5" cy="3375.3804" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="244" x="1929.5" y="3383.3464">setText(const std::string&amp; text) : void</text><ellipse cx="1920.5" cy="3394.4483" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="1929.5" y="3402.4143">update(const float&amp; delta) : void</text></g><!--MD5=[94b8afe68eb7a0026adf99dc497b25bb]
class gameengine.node._2D.Node2D--><g id="elem_gameengine.node._2D.Node2D"><rect codeLine="1477" fill="#F1F1F1" height="200.5433" id="gameengine.node._2D.Node2D" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="323" x="2763.5" y="2157.59"/><ellipse cx="2895.75" cy="2173.59" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2894.375,2166.9494 L2897.3594,2166.9494 L2900.7188,2179.34 L2898.2656,2179.34 L2897.5,2176.2775 L2894.2188,2176.2775 L2893.4688,2179.34 L2891.0313,2179.34 L2894.375,2166.9494 Z M2897.0313,2174.2619 L2895.8594,2169.1838 L2894.7031,2174.2619 L2897.0313,2174.2619 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="50" x="2916.25" y="2179.022">Node2D</text><line style="stroke:#181818;stroke-width:0.5;" x1="2764.5" x2="3085.5" y1="2189.59" y2="2189.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="2764.5" x2="3085.5" y1="2197.59" y2="2197.59"/><ellipse cx="2774.5" cy="2208.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="223" x="2783.5" y="2216.5559">Node2D(const std::string&amp; name)</text><ellipse cx="2774.5" cy="2227.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="2783.5" y="2235.6239">Node2D(const Node2D &amp;)</text><ellipse cx="2774.5" cy="2246.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="2783.5" y="2254.6918">~Node2D()</text><ellipse cx="2774.5" cy="2265.7938" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="202" x="2783.5" y="2273.7597">getPosition() : Vector2f&amp; {query}</text><ellipse cx="2774.5" cy="2284.8617" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="183" x="2783.5" y="2292.8276">getScale() : Vector2f&amp; {query}</text><ellipse cx="2774.5" cy="2303.9296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="240" x="2783.5" y="2311.8955">setPosition(const Vector2f&amp; pos) : void</text><ellipse cx="2774.5" cy="2322.9975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="297" x="2783.5" y="2330.9634">setRotationDegrees(const float&amp; degrees) : void</text><ellipse cx="2774.5" cy="2342.0654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="256" x="2783.5" y="2350.0314">setScale(const Vector2f&amp; newScale) : void</text></g><!--MD5=[a52a82c299fe5085dbce871667e0e304]
class gameengine.node._2D.TextureRect--><g id="elem_gameengine.node._2D.TextureRect"><rect codeLine="1488" fill="#F1F1F1" height="410.2904" id="gameengine.node._2D.TextureRect" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1327" x="2833.5" y="2981.09"/><ellipse cx="3452.75" cy="2997.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M3452.5469,3003.8244 Q3450.0625,3003.8244 3448.7344,3002.1838 Q3447.4219,3000.5119 3447.4219,2997.4025 Q3447.4219,2994.2775 3448.7344,2992.6213 Q3450.0625,2990.965 3452.5469,2990.965 Q3453.2656,2990.965 3453.9219,2991.1213 Q3454.5625,2991.2775 3455.125,2991.5744 L3455.125,2994.2931 Q3454.7656,2993.9494 3454.4688,2993.7619 Q3454.1719,2993.5588 3453.9063,2993.4338 Q3453.5938,2993.2931 3453.2813,2993.2306 Q3452.9844,2993.1681 3452.6719,2993.1681 Q3451.3438,2993.1681 3450.6563,2994.2306 Q3449.9688,2995.3244 3449.9688,2997.4025 Q3449.9688,2999.4963 3450.6563,3000.5588 Q3451.3438,3001.6369 3452.6719,3001.6369 Q3453.3125,3001.6369 3453.9063,3001.3556 Q3454.2031,3001.2306 3454.4844,3001.0431 Q3454.7813,3000.84 3455.125,3000.5119 L3455.125,3003.2306 Q3454.5469,3003.5275 3453.9063,3003.6838 Q3453.2813,3003.8244 3452.5469,3003.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="3473.25" y="3002.522">TextureRect</text><line style="stroke:#181818;stroke-width:0.5;" x1="2834.5" x2="4159.5" y1="3013.09" y2="3013.09"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2841.5" y="3021.09"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="2853.5" y="3032.0559">_position : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2841.5" y="3040.1579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="2853.5" y="3051.1239">_scale : Vector2f</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2841.5" y="3059.2258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="2853.5" y="3070.1918">_rotationDegrees : float</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2841.5" y="3078.2938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="2853.5" y="3089.2597">_color : raylib::RlColor</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2841.5" y="3097.3617"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="350" x="2853.5" y="3108.3276">_texture : std::shared_ptr&lt;raylib::texture::RlTexture&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="2834.5" x2="4159.5" y1="3116.4296" y2="3116.4296"/><ellipse cx="2844.5" cy="3127.4296" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1301" x="2853.5" y="3135.3955">TextureRect(const std::string&amp; name, const std::shared_ptr&lt;raylib::texture::RlTexture&gt;&amp; texture, const Vector2f&amp; position, const Vector2f&amp; scale, const float&amp; degrees, const raylib::RlColor&amp; color)</text><ellipse cx="2844.5" cy="3146.4975" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="2853.5" y="3154.4634">~TextureRect()</text><ellipse cx="2844.5" cy="3165.5654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="2853.5" y="3173.5314">getPosition() : Vector2f&amp; {query}</text><ellipse cx="2844.5" cy="3184.6333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="2853.5" y="3192.5993">getScale() : Vector2f&amp; {query}</text><ellipse cx="2844.5" cy="3203.7013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="237" x="2853.5" y="3211.6672">getRotationDegrees() : float {query}</text><ellipse cx="2844.5" cy="3222.7692" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="181" x="2853.5" y="3230.7351">getColor() : raylib::RlColor&amp;</text><ellipse cx="2844.5" cy="3241.8371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="2853.5" y="3249.803">getColor() : raylib::RlColor&amp; {query}</text><ellipse cx="2844.5" cy="3260.905" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="2853.5" y="3268.8709">draw() : void</text><ellipse cx="2844.5" cy="3279.9729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="2853.5" y="3287.9389">init() : void</text><ellipse cx="2844.5" cy="3299.0408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="238" x="2853.5" y="3307.0068">setColor(const RlColor&amp; color) : void</text><ellipse cx="2844.5" cy="3318.1088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="284" x="2853.5" y="3326.0747">setPosition(const Vector2f&amp; position) : void</text><ellipse cx="2844.5" cy="3337.1767" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="373" x="2853.5" y="3345.1426">setRotationDegrees(const float&amp; rotationDegrees) : void</text><ellipse cx="2844.5" cy="3356.2446" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="246" x="2853.5" y="3364.2105">setScale(const Vector2f&amp; scale) : void</text><ellipse cx="2844.5" cy="3375.3125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="2853.5" y="3383.2784">update(const float&amp; delta) : void</text></g><!--MD5=[3904d397bcb7460d9533c6f380b70fa1]
class gameengine.map.MapParser--><g id="elem_gameengine.map.MapParser"><rect codeLine="1513" fill="#F1F1F1" height="372.1546" id="gameengine.map.MapParser" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="783" x="5385.5" y="249.09"/><ellipse cx="5671.75" cy="265.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5671.5469,271.8244 Q5669.0625,271.8244 5667.7344,270.1838 Q5666.4219,268.5119 5666.4219,265.4025 Q5666.4219,262.2775 5667.7344,260.6213 Q5669.0625,258.965 5671.5469,258.965 Q5672.2656,258.965 5672.9219,259.1213 Q5673.5625,259.2775 5674.125,259.5744 L5674.125,262.2931 Q5673.7656,261.9494 5673.4688,261.7619 Q5673.1719,261.5588 5672.9063,261.4338 Q5672.5938,261.2931 5672.2813,261.2306 Q5671.9844,261.1681 5671.6719,261.1681 Q5670.3438,261.1681 5669.6563,262.2306 Q5668.9688,263.3244 5668.9688,265.4025 Q5668.9688,267.4963 5669.6563,268.5588 Q5670.3438,269.6369 5671.6719,269.6369 Q5672.3125,269.6369 5672.9063,269.3556 Q5673.2031,269.2306 5673.4844,269.0431 Q5673.7813,268.84 5674.125,268.5119 L5674.125,271.2306 Q5673.5469,271.5275 5672.9063,271.6838 Q5672.2813,271.8244 5671.5469,271.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="5692.25" y="270.522">MapParser</text><rect fill="#FFFFFF" height="18.3441" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="127" x="6044.5" y="246.09"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="125" x="6045.5" y="259.9181">template&lt;typename T&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="5386.5" x2="6167.5" y1="281.09" y2="281.09"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5393.5" y="289.09"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="5405.5" y="300.0559">_maxSize : Vector2u</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5393.5" y="308.1579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="5405.5" y="319.1239">_size : Vector2u</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5393.5" y="327.2258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="5405.5" y="338.1918">_file : std::ifstream</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5393.5" y="346.2938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="5405.5" y="357.2597">_buffer : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5393.5" y="365.3617"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="5405.5" y="376.3276">_fileName : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5393.5" y="384.4296"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="272" x="5405.5" y="395.3955">_symbols : std::unordered_map&lt;char, T&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5393.5" y="403.4975"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="228" x="5405.5" y="414.4634">_map : std::vector&lt;std::vector&lt;T&gt;&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="5386.5" x2="6167.5" y1="422.5654" y2="422.5654"/><ellipse cx="5396.5" cy="433.5654" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="757" x="5405.5" y="441.5314">MapParser(const std::string&amp; fileName, const std::unordered_map&lt;char, T&gt;&amp; symbols, const Vector2u&amp; maxSize)</text><ellipse cx="5396.5" cy="452.6333" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="5405.5" y="460.5993">getMaxSize() : Vector2u&amp; {query}</text><ellipse cx="5396.5" cy="471.7013" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="191" x="5405.5" y="479.6672">getSize() : Vector2u&amp; {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5393.5" y="487.7692"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="352" x="5405.5" y="498.7351">removeComment(const std::string&amp; line) : std::string</text><ellipse cx="5396.5" cy="509.8371" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="216" x="5405.5" y="517.803">getBuffer() : std::string&amp; {query}</text><ellipse cx="5396.5" cy="528.905" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="237" x="5405.5" y="536.8709">getFileName() : std::string&amp; {query}</text><ellipse cx="5396.5" cy="547.9729" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="364" x="5405.5" y="555.9389">getSymbols() : std::unordered_map&lt;char , T&gt;&amp; {query}</text><ellipse cx="5396.5" cy="567.0408" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="315" x="5405.5" y="575.0068">getMap() : std::vector&lt;std::vector&lt;T&gt;&gt;&amp; {query}</text><ellipse cx="5396.5" cy="586.1088" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="5405.5" y="594.0747">parse() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5393.5" y="602.1767"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="5405.5" y="613.1426">parseMap() : void</text></g><!--MD5=[15b65ae4bc5685ca3b6e1ff48e50a091]
class gameengine.ex.GameEngineException--><g id="elem_gameengine.ex.GameEngineException"><rect codeLine="1535" fill="#F1F1F1" height="105.2038" id="gameengine.ex.GameEngineException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="498" x="4185" y="382.59"/><ellipse cx="4354.25" cy="398.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4354.0469,405.3244 Q4351.5625,405.3244 4350.2344,403.6838 Q4348.9219,402.0119 4348.9219,398.9025 Q4348.9219,395.7775 4350.2344,394.1213 Q4351.5625,392.465 4354.0469,392.465 Q4354.7656,392.465 4355.4219,392.6213 Q4356.0625,392.7775 4356.625,393.0744 L4356.625,395.7931 Q4356.2656,395.4494 4355.9688,395.2619 Q4355.6719,395.0588 4355.4063,394.9338 Q4355.0938,394.7931 4354.7813,394.7306 Q4354.4844,394.6681 4354.1719,394.6681 Q4352.8438,394.6681 4352.1563,395.7306 Q4351.4688,396.8244 4351.4688,398.9025 Q4351.4688,400.9963 4352.1563,402.0588 Q4352.8438,403.1369 4354.1719,403.1369 Q4354.8125,403.1369 4355.4063,402.8556 Q4355.7031,402.7306 4355.9844,402.5431 Q4356.2813,402.34 4356.625,402.0119 L4356.625,404.7306 Q4356.0469,405.0275 4355.4063,405.1838 Q4354.7813,405.3244 4354.0469,405.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="151" x="4374.75" y="404.022">GameEngineException</text><line style="stroke:#181818;stroke-width:0.5;" x1="4186" x2="4682" y1="414.59" y2="414.59"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4193" y="422.59"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="4205" y="433.5559">_msg : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="4186" x2="4682" y1="441.6579" y2="441.6579"/><ellipse cx="4196" cy="452.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="472" x="4205" y="460.6239">GameEngineException(const std::string&amp; message, const bool&amp; prefix)</text><ellipse cx="4196" cy="471.7258" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="4205" y="479.6918">what() : char* {query}</text></g><!--MD5=[162b77df7aa9b543c57f5af1eb80f9dc]
class gameengine.ex.MapParserException--><g id="elem_gameengine.ex.MapParserException"><rect codeLine="1541" fill="#F1F1F1" height="67.0679" id="gameengine.ex.MapParserException" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="355" x="4256.5" y="996.09"/><ellipse cx="4360.75" cy="1012.09" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4360.5469,1018.8244 Q4358.0625,1018.8244 4356.7344,1017.1838 Q4355.4219,1015.5119 4355.4219,1012.4025 Q4355.4219,1009.2775 4356.7344,1007.6213 Q4358.0625,1005.965 4360.5469,1005.965 Q4361.2656,1005.965 4361.9219,1006.1213 Q4362.5625,1006.2775 4363.125,1006.5744 L4363.125,1009.2931 Q4362.7656,1008.9494 4362.4688,1008.7619 Q4362.1719,1008.5588 4361.9063,1008.4338 Q4361.5938,1008.2931 4361.2813,1008.2306 Q4360.9844,1008.1681 4360.6719,1008.1681 Q4359.3438,1008.1681 4358.6563,1009.2306 Q4357.9688,1010.3244 4357.9688,1012.4025 Q4357.9688,1014.4963 4358.6563,1015.5588 Q4359.3438,1016.6369 4360.6719,1016.6369 Q4361.3125,1016.6369 4361.9063,1016.3556 Q4362.2031,1016.2306 4362.4844,1016.0431 Q4362.7813,1015.84 4363.125,1015.5119 L4363.125,1018.2306 Q4362.5469,1018.5275 4361.9063,1018.6838 Q4361.2813,1018.8244 4360.5469,1018.8244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="4381.25" y="1017.522">MapParserException</text><line style="stroke:#181818;stroke-width:0.5;" x1="4257.5" x2="4610.5" y1="1028.09" y2="1028.09"/><line style="stroke:#181818;stroke-width:0.5;" x1="4257.5" x2="4610.5" y1="1036.09" y2="1036.09"/><ellipse cx="4267.5" cy="1047.09" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="329" x="4276.5" y="1055.0559">MapParserException(const std::string&amp; message)</text></g><!--MD5=[feae6325ffe0bc21c6160f3da30bebc6]
class gameengine.audio.Music--><g id="elem_gameengine.audio.Music"><rect codeLine="1547" fill="#F1F1F1" height="86.1358" id="gameengine.audio.Music" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="538" x="5378" y="1485.59"/><ellipse cx="5622.75" cy="1501.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5622.5469,1508.3244 Q5620.0625,1508.3244 5618.7344,1506.6838 Q5617.4219,1505.0119 5617.4219,1501.9025 Q5617.4219,1498.7775 5618.7344,1497.1213 Q5620.0625,1495.465 5622.5469,1495.465 Q5623.2656,1495.465 5623.9219,1495.6213 Q5624.5625,1495.7775 5625.125,1496.0744 L5625.125,1498.7931 Q5624.7656,1498.4494 5624.4688,1498.2619 Q5624.1719,1498.0588 5623.9063,1497.9338 Q5623.5938,1497.7931 5623.2813,1497.7306 Q5622.9844,1497.6681 5622.6719,1497.6681 Q5621.3438,1497.6681 5620.6563,1498.7306 Q5619.9688,1499.8244 5619.9688,1501.9025 Q5619.9688,1503.9963 5620.6563,1505.0588 Q5621.3438,1506.1369 5622.6719,1506.1369 Q5623.3125,1506.1369 5623.9063,1505.8556 Q5624.2031,1505.7306 5624.4844,1505.5431 Q5624.7813,1505.34 5625.125,1505.0119 L5625.125,1507.7306 Q5624.5469,1508.0275 5623.9063,1508.1838 Q5623.2813,1508.3244 5622.5469,1508.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="40" x="5643.25" y="1507.022">Music</text><line style="stroke:#181818;stroke-width:0.5;" x1="5379" x2="5915" y1="1517.59" y2="1517.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="5379" x2="5915" y1="1525.59" y2="1525.59"/><ellipse cx="5389" cy="1536.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="512" x="5398" y="1544.5559">Music(const std::string&amp; fileName, AbstractSound::SoundCategory category)</text><ellipse cx="5389" cy="1555.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="251" x="5398" y="1563.6239">setVolume(const float&amp; volume) : void</text></g><!--MD5=[5d91f37d09d1a3bbd0838eb14b437939]
class gameengine.audio.Sound--><g id="elem_gameengine.audio.Sound"><rect codeLine="1552" fill="#F1F1F1" height="86.1358" id="gameengine.audio.Sound" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="434" x="4909" y="1485.59"/><ellipse cx="5100.25" cy="1501.59" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5100.0469,1508.3244 Q5097.5625,1508.3244 5096.2344,1506.6838 Q5094.9219,1505.0119 5094.9219,1501.9025 Q5094.9219,1498.7775 5096.2344,1497.1213 Q5097.5625,1495.465 5100.0469,1495.465 Q5100.7656,1495.465 5101.4219,1495.6213 Q5102.0625,1495.7775 5102.625,1496.0744 L5102.625,1498.7931 Q5102.2656,1498.4494 5101.9688,1498.2619 Q5101.6719,1498.0588 5101.4063,1497.9338 Q5101.0938,1497.7931 5100.7813,1497.7306 Q5100.4844,1497.6681 5100.1719,1497.6681 Q5098.8438,1497.6681 5098.1563,1498.7306 Q5097.4688,1499.8244 5097.4688,1501.9025 Q5097.4688,1503.9963 5098.1563,1505.0588 Q5098.8438,1506.1369 5100.1719,1506.1369 Q5100.8125,1506.1369 5101.4063,1505.8556 Q5101.7031,1505.7306 5101.9844,1505.5431 Q5102.2813,1505.34 5102.625,1505.0119 L5102.625,1507.7306 Q5102.0469,1508.0275 5101.4063,1508.1838 Q5100.7813,1508.3244 5100.0469,1508.3244 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="43" x="5120.75" y="1507.022">Sound</text><line style="stroke:#181818;stroke-width:0.5;" x1="4910" x2="5342" y1="1517.59" y2="1517.59"/><line style="stroke:#181818;stroke-width:0.5;" x1="4910" x2="5342" y1="1525.59" y2="1525.59"/><ellipse cx="4920" cy="1536.59" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="408" x="4929" y="1544.5559">Sound(const std::string&amp; fileName, SoundCategory category)</text><ellipse cx="4920" cy="1555.6579" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="251" x="4929" y="1563.6239">setVolume(const float&amp; volume) : void</text></g><!--MD5=[71dd11987a1ad289828519f054fe18bf]
reverse link gameengine.node.AbstractBase to gameengine.node._2D.Node2D--><g id="link_gameengine.node.AbstractBase_gameengine.node._2D.Node2D"><path codeLine="1565" d="M2061.64,1647.29 C2262.18,1788.93 2595.39,2024.28 2783.82,2157.38 " fill="none" id="gameengine.node.AbstractBase-backto-gameengine.node._2D.Node2D" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="2057.34,1652.83,2045.05,1635.57,2065.42,1641.39,2057.34,1652.83" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[7d01b9bac2e3a88085bf52cb8659fc1c]
reverse link gameengine.node.AbstractBase to gameengine.node._3D.Node3D--><g id="link_gameengine.node.AbstractBase_gameengine.node._3D.Node3D"><path codeLine="1568" d="M1779.29,1712.98 C1690.35,1853.95 1570.88,2043.31 1498.87,2157.44 " fill="none" id="gameengine.node.AbstractBase-backto-gameengine.node._3D.Node3D" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1773.39,1709.22,1789.98,1696.04,1785.23,1716.69,1773.39,1709.22" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[ca978f69105f04ab8b660d47524e26e3]
reverse link gameengine.AbstractSound to gameengine.audio.Music--><g id="link_gameengine.AbstractSound_gameengine.audio.Music"><path codeLine="1571" d="M3995.36,1155.71 C4039.53,1211.32 4099.24,1271.04 4169,1301.59 C4229.66,1328.16 5298.24,1294.45 5361,1315.59 C5462.04,1349.61 5556.77,1434.04 5607.82,1485.5 " fill="none" id="gameengine.AbstractSound-backto-gameengine.audio.Music" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="3989.74,1159.87,3983.03,1139.77,4000.81,1151.31,3989.74,1159.87" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[515deef46a43460363b8627a286e4b3f]
reverse link gameengine.AbstractSound to gameengine.audio.Sound--><g id="link_gameengine.AbstractSound_gameengine.audio.Sound"><path codeLine="1574" d="M3995.73,1155.78 C4039.9,1211.24 4099.51,1270.81 4169,1301.59 C4240.13,1333.09 4796.05,1288.56 4869,1315.59 C4962.29,1350.16 5046.23,1433.98 5091.28,1485.26 " fill="none" id="gameengine.AbstractSound-backto-gameengine.audio.Sound" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="3990.13,1159.98,3983.4,1139.89,4001.19,1151.39,3990.13,1159.98" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[6aaf7fd83be418e6cb78484b370462d0]
reverse link gameengine.ex.GameEngineException to gameengine.ex.MapParserException--><g id="link_gameengine.ex.GameEngineException_gameengine.ex.MapParserException"><path codeLine="1577" d="M4434,507.86 C4434,636.94 4434,903.43 4434,996.03 " fill="none" id="gameengine.ex.GameEngineException-backto-gameengine.ex.MapParserException" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="4427,507.63,4434,487.63,4441,507.63,4427,507.63" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[30381d7319adf431596087d67ef97e98]
reverse link raylib.builder.IBuilder to raylib.builder.RlCameraBuilder--><g id="link_raylib.builder.IBuilder_raylib.builder.RlCameraBuilder"><path codeLine="1580" d="M11260.4,2302.38 C11129.62,2383.93 10848.16,2571.06 10659,2780.59 C10591.91,2854.9 10531.95,2949.33 10487.36,3028.26 " fill="none" id="raylib.builder.IBuilder-backto-raylib.builder.RlCameraBuilder" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="11256.77,2296.4,11277.46,2291.82,11264.14,2308.3,11256.77,2296.4" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[4ed3a3e3ebc4c0d7f4405072494191a6]
reverse link raylib.builder.IBuilder to raylib.builder.RlImageBuilder--><g id="link_raylib.builder.IBuilder_raylib.builder.RlImageBuilder"><path codeLine="1583" d="M11306.55,2309.67 C11258.79,2404.58 11151.83,2617.11 11055.27,2808.99 " fill="none" id="raylib.builder.IBuilder-backto-raylib.builder.RlImageBuilder" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="11300.31,2306.49,11315.55,2291.77,11312.81,2312.79,11300.31,2306.49" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[2a052aa86a01b1a0b25738c1f3ec000a]
reverse link raylib.builder.IBuilder to raylib.builder.RlMeshBuilder--><g id="link_raylib.builder.IBuilder_raylib.builder.RlMeshBuilder"><path codeLine="1586" d="M11332,2312.02 C11332,2406.46 11332,2611.72 11332,2799.5 " fill="none" id="raylib.builder.IBuilder-backto-raylib.builder.RlMeshBuilder" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="11325,2311.77,11332,2291.77,11339,2311.77,11325,2311.77" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[442966406335fb24ff7f5d0d49af5a36]
reverse link raylib.builder.IBuilder to raylib.builder.RlModelBuilder--><g id="link_raylib.builder.IBuilder_raylib.builder.RlModelBuilder"><path codeLine="1589" d="M11362.3,2308.92 C11430.54,2421.16 11600.43,2700.59 11730.16,2913.97 " fill="none" id="raylib.builder.IBuilder-backto-raylib.builder.RlModelBuilder" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="11356.28,2312.5,11351.87,2291.77,11368.24,2305.23,11356.28,2312.5" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[de88adb95550fd32056d05e01112f96a]
reverse link raylib.builder.IBuilder to raylib.builder.RlTextBuilder--><g id="link_raylib.builder.IBuilder_raylib.builder.RlTextBuilder"><path codeLine="1592" d="M11427.72,2299.87 C11597.67,2375.69 11956.97,2551.65 12199,2780.59 C12246.12,2825.16 12289.6,2879.14 12327.42,2932.94 " fill="none" id="raylib.builder.IBuilder-backto-raylib.builder.RlTextBuilder" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="11424.63,2306.16,11409.18,2291.66,11430.3,2293.36,11424.63,2306.16" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[5c8c9210af0f5641d58fcbb4a3bc47ae]
reverse link gameengine.node._2D.Node2D to gameengine.node._2D.Button--><g id="link_gameengine.node._2D.Node2D_gameengine.node._2D.Button"><path codeLine="1595" d="M3106.37,2304.52 C3363.34,2375.21 3839.72,2530.04 4178,2780.59 C4212.03,2805.79 4244.72,2835.19 4275.43,2866.42 " fill="none" id="gameengine.node._2D.Node2D-backto-gameengine.node._2D.Button" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="3104.19,2311.18,3086.74,2299.17,3107.87,2297.68,3104.19,2311.18" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[8b62722591bc4a6aa83084824ecfdf44]
reverse link gameengine.node._2D.Node2D to gameengine.node._2D.Label--><g id="link_gameengine.node._2D.Node2D_gameengine.node._2D.Label"><path codeLine="1598" d="M2852.93,2375.96 C2762.5,2522.62 2605.5,2777.23 2491.72,2961.74 " fill="none" id="gameengine.node._2D.Node2D-backto-gameengine.node._2D.Label" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="2847.17,2371.98,2863.62,2358.63,2859.08,2379.33,2847.17,2371.98" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[6981705eeab117253633872b9cb0f070]
reverse link gameengine.node._2D.Node2D to gameengine.node._2D.TextureRect--><g id="link_gameengine.node._2D.Node2D_gameengine.node._2D.TextureRect"><path codeLine="1601" d="M2997.28,2376.1 C3091.03,2527.88 3256.12,2795.14 3370.77,2980.74 " fill="none" id="gameengine.node._2D.Node2D-backto-gameengine.node._2D.TextureRect" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="2991.04,2379.32,2986.49,2358.63,3002.95,2371.96,2991.04,2379.32" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[fc9d0270c23b09707f595a743a08f34b]
reverse link gameengine.node._3D.Node3D to gameengine.node._3D.Grid3D--><g id="link_gameengine.node._3D.Node3D_gameengine.node._3D.Grid3D"><path codeLine="1604" d="M1436,2378.89 C1436,2531.13 1436,2796.27 1436,2980.74 " fill="none" id="gameengine.node._3D.Node3D-backto-gameengine.node._3D.Grid3D" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1429,2378.63,1436,2358.63,1443,2378.63,1429,2378.63" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[9c789c839ea6122554738da61075f05b]
reverse link gameengine.node._3D.Node3D to gameengine.node._3D.StaticBody--><g id="link_gameengine.node._3D.Node3D_gameengine.node._3D.StaticBody"><path codeLine="1607" d="M1323.97,2373.22 C1185.41,2514.36 945.81,2758.45 765.4,2942.23 " fill="none" id="gameengine.node._3D.Node3D-backto-gameengine.node._3D.StaticBody" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1319.28,2368,1338.29,2358.63,1329.27,2377.8,1319.28,2368" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[594fd83bbf35132381e03cc5570fee7f]
reverse link raylib.ex.RaylibException to raylib.ex.BuilderException--><g id="link_raylib.ex.RaylibException_raylib.ex.BuilderException"><path codeLine="1610" d="M21171.37,2319.53 C21002.71,2401.88 20713.4,2564.21 20537,2780.59 C20440.9,2898.47 20392.42,3079.05 20375.8,3152.41 " fill="none" id="raylib.ex.RaylibException-backto-raylib.ex.BuilderException" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="21168.51,2313.14,21189.56,2310.73,21174.61,2325.74,21168.51,2313.14" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[115b9455005e0d79b8b691f0cd2aab7b]
reverse link raylib.ex.RaylibException to raylib.ex.CameraException--><g id="link_raylib.ex.RaylibException_raylib.ex.CameraException"><path codeLine="1613" d="M21245.79,2325.81 C21162.63,2421.68 21009.72,2606.13 20905,2780.59 C20826.38,2911.56 20759.31,3081.91 20732.95,3152.38 " fill="none" id="raylib.ex.RaylibException-backto-raylib.ex.CameraException" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="21240.59,2321.12,21259.01,2310.64,21251.15,2330.31,21240.59,2321.12" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[a327c222be3f0fe40d077b3b42830860]
reverse link raylib.ex.RaylibException to raylib.ex.InvalidArgumentException--><g id="link_raylib.ex.RaylibException_raylib.ex.InvalidArgumentException"><path codeLine="1616" d="M21289.55,2330.61 C21249.03,2518.25 21140.79,3019.4 21112.07,3152.34 " fill="none" id="raylib.ex.RaylibException-backto-raylib.ex.InvalidArgumentException" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="21282.75,2328.93,21293.82,2310.86,21296.44,2331.89,21282.75,2328.93" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[14c21ddaeb1aacf60197128b294e0624]
reverse link raylib.ex.RaylibException to raylib.ex.RlAnimationException--><g id="link_raylib.ex.RaylibException_raylib.ex.RlAnimationException"><path codeLine="1619" d="M21320.45,2330.61 C21360.97,2518.25 21469.21,3019.4 21497.93,3152.34 " fill="none" id="raylib.ex.RaylibException-backto-raylib.ex.RlAnimationException" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="21313.56,2331.89,21316.18,2310.86,21327.25,2328.93,21313.56,2331.89" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[3823cd70abb37fd5477bd45146d1dc38]
reverse link raylib.ex.RaylibException to raylib.ex.RlModelException--><g id="link_raylib.ex.RaylibException_raylib.ex.RlModelException"><path codeLine="1622" d="M21364.11,2325.87 C21447.15,2421.81 21599.93,2606.35 21705,2780.59 C21784.03,2911.65 21852.08,3081.95 21878.85,3152.39 " fill="none" id="raylib.ex.RaylibException-backto-raylib.ex.RlModelException" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="21358.75,2330.37,21350.91,2310.68,21369.32,2321.18,21358.75,2330.37" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[a01b12088367bcf6f418a7df98aae60a]
reverse link raylib.ex.RaylibException to raylib.ex.WindowException--><g id="link_raylib.ex.RaylibException_raylib.ex.WindowException"><path codeLine="1625" d="M21439.2,2319.47 C21608.58,2401.76 21899.25,2564.02 22077,2780.59 C22173.66,2898.35 22223.05,3079 22240.03,3152.4 " fill="none" id="raylib.ex.RaylibException-backto-raylib.ex.WindowException" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="21435.91,2325.66,21420.92,2310.68,21441.98,2313.05,21435.91,2325.66" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[e6c569c248e57848de6a29a5700135eb]
reverse link raylib.audio.RlMusic to gameengine.audio.Music--><g id="link_raylib.audio.RlMusic_gameengine.audio.Music"><path codeLine="1628" d="M8950.53,2033.76 C8905.35,1913.53 8832.65,1775.49 8714,1703.59 C8697.31,1693.47 5921.79,1700.88 5903,1695.59 C5817.57,1671.53 5732.29,1612.7 5684.49,1571.96 " fill="none" id="raylib.audio.RlMusic-backto-gameengine.audio.Music" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="8957.24,2031.7,8957.55,2052.89,8944.09,2036.52,8957.24,2031.7" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[e6c569c248e57848de6a29a5700135eb]
reverse link raylib.audio.RlMusic to gameengine.audio.Music--><g id="link_raylib.audio.RlMusic_gameengine.audio.Music"><path codeLine="1693" d="M8983.42,2040.42 C8943.03,1918.66 8869.85,1776.82 8749,1703.59 C8732.31,1693.47 5956.79,1700.88 5938,1695.59 C5852.44,1671.49 5767.02,1612.51 5710.68,1571.77 " fill="none" id="raylib.audio.RlMusic-backto-gameengine.audio.Music-1" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="8987.46,2052.89,8989.4129,2045.9484,8983.7563,2041.4758,8981.8034,2048.4175,8987.46,2052.89" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[ac6b524096ed2551f8d852fb1ae4ec18]
reverse link raylib.audio.RlSound to gameengine.audio.Sound--><g id="link_raylib.audio.RlSound_gameengine.audio.Sound"><path codeLine="1631" d="M8471.49,2061.54 C8442.84,1936.5 8387.52,1783.31 8270,1703.59 C8253.18,1692.18 5363.36,1701.77 5344,1695.59 C5267.86,1671.3 5195.1,1612.53 5155.38,1571.86 " fill="none" id="raylib.audio.RlSound-backto-gameengine.audio.Sound" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="8478.39,2060.31,8475.86,2081.35,8464.71,2063.33,8478.39,2060.31" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[ac6b524096ed2551f8d852fb1ae4ec18]
reverse link raylib.audio.RlSound to gameengine.audio.Sound--><g id="link_raylib.audio.RlSound_gameengine.audio.Sound"><path codeLine="1696" d="M8502.36,2068.46 C8479.87,1942.2 8424.7,1784.79 8305,1703.59 C8288.18,1692.18 5398.36,1701.77 5379,1695.59 C5302.86,1671.3 5230.1,1612.53 5181.84,1571.86 " fill="none" id="raylib.audio.RlSound-backto-gameengine.audio.Sound-1" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="8504.57,2081.35,8507.5042,2074.7629,8502.5523,2069.5208,8499.6181,2076.108,8504.57,2081.35" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[22c48f9a1ea617bbff10accfe3f21ef0]
reverse link gameengine.node._3D.StaticBody to gameengine.node._3D.KinematicBody--><g id="link_gameengine.node._3D.StaticBody_gameengine.node._3D.KinematicBody"><path codeLine="1634" d="M530.93,3449.98 C534.37,3679.8 539.11,3996.76 541.08,4128.43 " fill="none" id="gameengine.node._3D.StaticBody-backto-gameengine.node._3D.KinematicBody" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="523.93,3449.87,530.63,3429.77,537.93,3449.66,523.93,3449.87" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[ffef4e9b0149ca898caf4002caedef00]
reverse link gameengine.AudioManager to gameengine.AbstractSound--><g id="link_gameengine.AudioManager_gameengine.AbstractSound"><path codeLine="1642" d="M3853.38,587.01 C3867.37,690.66 3885.63,825.88 3898.23,919.23 " fill="none" id="gameengine.AudioManager-backto-gameengine.AbstractSound" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="3851.61,573.88,3848.4513,580.3625,3853.2202,585.7715,3856.3789,579.289,3851.61,573.88" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[4f8ff6c56a00a2ebaf4f30ad0f2dca72]
reverse link gameengine.AudioManager to gameengine.AudioManager--><g id="link_gameengine.AudioManager_gameengine.AudioManager"><path codeLine="1645" d="M4141.11,362.22 C4157.07,380.21 4166.5,404.5 4166.5,435.09 C4166.5,471.34 4153.25,498.75 4131.6,517.3 " fill="none" id="gameengine.AudioManager-backto-gameengine.AudioManager" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="4131.6,352.88,4133.0746,359.9387,4140.1575,361.2925,4138.6829,354.2337,4131.6,352.88" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[4034b545120c1fc7df3ce9005c17745a]
reverse link gameengine.node._2D.Button to raylib.texture.RlTexture--><g id="link_gameengine.node._2D.Button_raylib.texture.RlTexture"><path codeLine="1648" d="M4841.95,3288 C5185.51,3387.52 5741.16,3532.98 6233,3591.59 C6363.45,3607.13 15579.12,3584.37 15692,3651.59 C15807.07,3720.11 15880.48,3850.94 15925.42,3966.42 " fill="none" id="gameengine.node._2D.Button-backto-raylib.texture.RlTexture" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="4829.31,3284.33,4833.9595,3289.842,4840.8357,3287.6702,4836.1863,3282.1582,4829.31,3284.33" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[b513b579c61d278e7d28da0b62466136]
reverse link gameengine.node._3D.Grid3D to raylib.RlColor--><g id="link_gameengine.node._3D.Grid3D_raylib.RlColor"><path codeLine="1651" d="M1621.08,3400.59 C1697.39,3474.16 1791.69,3548.77 1893,3591.59 C2607.32,3893.5 8174.21,4125.94 9529.36,4178.43 " fill="none" id="gameengine.node._3D.Grid3D-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1611.39,3391.16,1612.8975,3398.2118,1619.9866,3399.5325,1618.4791,3392.4807,1611.39,3391.16" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[bcb094d5872e2326896a5cc253462183]
reverse link gameengine.node._2D.Label to raylib.RlColor--><g id="link_gameengine.node._2D.Label_raylib.RlColor"><path codeLine="1654" d="M2562.36,3419.33 C2635.62,3486.38 2723.05,3552.06 2816,3591.59 C4054.86,4118.47 8357.87,4181.37 9529.48,4188.68 " fill="none" id="gameengine.node._2D.Label-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="2552.57,3410.29,2554.2579,3417.3008,2561.3785,3418.4392,2559.6907,3411.4284,2552.57,3410.29" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[ac4767bedf396fdc2e258298691feedd]
reverse link gameengine.node._2D.Label to raylib.text.RlText--><g id="link_gameengine.node._2D.Label_raylib.text.RlText"><path codeLine="1657" d="M2552.21,2952.84 C2631.09,2877.14 2728.19,2802.44 2833.5,2762.59 C2887,2742.35 19254.38,2741.37 19307.5,2762.59 C19373.03,2788.77 19434.43,2829.68 19489.46,2875.96 " fill="none" id="gameengine.node._2D.Label-backto-raylib.text.RlText" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="2542.68,2962.08,2549.7722,2960.7757,2551.296,2953.7275,2544.2038,2955.0317,2542.68,2962.08" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[0e68716fec8e55287775e0a66cb42a9e]
reverse link raylib.model.RlAnimation to raylib.model.RlModel--><g id="link_raylib.model.RlAnimation_raylib.model.RlModel"><path codeLine="1660" d="M17738.55,2389.52 C17685.56,2489.61 17607.02,2629.66 17526,2744.59 C17517.6,2756.51 17508.94,2768.48 17500.09,2780.48 " fill="none" id="raylib.model.RlAnimation-backto-raylib.model.RlModel" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="17744.72,2377.82,17738.3814,2381.2584,17739.1175,2388.4319,17745.456,2384.9934,17744.72,2377.82" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[94e509f36c49741c8429a003012c323d]
reverse link raylib.RlColor to raylib.RlColor--><g id="link_raylib.RlColor_raylib.RlColor"><path codeLine="1663" d="M10129.58,4062.5 C10147.06,4093.34 10157.5,4136.04 10157.5,4190.59 C10157.5,4252.11 10144.22,4298.56 10122.55,4329.92 " fill="none" id="raylib.RlColor-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="10122.55,4051.26,10122.3456,4058.4682,10128.9207,4061.4293,10129.1251,4054.2211,10122.55,4051.26" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="14" x="10130.613" y="4044.2441">26</text></g><!--MD5=[2aea7884344b5a8b69e7a6974e4a1ba5]
reverse link raylib.builder.RlImageBuilder to raylib.RlColor--><g id="link_raylib.builder.RlImageBuilder_raylib.RlColor"><path codeLine="1666" d="M10684.2,3571.94 C10676.14,3578.93 10667.74,3585.5 10659,3591.59 C10474.62,3720.01 10346.28,3530.51 10157,3651.59 C10145.22,3659.12 10133.8,3667.24 10122.72,3675.87 " fill="none" id="raylib.builder.RlImageBuilder-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="10693.88,3563.21,10686.7449,3564.2541,10684.9644,3571.2419,10692.0995,3570.1978,10693.88,3563.21" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="7" x="10683.3127" y="3584.952">9</text></g><!--MD5=[18d5b75976bea932094b369bd40bf7e6]
reverse link raylib.builder.RlMeshBuilder to raylib.image.RlImage--><g id="link_raylib.builder.RlMeshBuilder_raylib.image.RlImage"><path codeLine="1669" d="M11574.2,3580.47 C11580.02,3584.37 11585.95,3588.08 11592,3591.59 C11814.5,3720.67 12524.56,3524.13 12748,3651.59 C12813.36,3688.87 12868.99,3743.59 12915.49,3804.04 " fill="none" id="raylib.builder.RlMeshBuilder-backto-raylib.image.RlImage" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="11563.16,3572.74,11565.7828,3579.4572,11572.992,3579.6198,11570.3693,3572.9025,11563.16,3572.74" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="7" x="11560.7843" y="3594.6749">2</text></g><!--MD5=[0a5713b2123f1aef42fd75e7d56f2741]
reverse link raylib.model.RlModel to raylib.RlColor--><g id="link_raylib.model.RlModel_raylib.RlColor"><path codeLine="1672" d="M16671.93,3241.84 C15864.53,3331.87 14178.8,3509.38 12748,3591.59 C12604.25,3599.85 10281.87,3579.9 10157,3651.59 C10145.23,3658.35 10133.83,3665.71 10122.78,3673.6 " fill="none" id="raylib.model.RlModel-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="16684.93,3240.39,16678.523,3237.0809,16673.0042,3241.7224,16679.4112,3245.0315,16684.93,3240.39" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[6e61694ada5f7b377b2a04e6d0050a95]
reverse link raylib.model.RlModel to raylib.model.RlMesh--><g id="link_raylib.model.RlModel_raylib.model.RlMesh"><path codeLine="1675" d="M17116.26,3604.69 C17103.69,3760.28 17090.22,3926.93 17080.89,4042.38 " fill="none" id="raylib.model.RlModel-backto-raylib.model.RlMesh" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="17117.32,3591.59,17112.852,3597.2502,17116.3583,3603.5514,17120.8263,3597.8913,17117.32,3591.59" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[6d3a69bf269c6dd2a9b07014e99cd672]
reverse link raylib.model.RlModel to raylib.texture.RlTexture--><g id="link_raylib.model.RlModel_raylib.texture.RlTexture"><path codeLine="1678" d="M16673.18,3369.14 C16528.51,3441.05 16377.48,3534.85 16262,3651.59 C16174.83,3739.71 16109.73,3861.21 16064.91,3966.46 " fill="none" id="raylib.model.RlModel-backto-raylib.texture.RlTexture" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="16684.92,3363.35,16677.7691,3362.4204,16674.1606,3368.6638,16681.3116,3369.5933,16684.92,3363.35" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[ec28c162e5742837632851302674e5bf]
reverse link raylib.model.RlModelAnimation to raylib.model.RlModel--><g id="link_raylib.model.RlModelAnimation_raylib.model.RlModel"><path codeLine="1681" d="M16970.75,2409.47 C16994.09,2510.45 17026.03,2648.67 17056.49,2780.47 " fill="none" id="raylib.model.RlModelAnimation-backto-raylib.model.RlModel" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="16967.81,2396.72,16965.2638,2403.4666,16970.5122,2408.4118,16973.0584,2401.6652,16967.81,2396.72" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[e0cd7eacbaccde8075ff1cf86a625f6d]
reverse link raylib.builder.RlModelBuilder to raylib.RlColor--><g id="link_raylib.builder.RlModelBuilder_raylib.RlColor"><path codeLine="1684" d="M11736.71,3468.37 C11696.05,3517.51 11647.74,3562.23 11592,3591.59 C11309.62,3740.34 10432.3,3490.1 10157,3651.59 C10145.18,3658.53 10133.72,3666.07 10122.62,3674.14 " fill="none" id="raylib.builder.RlModelBuilder-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="11745.01,3458.15,11738.1246,3460.2928,11737.4543,3467.4726,11744.3397,3465.3299,11745.01,3458.15" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[648009d80fb89ff006a8059256b92732]
reverse link raylib.builder.RlModelBuilder to raylib.model.RlMesh--><g id="link_raylib.builder.RlModelBuilder_raylib.model.RlMesh"><path codeLine="1687" d="M12052.32,3468.42 C12093.36,3517.94 12142.3,3562.8 12199,3591.59 C12419.25,3703.44 16423.48,3542.27 16645,3651.59 C16810.3,3733.16 16930.87,3913.18 17000.27,4042.53 " fill="none" id="raylib.builder.RlModelBuilder-backto-raylib.model.RlMesh" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="12043.96,3458.12,12044.6364,3465.2993,12051.5236,3467.4362,12050.8472,3460.2569,12043.96,3458.12" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[af77de4b726126c5135dfd8c8b98988e]
reverse link raylib.builder.RlModelBuilder to raylib.texture.RlTexture--><g id="link_raylib.builder.RlModelBuilder_raylib.texture.RlTexture"><path codeLine="1690" d="M12052.61,3468.5 C12093.6,3517.94 12142.45,3562.74 12199,3591.59 C12371.89,3679.79 15525.78,3551.39 15692,3651.59 C15806.58,3720.66 15879.96,3851.31 15924.99,3966.56 " fill="none" id="raylib.builder.RlModelBuilder-backto-raylib.texture.RlTexture" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="12044.25,3458.21,12044.9314,3465.3888,12051.8201,3467.5209,12051.1387,3460.3421,12044.25,3458.21" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[a34d1202787e2d26bdf3dc801bdfd7a0]
reverse link raylib.text.RlText to raylib.RlColor--><g id="link_raylib.text.RlText_raylib.RlColor"><path codeLine="1699" d="M19473.07,3504.24 C19427.27,3539.66 19377.48,3570.51 19325,3591.59 C19088.67,3686.49 10378.9,3526.62 10157,3651.59 C10145.18,3658.25 10133.72,3665.52 10122.63,3673.33 " fill="none" id="raylib.text.RlText-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="19483.39,3496.13,19476.2005,3496.6881,19473.9505,3503.5392,19481.14,3502.9811,19483.39,3496.13" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[f3c9dbf6e404129b748a032c0ab73af3]
reverse link raylib.text.RlText to raylib.text.RlFont--><g id="link_raylib.text.RlText_raylib.text.RlFont"><path codeLine="1702" d="M19672.35,3509.22 C19628.48,3684.42 19576.2,3893.25 19541.23,4032.92 " fill="none" id="raylib.text.RlText-backto-raylib.text.RlFont" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="19675.56,3496.4,19670.2216,3501.2479,19672.6434,3508.0402,19677.9817,3503.1923,19675.56,3496.4" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[d0584c6d35f7901126ceaca0c87e3266]
reverse link raylib.builder.RlTextBuilder to raylib.RlColor--><g id="link_raylib.builder.RlTextBuilder_raylib.RlColor"><path codeLine="1705" d="M12348.24,3450.05 C12308.59,3506.3 12259.07,3558.65 12199,3591.59 C11999.97,3700.72 10353.5,3537.96 10157,3651.59 C10145.13,3658.45 10133.64,3665.93 10122.5,3673.94 " fill="none" id="raylib.builder.RlTextBuilder-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="12355.79,3439.13,12349.088,3441.7914,12348.967,3449.0015,12355.669,3446.3401,12355.79,3439.13" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[f6e2a15b6aaa1e142560f2787a529a30]
reverse link raylib.builder.RlTextBuilder to raylib.text.RlFont--><g id="link_raylib.builder.RlTextBuilder_raylib.text.RlFont"><path codeLine="1708" d="M12744.71,3219.64 C13410.93,3298.33 15183.87,3499.21 16669,3591.59 C16905.64,3606.31 18578.61,3572.14 18802,3651.59 C19020.97,3729.47 19226.11,3903.82 19357,4033.05 " fill="none" id="raylib.builder.RlTextBuilder-backto-raylib.text.RlFont" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="12731.59,3218.09,12737.0833,3222.7615,12743.5083,3219.4875,12738.015,3214.816,12731.59,3218.09" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[2d1902020d1429030924ed8291c86121]
reverse link raylib.window.RlWindow to raylib.RlCamera--><g id="link_raylib.window.RlWindow_raylib.RlCamera"><path codeLine="1711" d="M32243.94,2733.13 C32221.18,2795.13 32198.52,2856.86 32177.58,2913.87 " fill="none" id="raylib.window.RlWindow-backto-raylib.RlCamera" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="32248.5,2720.73,32242.6752,2724.981,32244.3589,2731.9928,32250.1837,2727.7418,32248.5,2720.73" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[de5fa45ff9b5ccdec6fe053e1f6eb009]
reverse link raylib.window.RlWindow to raylib.window.RlWindow--><g id="link_raylib.window.RlWindow_raylib.window.RlWindow"><path codeLine="1714" d="M32682.46,2162.35 C32699.02,2184.9 32709,2216.82 32709,2258.09 C32709,2305.9 32695.61,2341.15 32674.11,2363.84 " fill="none" id="raylib.window.RlWindow-backto-raylib.window.RlWindow" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="32674.11,2152.34,32674.8752,2159.5104,32681.7883,2161.5619,32681.0231,2154.3915,32674.11,2152.34" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[192215c8eeef0781d64af3337cbb700e]
reverse link gameengine.Scene to gameengine.node.AbstractBase--><g id="link_gameengine.Scene_gameengine.node.AbstractBase"><path codeLine="1717" d="M1895,1314.94 C1895,1330.73 1895,1346.33 1895,1361.46 " fill="none" id="gameengine.Scene-backto-gameengine.node.AbstractBase" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1895,1301.63,1891,1307.63,1895,1313.63,1899,1307.63,1895,1301.63" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[519e6d30487e81531be5af59eba60ce9]
reverse link gameengine.SceneManager to gameengine.Scene--><g id="link_gameengine.SceneManager_gameengine.Scene"><path codeLine="1720" d="M1895,710.74 C1895,726.3 1895,741.94 1895,757.48 " fill="none" id="gameengine.SceneManager-backto-gameengine.Scene" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1895,697.69,1891,703.69,1895,709.69,1899,703.69,1895,697.69" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[4eac60ab9997476953a47de8a7a24ed2]
reverse link gameengine.SceneManager to gameengine.SceneManager--><g id="link_gameengine.SceneManager_gameengine.SceneManager"><path codeLine="1723" d="M2207.66,362.66 C2223.59,380.6 2233,404.74 2233,435.09 C2233,471.05 2219.78,498.31 2198.15,516.85 " fill="none" id="gameengine.SceneManager-backto-gameengine.SceneManager" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="2198.15,353.33,2199.6246,360.3887,2206.7075,361.7425,2205.2329,354.6837,2198.15,353.33" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[77f7a23a51bfdb6a6818a6ac98a2b8ab]
reverse link gameengine.node._3D.StaticBody to raylib.model.RlModel--><g id="link_gameengine.node._3D.StaticBody_raylib.model.RlModel"><path codeLine="1726" d="M752.68,2933.52 C829.72,2864.61 921.4,2798.97 1019.5,2762.59 C1095.75,2734.31 12649.27,2758.71 12730.5,2762.59 C14176.97,2831.74 15880.65,3027.48 16684.96,3126.77 " fill="none" id="gameengine.node._3D.StaticBody-backto-raylib.model.RlModel" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="742.88,2942.37,750.0135,2941.3148,751.7831,2934.3242,744.6496,2935.3794,742.88,2942.37" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[e75aac9b76738854d9bc9c7ee99916f4]
reverse link gameengine.TextureManager to raylib.texture.RlTexture--><g id="link_gameengine.TextureManager_raylib.texture.RlTexture"><path codeLine="1729" d="M5131.37,544.86 C5194.52,601.72 5279.55,665.93 5369,697.59 C6803.41,1205.23 32745,6 32745,1527.59 C32745,1527.59 32745,1527.59 32745,2259.09 C32745,2555.24 32933.75,3383.53 32723,3591.59 C32641.65,3671.9 16359.35,3591.67 16262,3651.59 C16149.97,3720.54 16081.93,3851.18 16041.68,3966.46 " fill="none" id="gameengine.TextureManager-backto-raylib.texture.RlTexture" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="5121.43,535.8,5123.1722,542.7975,5130.3015,543.8806,5128.5593,536.8831,5121.43,535.8" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="7" x="5120.6737" y="557.0736">2</text></g><!--MD5=[aea91b6ae4533d03eb4e1343dc191be8]
reverse link gameengine.TextureManager to gameengine.TextureManager--><g id="link_gameengine.TextureManager_gameengine.TextureManager"><path codeLine="1732" d="M5182.35,330.91 C5277.33,307.24 5367,341.96 5367,435.09 C5367,532.4 5269.1,565.94 5169.53,535.72 " fill="none" id="gameengine.TextureManager-backto-gameengine.TextureManager" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="5169.53,334.46,5176.3778,336.7199,5181.0977,331.268,5174.2498,329.0081,5169.53,334.46" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[2ed21616f6b9d18082431be3ab2a2540]
reverse link gameengine.node._2D.TextureRect to raylib.RlColor--><g id="link_gameengine.node._2D.TextureRect_raylib.RlColor"><path codeLine="1735" d="M3789.35,3398.34 C3905.03,3471.61 4042.57,3546.6 4178,3591.59 C5188.61,3927.32 8514.71,4122.23 9529.44,4174.94 " fill="none" id="gameengine.node._2D.TextureRect-backto-raylib.RlColor" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="3778.22,3391.26,3781.1328,3397.8566,3788.3423,3397.7051,3785.4295,3391.1084,3778.22,3391.26" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[5e84c891982318c5ae472fd3c54b88f6]
reverse link gameengine.node._2D.TextureRect to raylib.texture.RlTexture--><g id="link_gameengine.node._2D.TextureRect_raylib.texture.RlTexture"><path codeLine="1738" d="M3775.94,3398.36 C3893.57,3474.92 4036.01,3552.2 4178,3591.59 C4332.1,3634.34 15554.55,3569.85 15692,3651.59 C15807.11,3720.04 15880.52,3850.87 15925.45,3966.37 " fill="none" id="gameengine.node._2D.TextureRect-backto-raylib.texture.RlTexture" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="3765,3391.2,3767.8302,3397.8325,3775.0411,3397.7709,3772.2108,3391.1384,3765,3391.2" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[77e424d20c4197807b4eea48b66a231c]
reverse link gameengine.AbstractSound to gameengine.AbstractSound::SoundCategory--><g id="link_gameengine.AbstractSound_gameengine.AbstractSound::SoundCategory"><path codeLine="1747" d="M3992.22,1151.9 C4036.66,1208.64 4097.54,1270.46 4169,1301.59 C4213.9,1321.15 5888.96,1292.22 5932,1315.59 C5998.47,1351.69 6038.71,1434.57 6058.04,1485.35 " fill="none" id="gameengine.AbstractSound-backto-gameengine.AbstractSound::SoundCategory" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="3987.8592" cy="1146.2275" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="3992.7284" x2="3982.99" y1="1152.575" y2="1139.88"/><line style="stroke:#181818;stroke-width:1.0;" x1="3981.5117" x2="3994.2067" y1="1151.0967" y2="1141.3583"/></g><!--MD5=[87e56c4211670b48ac015ac7c0732ee1]
reverse link raylib.builder.RlImageBuilder to raylib.builder.RlImageBuilder::ImageType--><g id="link_raylib.builder.RlImageBuilder_raylib.builder.RlImageBuilder::ImageType"><path codeLine="1750" d="M10764.42,3578.06 C10758.14,3602.93 10751.95,3627.6 10746,3651.59 C10706.93,3809.07 10663.66,3993.09 10638.76,4099.98 " fill="none" id="raylib.builder.RlImageBuilder-backto-raylib.builder.RlImageBuilder::ImageType" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="10766.1646" cy="3571.1548" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="10764.1993" x2="10768.13" y1="3578.9097" y2="3563.4"/><line style="stroke:#181818;stroke-width:1.0;" x1="10758.4098" x2="10773.9195" y1="3569.1895" y2="3573.1202"/></g><!--MD5=[619ea495583f73875fb05cbb74c96711]
reverse link raylib.builder.RlImageBuilder to raylib.builder.RlImageBuilder::ParameterName--><g id="link_raylib.builder.RlImageBuilder_raylib.builder.RlImageBuilder::ParameterName"><path codeLine="1753" d="M10875.75,3578.23 C10879.51,3728.84 10883.61,3893.39 10886.62,4013.81 " fill="none" id="raylib.builder.RlImageBuilder-backto-raylib.builder.RlImageBuilder::ParameterName" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="10875.5782" cy="3571.2375" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="10875.7764" x2="10875.38" y1="3579.2351" y2="3563.24"/><line style="stroke:#181818;stroke-width:1.0;" x1="10867.5807" x2="10883.5758" y1="3571.4358" y2="3571.0393"/></g><!--MD5=[2d6ee4870631d8e6302b49837df72893]
reverse link raylib.builder.RlMeshBuilder to raylib.builder.RlMeshBuilder::MeshType--><g id="link_raylib.builder.RlMeshBuilder_raylib.builder.RlMeshBuilder::MeshType"><path codeLine="1756" d="M11302.02,3587.89 C11289.37,3756.88 11275.54,3941.77 11266.59,4061.38 " fill="none" id="raylib.builder.RlMeshBuilder-backto-raylib.builder.RlMeshBuilder::MeshType" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="11302.5457" cy="3580.8679" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="11301.9513" x2="11303.14" y1="3588.8458" y2="3572.89"/><line style="stroke:#181818;stroke-width:1.0;" x1="11294.5678" x2="11310.5236" y1="3580.2736" y2="3581.4622"/></g><!--MD5=[fc072d3e7813001ec5d73af69cd4ed1b]
reverse link raylib.builder.RlMeshBuilder to raylib.builder.RlMeshBuilder::ParameterName--><g id="link_raylib.builder.RlMeshBuilder_raylib.builder.RlMeshBuilder::ParameterName"><path codeLine="1759" d="M11407.53,3587.73 C11433.96,3727.91 11462.45,3879.03 11484.27,3994.78 " fill="none" id="raylib.builder.RlMeshBuilder-backto-raylib.builder.RlMeshBuilder::ParameterName" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="11406.208" cy="3580.7523" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="11407.686" x2="11404.73" y1="3588.6146" y2="3572.89"/><line style="stroke:#181818;stroke-width:1.0;" x1="11398.3457" x2="11414.0703" y1="3582.2303" y2="3579.2743"/></g><!--MD5=[1ca77fbb3719da3e605fb93ea6942ba9]
reverse link raylib.builder.RlModelBuilder to raylib.builder.RlModelBuilder::RequiredParameter--><g id="link_raylib.builder.RlModelBuilder_raylib.builder.RlModelBuilder::RequiredParameter"><path codeLine="1762" d="M11887.57,3473.6 C11881.67,3701 11873.89,4001.13 11870.59,4128.37 " fill="none" id="raylib.builder.RlModelBuilder-backto-raylib.builder.RlModelBuilder::RequiredParameter" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="11887.7542" cy="3466.3774" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="11887.5483" x2="11887.96" y1="3474.3747" y2="3458.38"/><line style="stroke:#181818;stroke-width:1.0;" x1="11879.7568" x2="11895.7515" y1="3466.1715" y2="3466.5832"/></g><!--MD5=[6a7faf0fe1c2f09ecdd30617afb7de77]
reverse link raylib.builder.RlModelBuilder to raylib.builder.RlModelBuilder::ValidType--><g id="link_raylib.builder.RlModelBuilder_raylib.builder.RlModelBuilder::ValidType"><path codeLine="1765" d="M11977.39,3472.9 C12041.41,3694.95 12125.5,3986.66 12163.63,4118.94 " fill="none" id="raylib.builder.RlModelBuilder-backto-raylib.builder.RlModelBuilder::ValidType" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="11975.4269" cy="3466.0667" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="11977.6438" x2="11973.21" y1="3473.7534" y2="3458.38"/><line style="stroke:#181818;stroke-width:1.0;" x1="11967.7402" x2="11983.1136" y1="3468.2836" y2="3463.8498"/></g><!--MD5=[a47452a08ffc3c685b357c8b71a6b929]
@startuml





/' Objects '/

namespace raylib {
	class GlStateManager {
		+{static} color(const RlColor& color) : void
		+{static} color(unsigned char r, unsigned char g, unsigned char b, unsigned char a) : void
		+{static} color(float r, float g, float b, float a) : void
		+{static} color(unsigned char r, unsigned char g, unsigned char b) : void
		+{static} disableBackfaceCulling() : void
		+{static} disableColorBlend() : void
		+{static} disableDepthMask() : void
		+{static} disableDepthTest() : void
		+{static} disableScissorTest() : void
		+{static} disableSmoothLines() : void
		+{static} disableWireMode() : void
		+{static} enableBackfaceCulling() : void
		+{static} enableColorBlend() : void
		+{static} enableDepthMask() : void
		+{static} enableDepthTest() : void
		+{static} enableScissorTest() : void
		+{static} enableSmoothLines() : void
		+{static} enableWireMode() : void
		+{static} popMatrix() : void
		+{static} pushMatrix() : void
		+{static} rotate(const Vector3f& rotation) : void
		+{static} scale(const Vector3f& scale) : void
		+{static} scissor(int x, int y, int width, int height) : void
		+{static} scissor(const Rectangle& rect) : void
		+{static} translate(const Vector3f& translation) : void
	}

	class Random {
		+Random()
		+generate(double min, double max) : double
		+generate(float min, float max) : float
		+generate(int min, int max) : int
		+generate(long min, long max) : long
		+generate(short min, short max) : short
		-_random_device : std::random_device
		+generateSizeT(std::size_t min, std::size_t max) : std::size_t
	}

	class RlCamera {
		+RlCamera()
		+RlCamera(const Vector3f& position, const Vector3f& target, const Vector3f& lookingPoint, const float& fovy, const CameraProjection& projection, const CameraMode& cameraMode)
		-_camera : Camera3D
		+get() : Camera3D& {query}
		-_cameraMode : CameraMode
		-_mode : CameraMode
		+getConstructedCameraMode() : CameraMode& {query}
		+getMode() : CameraMode& {query}
		-_projection : CameraProjection
		+getConstructedProjection() : CameraProjection& {query}
		+geMatrix() : Matrix
		-_lookingPoint : Vector3f
		-_position : Vector3f
		-_target : Vector3f
		+getConstructedLookingPoint() : Vector3f& {query}
		+getConstructedPosition() : Vector3f& {query}
		+getConstructedTarget() : Vector3f& {query}
		-_fovy : float
		+getConstructedFovy() : float& {query}
		+reset() : void
		+setCameraMode(const CameraMode& mode) : void
		+setFov(const float& fovy) : void
		+setPosition(const Vector3f& position) : void
		+setProjection(const CameraProjection& projection) : void
		+setTarget(const Vector3f& target) : void
		+update() : void
	}

	class RlColor {
		+RlColor(Color color)
		+RlColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
		+RlColor(std::uint32_t color)
		+RlColor(const Vector4f& normalizedColor)
		+RlColor(float hue, float saturation, float value)
		-_color : Color
		+getColor() : Color& {query}
		+operator+(unsigned char value) : RlColor&
		+operator+=(unsigned char value) : RlColor&
		+operator-(unsigned char value) : RlColor&
		+operator-=(unsigned char value) : RlColor&
		+setAlpha(unsigned char a) : RlColor&
		+setBlue(unsigned char b) : RlColor&
		+setGreen(unsigned char g) : RlColor&
		+setRed(unsigned char r) : RlColor&
		+toHSV() : Vector3f
		+normalize() : Vector4f {query}
		+operator!=(const RlColor& rhs) : bool {query}
		+operator==(const RlColor& rhs) : bool {query}
		+{static} Beige : static const RlColor
		+{static} Black : static const RlColor
		+{static} Blue : static const RlColor
		+{static} Brown : static const RlColor
		+{static} DarkBlue : static const RlColor
		+{static} DarkBrown : static const RlColor
		+{static} DarkGray : static const RlColor
		+{static} DarkGreen : static const RlColor
		+{static} DarkPurple : static const RlColor
		+{static} Gold : static const RlColor
		+{static} Gray : static const RlColor
		+{static} Green : static const RlColor
		+{static} LightGray : static const RlColor
		+{static} Lime : static const RlColor
		+{static} Magenta : static const RlColor
		+{static} Maroon : static const RlColor
		+{static} Orange : static const RlColor
		+{static} Pink : static const RlColor
		+{static} Purple : static const RlColor
		+{static} RayWhite : static const RlColor
		+{static} Red : static const RlColor
		+{static} SkyBlue : static const RlColor
		+{static} Transparent : static const RlColor
		+{static} Violet : static const RlColor
		+{static} White : static const RlColor
		+{static} Yellow : static const RlColor
		+toInteger() : std::uint32_t {query}
		+getAlpha() : unsigned char& {query}
		+getBlue() : unsigned char& {query}
		+getGreen() : unsigned char& {query}
		+getRed() : unsigned char& {query}
		+alpha(float alpha) : void
		+alphaBlend(const RlColor& src, const RlColor& tint) : void
		+setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a) : void
		+setColor(const Color& color) : void
	}

	class Vector2 <template<typename T>> {
		+Vector2()
		+Vector2(T x, T y)
		+x : T
		+y : T
		+operator!=(const Vector2<T>& other) : bool {query}
		+operator==(const Vector2<T>& other) : bool {query}
	}

	class Vector3 <template<typename T>> {
		+Vector3()
		+Vector3(T x, T y, T z)
		+x : T
		+y : T
		+z : T
		+operator!=(const Vector3<T>& other) : bool {query}
		+operator==(const Vector3<T>& other) : bool {query}
	}

	class Vector4 <template<typename T>> {
		+Vector4()
		+Vector4(T x, T y, T z, T w)
		+w : T
		+x : T
		+y : T
		+z : T
		+operator!=(const Vector4& other) : bool {query}
		+operator==(const Vector4& other) : bool {query}
	}

	namespace window {
		class RlWindow {
			+RlWindow()
			+~RlWindow()
			-_isCreated : bool
			-_isOpen : bool
			+hasState(const ConfigFlags& flag) : bool
			+isFocused() : bool
			+isFullScreen() : bool
			+isHidden() : bool
			+isMaximized() : bool
			+isMinimized() : bool
			+isOpen() : bool
			+isReady() : bool
			+isResized() : bool
			+isIsCreated() : bool& {query}
			-_height : int
			-_minHeight : int
			-_minWidth : int
			-_width : int
			+getHeight() : int& {query}
			+getMinHeight() : int& {query}
			+getMinWidth() : int& {query}
			+getWidth() : int& {query}
			-_camera : raylib::RlCamera
			+getCamera() : raylib::RlCamera&
			+getCamera() : raylib::RlCamera& {query}
			-{static} _instance : static std::shared_ptr<RlWindow>
			+{static} getInstance() : std::shared_ptr<RlWindow>&
			-_title : std::string
			+getTitle() : std::string& {query}
			+clearState(unsigned int flags) : void
			+createWindow(const std::string& title, int width, int height, int fps) : void
			+maximize() : void
			+minimize() : void
			+restore() : void
			+setCamera(const RlCamera& camera) : void
			+setConfigFlags(unsigned int flags) : void
			+setIcon(const image::RlImage& image) : void
			+setIsOpen(const bool& isOpen) : void
			+setMinSize(int width, int height) : void
			+setMonitor(int monitor) : void
			+setPosition(int x, int y) : void
			+setSize(int width, int height) : void
			+setState(unsigned int flags) : void
			+setTitle(const std::string& title) : void
			+takeScreenshot(const std::string& fileName) : void
			+toggleFullscreen() : void
		}

		class System {
			+{static} getMonitorPosition(int monitorIndex) : Vector2f
			+{static} getWindowPosition() : Vector2f
			+{static} getWindowScaleDPI() : Vector2f
			+{static} getMonitorPhysicalSize(int monitorIndex) : Vector2i
			+{static} getMonitorSize(int monitorIndex) : Vector2i
			+{static} getScreenSize() : Vector2i
			+{static} getCurrentMonitor() : int
			+{static} getMonitorCount() : int
			+{static} getMonitorHeight(int monitorIndex) : int
			+{static} getMonitorPhysicalHeight(int monitorIndex) : int
			+{static} getMonitorPhysicalWidth(int monitorIndex) : int
			+{static} getMonitorRefreshRate(int monitorIndex) : int
			+{static} getMonitorWidth(int monitorIndex) : int
			+{static} getScreenHeight() : int
			+{static} getScreenWidth() : int
			+{static} getClipboardText() : std::string
			+{static} getMonitorName(int monitorIndex) : std::string
			+{static} setClipboardText(const std::string& text) : void
		}
	}

	namespace texture {
		class RlRenderTexture {
			+RlRenderTexture(int width, int height)
			+~RlRenderTexture()
			-_renderTexture : RenderTexture2D
			+getRenderTexture() : RenderTexture2D& {query}
		}

		class RlTexture {
			+RlTexture(const std::string& fileName)
			+RlTexture(const image::RlImage& image)
			+RlTexture(const image::RlImage& image, const CubemapLayout& layout)
			+~RlTexture()
			-_textureRec : Rectangle
			+getTextureRec() : Rectangle& {query}
			-_texture : Texture2D
			+get() : Texture2D& {query}
			+getTexture() : Texture2D&
			+getFormat() : int& {query}
			+getHeight() : int& {query}
			+getMipmaps() : int& {query}
			+getWidth() : int& {query}
			-_texturePath : std::string
			+getPath() : std::string& {query}
			+getID() : unsigned int& {query}
			+genTextureMipmaps() : void
			+setFilter(const TextureFilter& filter) : void
			+setWrap(const TextureWrap& wrap) : void
			+update(const void* pixels) : void
			+updateRect(const Rectangle& rec, const void* pixels) : void
		}
	}

	namespace text {
		class RlFont {
			+RlFont()
			+RlFont(const std::string& fontPath)
			+RlFont(const int& fontSize)
			+RlFont(const std::string& fontPath, const int& fontSize, int* fontChars, const int& glyphCount)
			+RlFont(const image::RlImage& image, const RlColor& key, const int& firstChar)
			+RlFont(const std::string& fileType, const unsigned char* fileData, int dataSize, const int& fontSize, int* fontChars, const int& glyphCount)
			+~RlFont()
			-_font : Font
			+getFont() : Font& {query}
			-_fontSize : int
			+getFontSize() : int {query}
			+{static} getDefaultFont() : std::shared_ptr<RlFont>
			-_fontPath : std::string
			+getFontPath() : std::string& {query}
		}

		class RlText {
			+RlText(const std::string& text, const Vector2f& position, const RlColor& color)
			+RlText(const std::string& text, std::shared_ptr<RlFont>& font, const Vector2f& position, const RlColor& color)
			+RlText(const std::string& text, const std::string& fontPath, float fontSize, const Vector2f& position, const RlColor& color)
			-_color : RlColor
			+getColor() : RlColor& {query}
			-_origin : Vector2f
			-_position : Vector2f
			+getSize() : Vector2f {query}
			+getOrigin() : Vector2f& {query}
			+getPosition() : Vector2f& {query}
			-_fontSize : float
			-_rotation : float
			-_textSpacing : float
			+getFontSize() : float {query}
			+getRotation() : float {query}
			+getTextSpacing() : float {query}
			+getWidth() : float {query}
			-_font : std::shared_ptr<RlFont>
			+getFont() : std::shared_ptr<RlFont>& {query}
			-_text : std::string
			+getText() : std::string& {query}
			+setColor(const RlColor& color) : void
			+setFont(const std::shared_ptr<RlFont>& font) : void
			+setFontSize(float fontSize) : void
			+setOrigin(const Vector2f& origin) : void
			+setPosition(float x, float y) : void
			+setPosition(const Vector2f& pos) : void
			+setRotation(float rotation) : void
			+setText(const std::string& text) : void
			+setTextSpacing(float textSpacing) : void
		}

		class TextCodepoint {
			+TextCodepoint(const std::string& text)
			+getCodepointsCount() : int {query}
			+{static} codePointToUTF8(const int& codepoint, int& byteSize) : std::string
			+toUTF8String(const int& bytesLength) : std::string
			-_codepoints : std::vector<int>
			+getCodepoints() : std::vector<int>& {query}
		}
	}

	namespace shader {
		class RlShader {
			+RlShader()
			+~RlShader()
			-_shader : Shader
			+getShader() : Shader& {query}
			+getLocation(const std::string& uniformName) : int
			+getLocationAttrib(const std::string& attribName) : int
			+load(const std::string& vsFileName, const std::string& fsFileName) : void
			+loadFromMemory(const std::string& vsCode, const std::string& fsCode) : void
			+setValue(int locIndex, const void* value, int uniformType) : void
			+setValueMatrix(int locIndex, const Matrix& mat) : void
			+setValueTexture(int locIndex, const texture::RlTexture& texture) : void
			+setValueV(int locIndex, const void* value, int uniformType, int count) : void
		}
	}

	namespace model {
		class MeshGenerator {
			+{static} genMeshCone(const float& radius, const float& height, const int& slices) : RlMesh
			+{static} genMeshCube(const float& width, const float& height, const float& length) : RlMesh
			+{static} genMeshCubicmap(const image::RlImage& cubicmap, const Vector3f& cubeSize) : RlMesh
			+{static} genMeshCylinder(const float& radius, const float& height, const int& slices) : RlMesh
			+{static} genMeshHeightmap(const image::RlImage& heightmap, const Vector3f& size) : RlMesh
			+{static} genMeshHemiSphere(const float& radius, const int& rings, const int& slices) : RlMesh
			+{static} genMeshKnot(const float& radius, const float& size, const int& radSeg, const int& sides) : RlMesh
			+{static} genMeshPlane(const float& width, const float& length, const int& resX, const int& resZ) : RlMesh
			+{static} genMeshPoly(const int& sides, const float& radius) : RlMesh
			+{static} genMeshSphere(const float& radius, const int& rings, const int& slices) : RlMesh
			+{static} genMeshTorus(const float& radius, const float& size, const int& radSeg, const int& sides) : RlMesh
		}

		class RlAnimation {
			+RlAnimation()
			+RlAnimation(const std::string& animationDir, const std::string& extension)
			-_isLoaded : bool
			+isLoaded() : bool& {query}
			+getAnimationsSize() : std::size_t {query}
			-_animationModels : std::vector<RlModel>
			+getAnimationModels() : std::vector<RlModel>& {query}
			-_frame : unsigned int
			+getFrame() : unsigned int& {query}
			+update() : void
		}

		class RlMaterial {
			+RlMaterial(const std::string& fileName)
			+RlMaterial(Material& material)
			+~RlMaterial()
			-_material : Material
			+getMaterial() : Material& {query}
			+getMaterial() : Material&
		}

		class RlMesh {
			+RlMesh(const Mesh& mesh)
			+RlMesh(const RlMesh& mesh)
			+~RlMesh()
			+getBoundingBox() : BoundingBox
			+getMesh() : Mesh& {query}
			+operator=(const RlMesh& mesh) : RlMesh&
			+exportMesh(const std::string& fileName) : bool
			-_mesh : std::shared_ptr<Mesh>
			+getMeshSharedPtr() : std::shared_ptr<Mesh>& {query}
			+genBinormals() : void
			+genTangents() : void
			+updateBuffer(const int& index, void* data, const int& dataSize, const int& offset) : void
			+uploadInGPU(const bool& dynamic) : void
		}

		class RlModel {
			+RlModel(const std::string& fileName)
			+RlModel(const std::string& fileName, const std::string& textureName)
			+RlModel(const std::shared_ptr<RlMesh>& mesh)
			+RlModel(const RlMesh& mesh)
			+RlModel(const RlModel& model)
			+~RlModel()
			-_baseBoudingBox : BoundingBox
			-_boundingBox : BoundingBox
			+getDefaultBoundingBox() : BoundingBox {query}
			+getBaseBoundingBox() : BoundingBox& {query}
			+getBoundingBox() : BoundingBox& {query}
			+getModel() : Model& {query}
			-_color : RlColor
			+getColor() : RlColor& {query}
			+operator=(const RlModel& model) : RlModel&
			-_position : Vector3f
			-_rotationAxis : Vector3f
			-_scale : Vector3f
			+getPosition() : Vector3f& {query}
			+getRotationAxis() : Vector3f& {query}
			+getScale() : Vector3f& {query}
			-_rotationAngle : float
			+getRotationAngle() : float& {query}
			-_model : std::shared_ptr<Model>
			-_mesh : std::shared_ptr<RlMesh>
			-_texture : std::shared_ptr<texture::RlTexture>
			+getTexture() : std::shared_ptr<texture::RlTexture>& {query}
			+setBoundingBox(const BoundingBox& boundingBox) : void
			+setColor(const RlColor& color) : void
			+setMaterialTexture(const std::shared_ptr<texture::RlTexture>& texture) : void
			+setMaterialTexture(const std::shared_ptr<texture::RlTexture>& texture, const int& materialIndex) : void
			+setMaterialTexture(const std::shared_ptr<texture::RlTexture>& texture, const int& materialIndex, const MaterialMapIndex& type) : void
			+setMeshMaterial(const int& meshId, const int& materialId) : void
			+setPosition(const Vector3f& position) : void
			+setPosition(const float& x, const float& y, const float& z) : void
			+setRotationAngle(float rotationAngle) : void
			+setRotationAxis(const Vector3f& rotationAxis) : void
			+setRotationAxis(const float& x, const float& y, const float& z) : void
			+setScale(const Vector3f& scale) : void
			+setScale(const float& x, const float& y, const float& z) : void
		}

		class RlModelAnimation {
			+RlModelAnimation(const RlModel& model, const std::string& fileName)
			+~RlModelAnimation()
			-_anims : ModelAnimation*
			-_model : RlModel
			+animationIndexIsValid(const unsigned int& animIndex) : bool
			-_frameCount : int
			-_animations : std::vector<ModelAnimation>
			-_count : unsigned int
			+getCount() : unsigned int {query}
			+incrementFrameCount(const int& value) : void
			+unload(const unsigned int& animIndex) : void
			+update(const unsigned int& animIndex) : void
		}
	}

	namespace image {
		class ImageDrawHelper {
			+{static} clearBackground(image::RlImage& dst, const RlColor& color) : void
			+{static} drawCircle(image::RlImage& dst, int centerX, int centerY, int radius, const RlColor& color) : void
			+{static} drawCircle(image::RlImage& dst, const Vector2f& center, int radius, const RlColor& color) : void
			+{static} drawImage(image::RlImage& dst, const image::RlImage& src, const Rectangle& srcRec, const Rectangle& dstRec, const RlColor& tint) : void
			+{static} drawImageText(image::RlImage& dst, const std::string& text, int posX, int posY, int fontSize, const RlColor& color) : void
			+{static} drawImageText(image::RlImage& dst, const raylib::text::RlFont& font, const std::string& text, const Vector2f& position, float fontSize, float spacing, const RlColor& tint) : void
			+{static} drawLine(image::RlImage& dst, int startPosX, int startPosY, int endPosX, int endPosY, const RlColor& color) : void
			+{static} drawLine(image::RlImage& dst, const Vector2f& start, const Vector2f& end, const RlColor& color) : void
			+{static} drawPixel(image::RlImage& dst, int posX, int posY, const RlColor& color) : void
			+{static} drawPixel(image::RlImage& dst, const Vector2f& position, const RlColor& color) : void
			+{static} drawRectangle(image::RlImage& dst, int posX, int posY, int width, int height, const RlColor& color) : void
			+{static} drawRectangle(image::RlImage& dst, const Vector2f& position, const Vector2f& size, const RlColor& color) : void
			+{static} drawRectangleLines(image::RlImage& dst, const Rectangle& rec, int thick, const RlColor& color) : void
			+{static} drawRectangleRec(image::RlImage& dst, const Rectangle& rec, const RlColor& color) : void
		}

		class ImageGenerator {
			+{static} genImageCellular(const int& width, const int& height, const int& tileSize) : RlImage
			+{static} genImageChecked(const int& width, const int& height, const int& checksX, const int& checksY, const RlColor& col1, const RlColor& col2) : RlImage
			+{static} genImageColor(const int& width, const int& height, const RlColor& color) : RlImage
			+{static} genImageGradientH(const int& width, const int& height, const RlColor& left, const RlColor& right) : RlImage
			+{static} genImageGradientRadial(const int& width, const int& height, float density, const RlColor& inner, const RlColor& outer) : RlImage
			+{static} genImageGradientV(const int& width, const int& height, const RlColor& top, const RlColor& bottom) : RlImage
			+{static} genImageWhiteNoise(const int& width, const int& height, float factor) : RlImage
		}

		class RlImage {
			+RlImage(const Image& image)
			+RlImage(const Image& image, int frameCount)
			+~RlImage()
			-_image : Image
			+getImage() : Image& {query}
			+getImage() : Image&
			+getImageAlphaBorder(float threshold) : Rectangle
			+getImageColor(int x, int y) : RlColor
			+copy() : RlImage
			+subImage(const Rectangle& rec) : RlImage
			+save(const std::string& fileName) : bool
			+saveAsCode(const std::string& fileName) : bool
			-_frameCount : int
			+getFrameCount() : int& {query}
			+loadImageColors() : std::vector<RlColor>
			+loadImagePalette(int maxPaletteSize) : std::vector<RlColor>
			+alphaClear(const RlColor& color, float threshold) : void
			+alphaCrop(float threshold) : void
			+alphaMask(const RlImage& alphaMask) : void
			+alphaPremultiply() : void
			+changeFormat(int newFormat) : void
			+colorBrightness(int brightness) : void
			+colorContrast(float contrast) : void
			+colorGrayscale() : void
			+colorInvert() : void
			+colorReplace(const RlColor& color, const RlColor& replace) : void
			+colorTint(const RlColor& color) : void
			+crop(const Rectangle& crop) : void
			+dither(int rBpp, int gBpp, int bBpp, int aBpp) : void
			+flipHorizontal() : void
			+flipVertical() : void
			+mipmaps() : void
			+resize(int newWidth, int newHeight) : void
			+resizeCanvas(int newWidth, int newHeight, int offsetX, int offsetY, const RlColor& fill) : void
			+resizeNearesetNeighbor(int newWidth, int newHeight) : void
			+rotateClockwise() : void
			+rotateCounterClockwise() : void
			+toPot(const RlColor& fill) : void
		}
	}

	namespace helper {
		class AudioHelper {
			+{static} isAudioDeviceReady() : bool
			+{static} getNumberOfSoundsPlaying() : int
			-{static} _audioDeviceInit : static bool
			+{static} closeAudioDevice() : void
			+{static} initAudioDevice() : void
			+{static} setAudioStreamBufferSizeDefault(const int& size) : void
			+{static} setMasterVolume(float volume) : void
			+{static} stopMultiSound() : void
		}

		class CameraHelper {
			+{static} setAltControl(int keyAlt) : void
			+{static} setCameraMode(const RlCamera& camera, const CameraMode& mode) : void
			+{static} setMoveControls(int keyFront, int keyBack, int keyRight, int keyLeft, int keyUp, int keyDown) : void
			+{static} setPanControl(int keyPan) : void
			+{static} setSmoothZoomControl(int keySmoothZoom) : void
		}

		class Collision2DHelper {
			+{static} getCollisionRec(const Rectangle& rec1, const Rectangle& rec2) : Rectangle
			+{static} checkCollisionCircleRec(const Vector2f& center, const float& radius, const Rectangle& rec) : bool
			+{static} checkCollisionCircles(const Vector2f& center1, const float& radius1, const Vector2f& center2, const float& radius2) : bool
			+{static} checkCollisionLines(const Vector2f& startPos1, const Vector2f& endPos1, const Vector2f& startPos2, const Vector2f& endPos2, Vector2f& collisionPoint) : bool
			+{static} checkCollisionPointCircle(const Vector2f& point, const Vector2f& center, const float& radius) : bool
			+{static} checkCollisionPointLine(const Vector2f& point, const Vector2f& p1, const Vector2f& p2, const int& threshold) : bool
			+{static} checkCollisionPointRec(const Vector2f& point, const Rectangle& rec) : bool
			+{static} checkCollisionPointTriangle(const Vector2f& point, const Vector2f& p1, const Vector2f& p2, const Vector2f& p3) : bool
			+{static} checkCollisionRecs(const Rectangle& rec1, const Rectangle& rec2) : bool
		}

		class Collision3dHelper {
			+{static} getRayCollisionBox(const Ray& ray, const BoundingBox& box) : RayCollision
			+{static} getRayCollisionMesh(const Ray& ray, const model::RlMesh& mesh, const Matrix& transform) : RayCollision
			+{static} getRayCollisionModel(const Ray& ray, const model::RlModel& model) : RayCollision
			+{static} getRayCollisionQuad(const Ray& ray, const Vector3f& p1, const Vector3f& p2, const Vector3f& p3, const Vector3f& p4) : RayCollision
			+{static} getRayCollisionSphere(const Ray& ray, const Vector3f& center, const float& radius) : RayCollision
			+{static} getRayCollisionTriangle(const Ray& ray, const Vector3f& p1, const Vector3f& p2, const Vector3f& p3) : RayCollision
			+{static} checkCollisionBoxSphere(const BoundingBox& box, const Vector3f& center, const float& radius) : bool
			+{static} checkCollisionBoxes(const BoundingBox& box1, const BoundingBox& box2) : bool
			+{static} checkCollisionSpheres(const Vector3f& center1, const float& radius1, const Vector3f& center2, const float& radius2) : bool
		}

		class ColorHelper {
			+{static} colorAlpha(const RlColor& color, float alpha) : RlColor
			+{static} colorAlphaBlend(const RlColor& dst, const RlColor& src, const RlColor& tint) : RlColor
			+{static} colorFromHSV(float hue, float saturation, float value) : RlColor
			+{static} colorFromNormalized(const Vector4f& normalizedColor) : RlColor
			+{static} getColor(unsigned int hexValue) : RlColor
			+{static} getPixelColor(void* srcPtr, int format) : RlColor
			+{static} colorToHSV(const RlColor& color) : Vector3f
			+{static} getPixelDataSize(int width, int height, int format) : int
			+{static} setPixelColor(void* dstPtr, const RlColor& color, int format) : void
		}

		class CoreHelper {
			+{static} loadVrStereoConfig(const VrDeviceInfo& device) : VrStereoConfig
			+{static} getTime() : double
			+{static} getFrameTime() : float
			+{static} getFPS() : int
			+{static} openURL(const std::string& url) : void
			+{static} setFramerateLimit(int fps) : void
			+{static} unloadVrStereoConfig(const VrStereoConfig& config) : void
		}

		class FileHelper {
			+{static} directoryExists(const std::string& dirPath) : bool
			+{static} fileExists(const std::string& fileName) : bool
			+{static} isFileDropped() : bool
			+{static} isFileExtension(const std::string& fileName, const std::string& ext) : bool
			+{static} saveFileText(const std::string& fileName, const std::string& text) : bool
			+{static} getFileModTime(const std::string& fileName) : long long
			+{static} getDirectoryPath(const std::string& filePath) : std::string
			+{static} getFileExtension(const std::string& fileName) : std::string
			+{static} getFileName(const std::string& filePath) : std::string
			+{static} getFileNameWithoutExt(const std::string& filePath) : std::string
			+{static} getPrevDirectoryPath(const std::string& dirPath) : std::string
			+{static} getWorkingDirectory() : std::string
			+{static} loadFileText(const std::string& fileName) : std::string
			+{static} getDirectoryFiles(const std::string& dirPath, const bool& recursive) : std::vector<std::string>
			+{static} getDirectoryFiles(const std::string& dirPath, const std::function<bool ( const std::string& )>& filter) : std::vector<std::string>
			+{static} getDirectoryFiles(const std::string& dirPath, const bool& recursive, const std::function<bool ( const std::string& fileName )>& filterFunction) : std::vector<std::string>
			+{static} getDroppedFiles() : std::vector<std::string>
			+{static} loadFileData(const std::string& fileName) : std::vector<unsigned char>
			+{static} changeDirectory(const std::string& dir) : void
		}

		class ImageHelper {
			+{static} fromText(const std::string& text, int fontSize, const RlColor& color) : raylib::image::RlImage
			+{static} fromText(const raylib::text::RlFont& font, const std::string& text, float fontSize, float spacing, const RlColor& tint) : raylib::image::RlImage
			+{static} genImageFontAtlas(const GlyphInfo* chars, Rectangle** recs, int glyphCount, int fontSize, int padding, int packMethod) : raylib::image::RlImage
			+{static} load(const std::string& fileName) : raylib::image::RlImage
			+{static} loadAnim(const std::string& fileName) : raylib::image::RlImage
			+{static} loadFromMemory(const std::string& fileType, const unsigned char* fileData, int dataSize) : raylib::image::RlImage
			+{static} loadFromScreen() : raylib::image::RlImage
			+{static} loadFromTexture(const Texture2D& texture) : raylib::image::RlImage
			+{static} loadRaw(const std::string& fileName, int width, int height, int format, int headerSize) : raylib::image::RlImage
		}

		class TextHelper {
			+{static} getGlyphInfo(const raylib::text::RlFont& font, int codepoint) : GlyphInfo
			+{static} getGlyphAtlasRec(const raylib::text::RlFont& font, int codepoint) : Rectangle
			+{static} measureText(const raylib::text::RlFont& font, const std::string& text) : Vector2f
			+{static} measureText(const raylib::text::RlFont& font, const std::string& text, float fontSize, float spacing) : Vector2f
			+{static} getGlyphIndex(const raylib::text::RlFont& font, int codepoint) : int
			+{static} measureText(const std::string& text, int fontSize) : int
		}

		class VectorHelper {
			+{static} toVectorf(const::Vector2& vector) : Vector2f
			+{static} toVectorf(const::Vector3& vector) : Vector3f
			+{static} toVectorf(const::Vector4& vector) : Vector4f
			+toRaylibVector(const Vector2f& vector) : static::Vector2
			+toRaylibVector(const Vector3f& vector) : static::Vector3
			+toRaylibVector(const Vector4f& vector) : static::Vector4
		}

		class WorldHelper {
			+{static} getScreenToWorld2D(const Vector2f& position, const Camera2D& camera) : Vector2f
			+{static} getWorldToScreen(const Vector3f& position, const RlCamera& camera) : Vector2f
			+{static} getWorldToScreen2D(const Vector2f& position, const Camera2D& camera) : Vector2f
			+{static} getWorldToScreenEx(const Vector3f& position, const RlCamera& camera, int width, int height) : Vector2f
		}

		namespace input {
			class CursorHelper {
				+{static} isCursorHidden() : bool
				+{static} isCursorOnScreen() : bool
				+{static} disableCursor() : void
				+{static} enableCursor() : void
				+{static} hideCursor() : void
				+{static} showCursor() : void
			}

			class GamepadHelper {
				+{static} isGamepadAvailable(const int& gamepad) : bool
				+{static} isGamepadButtonDown(const int& gamepad, const GamepadButton& button) : bool
				+{static} isGamepadButtonPressed(const int& gamepad, const GamepadButton& button) : bool
				+{static} isGamepadButtonReleased(const int& gamepad, const GamepadButton& button) : bool
				+{static} isGamepadButtonUp(const int& gamepad, const GamepadButton& button) : bool
				+{static} getGamepadAxisMovement(const int& gamepad, const GamepadAxis& axis) : float
				+{static} getGamepadAxisCount(const int& gamepad) : int
				+{static} getGamepadButtonPressed() : int
				+{static} setGamepadMappings(const std::string& mappings) : int
				+{static} getGamepadName(const int& gamepad) : std::string
			}

			class KeyboardHelper {
				+{static} isKeyDown(const KeyboardKey& key) : bool
				+{static} isKeyPressed(const KeyboardKey& key) : bool
				+{static} isKeyReleased(const KeyboardKey& key) : bool
				+{static} isKeyUp(const KeyboardKey& key) : bool
				+{static} getCharPressed() : int
				+{static} getKeyPressed() : int
				+{static} getKeyName(const int& key, const int& scancode) : std::string
				+{static} getPressedKeys() : std::vector<KeyboardKey>
				+{static} getPressedChars() : std::vector<int>
				+{static} setExitKey(const KeyboardKey& key) : void
			}

			class MouseHelper {
				+{static} getMouseRay(const Vector2f& mousePosition, const RlCamera& camera) : Ray
				+{static} getMouseDelta() : Vector2f
				+{static} getMousePosition() : Vector2f
				+{static} isMouseButtonDown(const MouseButton& button) : bool
				+{static} isMouseButtonPressed(const MouseButton& button) : bool
				+{static} isMouseButtonReleased(const MouseButton& button) : bool
				+{static} isMouseButtonUp(const MouseButton& button) : bool
				+{static} getMouseWheelMove() : float
				+{static} getMouseX() : int
				+{static} getMouseY() : int
				+{static} setMouseCursor(const MouseCursor& cursor) : void
				+{static} setMouseOffset(int offsetX, int offsetY) : void
				+{static} setMousePosition(int x, int y) : void
				+{static} setMouseScale(float scaleX, float scaleY) : void
			}

			class TouchHelper {
				+{static} getGestureDragVector() : Vector2f
				+{static} getGesturePinchVector() : Vector2f
				+{static} getTouchPosition(const int& index) : Vector2f
				+{static} isGestureDetected(const int& gesture) : bool
				+{static} getGestureDragAngle() : float
				+{static} getGestureHoldDuration() : float
				+{static} getGesturePinchAngle() : float
				+{static} getGestureDetected() : int
				+{static} getTouchPointCount() : int
				+{static} getTouchPointId(const int& index) : int
				+{static} getTouchX() : int
				+{static} getTouchY() : int
				+{static} setGesturesEnabled(const unsigned int& flags) : void
			}
		}

		namespace draw {
			class Draw2DHelper {
				-{static} _texShapesRec : static Rectangle
				-{static} _texShapes : static Texture2D
				+{static} drawCircle(int centerX, int centerY, float radius, const RlColor& color) : void
				+{static} drawCircle(const Vector2f& center, float radius, const RlColor& color) : void
				+{static} drawCircleGradient(int centerX, int centerY, float radius, const RlColor& color1, const RlColor& color2) : void
				+{static} drawCircleLines(int centerX, int centerY, float radius, const RlColor& color) : void
				+{static} drawCircleSector(const Vector2f& center, float radius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawCircleSectorLines(const Vector2f& center, float radius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawEllipse(int centerX, int centerY, float radiusH, float radiusV, const RlColor& color) : void
				+{static} drawEllipseLines(int centerX, int centerY, float radiusH, float radiusV, const RlColor& color) : void
				+{static} drawLine(int startPosX, int startPosY, int endPosX, int endPosY, const RlColor& color) : void
				+{static} drawLine(const Vector2f& startPos, const Vector2f& endPos, const RlColor& color) : void
				+{static} drawLine(const Vector2f& startPos, const Vector2f& endPos, float thick, const RlColor& color) : void
				+{static} drawLineBezier(const Vector2f& startPos, const Vector2f& endPos, float thick, const RlColor& color) : void
				+{static} drawLineBezierCubic(const Vector2f& startPos, const Vector2f& endPos, const Vector2f& startControlPos, const Vector2f& endControlPos, float thick, const RlColor& color) : void
				+{static} drawLineBezierQuad(const Vector2f& startPos, const Vector2f& endPos, const Vector2f& controlPos, float thick, const RlColor& color) : void
				+{static} drawLineStrip(const std::vector<Vector2f>& points, const RlColor& color) : void
				+{static} drawPixel(int posX, int posY, const RlColor& color) : void
				+{static} drawPixel(const Vector2f& position, const RlColor& color) : void
				+{static} drawPoly(const Vector2f& center, int sides, float radius, float rotation, const RlColor& color) : void
				+{static} drawPolyLines(const Vector2f& center, int sides, float radius, float rotation, const RlColor& color) : void
				+{static} drawPolyLines(const Vector2f& center, int sides, float radius, float rotation, float lineThick, const RlColor& color) : void
				+{static} drawRectangle(int posX, int posY, int width, int height, const RlColor& color) : void
				+{static} drawRectangle(const Vector2f& position, const Vector2f& size, const RlColor& color) : void
				+{static} drawRectangle(const Rectangle& rec, const RlColor& color) : void
				+{static} drawRectangle(const Rectangle& rec, const Vector2f& origin, float rotation, const RlColor& color) : void
				+{static} drawRectangleGradient(const Rectangle& rec, const RlColor& col1, const RlColor& col2, const RlColor& col3, const RlColor& col4) : void
				+{static} drawRectangleGradientH(int posX, int posY, int width, int height, const RlColor& color1, const RlColor& color2) : void
				+{static} drawRectangleGradientV(int posX, int posY, int width, int height, const RlColor& color1, const RlColor& color2) : void
				+{static} drawRectangleLines(int posX, int posY, int width, int height, const RlColor& color) : void
				+{static} drawRectangleLinesEx(const Rectangle& rec, float lineThick, const RlColor& color) : void
				+{static} drawRectangleRounded(const Rectangle& rec, float roundness, int segments, const RlColor& color) : void
				+{static} drawRectangleRoundedLines(const Rectangle& rec, float roundness, int segments, float lineThick, const RlColor& color) : void
				+{static} drawRing(const Vector2f& center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawRingLines(const Vector2f& center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawTriangle(const Vector2f& v1, const Vector2f& v2, const Vector2f& v3, const RlColor& color) : void
				+{static} drawTriangleFan(const std::vector<Vector2f>& points, const RlColor& color) : void
				+{static} drawTriangleLines(const Vector2f& v1, const Vector2f& v2, const Vector2f& v3, const RlColor& color) : void
				+{static} drawTriangleStrip(const std::vector<Vector2f>& points, const RlColor& color) : void
				+{static} setShapesTexture(const texture::RlTexture& texture, const Rectangle& source) : void
			}

			class Draw3DHelper {
				+{static} drawBillboard(const RlCamera& camera, const texture::RlTexture& texture, const Vector3f& position, float size, const RlColor& tint) : void
				+{static} drawBillboardPro(const RlCamera& camera, const texture::RlTexture& texture, const Rectangle& source, const Vector3f& position, const Vector3f& up, const Vector2f& size, const Vector2f& origin, float rotation, const RlColor& tint) : void
				+{static} drawBillboardRec(const RlCamera& camera, const texture::RlTexture& texture, const Rectangle& source, const Vector3f& position, const Vector2f& size, const RlColor& tint) : void
				+{static} drawBoundingBox(const BoundingBox& box, const RlColor& color) : void
				+{static} drawCircle(const Vector3f& center, const float& radius, const Vector3f& rotationAxis, const float& rotationAngle, const RlColor& color) : void
				+{static} drawCube(const Vector3f& position, const float& width, const float& height, const float& length, const RlColor& color) : void
				+{static} drawCube(const Vector3f& position, const Vector3f& size, const RlColor& color) : void
				+{static} drawCubeTexture(const texture::RlTexture& texture, const Vector3f& position, const float& width, const float& height, const float& length, const RlColor& color) : void
				+{static} drawCubeTextureRec(const texture::RlTexture& texture, const Rectangle& source, const Vector3f& position, const float& width, const float& height, const float& length, const RlColor& color) : void
				+{static} drawCubeWires(const Vector3f& position, const float& width, const float& height, const float& length, const RlColor& color) : void
				+{static} drawCubeWires(const Vector3f& position, const Vector3f& size, const RlColor& color) : void
				+{static} drawCylinder(const Vector3f& position, const float& radiusTop, const float& radiusBottom, const float& height, const int& slices, const RlColor& color) : void
				+{static} drawCylinder(const Vector3f& startPos, const Vector3f& endPos, const float& startRadius, const float& endRadius, const int& sides, const RlColor& color) : void
				+{static} drawCylinderWires(const Vector3f& position, const float& radiusTop, const float& radiusBottom, const float& height, const int& slices, const RlColor& color) : void
				+{static} drawCylinderWires(const Vector3f& startPos, const Vector3f& endPos, const float& startRadius, const float& endRadius, const int& sides, const RlColor& color) : void
				+{static} drawGrid(const int& slices, const float& spacing) : void
				+{static} drawGrid(const Vector2i& size, const float& spacing) : void
				+{static} drawGrid(const Vector2i& size, const Vector3f& position, const float& spacing) : void
				+{static} drawGrid(const Vector2i& size, const Vector3f& position, const float& spacing, const RlColor& color) : void
				+{static} drawLine(const Vector3f& startPos, const Vector3f& endPos, const RlColor& color) : void
				+{static} drawPlane(const Vector3f& centerPos, const Vector2f& size, const RlColor& color) : void
				+{static} drawPoint(const Vector3f& position, const RlColor& color) : void
				+{static} drawRay(const Ray& ray, const RlColor& color) : void
				+{static} drawSphere(const Vector3f& centerPos, const float& radius, const RlColor& color) : void
				+{static} drawSphere(const Vector3f& centerPos, const float& radius, const int& rings, const int& slices, const RlColor& color) : void
				+{static} drawSphereWires(const Vector3f& centerPos, const float& radius, const int& rings, const int& slices, const RlColor& color) : void
				+{static} drawTriangle3D(const Vector3f& v1, const Vector3f& v2, const Vector3f& v3, const RlColor& color) : void
				+{static} drawTriangleStrip3D(const std::vector<Vector3f>& points, const RlColor& color) : void
			}

			class DrawHelper {
				+{static} beginBlendMode(int mode) : void
				+{static} beginDrawing() : void
				+{static} beginMode2D(const Camera2D& camera) : void
				+{static} beginMode3D(const RlCamera& camera) : void
				+{static} beginScissorMode(int x, int y, int width, int height) : void
				+{static} beginShaderMode(const shader::RlShader& shader) : void
				+{static} beginTextureMode(const RenderTexture2D& target) : void
				+{static} beginVrStereoMode(const VrStereoConfig& config) : void
				+{static} clearBackground(const RlColor& color) : void
				+{static} endBlendMode() : void
				+{static} endDrawing() : void
				+{static} endMode2D() : void
				+{static} endMode3D() : void
				+{static} endScissorMode() : void
				+{static} endShaderMode() : void
				+{static} endTextureMode() : void
				+{static} endVrStereoMode() : void
			}

			class DrawModelHelper {
				+{static} drawMesh(const raylib::model::RlMesh& mesh, const raylib::model::RlMaterial& material, const Matrix& transform) : void
				+{static} drawMeshInstanced(const raylib::model::RlMesh& mesh, const raylib::model::RlMaterial& material, std::vector<Matrix>& transforms) : void
				+{static} drawModel(const raylib::model::RlModel& model) : void
				+{static} drawModel(const raylib::model::RlModel& model, const Vector3f& position, const float& scale, const RlColor& tint) : void
				+{static} drawModel(const raylib::model::RlModel& model, const Vector3f& position, const Vector3f& rotationAxis, const float& rotationAngle, const Vector3f& scale, const RlColor& tint) : void
				+{static} drawModelWires(const raylib::model::RlModel& model) : void
				+{static} drawModelWires(const raylib::model::RlModel& model, const Vector3f& position, const float& scale, const RlColor& tint) : void
				+{static} drawModelWires(const raylib::model::RlModel& model, const Vector3f& position, const Vector3f& rotationAxis, const float& rotationAngle, const Vector3f& scale, const RlColor& tint) : void
			}

			class DrawTextHelper {
				+{static} drawCenteredText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const RlColor& color, const float& spacing) : void
				+{static} drawCenteredText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const float& fontSize, const RlColor& color, const float& spacing) : void
				+{static} drawCenteredText(const raylib::text::RlText& text) : void
				+{static} drawFps(const Vector2f& pos, const int& fontSize) : void
				+{static} drawFps(const float& posX, const float& posY, const int& fontSize) : void
				+{static} drawFps(const Vector2f& pos) : void
				+{static} drawFps(const int& posX, const int& posY) : void
				+{static} drawText(const std::string& text, const Vector2f& pos, const int& fontSize, const RlColor& color) : void
				+{static} drawText(const std::string& text, const float& posX, const float& posY, const int& fontSize, const RlColor& color) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const RlColor& color) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const float& rotation, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const Vector2f& origin, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const Vector2f& origin, const float& rotation, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const raylib::text::RlText& text, const Vector2f& position, const RlColor& color) : void
				+{static} drawText(const raylib::text::RlText& text, const float& posX, const float& posY, const RlColor& color) : void
				+{static} drawText(const raylib::text::RlText& text) : void
				+{static} drawTextUsingCodepoint(const raylib::text::RlFont& font, const int& codepoint, const Vector2f& position, float fontSize, const RlColor& tint) : void
			}

			class DrawTextureHelper {
				+{static} drawTexture(const texture::RlTexture& texture, int posX, int posY, const RlColor& tint) : void
				+{static} drawTexture(const texture::RlTexture& texture, const Vector2f& position, const RlColor& tint) : void
				+{static} drawTexture(const texture::RlTexture& texture, const Vector2f& position, float rotation, float scale, const RlColor& tint) : void
				+{static} drawTexture(const texture::RlTexture& texture, const Rectangle& source, const Rectangle& dest, const Vector2f& origin, float rotation, const RlColor& tint) : void
				+{static} drawTextureNPatch(const texture::RlTexture& texture, const NPatchInfo& nPatchInfo, const Rectangle& dest, const Vector2f& origin, float rotation, const RlColor& tint) : void
				+{static} drawTexturePoly(const texture::RlTexture& texture, const Vector2f& center, const std::vector<Vector2f>& points, std::vector<Vector2f>& texcoords, const RlColor& tint) : void
				+{static} drawTextureQuad(const texture::RlTexture& texture, const Vector2f& tiling, const Vector2f& offset, const Rectangle& quad, const RlColor& tint) : void
				+{static} drawTextureRec(const texture::RlTexture& texture, const Rectangle& source, const Vector2f& position, const RlColor& tint) : void
				+{static} drawTextureTiled(const texture::RlTexture& texture, const Rectangle& source, const Rectangle& dest, const Vector2f& origin, float rotation, float scale, const RlColor& tint) : void
			}
		}
	}

	namespace ex {
		class BuilderException {
			+BuilderException(const std::string& msg)
		}

		class CameraException {
			+CameraException(const std::string& message)
		}

		class InvalidArgumentException {
			+InvalidArgumentException(const std::string& msg)
		}

		class RaylibException {
			+RaylibException(const std::string& msg, bool prefix)
			+what() : char* {query}
			-_msg : std::string
		}

		class RlAnimationException {
			+RlAnimationException(const std::string& message)
		}

		class RlModelException {
			+RlModelException(const std::string& message)
		}

		class WindowException {
			+WindowException(const std::string& msg)
		}
	}

	namespace builder {
		abstract class IBuilder <template<typename T>> {
			+{abstract} build() : T
		}

		class RlCameraBuilder {
			+RlCameraBuilder()
			-_cameraMode : CameraMode
			-_projection : CameraProjection
			+build() : RlCamera
			+setCameraMode(CameraMode cameraMode) : RlCameraBuilder&
			+setFovy(float fovy) : RlCameraBuilder&
			+setLookingPoint(const Vector3f& lookingPoint) : RlCameraBuilder&
			+setPosition(const Vector3f& position) : RlCameraBuilder&
			+setProjection(CameraProjection projection) : RlCameraBuilder&
			+setTarget(const Vector3f& target) : RlCameraBuilder&
			-_lookingPoint : Vector3f
			-_position : Vector3f
			-_target : Vector3f
			-_fovy : float
		}

		class RlImageBuilder {
			+RlImageBuilder()
			-_bottom : RlColor
			-_col1 : RlColor
			-_col2 : RlColor
			-_color : RlColor
			-_inner : RlColor
			-_left : RlColor
			-_outer : RlColor
			-_right : RlColor
			-_top : RlColor
			+setBottom(const RlColor& bottom) : RlImageBuilder&
			+setChecksX(const int& checksX) : RlImageBuilder&
			+setChecksY(const int& checksY) : RlImageBuilder&
			+setCol1(const RlColor& col1) : RlImageBuilder&
			+setCol2(const RlColor& col2) : RlImageBuilder&
			+setColor(const RlColor& color) : RlImageBuilder&
			+setDensity(const float& density) : RlImageBuilder&
			+setFactor(const float& factor) : RlImageBuilder&
			+setHeight(const int& height) : RlImageBuilder&
			+setInner(const RlColor& inner) : RlImageBuilder&
			+setLeft(const RlColor& left) : RlImageBuilder&
			+setOuter(const RlColor& outer) : RlImageBuilder&
			+setRight(const RlColor& right) : RlImageBuilder&
			+setTitleSize(const int& titleSize) : RlImageBuilder&
			+setTop(const RlColor& top) : RlImageBuilder&
			+setType(ImageType type) : RlImageBuilder&
			+setWidth(const int& width) : RlImageBuilder&
			-_density : float
			-_factor : float
			-_checksX : int
			-_checksY : int
			-_height : int
			-_titleSize : int
			-_width : int
			-_flags : long
			-_type : long
			+build() : raylib::image::RlImage
		}

		class RlMeshBuilder {
			+RlMeshBuilder()
			+setConeSlices(const int& slices) : RlMeshBuilder&
			+setCubeSize(const Vector3f& cubeSize) : RlMeshBuilder&
			+setCubicmap(const image::RlImage& cubicmap) : RlMeshBuilder&
			+setHeight(const float& height) : RlMeshBuilder&
			+setHeightmap(const image::RlImage& heightmap) : RlMeshBuilder&
			+setHemisphereRings(const int& rings) : RlMeshBuilder&
			+setKnotRadSeg(const int& radSeg) : RlMeshBuilder&
			+setLength(const float& length) : RlMeshBuilder&
			+setMeshType(MeshType meshType) : RlMeshBuilder&
			+setRadSeg(const int& radSeg) : RlMeshBuilder&
			+setRadius(const float& radius) : RlMeshBuilder&
			+setResX(const int& resX) : RlMeshBuilder&
			+setResZ(const int& resZ) : RlMeshBuilder&
			+setRings(const int& rings) : RlMeshBuilder&
			+setSides(const int& sides) : RlMeshBuilder&
			+setSize(const float& size) : RlMeshBuilder&
			+setSlices(const int& slices) : RlMeshBuilder&
			+setVec3fSize(const Vector3f& size) : RlMeshBuilder&
			+setWidth(const float& width) : RlMeshBuilder&
			-_cubeSize : Vector3f
			-_vec3fSize : Vector3f
			-_height : float
			-_length : float
			-_radius : float
			-_size : float
			-_width : float
			-_cubicmap : image::RlImage
			-_heightmap : image::RlImage
			-_radSeg : int
			-_resX : int
			-_resZ : int
			-_rings : int
			-_sides : int
			-_slices : int
			-_flags : long
			-_type : long
			+build() : model::RlMesh
		}

		class RlModelBuilder {
			+RlModelBuilder()
			-_boundingBox : BoundingBox
			-_color : RlColor
			+setRotationAxis(const Vector3f& rotationAxis) : RlModelBuilder
			+setBoundingBox(const BoundingBox& boundingBox) : RlModelBuilder&
			+setColor(const RlColor& color) : RlModelBuilder&
			+setMesh(const std::shared_ptr<raylib::model::RlMesh>& mesh) : RlModelBuilder&
			+setMesh(const raylib::model::RlMesh& mesh) : RlModelBuilder&
			+setModelPath(const std::string& modelPath) : RlModelBuilder&
			+setPosition(const Vector3f& position) : RlModelBuilder&
			+setRotationAngle(const float& rotationAngle) : RlModelBuilder&
			+setScale(const Vector3f& scale) : RlModelBuilder&
			+setTexture(const std::shared_ptr<texture::RlTexture>& texture) : RlModelBuilder&
			+setTexturePath(const std::string& texturePath) : RlModelBuilder&
			-_position : Vector3f
			-_rotationAxis : Vector3f
			-_scale : Vector3f
			-_boundingBoxSet : bool
			-_rotationAngle : float
			-_flags : long
			+build() : raylib::model::RlModel
			-{static} _validTypes : static std::vector<ValidType>
			-_mesh : std::shared_ptr<raylib::model::RlMesh>
			-_texture : std::shared_ptr<texture::RlTexture>
			-_modelPath : std::string
			-_texturePath : std::string
		}

		class RlTextBuilder {
			+RlTextBuilder()
			-_color : RlColor
			+setColor(const RlColor& color) : RlTextBuilder&
			+setFont(const std::shared_ptr<raylib::text::RlFont>& font) : RlTextBuilder&
			+setFontPath(const std::string& fontPath) : RlTextBuilder&
			+setFontSize(const float& fontSize) : RlTextBuilder&
			+setOrigin(const Vector2f& origin) : RlTextBuilder&
			+setPosition(const Vector2f& position) : RlTextBuilder&
			+setRotation(const float& rotation) : RlTextBuilder&
			+setSpacing(const float& spacing) : RlTextBuilder&
			+setText(const std::string& text) : RlTextBuilder&
			-_origin : Vector2f
			-_position : Vector2f
			-_isFontPathSet : bool
			-_isFontSet : bool
			-_isFontSizeSet : bool
			-_isTextSet : bool
			-_fontSize : float
			-_rotation : float
			-_textSpacing : float
			+build() : raylib::text::RlText
			-_font : std::shared_ptr<raylib::text::RlFont>
			-_fontPath : std::string
			-_text : std::string
		}

		enum RlImageBuilder::ImageType {
			ImageCellular
			ImageChecked
			ImageColor
			ImageGradientH
			ImageGradientRadial
			ImageGradientV
			ImageWhiteNoise
		}

		enum RlImageBuilder::ParameterName {
			Bottom
			ChecksX
			ChecksY
			Col1
			Col2
			Color
			Density
			Factor
			Height
			Inner
			Left
			Outer
			Right
			TitleSize
			Top
			Width
		}

		enum RlMeshBuilder::MeshType {
			MeshCone
			MeshCube
			MeshCubicmap
			MeshCylinder
			MeshHeightmap
			MeshHemiSphere
			MeshKnot
			MeshPlane
			MeshPoly
			MeshSphere
			MeshTorus
		}

		enum RlMeshBuilder::ParameterName {
			ConeSlices
			CubeSize
			Cubicmap
			Height
			Heightmap
			HemisphereRings
			KnotRadSeg
			Length
			RadSeg
			Radius
			ResX
			ResZ
			Rings
			Sides
			Size
			Slices
			Vec3fSize
			Width
		}

		enum RlModelBuilder::RequiredParameter {
			MESH
			MODEL_PATH
			SHARED_TEXTURE
			TEXTURE_PATH
		}

		enum RlModelBuilder::ValidType {
			RLMODEL_MESH
			RLMODEL_MESH_AND_SHARED_TEXTURE
			RLMODEL_PATH
			RLMODEL_PATH_AND_SHARED_TEXTURE
			RLMODEL_PATH_AND_TEXTURE
		}
	}

	namespace audio {
		class RlAudioStream {
			+RlAudioStream(const unsigned int& sampleRate, const unsigned int& sampleSize, const unsigned int& channels)
			+~RlAudioStream()
			-_stream : AudioStream
			+isPlaying() : bool
			+isProcessed() : bool
			-_volume : float
			+getVolume() : float& {query}
			+pause() : void
			+play() : void
			+resume() : void
			+setPitch(const float& pitch) : void
			+setVolume(float volume) : void
			+stop() : void
			+update(const void* data, const int& samplesCount) : void
		}

		class RlMusic {
			+RlMusic(const std::string& fileName)
			+RlMusic(const std::string& fileType, unsigned char* data, const int& dataSize)
			+~RlMusic()
			-_music : Music
			+isPlaying() : bool
			+isLooping() : bool& {query}
			-_volume : float
			+getTimeLength() : float
			+getTimePlayed() : float
			+getVolume() : float& {query}
			+pause() : void
			+play() : void
			+resume() : void
			+seek(const float& position) : void
			+setLooping(const bool& loop) : void
			+setPitch(const float& pitch) : void
			+setVolume(const float& volume) : void
			+stop() : void
			+update() : void
		}

		class RlSound {
			+RlSound(const Sound& sound)
			+RlSound(const std::string& fileName)
			+RlSound(const RlWave& wave)
			+~RlSound()
			-_sound : Sound
			+isPlaying() : bool
			-_volume : float
			+getVolume() : float& {query}
			+pause() : void
			+play() : void
			+playMulti() : void
			+resume() : void
			+setPitch(const float& pitch) : void
			+setVolume(const float& volume) : void
			+stop() : void
			+update(const void* data, const int& samplesCount) : void
		}

		class RlWave {
			+RlWave()
			+RlWave(const Wave& wave)
			+RlWave(const std::string& path)
			+RlWave(const std::string& fileType, const unsigned char* fileData, int dataSize)
			+~RlWave()
			+copy() : RlWave
			-_wave : Wave
			+getWave() : Wave&
			+getWave() : Wave& {query}
			+exportWave(const std::string& fileName) : bool
			+exportWaveAsCode(const std::string& fileName) : bool
			-_samplesPtr : float*
			+toSound() : raylib::audio::RlSound {query}
			-_samples : std::vector<float>
			+getSamples() : std::vector<float>
			+crop(const int& initSample, const int& finalSample) : void
			+format(const int& sampleRate, const int& sampleSize, const int& channels) : void
		}
	}
}


namespace gameengine {
	abstract class AbstractSound {
		+AbstractSound(const std::string& filePath, SoundCategory category)
		+~AbstractSound()
		-_category : SoundCategory
		+getCategory() : int {query}
		-_filePath : std::string
		-_name : std::string
		+getFilePath() : std::string& {query}
		+getName() : std::string& {query}
		+{abstract} setVolume(const float& volume) : void
	}

	class AudioManager {
		+AudioManager()
		+~AudioManager()
		-{static} _instance : static std::shared_ptr<AudioManager>
		+{static} getInstance() : std::shared_ptr<AudioManager>&
		+getSound(const std::string& name) : std::unique_ptr<AbstractSound>&
		-_sounds : std::vector<std::unique_ptr<gameengine::AbstractSound>>
		+addSound(const std::string& filePath, AbstractSound::SoundCategory category) : void
		+deleteSound(const std::string& name) : void
		+loadSounds(const std::string& assetsPath) : void
		+loadSounds(const std::string& soundDir, const std::string& musicDir) : void
		+playSound(const std::string& name) : void
		+setVolume(const float& volume, AbstractSound::SoundCategory category) : void
	}

	abstract class Scene {
		+Scene(const std::string& name, const std::string& sceneSource)
		+~Scene()
		-_isLaunched : bool
		-_isPaused : bool
		+deleteNode(const std::string& name) : bool
		+isLaunched() : bool& {query}
		+isPaused() : bool& {query}
		+getNode(const std::string& name) : std::shared_ptr<gameengine::node::AbstractBase>
		-_name : std::string
		-_sceneSource : std::string
		+getName() : std::string& {query}
		+getSceneSource() : std::string& {query}
		-_nodes : std::vector<std::shared_ptr<gameengine::node::AbstractBase>>
		+getNodes() : std::vector<std::shared_ptr<gameengine::node::AbstractBase>>& {query}
		+addNode(const std::shared_ptr<gameengine::node::AbstractBase>& node) : void
		+deleteNodeIncludes(const std::string& includeName) : void
		+destroy() : void
		+draw() : void
		+draw2D() : void
		+init() : void
		+{abstract} initScene() : void
		+{abstract} sceneLauncher() : void
		+setLaunched() : void
		+setPaused(const bool& value) : void
		+update(const float& delta) : void
		+{abstract} updateScene(const float& delta) : void
	}

	class SceneManager {
		+isPaused() : bool
		-{static} _instance : static std::shared_ptr<SceneManager>
		+getCurrentScene() : std::shared_ptr<gameengine::Scene>&
		+{static} getInstance() : std::shared_ptr<gameengine::SceneManager>&
		+getNode(const std::string& name) : std::shared_ptr<gameengine::node::AbstractBase>
		-_actualScene : std::string
		-_waitingScene : std::string
		-_scenes : std::vector<std::shared_ptr<gameengine::Scene>>
		+getAllNodes() : std::vector<std::shared_ptr<gameengine::node::AbstractBase>>
		-_nodesToDelete : std::vector<std::string>
		-_nodesToDeleteIncludes : std::vector<std::string>
		+addNode(const std::shared_ptr<gameengine::node::AbstractBase>& node) : void
		+addScene(const std::shared_ptr<gameengine::Scene>& scene) : void
		+changeScene(const std::string& scene) : void
		-changeSceneInWaiting() : void
		+deleteNode(const std::string& name) : void
		-deleteNodeInLst() : void
		+deleteNodeInclude(const std::string& containedName) : void
		+deleteScene(const std::string& scene) : void
		+draw() : void
		+draw2D() : void
		+drawAll(raylib::RlCamera& camera) : void
		+makeLoop(raylib::RlCamera& camera) : void
		+setPaused(bool value) : void
		+update() : void
	}

	class TextureManager {
		-{static} _defaultTexture : static std::shared_ptr<raylib::texture::RlTexture>
		-{static} _instance : static std::unique_ptr<TextureManager>
		+getTexture(const std::string& textureName) : std::shared_ptr<raylib::texture::RlTexture>
		+{static} getDefaultTexture() : std::shared_ptr<raylib::texture::RlTexture>&
		+{static} getInstance() : std::unique_ptr<TextureManager>&
		-_textures : std::vector<std::shared_ptr<raylib::texture::RlTexture>>
		+getTextures() : std::vector<std::shared_ptr<raylib::texture::RlTexture>>& {query}
		+loadTextures(const std::string& texturesDir) : void
	}

	class Time {
		+Time()
		+~Time()
		+{static} getMicrosecondsTime() : long
		+{static} getMillisecondsTime() : long
		+{static} getNanoTime(std::chrono::seconds time) : long
		+{static} getNanoTime(std::chrono::milliseconds time) : long
		+{static} getNanoTime(std::chrono::microseconds time) : long
		+{static} getNanosecondsTime() : long
		+{static} getSecondsTime() : long
	}

	enum AbstractSound::SoundCategory {
		FX
		MUSIC
	}

	namespace node {
		abstract class AbstractBase {
			+AbstractBase(const std::string& name)
			+AbstractBase(const AbstractBase &)
			+~AbstractBase()
			#_hiding : bool
			+isHiding() : bool& {query}
			+{abstract} getRotationDegrees() : float {query}
			#_group : std::string
			#_name : std::string
			+getGroup() : std::string& {query}
			+getName() : std::string& {query}
			+{abstract} draw() : void
			+{abstract} init() : void
			+setGroup(const std::string& group) : void
			+setHiding(bool value) : void
			+{abstract} update(const float& delta) : void
		}

		namespace _3D {
			class Grid3D {
				+Grid3D(const Vector2i& size, const Vector3f& position, const float& spacing, const RlColor& tint, const std::string& name)
				+Grid3D(const Grid3D &)
				-_tint : RlColor
				-_size : Vector2i
				-_position : Vector3f
				-_scale : Vector3f
				+getPosition() : Vector3f& {query}
				+getScale() : Vector3f& {query}
				-_spacing : float
				+getRotationDegrees() : float {query}
				+draw() : void
				+init() : void
				+setPosition(const Vector3f& pos) : void
				+setRotationDegrees(const float& degrees, const Vector3f& rotationAxis) : void
				+setScale(const Vector3f& newScale) : void
				+setSize(const Vector2i& size) : void
				+setSpacing(const float& spacing) : void
				+setTint(const RlColor& tint) : void
				+update(const float& delta) : void
			}

			class KinematicBody {
				+KinematicBody(const std::string& name, const raylib::model::RlModel& model)
				+KinematicBody(const std::string& name, const raylib::model::RlModel& model, const std::shared_ptr<raylib::texture::RlTexture>& texture)
				+~KinematicBody()
				+moveAndCollide(const Vector3f& position) : bool
			}

			abstract class Node3D {
				+Node3D(const std::string& name)
				+Node3D(const Node3D &)
				+~Node3D()
				+{abstract} getPosition() : Vector3f& {query}
				+{abstract} getScale() : Vector3f& {query}
				+{abstract} setPosition(const Vector3f& pos) : void
				+{abstract} setRotationDegrees(const float& degrees, const Vector3f& rotationAxis) : void
				+{abstract} setScale(const Vector3f& newScale) : void
			}

			class StaticBody {
				+StaticBody(const std::string& name, const raylib::model::RlModel& model)
				+StaticBody(const std::string& name, const raylib::model::RlModel& model, const std::shared_ptr<raylib::texture::RlTexture>& texture)
				+~StaticBody()
				+getBoundingBox() : BoundingBox& {query}
				+getColor() : RlColor& {query}
				+getPosition() : Vector3f& {query}
				+getScale() : Vector3f& {query}
				#_collisionEnable : bool
				+hasCollisionEnabled() : bool& {query}
				+getRotationDegrees() : float {query}
				+operator->() : raylib :: model :: RlModel*
				#_model : raylib::model::RlModel
				+getModel() : raylib::model::RlModel&
				+getModel() : raylib::model::RlModel& {query}
				+draw() : void
				+init() : void
				+setBoundingBox(const BoundingBox& boundingBox) : void
				+setCollisionEnable(bool value) : void
				+setColor(const raylib::RlColor& color) : void
				+setPosition(const Vector3f& pos) : void
				+setRotationDegrees(const float& degrees, const Vector3f& rotationAxis) : void
				+setScale(const Vector3f& newScale) : void
				+update(const float& delta) : void
			}
		}

		namespace _2D {
			abstract class Button {
				+Button(const std::string& name, const std::shared_ptr<raylib::texture::RlTexture>& texture)
				-_bounds : Rectangle
				-_rectangle : Rectangle
				+getBounds() : Rectangle& {query}
				+getRectangle() : Rectangle& {query}
				-_origin : Vector2f
				-_position : Vector2f
				-_scale : Vector2f
				+getOrigin() : Vector2f& {query}
				+getPosition() : Vector2f& {query}
				+getScale() : Vector2f& {query}
				-_action : bool
				-_isEnabled : bool
				+isEnabled() : bool& {query}
				-_frameHeight : float
				-_rotationDegrees : float
				+getRotationDegrees() : float {query}
				-_frameNum : int
				-_state : int
				-_texture : std::shared_ptr<raylib::texture::RlTexture>
				+getTexture() : std::shared_ptr<raylib::texture::RlTexture>& {query}
				+centerButton(const Vector2f& pos) : void
				+draw() : void
				+init() : void
				+{abstract} pressed() : void
				+setEnabled(const bool& value) : void
				+setOrigin(const Vector2f& origin) : void
				+setPosition(const Vector2f& position) : void
				+setRotationDegrees(const float& rotationDegrees) : void
				+setScale(const Vector2f& scale) : void
				+update(const float& delta) : void
			}

			class Label {
				+Label(const std::string& name, const Vector2f& position, const Vector2f& scale, const float& degrees, const raylib::RlColor& color)
				+~Label()
				-_position : Vector2f
				-_scale : Vector2f
				+getPosition() : Vector2f& {query}
				+getScale() : Vector2f& {query}
				-_rotationDegrees : float
				+getRotationDegrees() : float {query}
				-_color : raylib::RlColor
				+getColor() : raylib::RlColor&
				+getColor() : raylib::RlColor& {query}
				-_textComponent : raylib::text::RlText
				-_text : std::string
				+draw() : void
				+init() : void
				+setColor(raylib::RlColor color) : void
				+setPosition(const Vector2f& position) : void
				+setRotationDegrees(const float& rotationDegrees) : void
				+setScale(const Vector2f& scale) : void
				+setText(const std::string& text) : void
				+update(const float& delta) : void
			}

			abstract class Node2D {
				+Node2D(const std::string& name)
				+Node2D(const Node2D &)
				+~Node2D()
				+{abstract} getPosition() : Vector2f& {query}
				+{abstract} getScale() : Vector2f& {query}
				+{abstract} setPosition(const Vector2f& pos) : void
				+{abstract} setRotationDegrees(const float& degrees) : void
				+{abstract} setScale(const Vector2f& newScale) : void
			}

			class TextureRect {
				+TextureRect(const std::string& name, const std::shared_ptr<raylib::texture::RlTexture>& texture, const Vector2f& position, const Vector2f& scale, const float& degrees, const raylib::RlColor& color)
				+~TextureRect()
				-_position : Vector2f
				-_scale : Vector2f
				+getPosition() : Vector2f& {query}
				+getScale() : Vector2f& {query}
				-_rotationDegrees : float
				+getRotationDegrees() : float {query}
				-_color : raylib::RlColor
				+getColor() : raylib::RlColor&
				+getColor() : raylib::RlColor& {query}
				-_texture : std::shared_ptr<raylib::texture::RlTexture>
				+draw() : void
				+init() : void
				+setColor(const RlColor& color) : void
				+setPosition(const Vector2f& position) : void
				+setRotationDegrees(const float& rotationDegrees) : void
				+setScale(const Vector2f& scale) : void
				+update(const float& delta) : void
			}
		}
	}

	namespace map {
		class MapParser <template<typename T>> {
			+MapParser(const std::string& fileName, const std::unordered_map<char, T>& symbols, const Vector2u& maxSize)
			-_maxSize : Vector2u
			-_size : Vector2u
			+getMaxSize() : Vector2u& {query}
			+getSize() : Vector2u& {query}
			-_file : std::ifstream
			-_buffer : std::string
			-_fileName : std::string
			-removeComment(const std::string& line) : std::string
			+getBuffer() : std::string& {query}
			+getFileName() : std::string& {query}
			+getSymbols() : std::unordered_map<char , T>& {query}
			-_symbols : std::unordered_map<char, T>
			-_map : std::vector<std::vector<T>>
			+getMap() : std::vector<std::vector<T>>& {query}
			+parse() : void
			-parseMap() : void
		}
	}

	namespace ex {
		class GameEngineException {
			+GameEngineException(const std::string& message, const bool& prefix)
			+what() : char* {query}
			-_msg : std::string
		}

		class MapParserException {
			+MapParserException(const std::string& message)
		}
	}

	namespace audio {
		class Music {
			+Music(const std::string& fileName, AbstractSound::SoundCategory category)
			+setVolume(const float& volume) : void
		}

		class Sound {
			+Sound(const std::string& fileName, SoundCategory category)
			+setVolume(const float& volume) : void
		}
	}
}





/' Inheritance relationships '/

gameengine.node.AbstractBase <|- - gameengine.node._2D.Node2D


gameengine.node.AbstractBase <|- - gameengine.node._3D.Node3D


gameengine.AbstractSound <|- - gameengine.audio.Music


gameengine.AbstractSound <|- - gameengine.audio.Sound


gameengine.ex.GameEngineException <|- - gameengine.ex.MapParserException


raylib.builder.IBuilder <|- - raylib.builder.RlCameraBuilder


raylib.builder.IBuilder <|- - raylib.builder.RlImageBuilder


raylib.builder.IBuilder <|- - raylib.builder.RlMeshBuilder


raylib.builder.IBuilder <|- - raylib.builder.RlModelBuilder


raylib.builder.IBuilder <|- - raylib.builder.RlTextBuilder


gameengine.node._2D.Node2D <|- - gameengine.node._2D.Button


gameengine.node._2D.Node2D <|- - gameengine.node._2D.Label


gameengine.node._2D.Node2D <|- - gameengine.node._2D.TextureRect


gameengine.node._3D.Node3D <|- - gameengine.node._3D.Grid3D


gameengine.node._3D.Node3D <|- - gameengine.node._3D.StaticBody


raylib.ex.RaylibException <|- - raylib.ex.BuilderException


raylib.ex.RaylibException <|- - raylib.ex.CameraException


raylib.ex.RaylibException <|- - raylib.ex.InvalidArgumentException


raylib.ex.RaylibException <|- - raylib.ex.RlAnimationException


raylib.ex.RaylibException <|- - raylib.ex.RlModelException


raylib.ex.RaylibException <|- - raylib.ex.WindowException


raylib.audio.RlMusic <|- - gameengine.audio.Music


raylib.audio.RlSound <|- - gameengine.audio.Sound


gameengine.node._3D.StaticBody <|- - gameengine.node._3D.KinematicBody





/' Aggregation relationships '/

gameengine.AudioManager *- - gameengine.AbstractSound


gameengine.AudioManager *- - gameengine.AudioManager


gameengine.node._2D.Button *- - raylib.texture.RlTexture


gameengine.node._3D.Grid3D *- - raylib.RlColor


gameengine.node._2D.Label *- - raylib.RlColor


gameengine.node._2D.Label *- - raylib.text.RlText


raylib.model.RlAnimation *- - raylib.model.RlModel


raylib.RlColor "26" *- - raylib.RlColor


raylib.builder.RlImageBuilder "9" *- - raylib.RlColor


raylib.builder.RlMeshBuilder "2" *- - raylib.image.RlImage


raylib.model.RlModel *- - raylib.RlColor


raylib.model.RlModel *- - raylib.model.RlMesh


raylib.model.RlModel *- - raylib.texture.RlTexture


raylib.model.RlModelAnimation *- - raylib.model.RlModel


raylib.builder.RlModelBuilder *- - raylib.RlColor


raylib.builder.RlModelBuilder *- - raylib.model.RlMesh


raylib.builder.RlModelBuilder *- - raylib.texture.RlTexture


raylib.audio.RlMusic *- - gameengine.audio.Music


raylib.audio.RlSound *- - gameengine.audio.Sound


raylib.text.RlText *- - raylib.RlColor


raylib.text.RlText *- - raylib.text.RlFont


raylib.builder.RlTextBuilder *- - raylib.RlColor


raylib.builder.RlTextBuilder *- - raylib.text.RlFont


raylib.window.RlWindow *- - raylib.RlCamera


raylib.window.RlWindow *- - raylib.window.RlWindow


gameengine.Scene *- - gameengine.node.AbstractBase


gameengine.SceneManager *- - gameengine.Scene


gameengine.SceneManager *- - gameengine.SceneManager


gameengine.node._3D.StaticBody *- - raylib.model.RlModel


gameengine.TextureManager "2" *- - raylib.texture.RlTexture


gameengine.TextureManager *- - gameengine.TextureManager


gameengine.node._2D.TextureRect *- - raylib.RlColor


gameengine.node._2D.TextureRect *- - raylib.texture.RlTexture






/' Nested objects '/

gameengine.AbstractSound +- - gameengine.AbstractSound::SoundCategory


raylib.builder.RlImageBuilder +- - raylib.builder.RlImageBuilder::ImageType


raylib.builder.RlImageBuilder +- - raylib.builder.RlImageBuilder::ParameterName


raylib.builder.RlMeshBuilder +- - raylib.builder.RlMeshBuilder::MeshType


raylib.builder.RlMeshBuilder +- - raylib.builder.RlMeshBuilder::ParameterName


raylib.builder.RlModelBuilder +- - raylib.builder.RlModelBuilder::RequiredParameter


raylib.builder.RlModelBuilder +- - raylib.builder.RlModelBuilder::ValidType




@enduml

@startuml






namespace raylib {
	class GlStateManager {
		+{static} color(const RlColor& color) : void
		+{static} color(unsigned char r, unsigned char g, unsigned char b, unsigned char a) : void
		+{static} color(float r, float g, float b, float a) : void
		+{static} color(unsigned char r, unsigned char g, unsigned char b) : void
		+{static} disableBackfaceCulling() : void
		+{static} disableColorBlend() : void
		+{static} disableDepthMask() : void
		+{static} disableDepthTest() : void
		+{static} disableScissorTest() : void
		+{static} disableSmoothLines() : void
		+{static} disableWireMode() : void
		+{static} enableBackfaceCulling() : void
		+{static} enableColorBlend() : void
		+{static} enableDepthMask() : void
		+{static} enableDepthTest() : void
		+{static} enableScissorTest() : void
		+{static} enableSmoothLines() : void
		+{static} enableWireMode() : void
		+{static} popMatrix() : void
		+{static} pushMatrix() : void
		+{static} rotate(const Vector3f& rotation) : void
		+{static} scale(const Vector3f& scale) : void
		+{static} scissor(int x, int y, int width, int height) : void
		+{static} scissor(const Rectangle& rect) : void
		+{static} translate(const Vector3f& translation) : void
	}

	class Random {
		+Random()
		+generate(double min, double max) : double
		+generate(float min, float max) : float
		+generate(int min, int max) : int
		+generate(long min, long max) : long
		+generate(short min, short max) : short
		-_random_device : std::random_device
		+generateSizeT(std::size_t min, std::size_t max) : std::size_t
	}

	class RlCamera {
		+RlCamera()
		+RlCamera(const Vector3f& position, const Vector3f& target, const Vector3f& lookingPoint, const float& fovy, const CameraProjection& projection, const CameraMode& cameraMode)
		-_camera : Camera3D
		+get() : Camera3D& {query}
		-_cameraMode : CameraMode
		-_mode : CameraMode
		+getConstructedCameraMode() : CameraMode& {query}
		+getMode() : CameraMode& {query}
		-_projection : CameraProjection
		+getConstructedProjection() : CameraProjection& {query}
		+geMatrix() : Matrix
		-_lookingPoint : Vector3f
		-_position : Vector3f
		-_target : Vector3f
		+getConstructedLookingPoint() : Vector3f& {query}
		+getConstructedPosition() : Vector3f& {query}
		+getConstructedTarget() : Vector3f& {query}
		-_fovy : float
		+getConstructedFovy() : float& {query}
		+reset() : void
		+setCameraMode(const CameraMode& mode) : void
		+setFov(const float& fovy) : void
		+setPosition(const Vector3f& position) : void
		+setProjection(const CameraProjection& projection) : void
		+setTarget(const Vector3f& target) : void
		+update() : void
	}

	class RlColor {
		+RlColor(Color color)
		+RlColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
		+RlColor(std::uint32_t color)
		+RlColor(const Vector4f& normalizedColor)
		+RlColor(float hue, float saturation, float value)
		-_color : Color
		+getColor() : Color& {query}
		+operator+(unsigned char value) : RlColor&
		+operator+=(unsigned char value) : RlColor&
		+operator-(unsigned char value) : RlColor&
		+operator-=(unsigned char value) : RlColor&
		+setAlpha(unsigned char a) : RlColor&
		+setBlue(unsigned char b) : RlColor&
		+setGreen(unsigned char g) : RlColor&
		+setRed(unsigned char r) : RlColor&
		+toHSV() : Vector3f
		+normalize() : Vector4f {query}
		+operator!=(const RlColor& rhs) : bool {query}
		+operator==(const RlColor& rhs) : bool {query}
		+{static} Beige : static const RlColor
		+{static} Black : static const RlColor
		+{static} Blue : static const RlColor
		+{static} Brown : static const RlColor
		+{static} DarkBlue : static const RlColor
		+{static} DarkBrown : static const RlColor
		+{static} DarkGray : static const RlColor
		+{static} DarkGreen : static const RlColor
		+{static} DarkPurple : static const RlColor
		+{static} Gold : static const RlColor
		+{static} Gray : static const RlColor
		+{static} Green : static const RlColor
		+{static} LightGray : static const RlColor
		+{static} Lime : static const RlColor
		+{static} Magenta : static const RlColor
		+{static} Maroon : static const RlColor
		+{static} Orange : static const RlColor
		+{static} Pink : static const RlColor
		+{static} Purple : static const RlColor
		+{static} RayWhite : static const RlColor
		+{static} Red : static const RlColor
		+{static} SkyBlue : static const RlColor
		+{static} Transparent : static const RlColor
		+{static} Violet : static const RlColor
		+{static} White : static const RlColor
		+{static} Yellow : static const RlColor
		+toInteger() : std::uint32_t {query}
		+getAlpha() : unsigned char& {query}
		+getBlue() : unsigned char& {query}
		+getGreen() : unsigned char& {query}
		+getRed() : unsigned char& {query}
		+alpha(float alpha) : void
		+alphaBlend(const RlColor& src, const RlColor& tint) : void
		+setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a) : void
		+setColor(const Color& color) : void
	}

	class Vector2 <template<typename T>> {
		+Vector2()
		+Vector2(T x, T y)
		+x : T
		+y : T
		+operator!=(const Vector2<T>& other) : bool {query}
		+operator==(const Vector2<T>& other) : bool {query}
	}

	class Vector3 <template<typename T>> {
		+Vector3()
		+Vector3(T x, T y, T z)
		+x : T
		+y : T
		+z : T
		+operator!=(const Vector3<T>& other) : bool {query}
		+operator==(const Vector3<T>& other) : bool {query}
	}

	class Vector4 <template<typename T>> {
		+Vector4()
		+Vector4(T x, T y, T z, T w)
		+w : T
		+x : T
		+y : T
		+z : T
		+operator!=(const Vector4& other) : bool {query}
		+operator==(const Vector4& other) : bool {query}
	}

	namespace window {
		class RlWindow {
			+RlWindow()
			+~RlWindow()
			-_isCreated : bool
			-_isOpen : bool
			+hasState(const ConfigFlags& flag) : bool
			+isFocused() : bool
			+isFullScreen() : bool
			+isHidden() : bool
			+isMaximized() : bool
			+isMinimized() : bool
			+isOpen() : bool
			+isReady() : bool
			+isResized() : bool
			+isIsCreated() : bool& {query}
			-_height : int
			-_minHeight : int
			-_minWidth : int
			-_width : int
			+getHeight() : int& {query}
			+getMinHeight() : int& {query}
			+getMinWidth() : int& {query}
			+getWidth() : int& {query}
			-_camera : raylib::RlCamera
			+getCamera() : raylib::RlCamera&
			+getCamera() : raylib::RlCamera& {query}
			-{static} _instance : static std::shared_ptr<RlWindow>
			+{static} getInstance() : std::shared_ptr<RlWindow>&
			-_title : std::string
			+getTitle() : std::string& {query}
			+clearState(unsigned int flags) : void
			+createWindow(const std::string& title, int width, int height, int fps) : void
			+maximize() : void
			+minimize() : void
			+restore() : void
			+setCamera(const RlCamera& camera) : void
			+setConfigFlags(unsigned int flags) : void
			+setIcon(const image::RlImage& image) : void
			+setIsOpen(const bool& isOpen) : void
			+setMinSize(int width, int height) : void
			+setMonitor(int monitor) : void
			+setPosition(int x, int y) : void
			+setSize(int width, int height) : void
			+setState(unsigned int flags) : void
			+setTitle(const std::string& title) : void
			+takeScreenshot(const std::string& fileName) : void
			+toggleFullscreen() : void
		}

		class System {
			+{static} getMonitorPosition(int monitorIndex) : Vector2f
			+{static} getWindowPosition() : Vector2f
			+{static} getWindowScaleDPI() : Vector2f
			+{static} getMonitorPhysicalSize(int monitorIndex) : Vector2i
			+{static} getMonitorSize(int monitorIndex) : Vector2i
			+{static} getScreenSize() : Vector2i
			+{static} getCurrentMonitor() : int
			+{static} getMonitorCount() : int
			+{static} getMonitorHeight(int monitorIndex) : int
			+{static} getMonitorPhysicalHeight(int monitorIndex) : int
			+{static} getMonitorPhysicalWidth(int monitorIndex) : int
			+{static} getMonitorRefreshRate(int monitorIndex) : int
			+{static} getMonitorWidth(int monitorIndex) : int
			+{static} getScreenHeight() : int
			+{static} getScreenWidth() : int
			+{static} getClipboardText() : std::string
			+{static} getMonitorName(int monitorIndex) : std::string
			+{static} setClipboardText(const std::string& text) : void
		}
	}

	namespace texture {
		class RlRenderTexture {
			+RlRenderTexture(int width, int height)
			+~RlRenderTexture()
			-_renderTexture : RenderTexture2D
			+getRenderTexture() : RenderTexture2D& {query}
		}

		class RlTexture {
			+RlTexture(const std::string& fileName)
			+RlTexture(const image::RlImage& image)
			+RlTexture(const image::RlImage& image, const CubemapLayout& layout)
			+~RlTexture()
			-_textureRec : Rectangle
			+getTextureRec() : Rectangle& {query}
			-_texture : Texture2D
			+get() : Texture2D& {query}
			+getTexture() : Texture2D&
			+getFormat() : int& {query}
			+getHeight() : int& {query}
			+getMipmaps() : int& {query}
			+getWidth() : int& {query}
			-_texturePath : std::string
			+getPath() : std::string& {query}
			+getID() : unsigned int& {query}
			+genTextureMipmaps() : void
			+setFilter(const TextureFilter& filter) : void
			+setWrap(const TextureWrap& wrap) : void
			+update(const void* pixels) : void
			+updateRect(const Rectangle& rec, const void* pixels) : void
		}
	}

	namespace text {
		class RlFont {
			+RlFont()
			+RlFont(const std::string& fontPath)
			+RlFont(const int& fontSize)
			+RlFont(const std::string& fontPath, const int& fontSize, int* fontChars, const int& glyphCount)
			+RlFont(const image::RlImage& image, const RlColor& key, const int& firstChar)
			+RlFont(const std::string& fileType, const unsigned char* fileData, int dataSize, const int& fontSize, int* fontChars, const int& glyphCount)
			+~RlFont()
			-_font : Font
			+getFont() : Font& {query}
			-_fontSize : int
			+getFontSize() : int {query}
			+{static} getDefaultFont() : std::shared_ptr<RlFont>
			-_fontPath : std::string
			+getFontPath() : std::string& {query}
		}

		class RlText {
			+RlText(const std::string& text, const Vector2f& position, const RlColor& color)
			+RlText(const std::string& text, std::shared_ptr<RlFont>& font, const Vector2f& position, const RlColor& color)
			+RlText(const std::string& text, const std::string& fontPath, float fontSize, const Vector2f& position, const RlColor& color)
			-_color : RlColor
			+getColor() : RlColor& {query}
			-_origin : Vector2f
			-_position : Vector2f
			+getSize() : Vector2f {query}
			+getOrigin() : Vector2f& {query}
			+getPosition() : Vector2f& {query}
			-_fontSize : float
			-_rotation : float
			-_textSpacing : float
			+getFontSize() : float {query}
			+getRotation() : float {query}
			+getTextSpacing() : float {query}
			+getWidth() : float {query}
			-_font : std::shared_ptr<RlFont>
			+getFont() : std::shared_ptr<RlFont>& {query}
			-_text : std::string
			+getText() : std::string& {query}
			+setColor(const RlColor& color) : void
			+setFont(const std::shared_ptr<RlFont>& font) : void
			+setFontSize(float fontSize) : void
			+setOrigin(const Vector2f& origin) : void
			+setPosition(float x, float y) : void
			+setPosition(const Vector2f& pos) : void
			+setRotation(float rotation) : void
			+setText(const std::string& text) : void
			+setTextSpacing(float textSpacing) : void
		}

		class TextCodepoint {
			+TextCodepoint(const std::string& text)
			+getCodepointsCount() : int {query}
			+{static} codePointToUTF8(const int& codepoint, int& byteSize) : std::string
			+toUTF8String(const int& bytesLength) : std::string
			-_codepoints : std::vector<int>
			+getCodepoints() : std::vector<int>& {query}
		}
	}

	namespace shader {
		class RlShader {
			+RlShader()
			+~RlShader()
			-_shader : Shader
			+getShader() : Shader& {query}
			+getLocation(const std::string& uniformName) : int
			+getLocationAttrib(const std::string& attribName) : int
			+load(const std::string& vsFileName, const std::string& fsFileName) : void
			+loadFromMemory(const std::string& vsCode, const std::string& fsCode) : void
			+setValue(int locIndex, const void* value, int uniformType) : void
			+setValueMatrix(int locIndex, const Matrix& mat) : void
			+setValueTexture(int locIndex, const texture::RlTexture& texture) : void
			+setValueV(int locIndex, const void* value, int uniformType, int count) : void
		}
	}

	namespace model {
		class MeshGenerator {
			+{static} genMeshCone(const float& radius, const float& height, const int& slices) : RlMesh
			+{static} genMeshCube(const float& width, const float& height, const float& length) : RlMesh
			+{static} genMeshCubicmap(const image::RlImage& cubicmap, const Vector3f& cubeSize) : RlMesh
			+{static} genMeshCylinder(const float& radius, const float& height, const int& slices) : RlMesh
			+{static} genMeshHeightmap(const image::RlImage& heightmap, const Vector3f& size) : RlMesh
			+{static} genMeshHemiSphere(const float& radius, const int& rings, const int& slices) : RlMesh
			+{static} genMeshKnot(const float& radius, const float& size, const int& radSeg, const int& sides) : RlMesh
			+{static} genMeshPlane(const float& width, const float& length, const int& resX, const int& resZ) : RlMesh
			+{static} genMeshPoly(const int& sides, const float& radius) : RlMesh
			+{static} genMeshSphere(const float& radius, const int& rings, const int& slices) : RlMesh
			+{static} genMeshTorus(const float& radius, const float& size, const int& radSeg, const int& sides) : RlMesh
		}

		class RlAnimation {
			+RlAnimation()
			+RlAnimation(const std::string& animationDir, const std::string& extension)
			-_isLoaded : bool
			+isLoaded() : bool& {query}
			+getAnimationsSize() : std::size_t {query}
			-_animationModels : std::vector<RlModel>
			+getAnimationModels() : std::vector<RlModel>& {query}
			-_frame : unsigned int
			+getFrame() : unsigned int& {query}
			+update() : void
		}

		class RlMaterial {
			+RlMaterial(const std::string& fileName)
			+RlMaterial(Material& material)
			+~RlMaterial()
			-_material : Material
			+getMaterial() : Material& {query}
			+getMaterial() : Material&
		}

		class RlMesh {
			+RlMesh(const Mesh& mesh)
			+RlMesh(const RlMesh& mesh)
			+~RlMesh()
			+getBoundingBox() : BoundingBox
			+getMesh() : Mesh& {query}
			+operator=(const RlMesh& mesh) : RlMesh&
			+exportMesh(const std::string& fileName) : bool
			-_mesh : std::shared_ptr<Mesh>
			+getMeshSharedPtr() : std::shared_ptr<Mesh>& {query}
			+genBinormals() : void
			+genTangents() : void
			+updateBuffer(const int& index, void* data, const int& dataSize, const int& offset) : void
			+uploadInGPU(const bool& dynamic) : void
		}

		class RlModel {
			+RlModel(const std::string& fileName)
			+RlModel(const std::string& fileName, const std::string& textureName)
			+RlModel(const std::shared_ptr<RlMesh>& mesh)
			+RlModel(const RlMesh& mesh)
			+RlModel(const RlModel& model)
			+~RlModel()
			-_baseBoudingBox : BoundingBox
			-_boundingBox : BoundingBox
			+getDefaultBoundingBox() : BoundingBox {query}
			+getBaseBoundingBox() : BoundingBox& {query}
			+getBoundingBox() : BoundingBox& {query}
			+getModel() : Model& {query}
			-_color : RlColor
			+getColor() : RlColor& {query}
			+operator=(const RlModel& model) : RlModel&
			-_position : Vector3f
			-_rotationAxis : Vector3f
			-_scale : Vector3f
			+getPosition() : Vector3f& {query}
			+getRotationAxis() : Vector3f& {query}
			+getScale() : Vector3f& {query}
			-_rotationAngle : float
			+getRotationAngle() : float& {query}
			-_model : std::shared_ptr<Model>
			-_mesh : std::shared_ptr<RlMesh>
			-_texture : std::shared_ptr<texture::RlTexture>
			+getTexture() : std::shared_ptr<texture::RlTexture>& {query}
			+setBoundingBox(const BoundingBox& boundingBox) : void
			+setColor(const RlColor& color) : void
			+setMaterialTexture(const std::shared_ptr<texture::RlTexture>& texture) : void
			+setMaterialTexture(const std::shared_ptr<texture::RlTexture>& texture, const int& materialIndex) : void
			+setMaterialTexture(const std::shared_ptr<texture::RlTexture>& texture, const int& materialIndex, const MaterialMapIndex& type) : void
			+setMeshMaterial(const int& meshId, const int& materialId) : void
			+setPosition(const Vector3f& position) : void
			+setPosition(const float& x, const float& y, const float& z) : void
			+setRotationAngle(float rotationAngle) : void
			+setRotationAxis(const Vector3f& rotationAxis) : void
			+setRotationAxis(const float& x, const float& y, const float& z) : void
			+setScale(const Vector3f& scale) : void
			+setScale(const float& x, const float& y, const float& z) : void
		}

		class RlModelAnimation {
			+RlModelAnimation(const RlModel& model, const std::string& fileName)
			+~RlModelAnimation()
			-_anims : ModelAnimation*
			-_model : RlModel
			+animationIndexIsValid(const unsigned int& animIndex) : bool
			-_frameCount : int
			-_animations : std::vector<ModelAnimation>
			-_count : unsigned int
			+getCount() : unsigned int {query}
			+incrementFrameCount(const int& value) : void
			+unload(const unsigned int& animIndex) : void
			+update(const unsigned int& animIndex) : void
		}
	}

	namespace image {
		class ImageDrawHelper {
			+{static} clearBackground(image::RlImage& dst, const RlColor& color) : void
			+{static} drawCircle(image::RlImage& dst, int centerX, int centerY, int radius, const RlColor& color) : void
			+{static} drawCircle(image::RlImage& dst, const Vector2f& center, int radius, const RlColor& color) : void
			+{static} drawImage(image::RlImage& dst, const image::RlImage& src, const Rectangle& srcRec, const Rectangle& dstRec, const RlColor& tint) : void
			+{static} drawImageText(image::RlImage& dst, const std::string& text, int posX, int posY, int fontSize, const RlColor& color) : void
			+{static} drawImageText(image::RlImage& dst, const raylib::text::RlFont& font, const std::string& text, const Vector2f& position, float fontSize, float spacing, const RlColor& tint) : void
			+{static} drawLine(image::RlImage& dst, int startPosX, int startPosY, int endPosX, int endPosY, const RlColor& color) : void
			+{static} drawLine(image::RlImage& dst, const Vector2f& start, const Vector2f& end, const RlColor& color) : void
			+{static} drawPixel(image::RlImage& dst, int posX, int posY, const RlColor& color) : void
			+{static} drawPixel(image::RlImage& dst, const Vector2f& position, const RlColor& color) : void
			+{static} drawRectangle(image::RlImage& dst, int posX, int posY, int width, int height, const RlColor& color) : void
			+{static} drawRectangle(image::RlImage& dst, const Vector2f& position, const Vector2f& size, const RlColor& color) : void
			+{static} drawRectangleLines(image::RlImage& dst, const Rectangle& rec, int thick, const RlColor& color) : void
			+{static} drawRectangleRec(image::RlImage& dst, const Rectangle& rec, const RlColor& color) : void
		}

		class ImageGenerator {
			+{static} genImageCellular(const int& width, const int& height, const int& tileSize) : RlImage
			+{static} genImageChecked(const int& width, const int& height, const int& checksX, const int& checksY, const RlColor& col1, const RlColor& col2) : RlImage
			+{static} genImageColor(const int& width, const int& height, const RlColor& color) : RlImage
			+{static} genImageGradientH(const int& width, const int& height, const RlColor& left, const RlColor& right) : RlImage
			+{static} genImageGradientRadial(const int& width, const int& height, float density, const RlColor& inner, const RlColor& outer) : RlImage
			+{static} genImageGradientV(const int& width, const int& height, const RlColor& top, const RlColor& bottom) : RlImage
			+{static} genImageWhiteNoise(const int& width, const int& height, float factor) : RlImage
		}

		class RlImage {
			+RlImage(const Image& image)
			+RlImage(const Image& image, int frameCount)
			+~RlImage()
			-_image : Image
			+getImage() : Image& {query}
			+getImage() : Image&
			+getImageAlphaBorder(float threshold) : Rectangle
			+getImageColor(int x, int y) : RlColor
			+copy() : RlImage
			+subImage(const Rectangle& rec) : RlImage
			+save(const std::string& fileName) : bool
			+saveAsCode(const std::string& fileName) : bool
			-_frameCount : int
			+getFrameCount() : int& {query}
			+loadImageColors() : std::vector<RlColor>
			+loadImagePalette(int maxPaletteSize) : std::vector<RlColor>
			+alphaClear(const RlColor& color, float threshold) : void
			+alphaCrop(float threshold) : void
			+alphaMask(const RlImage& alphaMask) : void
			+alphaPremultiply() : void
			+changeFormat(int newFormat) : void
			+colorBrightness(int brightness) : void
			+colorContrast(float contrast) : void
			+colorGrayscale() : void
			+colorInvert() : void
			+colorReplace(const RlColor& color, const RlColor& replace) : void
			+colorTint(const RlColor& color) : void
			+crop(const Rectangle& crop) : void
			+dither(int rBpp, int gBpp, int bBpp, int aBpp) : void
			+flipHorizontal() : void
			+flipVertical() : void
			+mipmaps() : void
			+resize(int newWidth, int newHeight) : void
			+resizeCanvas(int newWidth, int newHeight, int offsetX, int offsetY, const RlColor& fill) : void
			+resizeNearesetNeighbor(int newWidth, int newHeight) : void
			+rotateClockwise() : void
			+rotateCounterClockwise() : void
			+toPot(const RlColor& fill) : void
		}
	}

	namespace helper {
		class AudioHelper {
			+{static} isAudioDeviceReady() : bool
			+{static} getNumberOfSoundsPlaying() : int
			-{static} _audioDeviceInit : static bool
			+{static} closeAudioDevice() : void
			+{static} initAudioDevice() : void
			+{static} setAudioStreamBufferSizeDefault(const int& size) : void
			+{static} setMasterVolume(float volume) : void
			+{static} stopMultiSound() : void
		}

		class CameraHelper {
			+{static} setAltControl(int keyAlt) : void
			+{static} setCameraMode(const RlCamera& camera, const CameraMode& mode) : void
			+{static} setMoveControls(int keyFront, int keyBack, int keyRight, int keyLeft, int keyUp, int keyDown) : void
			+{static} setPanControl(int keyPan) : void
			+{static} setSmoothZoomControl(int keySmoothZoom) : void
		}

		class Collision2DHelper {
			+{static} getCollisionRec(const Rectangle& rec1, const Rectangle& rec2) : Rectangle
			+{static} checkCollisionCircleRec(const Vector2f& center, const float& radius, const Rectangle& rec) : bool
			+{static} checkCollisionCircles(const Vector2f& center1, const float& radius1, const Vector2f& center2, const float& radius2) : bool
			+{static} checkCollisionLines(const Vector2f& startPos1, const Vector2f& endPos1, const Vector2f& startPos2, const Vector2f& endPos2, Vector2f& collisionPoint) : bool
			+{static} checkCollisionPointCircle(const Vector2f& point, const Vector2f& center, const float& radius) : bool
			+{static} checkCollisionPointLine(const Vector2f& point, const Vector2f& p1, const Vector2f& p2, const int& threshold) : bool
			+{static} checkCollisionPointRec(const Vector2f& point, const Rectangle& rec) : bool
			+{static} checkCollisionPointTriangle(const Vector2f& point, const Vector2f& p1, const Vector2f& p2, const Vector2f& p3) : bool
			+{static} checkCollisionRecs(const Rectangle& rec1, const Rectangle& rec2) : bool
		}

		class Collision3dHelper {
			+{static} getRayCollisionBox(const Ray& ray, const BoundingBox& box) : RayCollision
			+{static} getRayCollisionMesh(const Ray& ray, const model::RlMesh& mesh, const Matrix& transform) : RayCollision
			+{static} getRayCollisionModel(const Ray& ray, const model::RlModel& model) : RayCollision
			+{static} getRayCollisionQuad(const Ray& ray, const Vector3f& p1, const Vector3f& p2, const Vector3f& p3, const Vector3f& p4) : RayCollision
			+{static} getRayCollisionSphere(const Ray& ray, const Vector3f& center, const float& radius) : RayCollision
			+{static} getRayCollisionTriangle(const Ray& ray, const Vector3f& p1, const Vector3f& p2, const Vector3f& p3) : RayCollision
			+{static} checkCollisionBoxSphere(const BoundingBox& box, const Vector3f& center, const float& radius) : bool
			+{static} checkCollisionBoxes(const BoundingBox& box1, const BoundingBox& box2) : bool
			+{static} checkCollisionSpheres(const Vector3f& center1, const float& radius1, const Vector3f& center2, const float& radius2) : bool
		}

		class ColorHelper {
			+{static} colorAlpha(const RlColor& color, float alpha) : RlColor
			+{static} colorAlphaBlend(const RlColor& dst, const RlColor& src, const RlColor& tint) : RlColor
			+{static} colorFromHSV(float hue, float saturation, float value) : RlColor
			+{static} colorFromNormalized(const Vector4f& normalizedColor) : RlColor
			+{static} getColor(unsigned int hexValue) : RlColor
			+{static} getPixelColor(void* srcPtr, int format) : RlColor
			+{static} colorToHSV(const RlColor& color) : Vector3f
			+{static} getPixelDataSize(int width, int height, int format) : int
			+{static} setPixelColor(void* dstPtr, const RlColor& color, int format) : void
		}

		class CoreHelper {
			+{static} loadVrStereoConfig(const VrDeviceInfo& device) : VrStereoConfig
			+{static} getTime() : double
			+{static} getFrameTime() : float
			+{static} getFPS() : int
			+{static} openURL(const std::string& url) : void
			+{static} setFramerateLimit(int fps) : void
			+{static} unloadVrStereoConfig(const VrStereoConfig& config) : void
		}

		class FileHelper {
			+{static} directoryExists(const std::string& dirPath) : bool
			+{static} fileExists(const std::string& fileName) : bool
			+{static} isFileDropped() : bool
			+{static} isFileExtension(const std::string& fileName, const std::string& ext) : bool
			+{static} saveFileText(const std::string& fileName, const std::string& text) : bool
			+{static} getFileModTime(const std::string& fileName) : long long
			+{static} getDirectoryPath(const std::string& filePath) : std::string
			+{static} getFileExtension(const std::string& fileName) : std::string
			+{static} getFileName(const std::string& filePath) : std::string
			+{static} getFileNameWithoutExt(const std::string& filePath) : std::string
			+{static} getPrevDirectoryPath(const std::string& dirPath) : std::string
			+{static} getWorkingDirectory() : std::string
			+{static} loadFileText(const std::string& fileName) : std::string
			+{static} getDirectoryFiles(const std::string& dirPath, const bool& recursive) : std::vector<std::string>
			+{static} getDirectoryFiles(const std::string& dirPath, const std::function<bool ( const std::string& )>& filter) : std::vector<std::string>
			+{static} getDirectoryFiles(const std::string& dirPath, const bool& recursive, const std::function<bool ( const std::string& fileName )>& filterFunction) : std::vector<std::string>
			+{static} getDroppedFiles() : std::vector<std::string>
			+{static} loadFileData(const std::string& fileName) : std::vector<unsigned char>
			+{static} changeDirectory(const std::string& dir) : void
		}

		class ImageHelper {
			+{static} fromText(const std::string& text, int fontSize, const RlColor& color) : raylib::image::RlImage
			+{static} fromText(const raylib::text::RlFont& font, const std::string& text, float fontSize, float spacing, const RlColor& tint) : raylib::image::RlImage
			+{static} genImageFontAtlas(const GlyphInfo* chars, Rectangle** recs, int glyphCount, int fontSize, int padding, int packMethod) : raylib::image::RlImage
			+{static} load(const std::string& fileName) : raylib::image::RlImage
			+{static} loadAnim(const std::string& fileName) : raylib::image::RlImage
			+{static} loadFromMemory(const std::string& fileType, const unsigned char* fileData, int dataSize) : raylib::image::RlImage
			+{static} loadFromScreen() : raylib::image::RlImage
			+{static} loadFromTexture(const Texture2D& texture) : raylib::image::RlImage
			+{static} loadRaw(const std::string& fileName, int width, int height, int format, int headerSize) : raylib::image::RlImage
		}

		class TextHelper {
			+{static} getGlyphInfo(const raylib::text::RlFont& font, int codepoint) : GlyphInfo
			+{static} getGlyphAtlasRec(const raylib::text::RlFont& font, int codepoint) : Rectangle
			+{static} measureText(const raylib::text::RlFont& font, const std::string& text) : Vector2f
			+{static} measureText(const raylib::text::RlFont& font, const std::string& text, float fontSize, float spacing) : Vector2f
			+{static} getGlyphIndex(const raylib::text::RlFont& font, int codepoint) : int
			+{static} measureText(const std::string& text, int fontSize) : int
		}

		class VectorHelper {
			+{static} toVectorf(const::Vector2& vector) : Vector2f
			+{static} toVectorf(const::Vector3& vector) : Vector3f
			+{static} toVectorf(const::Vector4& vector) : Vector4f
			+toRaylibVector(const Vector2f& vector) : static::Vector2
			+toRaylibVector(const Vector3f& vector) : static::Vector3
			+toRaylibVector(const Vector4f& vector) : static::Vector4
		}

		class WorldHelper {
			+{static} getScreenToWorld2D(const Vector2f& position, const Camera2D& camera) : Vector2f
			+{static} getWorldToScreen(const Vector3f& position, const RlCamera& camera) : Vector2f
			+{static} getWorldToScreen2D(const Vector2f& position, const Camera2D& camera) : Vector2f
			+{static} getWorldToScreenEx(const Vector3f& position, const RlCamera& camera, int width, int height) : Vector2f
		}

		namespace input {
			class CursorHelper {
				+{static} isCursorHidden() : bool
				+{static} isCursorOnScreen() : bool
				+{static} disableCursor() : void
				+{static} enableCursor() : void
				+{static} hideCursor() : void
				+{static} showCursor() : void
			}

			class GamepadHelper {
				+{static} isGamepadAvailable(const int& gamepad) : bool
				+{static} isGamepadButtonDown(const int& gamepad, const GamepadButton& button) : bool
				+{static} isGamepadButtonPressed(const int& gamepad, const GamepadButton& button) : bool
				+{static} isGamepadButtonReleased(const int& gamepad, const GamepadButton& button) : bool
				+{static} isGamepadButtonUp(const int& gamepad, const GamepadButton& button) : bool
				+{static} getGamepadAxisMovement(const int& gamepad, const GamepadAxis& axis) : float
				+{static} getGamepadAxisCount(const int& gamepad) : int
				+{static} getGamepadButtonPressed() : int
				+{static} setGamepadMappings(const std::string& mappings) : int
				+{static} getGamepadName(const int& gamepad) : std::string
			}

			class KeyboardHelper {
				+{static} isKeyDown(const KeyboardKey& key) : bool
				+{static} isKeyPressed(const KeyboardKey& key) : bool
				+{static} isKeyReleased(const KeyboardKey& key) : bool
				+{static} isKeyUp(const KeyboardKey& key) : bool
				+{static} getCharPressed() : int
				+{static} getKeyPressed() : int
				+{static} getKeyName(const int& key, const int& scancode) : std::string
				+{static} getPressedKeys() : std::vector<KeyboardKey>
				+{static} getPressedChars() : std::vector<int>
				+{static} setExitKey(const KeyboardKey& key) : void
			}

			class MouseHelper {
				+{static} getMouseRay(const Vector2f& mousePosition, const RlCamera& camera) : Ray
				+{static} getMouseDelta() : Vector2f
				+{static} getMousePosition() : Vector2f
				+{static} isMouseButtonDown(const MouseButton& button) : bool
				+{static} isMouseButtonPressed(const MouseButton& button) : bool
				+{static} isMouseButtonReleased(const MouseButton& button) : bool
				+{static} isMouseButtonUp(const MouseButton& button) : bool
				+{static} getMouseWheelMove() : float
				+{static} getMouseX() : int
				+{static} getMouseY() : int
				+{static} setMouseCursor(const MouseCursor& cursor) : void
				+{static} setMouseOffset(int offsetX, int offsetY) : void
				+{static} setMousePosition(int x, int y) : void
				+{static} setMouseScale(float scaleX, float scaleY) : void
			}

			class TouchHelper {
				+{static} getGestureDragVector() : Vector2f
				+{static} getGesturePinchVector() : Vector2f
				+{static} getTouchPosition(const int& index) : Vector2f
				+{static} isGestureDetected(const int& gesture) : bool
				+{static} getGestureDragAngle() : float
				+{static} getGestureHoldDuration() : float
				+{static} getGesturePinchAngle() : float
				+{static} getGestureDetected() : int
				+{static} getTouchPointCount() : int
				+{static} getTouchPointId(const int& index) : int
				+{static} getTouchX() : int
				+{static} getTouchY() : int
				+{static} setGesturesEnabled(const unsigned int& flags) : void
			}
		}

		namespace draw {
			class Draw2DHelper {
				-{static} _texShapesRec : static Rectangle
				-{static} _texShapes : static Texture2D
				+{static} drawCircle(int centerX, int centerY, float radius, const RlColor& color) : void
				+{static} drawCircle(const Vector2f& center, float radius, const RlColor& color) : void
				+{static} drawCircleGradient(int centerX, int centerY, float radius, const RlColor& color1, const RlColor& color2) : void
				+{static} drawCircleLines(int centerX, int centerY, float radius, const RlColor& color) : void
				+{static} drawCircleSector(const Vector2f& center, float radius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawCircleSectorLines(const Vector2f& center, float radius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawEllipse(int centerX, int centerY, float radiusH, float radiusV, const RlColor& color) : void
				+{static} drawEllipseLines(int centerX, int centerY, float radiusH, float radiusV, const RlColor& color) : void
				+{static} drawLine(int startPosX, int startPosY, int endPosX, int endPosY, const RlColor& color) : void
				+{static} drawLine(const Vector2f& startPos, const Vector2f& endPos, const RlColor& color) : void
				+{static} drawLine(const Vector2f& startPos, const Vector2f& endPos, float thick, const RlColor& color) : void
				+{static} drawLineBezier(const Vector2f& startPos, const Vector2f& endPos, float thick, const RlColor& color) : void
				+{static} drawLineBezierCubic(const Vector2f& startPos, const Vector2f& endPos, const Vector2f& startControlPos, const Vector2f& endControlPos, float thick, const RlColor& color) : void
				+{static} drawLineBezierQuad(const Vector2f& startPos, const Vector2f& endPos, const Vector2f& controlPos, float thick, const RlColor& color) : void
				+{static} drawLineStrip(const std::vector<Vector2f>& points, const RlColor& color) : void
				+{static} drawPixel(int posX, int posY, const RlColor& color) : void
				+{static} drawPixel(const Vector2f& position, const RlColor& color) : void
				+{static} drawPoly(const Vector2f& center, int sides, float radius, float rotation, const RlColor& color) : void
				+{static} drawPolyLines(const Vector2f& center, int sides, float radius, float rotation, const RlColor& color) : void
				+{static} drawPolyLines(const Vector2f& center, int sides, float radius, float rotation, float lineThick, const RlColor& color) : void
				+{static} drawRectangle(int posX, int posY, int width, int height, const RlColor& color) : void
				+{static} drawRectangle(const Vector2f& position, const Vector2f& size, const RlColor& color) : void
				+{static} drawRectangle(const Rectangle& rec, const RlColor& color) : void
				+{static} drawRectangle(const Rectangle& rec, const Vector2f& origin, float rotation, const RlColor& color) : void
				+{static} drawRectangleGradient(const Rectangle& rec, const RlColor& col1, const RlColor& col2, const RlColor& col3, const RlColor& col4) : void
				+{static} drawRectangleGradientH(int posX, int posY, int width, int height, const RlColor& color1, const RlColor& color2) : void
				+{static} drawRectangleGradientV(int posX, int posY, int width, int height, const RlColor& color1, const RlColor& color2) : void
				+{static} drawRectangleLines(int posX, int posY, int width, int height, const RlColor& color) : void
				+{static} drawRectangleLinesEx(const Rectangle& rec, float lineThick, const RlColor& color) : void
				+{static} drawRectangleRounded(const Rectangle& rec, float roundness, int segments, const RlColor& color) : void
				+{static} drawRectangleRoundedLines(const Rectangle& rec, float roundness, int segments, float lineThick, const RlColor& color) : void
				+{static} drawRing(const Vector2f& center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawRingLines(const Vector2f& center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, const RlColor& color) : void
				+{static} drawTriangle(const Vector2f& v1, const Vector2f& v2, const Vector2f& v3, const RlColor& color) : void
				+{static} drawTriangleFan(const std::vector<Vector2f>& points, const RlColor& color) : void
				+{static} drawTriangleLines(const Vector2f& v1, const Vector2f& v2, const Vector2f& v3, const RlColor& color) : void
				+{static} drawTriangleStrip(const std::vector<Vector2f>& points, const RlColor& color) : void
				+{static} setShapesTexture(const texture::RlTexture& texture, const Rectangle& source) : void
			}

			class Draw3DHelper {
				+{static} drawBillboard(const RlCamera& camera, const texture::RlTexture& texture, const Vector3f& position, float size, const RlColor& tint) : void
				+{static} drawBillboardPro(const RlCamera& camera, const texture::RlTexture& texture, const Rectangle& source, const Vector3f& position, const Vector3f& up, const Vector2f& size, const Vector2f& origin, float rotation, const RlColor& tint) : void
				+{static} drawBillboardRec(const RlCamera& camera, const texture::RlTexture& texture, const Rectangle& source, const Vector3f& position, const Vector2f& size, const RlColor& tint) : void
				+{static} drawBoundingBox(const BoundingBox& box, const RlColor& color) : void
				+{static} drawCircle(const Vector3f& center, const float& radius, const Vector3f& rotationAxis, const float& rotationAngle, const RlColor& color) : void
				+{static} drawCube(const Vector3f& position, const float& width, const float& height, const float& length, const RlColor& color) : void
				+{static} drawCube(const Vector3f& position, const Vector3f& size, const RlColor& color) : void
				+{static} drawCubeTexture(const texture::RlTexture& texture, const Vector3f& position, const float& width, const float& height, const float& length, const RlColor& color) : void
				+{static} drawCubeTextureRec(const texture::RlTexture& texture, const Rectangle& source, const Vector3f& position, const float& width, const float& height, const float& length, const RlColor& color) : void
				+{static} drawCubeWires(const Vector3f& position, const float& width, const float& height, const float& length, const RlColor& color) : void
				+{static} drawCubeWires(const Vector3f& position, const Vector3f& size, const RlColor& color) : void
				+{static} drawCylinder(const Vector3f& position, const float& radiusTop, const float& radiusBottom, const float& height, const int& slices, const RlColor& color) : void
				+{static} drawCylinder(const Vector3f& startPos, const Vector3f& endPos, const float& startRadius, const float& endRadius, const int& sides, const RlColor& color) : void
				+{static} drawCylinderWires(const Vector3f& position, const float& radiusTop, const float& radiusBottom, const float& height, const int& slices, const RlColor& color) : void
				+{static} drawCylinderWires(const Vector3f& startPos, const Vector3f& endPos, const float& startRadius, const float& endRadius, const int& sides, const RlColor& color) : void
				+{static} drawGrid(const int& slices, const float& spacing) : void
				+{static} drawGrid(const Vector2i& size, const float& spacing) : void
				+{static} drawGrid(const Vector2i& size, const Vector3f& position, const float& spacing) : void
				+{static} drawGrid(const Vector2i& size, const Vector3f& position, const float& spacing, const RlColor& color) : void
				+{static} drawLine(const Vector3f& startPos, const Vector3f& endPos, const RlColor& color) : void
				+{static} drawPlane(const Vector3f& centerPos, const Vector2f& size, const RlColor& color) : void
				+{static} drawPoint(const Vector3f& position, const RlColor& color) : void
				+{static} drawRay(const Ray& ray, const RlColor& color) : void
				+{static} drawSphere(const Vector3f& centerPos, const float& radius, const RlColor& color) : void
				+{static} drawSphere(const Vector3f& centerPos, const float& radius, const int& rings, const int& slices, const RlColor& color) : void
				+{static} drawSphereWires(const Vector3f& centerPos, const float& radius, const int& rings, const int& slices, const RlColor& color) : void
				+{static} drawTriangle3D(const Vector3f& v1, const Vector3f& v2, const Vector3f& v3, const RlColor& color) : void
				+{static} drawTriangleStrip3D(const std::vector<Vector3f>& points, const RlColor& color) : void
			}

			class DrawHelper {
				+{static} beginBlendMode(int mode) : void
				+{static} beginDrawing() : void
				+{static} beginMode2D(const Camera2D& camera) : void
				+{static} beginMode3D(const RlCamera& camera) : void
				+{static} beginScissorMode(int x, int y, int width, int height) : void
				+{static} beginShaderMode(const shader::RlShader& shader) : void
				+{static} beginTextureMode(const RenderTexture2D& target) : void
				+{static} beginVrStereoMode(const VrStereoConfig& config) : void
				+{static} clearBackground(const RlColor& color) : void
				+{static} endBlendMode() : void
				+{static} endDrawing() : void
				+{static} endMode2D() : void
				+{static} endMode3D() : void
				+{static} endScissorMode() : void
				+{static} endShaderMode() : void
				+{static} endTextureMode() : void
				+{static} endVrStereoMode() : void
			}

			class DrawModelHelper {
				+{static} drawMesh(const raylib::model::RlMesh& mesh, const raylib::model::RlMaterial& material, const Matrix& transform) : void
				+{static} drawMeshInstanced(const raylib::model::RlMesh& mesh, const raylib::model::RlMaterial& material, std::vector<Matrix>& transforms) : void
				+{static} drawModel(const raylib::model::RlModel& model) : void
				+{static} drawModel(const raylib::model::RlModel& model, const Vector3f& position, const float& scale, const RlColor& tint) : void
				+{static} drawModel(const raylib::model::RlModel& model, const Vector3f& position, const Vector3f& rotationAxis, const float& rotationAngle, const Vector3f& scale, const RlColor& tint) : void
				+{static} drawModelWires(const raylib::model::RlModel& model) : void
				+{static} drawModelWires(const raylib::model::RlModel& model, const Vector3f& position, const float& scale, const RlColor& tint) : void
				+{static} drawModelWires(const raylib::model::RlModel& model, const Vector3f& position, const Vector3f& rotationAxis, const float& rotationAngle, const Vector3f& scale, const RlColor& tint) : void
			}

			class DrawTextHelper {
				+{static} drawCenteredText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const RlColor& color, const float& spacing) : void
				+{static} drawCenteredText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const float& fontSize, const RlColor& color, const float& spacing) : void
				+{static} drawCenteredText(const raylib::text::RlText& text) : void
				+{static} drawFps(const Vector2f& pos, const int& fontSize) : void
				+{static} drawFps(const float& posX, const float& posY, const int& fontSize) : void
				+{static} drawFps(const Vector2f& pos) : void
				+{static} drawFps(const int& posX, const int& posY) : void
				+{static} drawText(const std::string& text, const Vector2f& pos, const int& fontSize, const RlColor& color) : void
				+{static} drawText(const std::string& text, const float& posX, const float& posY, const int& fontSize, const RlColor& color) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const RlColor& color) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const float& rotation, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const Vector2f& origin, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const std::string& text, const raylib::text::RlFont& font, const Vector2f& position, const Vector2f& origin, const float& rotation, const float& fontSize, const RlColor& tint, const float& spacing) : void
				+{static} drawText(const raylib::text::RlText& text, const Vector2f& position, const RlColor& color) : void
				+{static} drawText(const raylib::text::RlText& text, const float& posX, const float& posY, const RlColor& color) : void
				+{static} drawText(const raylib::text::RlText& text) : void
				+{static} drawTextUsingCodepoint(const raylib::text::RlFont& font, const int& codepoint, const Vector2f& position, float fontSize, const RlColor& tint) : void
			}

			class DrawTextureHelper {
				+{static} drawTexture(const texture::RlTexture& texture, int posX, int posY, const RlColor& tint) : void
				+{static} drawTexture(const texture::RlTexture& texture, const Vector2f& position, const RlColor& tint) : void
				+{static} drawTexture(const texture::RlTexture& texture, const Vector2f& position, float rotation, float scale, const RlColor& tint) : void
				+{static} drawTexture(const texture::RlTexture& texture, const Rectangle& source, const Rectangle& dest, const Vector2f& origin, float rotation, const RlColor& tint) : void
				+{static} drawTextureNPatch(const texture::RlTexture& texture, const NPatchInfo& nPatchInfo, const Rectangle& dest, const Vector2f& origin, float rotation, const RlColor& tint) : void
				+{static} drawTexturePoly(const texture::RlTexture& texture, const Vector2f& center, const std::vector<Vector2f>& points, std::vector<Vector2f>& texcoords, const RlColor& tint) : void
				+{static} drawTextureQuad(const texture::RlTexture& texture, const Vector2f& tiling, const Vector2f& offset, const Rectangle& quad, const RlColor& tint) : void
				+{static} drawTextureRec(const texture::RlTexture& texture, const Rectangle& source, const Vector2f& position, const RlColor& tint) : void
				+{static} drawTextureTiled(const texture::RlTexture& texture, const Rectangle& source, const Rectangle& dest, const Vector2f& origin, float rotation, float scale, const RlColor& tint) : void
			}
		}
	}

	namespace ex {
		class BuilderException {
			+BuilderException(const std::string& msg)
		}

		class CameraException {
			+CameraException(const std::string& message)
		}

		class InvalidArgumentException {
			+InvalidArgumentException(const std::string& msg)
		}

		class RaylibException {
			+RaylibException(const std::string& msg, bool prefix)
			+what() : char* {query}
			-_msg : std::string
		}

		class RlAnimationException {
			+RlAnimationException(const std::string& message)
		}

		class RlModelException {
			+RlModelException(const std::string& message)
		}

		class WindowException {
			+WindowException(const std::string& msg)
		}
	}

	namespace builder {
		abstract class IBuilder <template<typename T>> {
			+{abstract} build() : T
		}

		class RlCameraBuilder {
			+RlCameraBuilder()
			-_cameraMode : CameraMode
			-_projection : CameraProjection
			+build() : RlCamera
			+setCameraMode(CameraMode cameraMode) : RlCameraBuilder&
			+setFovy(float fovy) : RlCameraBuilder&
			+setLookingPoint(const Vector3f& lookingPoint) : RlCameraBuilder&
			+setPosition(const Vector3f& position) : RlCameraBuilder&
			+setProjection(CameraProjection projection) : RlCameraBuilder&
			+setTarget(const Vector3f& target) : RlCameraBuilder&
			-_lookingPoint : Vector3f
			-_position : Vector3f
			-_target : Vector3f
			-_fovy : float
		}

		class RlImageBuilder {
			+RlImageBuilder()
			-_bottom : RlColor
			-_col1 : RlColor
			-_col2 : RlColor
			-_color : RlColor
			-_inner : RlColor
			-_left : RlColor
			-_outer : RlColor
			-_right : RlColor
			-_top : RlColor
			+setBottom(const RlColor& bottom) : RlImageBuilder&
			+setChecksX(const int& checksX) : RlImageBuilder&
			+setChecksY(const int& checksY) : RlImageBuilder&
			+setCol1(const RlColor& col1) : RlImageBuilder&
			+setCol2(const RlColor& col2) : RlImageBuilder&
			+setColor(const RlColor& color) : RlImageBuilder&
			+setDensity(const float& density) : RlImageBuilder&
			+setFactor(const float& factor) : RlImageBuilder&
			+setHeight(const int& height) : RlImageBuilder&
			+setInner(const RlColor& inner) : RlImageBuilder&
			+setLeft(const RlColor& left) : RlImageBuilder&
			+setOuter(const RlColor& outer) : RlImageBuilder&
			+setRight(const RlColor& right) : RlImageBuilder&
			+setTitleSize(const int& titleSize) : RlImageBuilder&
			+setTop(const RlColor& top) : RlImageBuilder&
			+setType(ImageType type) : RlImageBuilder&
			+setWidth(const int& width) : RlImageBuilder&
			-_density : float
			-_factor : float
			-_checksX : int
			-_checksY : int
			-_height : int
			-_titleSize : int
			-_width : int
			-_flags : long
			-_type : long
			+build() : raylib::image::RlImage
		}

		class RlMeshBuilder {
			+RlMeshBuilder()
			+setConeSlices(const int& slices) : RlMeshBuilder&
			+setCubeSize(const Vector3f& cubeSize) : RlMeshBuilder&
			+setCubicmap(const image::RlImage& cubicmap) : RlMeshBuilder&
			+setHeight(const float& height) : RlMeshBuilder&
			+setHeightmap(const image::RlImage& heightmap) : RlMeshBuilder&
			+setHemisphereRings(const int& rings) : RlMeshBuilder&
			+setKnotRadSeg(const int& radSeg) : RlMeshBuilder&
			+setLength(const float& length) : RlMeshBuilder&
			+setMeshType(MeshType meshType) : RlMeshBuilder&
			+setRadSeg(const int& radSeg) : RlMeshBuilder&
			+setRadius(const float& radius) : RlMeshBuilder&
			+setResX(const int& resX) : RlMeshBuilder&
			+setResZ(const int& resZ) : RlMeshBuilder&
			+setRings(const int& rings) : RlMeshBuilder&
			+setSides(const int& sides) : RlMeshBuilder&
			+setSize(const float& size) : RlMeshBuilder&
			+setSlices(const int& slices) : RlMeshBuilder&
			+setVec3fSize(const Vector3f& size) : RlMeshBuilder&
			+setWidth(const float& width) : RlMeshBuilder&
			-_cubeSize : Vector3f
			-_vec3fSize : Vector3f
			-_height : float
			-_length : float
			-_radius : float
			-_size : float
			-_width : float
			-_cubicmap : image::RlImage
			-_heightmap : image::RlImage
			-_radSeg : int
			-_resX : int
			-_resZ : int
			-_rings : int
			-_sides : int
			-_slices : int
			-_flags : long
			-_type : long
			+build() : model::RlMesh
		}

		class RlModelBuilder {
			+RlModelBuilder()
			-_boundingBox : BoundingBox
			-_color : RlColor
			+setRotationAxis(const Vector3f& rotationAxis) : RlModelBuilder
			+setBoundingBox(const BoundingBox& boundingBox) : RlModelBuilder&
			+setColor(const RlColor& color) : RlModelBuilder&
			+setMesh(const std::shared_ptr<raylib::model::RlMesh>& mesh) : RlModelBuilder&
			+setMesh(const raylib::model::RlMesh& mesh) : RlModelBuilder&
			+setModelPath(const std::string& modelPath) : RlModelBuilder&
			+setPosition(const Vector3f& position) : RlModelBuilder&
			+setRotationAngle(const float& rotationAngle) : RlModelBuilder&
			+setScale(const Vector3f& scale) : RlModelBuilder&
			+setTexture(const std::shared_ptr<texture::RlTexture>& texture) : RlModelBuilder&
			+setTexturePath(const std::string& texturePath) : RlModelBuilder&
			-_position : Vector3f
			-_rotationAxis : Vector3f
			-_scale : Vector3f
			-_boundingBoxSet : bool
			-_rotationAngle : float
			-_flags : long
			+build() : raylib::model::RlModel
			-{static} _validTypes : static std::vector<ValidType>
			-_mesh : std::shared_ptr<raylib::model::RlMesh>
			-_texture : std::shared_ptr<texture::RlTexture>
			-_modelPath : std::string
			-_texturePath : std::string
		}

		class RlTextBuilder {
			+RlTextBuilder()
			-_color : RlColor
			+setColor(const RlColor& color) : RlTextBuilder&
			+setFont(const std::shared_ptr<raylib::text::RlFont>& font) : RlTextBuilder&
			+setFontPath(const std::string& fontPath) : RlTextBuilder&
			+setFontSize(const float& fontSize) : RlTextBuilder&
			+setOrigin(const Vector2f& origin) : RlTextBuilder&
			+setPosition(const Vector2f& position) : RlTextBuilder&
			+setRotation(const float& rotation) : RlTextBuilder&
			+setSpacing(const float& spacing) : RlTextBuilder&
			+setText(const std::string& text) : RlTextBuilder&
			-_origin : Vector2f
			-_position : Vector2f
			-_isFontPathSet : bool
			-_isFontSet : bool
			-_isFontSizeSet : bool
			-_isTextSet : bool
			-_fontSize : float
			-_rotation : float
			-_textSpacing : float
			+build() : raylib::text::RlText
			-_font : std::shared_ptr<raylib::text::RlFont>
			-_fontPath : std::string
			-_text : std::string
		}

		enum RlImageBuilder::ImageType {
			ImageCellular
			ImageChecked
			ImageColor
			ImageGradientH
			ImageGradientRadial
			ImageGradientV
			ImageWhiteNoise
		}

		enum RlImageBuilder::ParameterName {
			Bottom
			ChecksX
			ChecksY
			Col1
			Col2
			Color
			Density
			Factor
			Height
			Inner
			Left
			Outer
			Right
			TitleSize
			Top
			Width
		}

		enum RlMeshBuilder::MeshType {
			MeshCone
			MeshCube
			MeshCubicmap
			MeshCylinder
			MeshHeightmap
			MeshHemiSphere
			MeshKnot
			MeshPlane
			MeshPoly
			MeshSphere
			MeshTorus
		}

		enum RlMeshBuilder::ParameterName {
			ConeSlices
			CubeSize
			Cubicmap
			Height
			Heightmap
			HemisphereRings
			KnotRadSeg
			Length
			RadSeg
			Radius
			ResX
			ResZ
			Rings
			Sides
			Size
			Slices
			Vec3fSize
			Width
		}

		enum RlModelBuilder::RequiredParameter {
			MESH
			MODEL_PATH
			SHARED_TEXTURE
			TEXTURE_PATH
		}

		enum RlModelBuilder::ValidType {
			RLMODEL_MESH
			RLMODEL_MESH_AND_SHARED_TEXTURE
			RLMODEL_PATH
			RLMODEL_PATH_AND_SHARED_TEXTURE
			RLMODEL_PATH_AND_TEXTURE
		}
	}

	namespace audio {
		class RlAudioStream {
			+RlAudioStream(const unsigned int& sampleRate, const unsigned int& sampleSize, const unsigned int& channels)
			+~RlAudioStream()
			-_stream : AudioStream
			+isPlaying() : bool
			+isProcessed() : bool
			-_volume : float
			+getVolume() : float& {query}
			+pause() : void
			+play() : void
			+resume() : void
			+setPitch(const float& pitch) : void
			+setVolume(float volume) : void
			+stop() : void
			+update(const void* data, const int& samplesCount) : void
		}

		class RlMusic {
			+RlMusic(const std::string& fileName)
			+RlMusic(const std::string& fileType, unsigned char* data, const int& dataSize)
			+~RlMusic()
			-_music : Music
			+isPlaying() : bool
			+isLooping() : bool& {query}
			-_volume : float
			+getTimeLength() : float
			+getTimePlayed() : float
			+getVolume() : float& {query}
			+pause() : void
			+play() : void
			+resume() : void
			+seek(const float& position) : void
			+setLooping(const bool& loop) : void
			+setPitch(const float& pitch) : void
			+setVolume(const float& volume) : void
			+stop() : void
			+update() : void
		}

		class RlSound {
			+RlSound(const Sound& sound)
			+RlSound(const std::string& fileName)
			+RlSound(const RlWave& wave)
			+~RlSound()
			-_sound : Sound
			+isPlaying() : bool
			-_volume : float
			+getVolume() : float& {query}
			+pause() : void
			+play() : void
			+playMulti() : void
			+resume() : void
			+setPitch(const float& pitch) : void
			+setVolume(const float& volume) : void
			+stop() : void
			+update(const void* data, const int& samplesCount) : void
		}

		class RlWave {
			+RlWave()
			+RlWave(const Wave& wave)
			+RlWave(const std::string& path)
			+RlWave(const std::string& fileType, const unsigned char* fileData, int dataSize)
			+~RlWave()
			+copy() : RlWave
			-_wave : Wave
			+getWave() : Wave&
			+getWave() : Wave& {query}
			+exportWave(const std::string& fileName) : bool
			+exportWaveAsCode(const std::string& fileName) : bool
			-_samplesPtr : float*
			+toSound() : raylib::audio::RlSound {query}
			-_samples : std::vector<float>
			+getSamples() : std::vector<float>
			+crop(const int& initSample, const int& finalSample) : void
			+format(const int& sampleRate, const int& sampleSize, const int& channels) : void
		}
	}
}


namespace gameengine {
	abstract class AbstractSound {
		+AbstractSound(const std::string& filePath, SoundCategory category)
		+~AbstractSound()
		-_category : SoundCategory
		+getCategory() : int {query}
		-_filePath : std::string
		-_name : std::string
		+getFilePath() : std::string& {query}
		+getName() : std::string& {query}
		+{abstract} setVolume(const float& volume) : void
	}

	class AudioManager {
		+AudioManager()
		+~AudioManager()
		-{static} _instance : static std::shared_ptr<AudioManager>
		+{static} getInstance() : std::shared_ptr<AudioManager>&
		+getSound(const std::string& name) : std::unique_ptr<AbstractSound>&
		-_sounds : std::vector<std::unique_ptr<gameengine::AbstractSound>>
		+addSound(const std::string& filePath, AbstractSound::SoundCategory category) : void
		+deleteSound(const std::string& name) : void
		+loadSounds(const std::string& assetsPath) : void
		+loadSounds(const std::string& soundDir, const std::string& musicDir) : void
		+playSound(const std::string& name) : void
		+setVolume(const float& volume, AbstractSound::SoundCategory category) : void
	}

	abstract class Scene {
		+Scene(const std::string& name, const std::string& sceneSource)
		+~Scene()
		-_isLaunched : bool
		-_isPaused : bool
		+deleteNode(const std::string& name) : bool
		+isLaunched() : bool& {query}
		+isPaused() : bool& {query}
		+getNode(const std::string& name) : std::shared_ptr<gameengine::node::AbstractBase>
		-_name : std::string
		-_sceneSource : std::string
		+getName() : std::string& {query}
		+getSceneSource() : std::string& {query}
		-_nodes : std::vector<std::shared_ptr<gameengine::node::AbstractBase>>
		+getNodes() : std::vector<std::shared_ptr<gameengine::node::AbstractBase>>& {query}
		+addNode(const std::shared_ptr<gameengine::node::AbstractBase>& node) : void
		+deleteNodeIncludes(const std::string& includeName) : void
		+destroy() : void
		+draw() : void
		+draw2D() : void
		+init() : void
		+{abstract} initScene() : void
		+{abstract} sceneLauncher() : void
		+setLaunched() : void
		+setPaused(const bool& value) : void
		+update(const float& delta) : void
		+{abstract} updateScene(const float& delta) : void
	}

	class SceneManager {
		+isPaused() : bool
		-{static} _instance : static std::shared_ptr<SceneManager>
		+getCurrentScene() : std::shared_ptr<gameengine::Scene>&
		+{static} getInstance() : std::shared_ptr<gameengine::SceneManager>&
		+getNode(const std::string& name) : std::shared_ptr<gameengine::node::AbstractBase>
		-_actualScene : std::string
		-_waitingScene : std::string
		-_scenes : std::vector<std::shared_ptr<gameengine::Scene>>
		+getAllNodes() : std::vector<std::shared_ptr<gameengine::node::AbstractBase>>
		-_nodesToDelete : std::vector<std::string>
		-_nodesToDeleteIncludes : std::vector<std::string>
		+addNode(const std::shared_ptr<gameengine::node::AbstractBase>& node) : void
		+addScene(const std::shared_ptr<gameengine::Scene>& scene) : void
		+changeScene(const std::string& scene) : void
		-changeSceneInWaiting() : void
		+deleteNode(const std::string& name) : void
		-deleteNodeInLst() : void
		+deleteNodeInclude(const std::string& containedName) : void
		+deleteScene(const std::string& scene) : void
		+draw() : void
		+draw2D() : void
		+drawAll(raylib::RlCamera& camera) : void
		+makeLoop(raylib::RlCamera& camera) : void
		+setPaused(bool value) : void
		+update() : void
	}

	class TextureManager {
		-{static} _defaultTexture : static std::shared_ptr<raylib::texture::RlTexture>
		-{static} _instance : static std::unique_ptr<TextureManager>
		+getTexture(const std::string& textureName) : std::shared_ptr<raylib::texture::RlTexture>
		+{static} getDefaultTexture() : std::shared_ptr<raylib::texture::RlTexture>&
		+{static} getInstance() : std::unique_ptr<TextureManager>&
		-_textures : std::vector<std::shared_ptr<raylib::texture::RlTexture>>
		+getTextures() : std::vector<std::shared_ptr<raylib::texture::RlTexture>>& {query}
		+loadTextures(const std::string& texturesDir) : void
	}

	class Time {
		+Time()
		+~Time()
		+{static} getMicrosecondsTime() : long
		+{static} getMillisecondsTime() : long
		+{static} getNanoTime(std::chrono::seconds time) : long
		+{static} getNanoTime(std::chrono::milliseconds time) : long
		+{static} getNanoTime(std::chrono::microseconds time) : long
		+{static} getNanosecondsTime() : long
		+{static} getSecondsTime() : long
	}

	enum AbstractSound::SoundCategory {
		FX
		MUSIC
	}

	namespace node {
		abstract class AbstractBase {
			+AbstractBase(const std::string& name)
			+AbstractBase(const AbstractBase &)
			+~AbstractBase()
			#_hiding : bool
			+isHiding() : bool& {query}
			+{abstract} getRotationDegrees() : float {query}
			#_group : std::string
			#_name : std::string
			+getGroup() : std::string& {query}
			+getName() : std::string& {query}
			+{abstract} draw() : void
			+{abstract} init() : void
			+setGroup(const std::string& group) : void
			+setHiding(bool value) : void
			+{abstract} update(const float& delta) : void
		}

		namespace _3D {
			class Grid3D {
				+Grid3D(const Vector2i& size, const Vector3f& position, const float& spacing, const RlColor& tint, const std::string& name)
				+Grid3D(const Grid3D &)
				-_tint : RlColor
				-_size : Vector2i
				-_position : Vector3f
				-_scale : Vector3f
				+getPosition() : Vector3f& {query}
				+getScale() : Vector3f& {query}
				-_spacing : float
				+getRotationDegrees() : float {query}
				+draw() : void
				+init() : void
				+setPosition(const Vector3f& pos) : void
				+setRotationDegrees(const float& degrees, const Vector3f& rotationAxis) : void
				+setScale(const Vector3f& newScale) : void
				+setSize(const Vector2i& size) : void
				+setSpacing(const float& spacing) : void
				+setTint(const RlColor& tint) : void
				+update(const float& delta) : void
			}

			class KinematicBody {
				+KinematicBody(const std::string& name, const raylib::model::RlModel& model)
				+KinematicBody(const std::string& name, const raylib::model::RlModel& model, const std::shared_ptr<raylib::texture::RlTexture>& texture)
				+~KinematicBody()
				+moveAndCollide(const Vector3f& position) : bool
			}

			abstract class Node3D {
				+Node3D(const std::string& name)
				+Node3D(const Node3D &)
				+~Node3D()
				+{abstract} getPosition() : Vector3f& {query}
				+{abstract} getScale() : Vector3f& {query}
				+{abstract} setPosition(const Vector3f& pos) : void
				+{abstract} setRotationDegrees(const float& degrees, const Vector3f& rotationAxis) : void
				+{abstract} setScale(const Vector3f& newScale) : void
			}

			class StaticBody {
				+StaticBody(const std::string& name, const raylib::model::RlModel& model)
				+StaticBody(const std::string& name, const raylib::model::RlModel& model, const std::shared_ptr<raylib::texture::RlTexture>& texture)
				+~StaticBody()
				+getBoundingBox() : BoundingBox& {query}
				+getColor() : RlColor& {query}
				+getPosition() : Vector3f& {query}
				+getScale() : Vector3f& {query}
				#_collisionEnable : bool
				+hasCollisionEnabled() : bool& {query}
				+getRotationDegrees() : float {query}
				+operator->() : raylib :: model :: RlModel*
				#_model : raylib::model::RlModel
				+getModel() : raylib::model::RlModel&
				+getModel() : raylib::model::RlModel& {query}
				+draw() : void
				+init() : void
				+setBoundingBox(const BoundingBox& boundingBox) : void
				+setCollisionEnable(bool value) : void
				+setColor(const raylib::RlColor& color) : void
				+setPosition(const Vector3f& pos) : void
				+setRotationDegrees(const float& degrees, const Vector3f& rotationAxis) : void
				+setScale(const Vector3f& newScale) : void
				+update(const float& delta) : void
			}
		}

		namespace _2D {
			abstract class Button {
				+Button(const std::string& name, const std::shared_ptr<raylib::texture::RlTexture>& texture)
				-_bounds : Rectangle
				-_rectangle : Rectangle
				+getBounds() : Rectangle& {query}
				+getRectangle() : Rectangle& {query}
				-_origin : Vector2f
				-_position : Vector2f
				-_scale : Vector2f
				+getOrigin() : Vector2f& {query}
				+getPosition() : Vector2f& {query}
				+getScale() : Vector2f& {query}
				-_action : bool
				-_isEnabled : bool
				+isEnabled() : bool& {query}
				-_frameHeight : float
				-_rotationDegrees : float
				+getRotationDegrees() : float {query}
				-_frameNum : int
				-_state : int
				-_texture : std::shared_ptr<raylib::texture::RlTexture>
				+getTexture() : std::shared_ptr<raylib::texture::RlTexture>& {query}
				+centerButton(const Vector2f& pos) : void
				+draw() : void
				+init() : void
				+{abstract} pressed() : void
				+setEnabled(const bool& value) : void
				+setOrigin(const Vector2f& origin) : void
				+setPosition(const Vector2f& position) : void
				+setRotationDegrees(const float& rotationDegrees) : void
				+setScale(const Vector2f& scale) : void
				+update(const float& delta) : void
			}

			class Label {
				+Label(const std::string& name, const Vector2f& position, const Vector2f& scale, const float& degrees, const raylib::RlColor& color)
				+~Label()
				-_position : Vector2f
				-_scale : Vector2f
				+getPosition() : Vector2f& {query}
				+getScale() : Vector2f& {query}
				-_rotationDegrees : float
				+getRotationDegrees() : float {query}
				-_color : raylib::RlColor
				+getColor() : raylib::RlColor&
				+getColor() : raylib::RlColor& {query}
				-_textComponent : raylib::text::RlText
				-_text : std::string
				+draw() : void
				+init() : void
				+setColor(raylib::RlColor color) : void
				+setPosition(const Vector2f& position) : void
				+setRotationDegrees(const float& rotationDegrees) : void
				+setScale(const Vector2f& scale) : void
				+setText(const std::string& text) : void
				+update(const float& delta) : void
			}

			abstract class Node2D {
				+Node2D(const std::string& name)
				+Node2D(const Node2D &)
				+~Node2D()
				+{abstract} getPosition() : Vector2f& {query}
				+{abstract} getScale() : Vector2f& {query}
				+{abstract} setPosition(const Vector2f& pos) : void
				+{abstract} setRotationDegrees(const float& degrees) : void
				+{abstract} setScale(const Vector2f& newScale) : void
			}

			class TextureRect {
				+TextureRect(const std::string& name, const std::shared_ptr<raylib::texture::RlTexture>& texture, const Vector2f& position, const Vector2f& scale, const float& degrees, const raylib::RlColor& color)
				+~TextureRect()
				-_position : Vector2f
				-_scale : Vector2f
				+getPosition() : Vector2f& {query}
				+getScale() : Vector2f& {query}
				-_rotationDegrees : float
				+getRotationDegrees() : float {query}
				-_color : raylib::RlColor
				+getColor() : raylib::RlColor&
				+getColor() : raylib::RlColor& {query}
				-_texture : std::shared_ptr<raylib::texture::RlTexture>
				+draw() : void
				+init() : void
				+setColor(const RlColor& color) : void
				+setPosition(const Vector2f& position) : void
				+setRotationDegrees(const float& rotationDegrees) : void
				+setScale(const Vector2f& scale) : void
				+update(const float& delta) : void
			}
		}
	}

	namespace map {
		class MapParser <template<typename T>> {
			+MapParser(const std::string& fileName, const std::unordered_map<char, T>& symbols, const Vector2u& maxSize)
			-_maxSize : Vector2u
			-_size : Vector2u
			+getMaxSize() : Vector2u& {query}
			+getSize() : Vector2u& {query}
			-_file : std::ifstream
			-_buffer : std::string
			-_fileName : std::string
			-removeComment(const std::string& line) : std::string
			+getBuffer() : std::string& {query}
			+getFileName() : std::string& {query}
			+getSymbols() : std::unordered_map<char , T>& {query}
			-_symbols : std::unordered_map<char, T>
			-_map : std::vector<std::vector<T>>
			+getMap() : std::vector<std::vector<T>>& {query}
			+parse() : void
			-parseMap() : void
		}
	}

	namespace ex {
		class GameEngineException {
			+GameEngineException(const std::string& message, const bool& prefix)
			+what() : char* {query}
			-_msg : std::string
		}

		class MapParserException {
			+MapParserException(const std::string& message)
		}
	}

	namespace audio {
		class Music {
			+Music(const std::string& fileName, AbstractSound::SoundCategory category)
			+setVolume(const float& volume) : void
		}

		class Sound {
			+Sound(const std::string& fileName, SoundCategory category)
			+setVolume(const float& volume) : void
		}
	}
}






gameengine.node.AbstractBase <|- - gameengine.node._2D.Node2D


gameengine.node.AbstractBase <|- - gameengine.node._3D.Node3D


gameengine.AbstractSound <|- - gameengine.audio.Music


gameengine.AbstractSound <|- - gameengine.audio.Sound


gameengine.ex.GameEngineException <|- - gameengine.ex.MapParserException


raylib.builder.IBuilder <|- - raylib.builder.RlCameraBuilder


raylib.builder.IBuilder <|- - raylib.builder.RlImageBuilder


raylib.builder.IBuilder <|- - raylib.builder.RlMeshBuilder


raylib.builder.IBuilder <|- - raylib.builder.RlModelBuilder


raylib.builder.IBuilder <|- - raylib.builder.RlTextBuilder


gameengine.node._2D.Node2D <|- - gameengine.node._2D.Button


gameengine.node._2D.Node2D <|- - gameengine.node._2D.Label


gameengine.node._2D.Node2D <|- - gameengine.node._2D.TextureRect


gameengine.node._3D.Node3D <|- - gameengine.node._3D.Grid3D


gameengine.node._3D.Node3D <|- - gameengine.node._3D.StaticBody


raylib.ex.RaylibException <|- - raylib.ex.BuilderException


raylib.ex.RaylibException <|- - raylib.ex.CameraException


raylib.ex.RaylibException <|- - raylib.ex.InvalidArgumentException


raylib.ex.RaylibException <|- - raylib.ex.RlAnimationException


raylib.ex.RaylibException <|- - raylib.ex.RlModelException


raylib.ex.RaylibException <|- - raylib.ex.WindowException


raylib.audio.RlMusic <|- - gameengine.audio.Music


raylib.audio.RlSound <|- - gameengine.audio.Sound


gameengine.node._3D.StaticBody <|- - gameengine.node._3D.KinematicBody






gameengine.AudioManager *- - gameengine.AbstractSound


gameengine.AudioManager *- - gameengine.AudioManager


gameengine.node._2D.Button *- - raylib.texture.RlTexture


gameengine.node._3D.Grid3D *- - raylib.RlColor


gameengine.node._2D.Label *- - raylib.RlColor


gameengine.node._2D.Label *- - raylib.text.RlText


raylib.model.RlAnimation *- - raylib.model.RlModel


raylib.RlColor "26" *- - raylib.RlColor


raylib.builder.RlImageBuilder "9" *- - raylib.RlColor


raylib.builder.RlMeshBuilder "2" *- - raylib.image.RlImage


raylib.model.RlModel *- - raylib.RlColor


raylib.model.RlModel *- - raylib.model.RlMesh


raylib.model.RlModel *- - raylib.texture.RlTexture


raylib.model.RlModelAnimation *- - raylib.model.RlModel


raylib.builder.RlModelBuilder *- - raylib.RlColor


raylib.builder.RlModelBuilder *- - raylib.model.RlMesh


raylib.builder.RlModelBuilder *- - raylib.texture.RlTexture


raylib.audio.RlMusic *- - gameengine.audio.Music


raylib.audio.RlSound *- - gameengine.audio.Sound


raylib.text.RlText *- - raylib.RlColor


raylib.text.RlText *- - raylib.text.RlFont


raylib.builder.RlTextBuilder *- - raylib.RlColor


raylib.builder.RlTextBuilder *- - raylib.text.RlFont


raylib.window.RlWindow *- - raylib.RlCamera


raylib.window.RlWindow *- - raylib.window.RlWindow


gameengine.Scene *- - gameengine.node.AbstractBase


gameengine.SceneManager *- - gameengine.Scene


gameengine.SceneManager *- - gameengine.SceneManager


gameengine.node._3D.StaticBody *- - raylib.model.RlModel


gameengine.TextureManager "2" *- - raylib.texture.RlTexture


gameengine.TextureManager *- - gameengine.TextureManager


gameengine.node._2D.TextureRect *- - raylib.RlColor


gameengine.node._2D.TextureRect *- - raylib.texture.RlTexture







gameengine.AbstractSound +- - gameengine.AbstractSound::SoundCategory


raylib.builder.RlImageBuilder +- - raylib.builder.RlImageBuilder::ImageType


raylib.builder.RlImageBuilder +- - raylib.builder.RlImageBuilder::ParameterName


raylib.builder.RlMeshBuilder +- - raylib.builder.RlMeshBuilder::MeshType


raylib.builder.RlMeshBuilder +- - raylib.builder.RlMeshBuilder::ParameterName


raylib.builder.RlModelBuilder +- - raylib.builder.RlModelBuilder::RequiredParameter


raylib.builder.RlModelBuilder +- - raylib.builder.RlModelBuilder::ValidType




@enduml

PlantUML version 1.2022.5(Sat Apr 30 14:55:52 RET 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: GB
--></g></svg>